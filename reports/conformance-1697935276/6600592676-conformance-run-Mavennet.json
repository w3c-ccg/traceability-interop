{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "04392908-ea51-4823-9c37-f9252d99eb47",
        "name": "Clear Cache",
        "item": [
          {
            "id": "7abb5542-add7-406a-a695-5375f33422dc",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "268c7f96-0baf-457d-b802-b788e321d03c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f9e73695-6fc0-4840-84b5-f5e0c67da065"
                }
              }
            ]
          },
          {
            "id": "5ca6b15d-7e6b-48a9-ba59-274b911e87e2",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0e37b27f-a8dd-4779-8f36-0bd619119ebd",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7952447d-c652-4632-a397-ac7c931a623e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "2ab57d72-428d-4541-ad2d-3cf92eada61f",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "835db879-3cde-471a-aba4-63dc9b7555fa",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3f51b5ad-43ea-40ed-a8ba-e4f8f3b55e87",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0bd975d0-038d-4bfa-8719-d0fcda8b6d5a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "03951b91-e83d-4048-a4c0-7c0794dcdeab"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0b7a6c9f-8274-42a2-b387-cac9127bbaa1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "caa62f16-6494-4e0f-94ee-c26e6fcebaad"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bf5a6472-b724-4292-a163-261922486370",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bf012273-7760-4579-b807-4d31225f7b32"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f0dad2b8-e58f-495a-886a-8be586ea04a8",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "ea483ba8-6cdd-4d7d-9ade-799d43677d54"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "faa93270-4b1f-443b-9338-158de3b2d3e0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "04431ddc-0725-4873-b292-69cb5f3ae5bc"
            }
          }
        ]
      },
      {
        "id": "37639930-e465-4688-8a67-8e784e7d7321",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "b1017b59-829b-448b-8a67-84b6ae01c523",
            "name": "Negative Testing",
            "item": [
              {
                "id": "10be9895-f674-419c-a018-bdf3a3e2ffe9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "358c9214-5482-4a60-b8e5-8956ac1903e0",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9e49596-ba0e-47cb-bb8b-39e3bf54d502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bde9c815-50cb-411c-aa88-952f53560bce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de0f75c4-12c7-4a3b-ade3-c99a91543086",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7742509d-8c8e-4233-afbe-c230142f85e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bad5c991-a81f-4273-a62e-0356a10bd271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36ad82db-1d19-4050-b825-c1928ce625de",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2413117-36f1-446f-93cd-c46fdb7990a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f67307c9-0000-4f02-b821-ca02542c682c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7011dc71-7248-4487-89fe-096522b983e3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2c72aaeb-eead-443b-b1c7-7daf199cb243",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "281753a1-e4bd-4485-91fb-e99ca1bd9b8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "78f91c4d-b5b0-4155-a0fd-070fd297b7b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b76ee5af-cbe0-47c9-b63d-182e7a217d3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "291adfa8-f9bc-4539-b547-6ddfbffd5aaf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a48cbbc5-a2d7-44fb-9e75-d94e125f9467",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fc42b90e-9f43-4675-891d-577e3fec5cea",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "30c46fe1-cde6-48e1-aad4-16fefdf70590",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "cdd71f6c-931e-40c4-9077-73ec5464ff9e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "08b13eb7-b8ff-447e-918d-e3597ace2a2b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "c17baf8d-acd0-4e8a-87ef-df3aa0bcc1fc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "485f4a47-5c3e-43df-8630-bec5ca40448e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f366e5a5-1539-41c7-a3f1-f9024e089bc8"
            }
          }
        ]
      },
      {
        "id": "b46977a9-cc48-4600-a00e-2330b24cf984",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "55fb2765-694f-4f5d-b40c-9e903b04a733",
            "name": "Negative Testing",
            "item": [
              {
                "id": "20ab0b5e-1568-4c3e-83e6-2d4d22083828",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "b0330c56-b9ae-4072-96aa-b9ef9f6fc88b",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df893956-1519-4efe-a8bf-3f864c444131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "096beafc-9385-4678-86a1-33e4f49efeff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa832758-51c3-4493-9fb5-48e2affbecbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f6c056b-c050-4e42-b2b4-4b6878e8f02b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4baee830-8a6d-4d75-819a-8d1de2ceb896",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13ccc35b-7270-4319-a661-d8969e1dc3cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "686322b3-3903-485e-8780-47c7be6f8bd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a764f37-596c-4556-b686-ceb58d06dc51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "99e2efb9-e6f1-44ab-8fe5-9927487b801e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfb0a16e-585f-43db-8f70-e9e82fe53259",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "576b8a88-9383-4d38-a12c-13f2beb3d61a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebd1b29b-54bd-41d1-b9b8-d2358038c5b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b3771fb-3509-4786-b8a8-005458523ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ba1a3599-4784-41d0-b0c4-188230361598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e550c9df-b14e-4603-b426-09052e37405c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d293ef51-726b-4025-bc75-21f7a1d5c228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f38a04e-c222-4294-b8b1-a0360d91489c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "793753e5-54e2-49a8-8140-4532f717c835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e948641a-4fd3-409b-9eff-6c4317637b26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2d51c97-30b7-4cce-8170-0944e7a54f58",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "450340f7-89b8-4fa9-a904-08dc4a89cd17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67ede419-747a-4334-acb4-54c156417936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d58cc24-34a6-485a-9475-50c2238c7af1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "93c2fb40-5782-4d4e-aa57-c400e47c6a22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7a95db8-37dd-428b-998c-77133891bba8",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f975ee39-f250-49ac-9472-92dd24411b7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68ff3a5b-9d15-48b9-bbef-c775ae340222"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b54ad0c8-86f3-4859-a402-74a32a46455f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a07a3ab3-d881-4d5c-8d22-9772f5e8b312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ef89d4a-8565-48fa-a140-4f283610756b",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a16c9d7-f15e-413d-b245-fe82df6b1ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bda9559-876e-45f3-ba0b-a6304935e7cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de3b3cd1-9658-437d-b3b5-2ed2369795c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c3a7bf86-6d3a-43d3-8bcd-df887db09f84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32d2aa0b-da6a-464b-9cab-60c3b490603e",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d8cdf97-397e-4420-a802-16cc38cd7096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52cb77c0-b4a2-4087-a3ef-c839a5eede6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4bc2283-5421-453e-a412-b66f6bfc1374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "209967ce-5b3c-4498-8950-1b18747b5656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d1e94b6-4f57-42e1-9726-aced27f14164",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4309a7dc-f006-4cb4-a6d2-3e09f5ab797d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbd9edcf-d882-4801-9fb3-95ae5226b8c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ba3f4c0-f336-4b20-be6a-76fac4000963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "578998dd-4669-4bc9-8ec5-07157fb8d742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "066b89bf-d68f-4d10-88cb-797d6c0c0d70",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d75f111-47d8-4b03-bd26-a611e8af7e9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75598c37-12ca-4501-b20b-f9a7fb37f357"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cae2785-4dd5-465b-8d81-2bb03e27cc67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3322ca2f-6199-43bc-9301-41e631765e6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "851795b5-26a2-4c40-b6fc-57e28ec63b81",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "718808c0-5aee-4cd2-99a7-dc365e48fbe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "138b77bf-59bd-4995-b496-0512ea5b2a81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f10cd623-ac6a-4818-8285-df8b9ddb3de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1dd126fa-6f66-467b-b1df-8ff3169dec95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1de025f-ceaf-4456-85aa-dc8aaa2a5a6e",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c5d6d50-b242-4af8-96f1-7357d2c94a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ee5a4ed-f186-412c-a149-88689090ceb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beffd799-a526-438a-94e3-fc435bff9045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "43165951-957b-40d9-8de2-e36db0663cc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab20c48f-86f5-4729-8e77-7aa3140cb91b",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9f66357-77ea-4e45-af65-4df476a3a06d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9478ba8-0f83-443e-b7e6-43714b738a64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11ea0920-a858-4585-bf3d-1dd6a9f9467c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "20e94319-7f1d-455d-981f-00a75561f9f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "501aedf8-2d32-4c13-9fe3-1329354a3f4f",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ee71a8b-80ca-415f-b431-909812ebd994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3deeb587-1ff0-4d5a-9501-9b149919a431"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f38fc02-0dec-40ab-9d34-0283e8acc5c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0258f5c2-c487-4999-8271-a145a461e632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80ff082f-1d93-4d3c-bc2c-94e6bbc0b07b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c832bec-17d5-440a-a9e7-0b29962c8340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f309cd1-137d-4a2f-a845-420953b44d7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfb70a1d-f4ba-422f-adb4-14bff1a1e955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6a62cf86-c3f7-40ef-ae48-f30e09e5a270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04c8dbeb-bf5a-4d22-841d-c3dd07398479",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4194391a-bc09-4240-8c26-bf3120d9d736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77cfee99-5cbb-4427-b2dd-4c4848b4c6ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff36ab05-3e52-42fe-9393-ad023e8c8481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6551bbc6-3cd4-479c-8d8e-c2ec2d7508f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88028dc8-9c52-4ddf-8f14-c7d2bbf1b983",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "818b21f6-be6a-4a0f-ba00-0f3f4a1c7334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26feff23-355f-4018-adfb-a5962cd6138d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bad75cf-7d42-4b41-8aa5-7d1b5477ff05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "174efa20-e368-4963-96e3-c53d1df67c5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9406b99d-bc29-47c3-96c6-f9d8f060cd38",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fbc4130-f674-4e64-a9ea-0746adfcaa54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cea3c5ad-15f5-4432-8d5c-d92eab959d7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89c9bb32-dfbf-48b4-aecf-bbbc32028f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a4e3d18-32ce-4c39-a409-f637feaa0951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09db1f06-3aef-4e1c-a91f-539af3d1b666",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79e703e2-674a-413a-9ed0-c579e49aef4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "769b8eb4-a30a-44f9-adf7-8fc6c74e2204"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c871e5f2-3eaf-4a69-bf80-00c83bb4a573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2bead932-63ca-4df7-8953-798af281e281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cd085c4-52f4-42d2-b2a9-2d827c404ade",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a128e601-b34e-442d-a6cf-4d58fbef36d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22b29558-17e8-4d59-a56a-182599f13c0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17ae0eaa-88b1-4d86-b3c7-52c8b4950da5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "43ce2a96-ddcf-4f89-9dc2-b6593e856a7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cb2c901-ad0f-4528-8bdb-9f99326263b3",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "149564b2-ae08-4e68-90b9-48f622bf218d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c9447f6-5618-442d-85d9-fe72fcf45233"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd3bc357-0418-4d60-920a-a679d6079d17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9db531d0-0824-473e-a45c-e272030c890f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e22aca1a-6dff-4c63-8c02-2cfc52294a38",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe42ae7d-2eda-4119-ae43-07a3074b7991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b10d3b77-68d2-499f-89a6-e15e56ce9518"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4cc7c12-b7ef-4de3-9a72-29cec4344be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc429643-0713-4876-b688-98e31d1659fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4b27553-a389-4644-86d4-aa36253edbd1",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d52d20cc-8cff-466b-aaae-593790ca54b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a21d0ad8-dee4-4e07-864b-7bffc6aa236e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9501da9f-4d13-46ae-9c3c-e2876b05afa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "575a4e88-d76d-4a16-ab04-19b1646a9ffe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10b2ed4d-9375-4408-ba8d-fad2b0b1c38b",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f26a5630-26f1-4775-a44f-f7e9dc849775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "811641f0-a15e-4193-a725-e4f8d24fe283"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "accb857d-5638-49ee-a250-35784d8189b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "05bde4f4-513c-4503-a14b-da9f7f824959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6098ef1-fd81-4d98-bc19-4a6a1535ce52",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab8b594d-910d-43c0-bacd-475305b8e677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f171b7d1-3ae0-4df8-90f2-b13e4c25394a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "854510e9-dc53-4a97-b3ae-b126bcc2e3e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "54cfa24c-81a1-4770-b59e-c09e2cce88a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b118420-53c7-4fb6-9193-526adfd1bb3c",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6155185d-21a0-4abf-9f06-259af453748a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a49d06cc-c4b1-4bec-a301-752b393e91bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "974908cf-f486-49f1-bf6a-fcdf04a00f3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e35a25cc-bd3b-4ed1-8db6-023fd16f264b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd991798-639c-4562-89eb-f70e29bc6303",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f46053b3-2439-4ccd-9bf1-eda87b4074bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0739e8c7-85d3-48fb-bd5a-0560915b0253"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71f9b903-4be7-478b-b086-71bee46fc55e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "952dc24e-c93c-44e6-bee0-08160bb52b18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68828174-beb3-44db-a308-6e4059e7b811",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "956e4808-0398-4aeb-ad49-e6eb447bd5d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c184b19e-d265-4dd0-979a-6f1973b4c910"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4737c7d0-7991-47db-a794-16bc06083bed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ced59785-4ac2-4970-9749-3ffbef2ea6f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d92eca8-888a-4eeb-a930-84127a810ea7",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26d97e8e-f1ac-48ab-a099-26cc77ada33c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fe377d7-f316-4817-8126-fcb947affeae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "414f1753-6182-40fe-8e0d-e99f3915ea3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1840f76c-e6d0-4775-8a07-a57bfa8f5b72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b68bc92-3221-46ea-9146-34bc0120a498",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c27c4aa7-4e2c-4ecc-b531-31172f1f36f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fcaaad3-ab27-4471-889c-9ba57674ce4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c7a2a17-733c-4269-8959-b9a6f1396260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "eca5fa98-6a99-4c9b-8528-6ef183c8d625"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b208ca21-e60d-42c3-8095-9817429aa4e8",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "776222ea-dfaf-4c04-9eec-88be6c1b7451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ce4c009-6c46-4e1e-9ce1-d4b307eaa7f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32aaa6f9-e2f8-41f8-b035-9b97a338aae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6932c5a-374f-44fb-b790-b648f1674d6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c6cc59c-17ba-4cc0-b67f-3e2424bbf248",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c9c32f0-fe11-4d8b-9694-e5ecce7b89f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fdb7420-d5ae-4da7-8982-457461931ca0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb8d3fd6-4685-4ac3-8c5c-97f1817e7e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "53fa96f8-ff8c-47ee-87a0-ca22de17ff3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82e6d4d1-01a2-4280-bfd1-f2aebdcc7b54",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a72335db-dfba-44e9-a4c7-fc924fe66dc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbda4229-be1a-4e12-b520-02bbeafbda91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f255bc7-0090-40a1-941b-9795fe873bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd7ed638-bbc3-40fa-a82b-0215d3657b36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a012b773-7130-4942-ae9e-2762db10270d",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a3c9ab6-ac2f-48a2-950b-ff2a1df5f821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4617de0-3b61-4523-8a5c-d1553236ef7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc3af1b8-4766-49a2-8848-e0db64c71904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "93d948a6-0b9b-438d-ba49-68079a4ad7bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "747b9001-fe22-4174-994d-2f55e419983c",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44599f42-8ad2-4507-b772-7c1608e7d583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52f58dbb-e9b6-4f0a-a7f3-f6d8fa1cf3e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abaedbd4-524c-44de-8eff-5ec4583c2f8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "63773c95-ca8d-4571-b7f6-3e76acb75b83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d73147de-4508-4bd1-a60b-12cfded9e71a",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4fadbb5-a5be-4d00-a80f-247b6dedac91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "02e45466-d44e-4139-9c53-8f5b838829fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a085d55-dabc-49c1-87ee-467d10d93f9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5792bf85-5b32-4cc6-bed1-a845acdc5e21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f41a585d-bf3d-4c76-b19f-8e03891ac07e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e006d422-038e-496e-abd3-35f3eae81503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "541f11c4-5e3e-4036-b5b3-a5c1f07de7aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "126fe379-968b-4294-a049-cd279128c8d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2baccb6-c80a-404d-86d7-45e257781692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09f418af-f1ec-4fe7-b474-f09ab78d1b2b",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c51c0f39-d7e1-440d-8e1d-c69881019466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05fd7b36-a5d7-4dcc-902a-7ee8297f1663"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30834983-f49c-4651-8807-485e3078b057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a846e24-663f-4b2e-98bb-7f2144e7874d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d8781b5-dd2b-4661-9481-d2e1dacbd9a5",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1ab4c21-31d7-40df-acca-9843b877b3f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90cc7de2-d2f9-47ef-9088-b25c9729c1a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74413e1c-3aa9-4ad8-9a73-685519dcf43f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "40eac979-6a96-4443-b59c-de3cc091d480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd6e32fe-96ec-4b1f-ae2c-56d0d3722e42",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f97699f8-b2eb-4c4b-b613-3ba66cbf5c6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e544e575-69a3-4c55-b3c4-12a8866894d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9646aabd-ffd6-493f-91b0-bcf325e235c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e41fd26d-9289-494a-99bc-b7243d09a123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7584d9be-9673-468f-a3f1-405ac1e90f69",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e00aa7f-20ee-4e6f-ab87-8890e63de381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77de09fa-ed81-4928-bba4-e7c301bf708e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa4ccde3-d055-46b4-a2dd-c565b769d412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0967e22a-7790-45af-8218-9a2c1d229565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf3c6b33-4f49-4d51-bc7a-e6e72721b0d2",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e40c7f6c-72ab-48f1-9703-49ad3b637a5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0e03284-b1a5-4844-aaad-0316823bee28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a54fa7a3-3fc4-4058-b734-d80c2e1b7cf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "ffd1d61e-c729-437e-9906-f2b661e3c518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "221134b5-69b7-409c-bce3-6986653e4780",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b147be3-2440-47e7-be61-a99253a41db7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98471a90-24ae-49b2-b8cc-a866101e65dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d0cee91-41d9-4860-977a-60538ba6512f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6984f844-91e2-4346-b132-a18cf677f2f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19bab173-d96c-4cc0-b113-db72a7d44781",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5e12f62-ce9b-497b-b547-6bb554c5324e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d45acbb9-fcfa-40fa-9dd8-8e2efec911a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c908c2f-5023-440a-afed-132db9729a8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc48a4ac-ed84-4e34-bce3-391962e4b40d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12fa11ff-7a47-4aab-891b-670912f18107",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72b3aab1-32b6-48b3-824b-a02d7c31ebc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "702b65c5-6081-4cf4-b889-b4a6e05ccf7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1517538f-d07d-4dff-bd68-05134cd0606d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4806f56-5b3e-4c0c-8db1-120853712dbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a79625b9-21eb-4d71-974a-d3e328df399a",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "633bb521-1f1c-4f6d-989a-af671479de1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b9da692-cfda-404c-8146-154726c7c90d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3055d3df-23c8-4af9-8c92-e7e2e60d4643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "63513768-27dc-4e4f-b0da-e661a4060b8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3775a411-722a-4132-99be-934fe09a9143",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fafe8b29-7da6-4258-a5af-7da52623ae48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e5f378d-0755-46ea-882a-4a3137ad9f42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8833620a-a1ad-40d4-9094-d4bd6d52b6f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba04afc0-74da-4666-912a-efc7e47f16bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e06d26d9-f4a2-4d14-8b08-c7c58e027c2f",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e347a076-52a1-469e-b232-b982aa81f554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18000920-0139-491d-9c89-daf849d129fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6228c3b2-db5d-453d-9342-028041f9ca24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "80ebfce1-53ff-40a0-a0fa-d48a31fcd242"
                        }
                      }
                    ]
                  },
                  {
                    "id": "692c4c99-ed29-4b4f-8bae-423b86851a12",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "874fd9dc-913b-406f-84e5-43281ca6aa99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ca6a485-3778-4a8e-b779-54486b93656c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd9b6687-9992-4047-8187-f42dc9e016de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb6698aa-d59a-4254-952e-30c3ca525dac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71eb2b8d-edae-4b36-adf6-dd2bfc72454f",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f187feb-39be-40f5-b8e1-826f64ad7713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1f10c70-639d-4414-94a4-31015eff395e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b534e779-9810-41ad-8918-0ed3d12cefe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b24ba1a7-6ce9-417e-92a8-0a4b5906609e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b87a1c95-ea87-460a-bf8c-a9171e64aeb1",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9d805e0-abbf-4bca-a900-25a12c49be83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0de9a084-6a53-4638-b5de-0d9051c25f58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f4037d7-66b1-453e-acd4-76476bf2f929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e7d1529-be9c-4b06-b276-0cfbee5df573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a1fd7e8-d856-4520-8027-dc75be5247ab",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a38d7ab7-23d7-42bf-8b84-9ab417b337c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03fe44cd-a6aa-4c02-90c9-0571c79c3d38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3baca130-7b55-4014-9ee1-95ec7ff3bbd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "29458906-009d-455a-8b5e-f2df8825d02c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0865b67-0cf1-415d-b2d7-32bdc9c956b4",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d50aca8-6e2c-4f03-8980-7a8071f86273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d3d9f62-55bb-4431-ac6e-021c72ceb758"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3506f1a-366f-40cf-b8f6-49b9d66329ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0cd6c970-f24d-4552-b2a2-012ff657f68f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf802917-9e7c-478b-95b3-1b8a41fb8069",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f09ae8b9-7801-49f1-892c-fb69ae7aa29d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17f09229-25cd-4fb9-910a-0cd9227d241d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ac83d7d-5ff7-4a86-89b1-f7b8328191fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e857d3d6-0da4-407a-a81d-0c90518374e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62c83a3d-56cc-4687-b518-6a2472acf81a",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fc80e34-11ae-4c1b-ae13-bd44b969fb4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3428a545-9975-4dcb-85f7-7f5c472566d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fefdf2c-ba84-49fc-8395-6038bbb3a24c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "76499c29-03e9-4576-81c6-4df6ac2f0a8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d5a6f63-8305-4130-b591-109d278f5472",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "240eb384-f338-44c8-be6a-2e8a9145cd48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d857251-7c53-4059-ba3f-84d8fbf0deae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c952618-3871-4751-93a6-45de33469198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "944c625c-0152-40e1-abf9-3fe3933d0fe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93682274-b969-4eb0-b5ec-72c73628c457",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec3884f-b81e-4bd0-944c-f3adacc64ac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8741d411-7f6d-46a2-9a7d-c51e4816cdf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2fddf5a-0cff-4b1e-870f-867d81c5ea1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "228d4cff-54a0-4740-8f2a-c2e8bc0259f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e62535d-dd22-411a-b8bf-23bb3fcbfc7d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46113d24-6bb3-4ee2-a0d6-5938e118ccae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f2873bb-cd8c-448d-abdb-75f77ad51f08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "509f8395-57b8-40eb-8e96-2a98f738284e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2243badd-2f77-4ce8-b9fa-3dd48fd157e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7475058d-3743-4d8e-9526-114bcb8315e7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67448f43-a741-4731-9f19-2cad15b2dbef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8df5fb7-ba81-4295-b2a8-571fdf65d5a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6212d4b5-a248-4770-bbff-5a509831b9a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4968a57b-f1c6-420f-8cb1-8a8bd13be058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef9591a9-2547-472c-b029-34f5b6a4ea06",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed6adb57-b1a3-4c42-bf3c-b61e21d640dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cad7eed8-44a8-41a8-b950-0b4d75f3f360"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "905f6a4d-4e47-414e-ae6a-6681a57cbeee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b5b3807-a2c0-4c0c-9311-17b7061ca042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "950b04ec-8315-474f-92c4-bece1dd8574c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a117d816-2e36-4b51-b60a-12db0788c884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "497b372a-826c-42e6-9b9c-388ec3eee77c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e795208-388d-4c2b-9369-791149a69a6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6a0e122-2349-4a44-a693-598439c1c9fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b06cb7c6-b100-407e-8a9e-b6202e3016a5",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aee109d2-f524-4c21-afb5-7afc99fd117f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "649a3db1-1ee2-463c-9bba-72bef2b39c4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aadc3f9c-1088-4585-8df5-b4a34b62b78f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "785c2171-eaa2-44ca-a59e-52068fdbf338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "160d04b3-b968-43c6-b78a-e9736f8cbe0a",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08910c47-fe19-49c4-893e-1fe6627666ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e74740c9-d00f-41c5-8484-e890a04cd7f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "457a3b24-3688-442f-a6ce-da0ce0bd66ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2c48bf0-59cf-401b-9158-58cbb2620102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bf83c2d-135a-4c81-ae66-432151fe1aa4",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4fc5870-639d-4d41-95db-015a28161720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1acebba-2725-407f-aa54-98b629a51742"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5004c65f-961e-4515-b7ba-d9381c980455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "58fbc67b-b943-49a2-8f05-0150f146d3b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc20f43-2392-470f-9198-4e43d94460ff",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37c01120-f1f6-482a-9567-5c8c6d25b23b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05f14846-1f40-465b-bfa5-9549cc0bbdc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e779a8b8-fdaa-48f1-bdbc-57cb54881e05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4d5ea68-e3c4-4fff-9bb4-b6eaf9980153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc0ff827-d01c-47e5-87d5-f0c71b85869f",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed82e56d-ff16-47a6-ab99-f52cfcad597a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "358a25ad-6f32-46ea-af44-c7fc21464c2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ba82128-e30e-4833-aa94-ae1a1fc3e120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "277de759-9b78-4e9e-a414-16b41232b3c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a9130b4-a6b2-448a-86a7-191ee41a182a",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aaae6db-5eb8-4192-92d6-01a4de93d374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be544259-beb5-49bf-9602-7866a58231a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afed07a8-bf30-4613-83b9-fc1beb74da29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ae136e44-1429-4897-bad2-4df19b8dadcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15a783b6-a8c2-41fb-842d-3c794000501c",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfe3142b-527b-4635-8247-4183113a1405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1c475e3-4087-4774-a9e8-28424f31db90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "030e0e1d-c505-4011-b018-ed47cfd8ebe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f3d9024-8071-4219-a7ae-94d25bfe3123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f547415-c0ef-452f-a83c-8774e02b72fb",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07665a1a-2be7-4d1d-8af6-a6d43be4a196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8750b4be-f081-445f-9044-692912f712d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f670da9-daad-4eef-9b58-67db6a3fb71e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ed62948-52e3-43f3-8a46-ffff9665c0bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59866502-18d7-4dc3-b35e-d49234f97827",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ae7cb4-6c64-4204-80fe-0c42ea02918f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b8a1241-47e8-4c06-bde1-e104ef6f149a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba124499-2399-4720-954c-0873294a9c84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "26adfe7e-ad69-4386-8782-ef5e654d21f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b676e979-5ba5-4b97-8ed9-bf7be13b70fe",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37847c07-24cc-4be4-a1ec-30339e72ddfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8bccdac-bf17-4a83-affe-820c1c8256ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ebce7d1-75a7-4e56-af99-3e8113b8063d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8fb8fde-eb1c-4b79-9cf8-acd02bab9da0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f6f7720-4fe6-4a3a-94a8-2d9ea30873b5",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8745c408-2855-436d-962d-ece2f583c79d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "584a4fd9-1a7e-46fc-b43e-dba4cb48ff20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "568f0408-bc95-4d0d-8f70-f34337f4bd93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5b04378-ad7f-4ca2-8860-48346fe9315f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d54fdbd4-1b2f-4acf-9ce2-683a8a2a7238",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7a013a2-1e37-4985-a9cf-070f900df11d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f586771e-ee02-4ac0-a7f5-86760696e1e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aac4c5d-359d-47c5-bfb8-582105739497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e157dc2-302f-4ca2-928b-dac173d381a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8321a039-adb6-43a1-ad90-f0f84cb5b626",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c08eb22a-f828-47cf-8644-37d61e1b0bc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "468f4e9e-c596-46af-b21e-6467d58fbf2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28fe57eb-309a-49c9-81b7-b007c618fa30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1caecdbc-5697-47a1-bcd1-339bd41ceb78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8f9e1ff-2aa7-4920-9b80-8d6d1b555ee2",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eb79aad-112e-499c-aac6-9e8b3a9600bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2124ce0e-2e3a-460c-ba4a-ac7978cce3fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f96d406-67fb-4249-8324-7361972f8063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5f220ed-5953-4ee7-815b-f63f4b50a01e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6dc990b-4081-42aa-b98b-9405a953d1b8",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d493fd23-f43a-4645-8a6d-ba01c1fbebf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfa2876e-2dc4-4ec9-acd2-62cef641399e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "232f3d3f-0232-409a-b4eb-c9e72f9b64c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c50614a-e226-4b79-bf29-e2b893102786"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f43f804a-eb69-45f0-a823-c7ca15834faa",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "135037dd-b29a-445d-b31e-8bb0ad866327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9272822a-539a-4d9c-8b1a-44d26fe350d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb56dc2e-c2f1-4445-8e0c-27a7391d3fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "afeb1b62-ca91-4306-923c-5913e3493d10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86854b3f-14a6-4f3f-8dbb-cee50ae8406d",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b56d254-28a1-4702-9bb7-3751e156e9a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a871c71f-4ca0-44c2-ad38-925ad97a24f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4555a19e-6b71-4acf-9b63-7e7ec0175d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9eb0ca83-e8f5-4d81-bad2-d5d527e2b87c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7422ffe-6429-438c-9404-6ea00a9d64d5",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb518c86-70ae-4732-a45f-37aa6fa0dc43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abe76b55-9865-4729-87ab-57011a6a05f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e709ef2-4ffd-4708-9ebb-fdd347182f21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7965371e-83ed-4c4a-85fe-3beccfcce93a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20c11202-c437-4b21-be76-2402511920d1",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29c34b4b-ffe3-490e-b99b-d95cefa50d1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b35dc9b8-31e6-401a-b325-2296970547ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fe87464-7cd1-4ee5-8059-ab78b56031de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "58691631-fccf-4b13-a7f2-05082520a65e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6c4057e-4e06-4e6a-92c6-aa10627307bf",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c33b1d70-6fb2-41a7-9e5a-6d3c20551c56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c88d9b1-80e5-4366-b303-72443be974b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0fb3f78-a345-49f1-a733-9952c9f70ee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb9a9a2d-5532-4c46-b283-648992e94a97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "305eea3b-29df-4477-b7d8-608a68431e33",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c582ee1-f679-415d-963c-2784a350e903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09c6b1a5-8de8-41c1-8364-19cb82b4af49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09d980bb-42f2-46bc-b914-27050dd612ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "af518d61-9dfa-4c69-a8fb-c9ca4c01367e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b1ba5f8-f229-4fb0-abc2-2f40562dfa9d",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "794c1891-3d43-4473-91a1-a45cc04a7f54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "522121d9-ef37-4f8c-b3a1-49588526e31c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f4db54d-4ebe-4195-b626-5ed614f7d52e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a0443ba-e6dd-43d6-88d7-ac170413b84d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0554697d-be36-4a62-b3e6-a6898e461bf4",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "745ecfca-e024-43b1-b562-c8ce71bb8d2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0856eec6-6bae-4a8b-b1a0-5c04736261ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f1d6b9d-0936-4b92-9801-6945a58e3155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e1776f9-7438-4199-b40b-7515ef2e3980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bd196d8-0184-41b5-aff5-95ba609e0388",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b48f824-f779-4c55-b299-c8c81cfc7759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1a51a78-2c15-40c5-8cd8-c67cca6ccb69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14618055-73fb-4d70-be43-898a7e7facfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "48140161-b8cc-4456-9895-b700eed8a5cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4596f2d9-64e1-4281-86c2-6297cd436630",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce7bc3ce-7712-4eba-9c90-239bd086c976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67f5d79b-a26b-4df8-b2e9-e19619156e12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95754e59-7aff-4ccb-9375-3aa6a8b4a578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc2b78e3-14b2-4c57-87e4-32beaf3d6b4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a563c41e-a42b-41d4-b3b2-68570e91b5a1",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04acd14e-dc7c-414b-a760-d11a605ee30a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "639e18ce-ed0b-4493-975b-82f24724f8e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebdf5cc3-9d2d-45c7-b8f8-0af44e21bb30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b852921a-29b7-4853-bd9d-a22c8ad5ae87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb3990fd-7aeb-4fb6-b2b2-e433e878d9b0",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "113ae614-b8d9-4def-adda-acadfe8a1254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf4b35c1-7bee-4ee0-8525-b7aee1bdcab2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40f937f7-33f1-4be0-922c-e05062c31b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9ad6f11a-9bac-4f2b-ace1-79b8d5cb9ffd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ebb77d-0539-48ea-95dc-aef1dd4de5fe",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad8199ab-055c-42c4-90d1-1ab70dbee79a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "932e29df-7b21-40af-8b08-7554c0f85389"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "977ac959-ceb4-48cb-baad-b162432a276e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7ae57337-3e98-46e1-9d3a-3baece46a86d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e8bdfe4-0251-4ea5-9d47-c02b2ba59ce5",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce6fce8-e399-480d-ba28-b8f4fb63ecae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a9fd1dc-6050-4288-af75-db3473fd0cb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cda7791f-1a38-4459-a7a1-e1ad9c8a9c80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "919d83f7-6bf3-4399-87b9-3813512f3b47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af22fc02-5c0b-484e-9756-f0b4102310eb",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "705309f8-eb17-4d47-af05-f985a037f1b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "484d2019-7c6c-4bfe-a4a4-9ba450f1308e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01a28e25-037a-4cc1-b865-7fbad7691835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac7f0e11-d867-425a-871e-0bfc177cef81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc0ed6d9-84d0-4705-b4c1-7d506f60a4db",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "354407b7-6a0b-47f0-9c97-28059cf1617b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "017df526-19c7-464f-9fac-1ba0c7fe3ec4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0197f64c-2499-43ee-b5fa-eb48646d8df2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f5cbaf2-9d60-4043-8794-961a5674ffb6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9b4e0951-dfaf-4f0b-9c69-697d7b76dbb5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7448aa2e-134a-46dc-8700-5b5cb911a7bd",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fc96b88-14e6-43cd-bf6a-ff2a2e7d1411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7226842-cc88-457a-846c-8bb0ca0946ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ad2aa7e-cab8-469e-9e2f-220b2e9dbb39",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "10d64a11-6904-43fd-9799-43c3c1510b2d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b66896d5-fcd6-41e2-a5c1-e60935a9d710",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d9296b4d-9ef4-4fcd-8900-491a9907e79f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b7dcca36-3388-4b0f-a8a5-5ed3e3a776d0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "87df6203-5d11-4eda-a6ef-553ecf514ff5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "676e4724-41bf-4e51-ab12-1032c5ff3a64",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "298d8648-de25-42d7-8403-ab853b3e27ec"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "32049fb6-dc1a-4c72-b451-70233a163433",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "208705c2-be38-49a4-8f50-0e2d601abc12"
                }
              }
            ]
          },
          {
            "id": "00cc81a6-beb5-4add-b2d5-d9bc84e96357",
            "name": "Positive Testing",
            "item": [
              {
                "id": "aa95112e-5705-4125-91bc-1e654b0cace8",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "2ad16e5e-c08f-4cb7-8cee-63a1bc252063",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08d82823-946e-4a55-8abd-c0b45c0db471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "81f68d86-5f55-465e-9270-1f5dfbc26181"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5981fddf-02bc-4ea8-a385-c2ceb86b4f15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd56d729-1cc8-44bb-b685-546a0567b218"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "36ce2de3-4207-4ff9-af55-784162237ed4",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e4dfe102-dd52-448d-b052-c42a82686021",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "53121576-6904-44d2-9d14-1ea28161a1e7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "929b41c5-52e6-4ab9-80fa-ceb57aac5841",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5df143c7-f2b4-4cdf-b49c-ba6e8c5c212b"
                    }
                  }
                ]
              },
              {
                "id": "c1f25976-25c9-47c1-a604-5de510b7f7a7",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bbba1c4a-4f1b-470d-855c-0e5aaffe5d46",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b2d30bf9-8a27-4c8a-a877-c815d87eb227"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "602fc672-f01a-4c13-b5bc-8af95d4281bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2e441af6-e93f-4997-a86a-aefaae0d86e3"
                    }
                  }
                ]
              },
              {
                "id": "5931fc33-3757-46d5-ba98-418c63510e2b",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "315dbee4-ab34-4b62-b6ad-ff93426b01a8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "861062a1-d619-41ab-9b6f-6e2e0c137849"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "99af29ba-a1a0-4132-93a1-505214bd7fd3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c4a9a7ee-5afd-4509-abbc-f1547276c694"
                    }
                  }
                ]
              },
              {
                "id": "d02e7426-82d3-4087-9467-8a2cfed35146",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab11a608-762c-4e2c-8625-6151769972e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "166bda7b-b879-43ec-9c84-61b569cfd5c9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c7a9744f-71f7-4019-8dd9-793638b1b8be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "0bd6e83b-616e-4d51-b238-c157ffc0fb4e"
                    }
                  }
                ]
              },
              {
                "id": "293631e7-91b4-4b90-96c3-66c0f649be2b",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "59d356d7-9c5f-45d8-ba18-36db251c7d19",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d24e74c7-1441-44ef-8e00-dee5bf724921"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a8cb793a-5565-4cc0-ad55-de01d116d376",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "437b83a0-cce5-4e7f-b992-fc099e066df7"
                    }
                  }
                ]
              },
              {
                "id": "1dd28318-ebfa-45a3-8ad8-9422270efbcc",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4ea033d5-9952-41ae-934a-82785c996326",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9d5a34b9-fa94-499b-b94b-080c4011920f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "16f16fbc-b137-49ac-9957-74ecfd1b07cc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f32d171f-9981-447a-838b-53baa8424e13"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3d5ef7cc-7474-430b-b85a-e9bf623eea74",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e3670618-8f66-42a8-b739-ce33ee3ccee2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "828a671c-f9e7-44d1-8b83-a630165d6584",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "72cb20a6-d787-4319-8ae8-be2422b4ea74"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "94e44d37-ce4d-4f53-a5a1-298e70cba05a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "571dc163-915a-489f-b360-da4e27565675"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f6af7c81-3289-455a-9bf4-5dc0bed2576f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "99e5e1e3-b58c-4cbf-aee2-455bb91ed20c"
            }
          }
        ]
      },
      {
        "id": "1c35a166-edb8-4f0e-9a71-79196dc54810",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "454d9bb9-d276-4591-8924-8d0d0b578d38",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8cd187d0-a3de-46af-9603-c5f3ef9598b5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1f5a1b89-59ea-4713-b79d-cf5d530c27b2",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1da2926d-d78b-4ff8-a3ff-9777b33f48f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6c9e938-c1e2-4ecc-b0f4-ab87cd6b7504"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc11dee-8382-43b7-8d51-8eca51b5376e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "917223e7-f94c-4246-b973-7e4d30a88329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "391e05ac-de22-4677-957b-dd2c94c32dcc",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22e6d799-9a28-4222-8d63-545a1ac55b06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a777a1a8-a94d-4ce8-8951-f42e298c6ce2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba2381bd-c3e3-4092-bf61-7f8e9ce72b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "72346836-fc38-4b74-ad27-c070afebfa91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da6f473d-e06d-4d5c-a75f-3bdfe2e8367e",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "936279d8-0846-4657-a232-958155d61177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be7d2ab6-fc55-4465-892c-57af5bc9827b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4300e59-9a7c-4ac0-a2cb-22f2fddcb2b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f815a7ff-bdb9-4105-9529-2c3520c959d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e9d1149-819e-4542-8100-36ace1f3dc6d",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15b39a32-0f9c-42e2-8e7c-f717a5c99aaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8efae8eb-1390-452d-b0c9-f21b5135aa07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdd9420f-9248-435b-a19a-30be6da23cfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8bf995ec-a137-42ba-b931-0dd79029e043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faeac491-e60f-428a-8735-0b8ceaaeecdf",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7fe0348-f60d-471e-9649-5f4dfc9b2f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89b0d157-da9a-4ece-bc73-1d1af417aa86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5649316-0661-49ef-acb2-c2aa5858463c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3ce1633-a5bc-40c2-9b53-1d4fff50d530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85ca53e7-720e-4383-bc91-476f72d8c86d",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97a4b0ed-7a66-417c-ab7d-133335163f1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75ea063b-3935-4ac8-a6d5-e6d813569ca5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b218fce-2edc-4f74-a633-7dbfb0c17731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "41457c2f-f0b2-49bc-b5a9-0071c8779a7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29c321f0-c022-4620-b994-b8e905832af8",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d9d313-e014-42a7-b9ee-b23cd0540e0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93f92aca-6e5b-4809-bea8-0501469fa267"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70d4198c-381e-45ea-bc0e-3ef49d879696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9622831-4c11-4c45-b5a5-506d1c67ea15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4317f606-1ae5-4ea0-8e57-e7ac08bbd6b9",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "375895e1-30d3-44de-9fd0-8562a1406275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14b33e54-c6c2-44ae-bee7-260ee74c2855"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1629c457-c9f0-40d8-a563-968029df8203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ada6d804-48c9-4f67-993b-d00a021d0596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f30736fb-06a2-4557-b9cb-b2d6b75ce439",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "662b7aee-f04a-44c8-ae7b-0009487579b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4a05769-324a-4e41-9210-04d0a1e5fc65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8947b13b-ad33-4a02-8c8b-a3634459ee25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "08023170-4070-4812-bc43-b368cc56869b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50d334d9-f925-4d99-a243-b4e97f66e8f1",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1cb6a0a-955d-4b29-8646-422b58fc4181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cf58251-cf1b-4918-a800-909c3ad890da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebc139cf-779c-48f6-85ae-8b90eebc38a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1de929a-633f-4c47-bd10-44e116b9e481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f538908-a475-4cee-9255-46a68757ac83",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "523c2142-2e35-4263-ae6a-f6457d9b44b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00137279-36e4-4db9-8d6e-f4cb02872888"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ade4d80-2f2f-4a5e-97b1-b8f8ff0a23f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "81c316ca-4f04-40c0-a87d-67d04f5d76bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0802087-23fb-4cc8-a871-e3823fff0e14",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f1f64e3-e816-40fb-92d2-afea44cbdeb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e4b6cb5-7903-440d-aee5-24b4d342fdd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47af0c4f-82e1-466b-848c-c2fb208d185c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f0786864-8a17-42f5-b229-fad8c20b98df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fd26728-5e53-46c2-9c74-c1f6ac1a82bc",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26841044-fc1a-48d6-9f71-ec7f92fe8ac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f5e6439-1174-4c15-8545-57d9492a45ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb3d000f-0cd2-4413-9730-b8ac1b0952db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "470ea075-4043-48c7-abba-4e04018859af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "187f99db-6002-40ef-b377-0457a164c2e0",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "059f2ec5-6b53-48eb-bd2c-eb9c06d475d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b0e33aa-6c6d-4da0-8b0a-9c603285b36e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb9909d2-6d2c-4c9e-b5e3-56fb2f1931d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "0cd69a6a-6bdb-4883-8ca8-d2a1af064b84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcd81126-cca3-4a83-ba6a-4dcb731855fc",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed607236-702a-4569-a9a0-7c214ce48bff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba0bacf0-d8db-419e-854c-c1362815ed07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "833f161a-6057-4f76-a910-af6f7ce91bf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "8865a52c-e661-4cde-af1e-99f663059b24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a246a8e8-6a02-4594-b703-8cde45150c8c",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60936d59-b310-49c1-b3c9-28f9300530a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "021734b3-c444-4f8e-9ab8-bad87a120dfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a9ba802-490f-467e-bc1f-15c16664cf22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee77a04a-c895-4607-b003-dcf45cb2f3c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d442f5-84c7-4166-bae0-ed356c90ce94",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b192ba8-b442-4538-958b-3c0fc623a3b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0441de0-da74-4b77-a95d-231b89d0ec7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adca827b-204d-475b-812a-bca531533b51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "57922b4f-1328-4dc2-8f35-22792723f359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "311896c9-532a-46c1-9d1b-d165342c1bd5",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d75759ad-e384-490f-a7a1-386a7f35cecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f98dc658-02c6-4312-8cdc-71890b31e501"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15a5cfa0-43b1-4989-9234-82800efdd99d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c8b32c4-7ebd-4363-a55e-d27695aa3aed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7f69a0f-c2d2-4631-a752-71cbce488005",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84a00a6b-7dc0-4e76-8527-d5c8ed902f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2052db78-fa7a-4b30-917e-48604ead98bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0c3f471-3eec-4bb5-9051-b1db960ffd86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2264f4c4-2543-4bf3-a718-125f4a43424d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0f52ac2-c6d8-4b0b-993e-6aace681c9c7",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b5b8032-88ce-4b13-991b-aafb44d18fce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7416d7c7-b6aa-4a46-bed8-85cd6a16708a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5e305b6-b875-4006-ac6f-9ff006edc5bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2d539b3-10cb-4dbc-af87-89e7937c8e1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "516f57ac-d912-4132-8002-a87c2734b4a9",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee30e67e-584d-463f-bf29-1279d8087579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fedd755-546a-4992-92f4-650669de5f39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d18fefeb-b2fc-42ba-b2b9-0530af016a95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3eb0b193-646b-4118-88f1-dd3c664ddd76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5a4ad6c-deda-4e7f-972b-b7e6343adba9",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2edb4b4d-e04e-4bd6-983d-c25f288abb1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecb413a6-c3fe-4b07-9900-0f7d778271db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c183961b-1324-4a8a-8270-1fda3a0d335d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c680aa8-83d1-4783-aaac-ba1cfaaf7819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9b11fa7-05ea-460b-8aca-0f19a9049002",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed8f7276-ec5b-427e-8c83-55e5c02afca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dcff1f9-9aec-4a3f-97b8-d9bdf50fe74a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0261edb-4c56-4912-9120-023650307790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc547481-0a2d-4fd9-bf17-2de4b7be5e14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bccaa32-eed5-443e-96cb-38f85b66e378",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f209686-c1af-4076-891b-6ada2af35009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d0568b9-045f-43d6-a4d2-96c7fb062dcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "312182fb-04f8-4e7d-a3f9-a07c2354dd7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9872521e-b6aa-4c6e-9c90-fedb730cf2dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f48182b4-5188-40ae-81bf-0f01be962148",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "224c7fed-129f-4c3e-9ce9-269e3b1cdfa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "002046fa-429d-40ac-9d07-e4b8684f6882"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f04c171d-e370-4ef6-9292-b8b1e330b406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f748a9d-9ac0-48f2-a4dd-cb8945c41ddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b4fc95a-f165-4499-bf0a-a67740060931",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3846bdf6-68fb-40d5-8626-1c303c54d1ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0aefc5c-9374-4a90-8ade-d66b662a2aae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e528166-90a9-4fdc-a98a-fbdca9f06356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "89c6c2df-1188-4eb7-a4f2-18ee04b29618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af0e17ab-f8a4-4e09-a5a1-e07a719e48af",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e9d3bf4-cfb4-4d69-938d-4c2a8c8e8c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d77b7d8-d484-49c3-84aa-1e2927ff9fb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b653cc6-6cac-40e0-9279-3a960632845d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "91dea888-ec30-4d9b-9b9b-173f66ecd5c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbf837f3-f554-4dbc-afb1-20d04d053e04",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50ab2357-d087-480e-835b-565b426a1f75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92095640-aba7-4e08-b5d8-63dbd593e938"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83423530-7e0c-420a-947f-9eaf8545bace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e333b0b-4a12-4003-9096-95584341227e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1397d83-bc2a-41ac-b89c-bf5ebcc2caf2",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcbb9f45-aa06-4c09-a732-cf2a7ac659ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37caf90a-0899-4504-b683-22d08afe1583"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6d6ba52-2809-430e-b10b-0d0dd70d605b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "88c1eaa7-42cc-4629-a604-299e4cc2bf0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "062e3333-ee1f-4b33-b65f-c53a348e6e63",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c2a4717-f31c-4a79-8894-856b2f3ab8de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed906f17-1fd7-4a69-9e55-177f1c9f021d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b41b0c8a-5113-4377-b3d0-d883b114a9a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "06cb6c2c-223e-43ce-895b-8e159a388094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7c52efd-b856-4989-b96a-ac15f323f8b6",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f45f37f-3eeb-4ea8-a6cc-d197ccfddf8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a9ef833-1ebf-4ff9-a3ba-a7b81646b651"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f609bf11-f413-4a50-a465-4c8d117173eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad4dcacb-0564-4b35-886d-81d7440519db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29460336-7d30-4810-af06-def9d9a299a5",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf50dae3-cf01-4236-a03e-853838fd1fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4142524d-0f6e-4c8b-95d8-c8e2a677a345"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a6e3cfa-f432-49dd-ad9e-74fa082bd13c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "21e343af-0cd2-46f9-953e-58291b91f1b9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cef7fb2e-f70d-4f80-b099-bd9aae764be1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c6b2e058-19c3-4e09-be6f-5fb914e9789e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dda147bd-c499-4e77-b83c-08ebb07c25ba",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e73d4d42-5eb1-435a-b73f-fb3051876d67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "293017f4-1b73-40f3-878f-8ef84fe38d4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1d4e1c93-bfb2-463b-a972-13bbaa3ff05e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "980cff47-c443-4dd5-a67c-7523a68732c6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8450f22f-0d19-4412-970b-ab4a142d8f4d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8fb70253-c694-4c71-acc9-34eed275ef32",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4227b564-e30f-426b-881f-97502c2ffa58"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e377d0bb-d1cb-4964-93c2-3c97c010c5d3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "672be5a6-1900-4b63-aadd-b358f9ddc7b8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3e10d1ed-7c74-421e-8542-6185aeb46c27",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "25dde323-11cc-42b5-8254-14f3ae3514d0"
            }
          }
        ]
      },
      {
        "id": "5b8bad3e-eee7-408b-8e01-9ea2b528eb91",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "73ab3145-3eb7-4ec9-ba74-a55fdc0511c6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8532636b-582b-4de4-9bb9-b63b878a0867",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2eb17100-40f4-46d5-9539-3e0d5520d0eb",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b62d776d-cf4e-4821-8b67-484b28360ed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4bcf9a5-5894-4e06-9123-54e7ac1bd52d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a307ea29-55ee-4118-8e6a-2cd36b1c8e81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d49d25a0-1e6f-4807-929c-abcab1d3edf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b7a1a40-c606-4327-97fa-6e7c58392bed",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b3cb8d3-68ef-454b-9e9f-71785ab7c6a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "862d75fc-b876-4d3f-873b-64f04563e5d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62a2bdf8-13db-45e5-a745-0a1bc6480d8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "59871f76-58e5-41ba-9f63-81a32630a010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae569495-eefe-4f1e-822a-fb411d5db2ff",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5c82757-8bbe-497a-af8b-3836cd2cf507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb440d8c-fce5-458b-827c-8555668167da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b016a8c-3bd5-4a4e-a0c8-96c2162bae1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "39bf9975-2a1c-4867-a594-00172c4f2f87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd611010-8ada-429d-aa7a-bfc2634039da",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a65fbd59-9119-4f83-a57c-9d92ecfa6149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c034053-40e4-47ee-a3ee-bacbe0fd005e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d508fb1-2290-4ccf-b059-22e8da14387a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e53f523-4e89-4c12-91c1-033592d2bda2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "814072eb-5ad5-46c8-979a-869714bc4a2a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fffc063b-d22a-42b2-b918-abe5c2649c45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4369fcd-9527-42cd-b82b-3d9f11e8f451"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55c86366-e850-4340-99e7-843f83a50377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "28e5837c-fb94-468c-8b4c-a00ebbb7bb90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5e10e05-22ac-4203-9276-9e601a16b969",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0bdb247-bc56-4996-915a-0c431e7f08c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6b58bb0-d750-4bbb-8608-7ff8913f0482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8c0917e-89b8-4fc2-a4d5-785e082c5a89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f01dac85-9738-4093-80f8-b84598ecba39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3914f763-c6ad-4624-9fc6-e00e0d998108",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fad29fe-a94c-4315-98e5-15c0672eb2c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1a74c8d-3506-480d-adba-b714737d1c02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a59c72b-3562-4a7f-8569-2a5f0ac10442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed68b239-b08d-4880-b574-ecac5670e072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62fcca99-b96d-4e9d-b721-1e1320efc19b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f10cc210-15e1-404f-861b-8ac8a03c9f48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6541ace9-102a-41c0-9f83-931990253bee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3a807c1-fa12-47f2-a9c6-4fff61701012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f63d972-3b4b-4bc0-bb02-1cf1ff6db9dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cfceb41-54e7-4102-9d76-e4da9c87bee7",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b06dd30-6596-464a-b8e5-c0bc6784acde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7eae964-63c2-458e-aeef-463682f49316"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f643ed2c-e652-4eef-bc09-94b678f32e88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "76a33a63-5ea3-4472-a725-06f24cb79374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb1169a7-118d-4ebf-8510-64995ef40615",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97e0af5e-6073-4dd1-8d91-28bdf7452006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ee2e6dc-8070-497f-9583-a611837e91c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7e6aa18-8cf2-4982-b2c3-044394c76e1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5bf9cbbf-0476-4c35-8752-1f09fc86b6b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5399905b-19a9-406e-bd7d-37eb1038d304",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "257eea21-e86d-4f14-8a9c-af8b4d6668ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "261ea33f-ca5f-493d-b528-b7a1734364dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af5f8fab-003a-4877-8ee6-b0a8896a19f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f497a599-8ee5-4f3f-b477-f84bd4691a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "583a8f1f-9609-446c-864f-0e987e130b0c",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee7845ef-46ed-4b6e-88dc-ddd2819cc799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dc35177-0fe8-4240-8a10-b19fa391ab66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e56dfc-2f74-40b9-9beb-f12e9623e0ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5f8b4eff-0e1f-46b2-9cf3-e2ae47341b7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d9b7ad2-4c37-48d1-aabf-1cad9bd19847",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64a32c73-3525-4454-beb9-bca92a0890ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc6ab41d-106d-407a-84a5-20714dc14efd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6330aecd-322b-4d8d-8314-ba58b7cf4813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ecb79f48-f973-4cff-91b9-534be7ea4054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea23dd36-3e3c-41cd-8c4c-37d53b779d72",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03c8378d-a83b-449d-9b70-60e499f567a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46e0ed09-23a9-4229-8c1d-bee6a4e3bef5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9454d631-6a03-4800-8a41-8a999d8ad120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f4bfa2c-7608-439f-ba3c-2150786a275e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b801343f-1e6a-4fb3-ac33-a92cd1b7d500",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f0bbe25-60c6-4d44-9327-0bff5c2882c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33438ba5-2679-4cc4-9b62-261784b6c6e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56e4ea36-e3fb-4c5c-bdf3-87f403e46566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2e7c8d8-9792-4d6b-b8c7-63080715e071"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8191844c-bbde-4ce1-93c7-d82d21ac4249",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a172953-3376-4da5-b7a9-98d5971ee0fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2e50ff5-000d-4196-a024-dec61ecfacc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83ccb637-9031-4256-8232-2ad857e35c6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "8da0e052-c031-494c-bb2f-3c5a044256bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e967db4-42b0-4154-8e54-a34fa54761e4",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a214edf3-9ffa-4564-9dad-1ff038e81709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35834a4e-8938-4508-bef6-1fbf115e1bf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69c00d21-34f9-437e-9b8d-05baaacb1917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "072ea5c2-ef88-4dae-aaab-db5c258f71ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fb0d807-b7de-4622-bbc9-979a6c295784",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72eddea8-f07b-464a-a819-ed73f804fde2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c61647b-a199-41a4-9081-c891ce716254"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a77bd6b-b08c-47f0-a249-b87708096f78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ace2f80e-5c83-48e8-ada9-bb2ee2ef9691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df3d22b8-a2e2-4ef9-b6e8-2d9dd43dc2f8",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4a22055-fffe-437e-9063-1b83620aa3e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a91f507-efaa-499b-ae64-9dcdfc4f9e28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b70856e5-b20e-4ff0-94f9-5bccb8099bd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f9d8a80-ce12-4c5c-a7e9-4e89c7de4da0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eda1144-9035-4309-8ad9-0b79f4088d44",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9a6b54c-4951-4afa-a593-66ca4ea923c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf9d8752-68f7-4262-9915-2a279cbbaedd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9c3aacc-e986-49ed-a85e-e0e50bb963eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c42c13fc-a8f3-4c2a-a511-12da83038085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c195475d-8e9d-490a-a8a8-08b203b09b43",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "211fcc92-1f2a-4eb8-96b6-b0935e86c5f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "667770da-f149-4853-9767-11a945fc2bf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b9550fb-c3cb-4b96-90e7-5e6225e0b1bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6931e8b-d1b7-42f5-addf-46e2e0f3e127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4807e843-29b0-4f4a-b726-5db1c10fcffa",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1a8f2f0-232b-467c-a079-01066afc5fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d4009c0-4c76-4a8d-8af7-f88eafed6805"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1ed41f6-448d-478d-80a7-20ce3cd8c0a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3dda49e-5cd6-4120-b515-56169b57ea70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ec7cd5a-5841-4e28-a941-5c9864deaf1a",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b306e77-e32b-410b-9b7b-3671eff53b84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3caf7c4f-de3e-4342-aa28-09ba72d9fc86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56d93b1a-353c-4570-8907-24e0d60f1640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e94df46b-4736-4228-921c-def2a972472e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb69d949-bbfe-4f01-8765-f0cd0ddccd75",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebf46e48-b545-4278-84d3-1c5152e90ca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d69bdbf5-f18c-4c70-b6e2-15f749e47722"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b409b10-b751-41c1-8d91-fcf773aff030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0688c41-55f4-4a27-9c62-c6feb8827db0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d6deb77-61f9-46dc-9d88-f989556a8187",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faab2415-3198-4dc9-93a1-886293460335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb51dec8-c479-4c8e-af12-761118af41ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d240951-7e9e-44bc-b8b4-6b8e6aa26e2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c200cda-3fc6-4fc3-a0a2-aa2d5b4c8655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e26a1bc2-9525-4c4b-8ab5-a60e23f40851",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cb7771b-c853-4d20-af34-558e9023f7c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21aca795-41ac-43d0-93f0-dd2c65e34c9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f357ca5-b4f6-4033-81a8-50cd80e1c8da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "276dba79-1d46-4490-943d-857b246efd7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af2f4004-e990-4746-9f40-12072caed5fd",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "790abbc0-c7c3-4280-afac-24391512d28d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3d5497b-e142-4008-b87c-027919d6ff85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79dae62e-8cea-4585-a0ee-47eaa6dfb69b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a928bda2-0148-4336-bba5-61e077413541"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc06b0da-9b2b-4154-8c8e-29c5b4ddaf23",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ce5c133-e59b-4551-b110-ec57edd5b540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0423c03-0116-4b49-951f-59bd176b6a41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb47c6f6-102b-425f-b392-f911faf5ca64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e81271e9-fd0b-44ba-8a61-058dd171dc90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b52c222b-0336-4de5-95fe-69a64175328d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4d2aedc-03d8-4a79-8c18-a655d3c3a633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e94c0be6-0166-44c5-b695-9ebab64264a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eb5958c-4e09-48a0-8679-a7979bd32acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "098cb12f-8419-4dad-8090-16caf7ce0f4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a5c091e-a68a-46f6-a950-3579713fd5e1",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e84ae65-f08e-4791-9fd2-91eec6de7681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f67d815-5cb6-449a-9465-099a8d9e1721"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ada9c0b-9ab6-42ff-b02b-764b8b431d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b5cf996-537d-4465-ba2d-b80064073fee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27232e34-853e-43aa-a986-75abdbc234f8",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a638dac6-a02a-4fdd-89e1-698dab36e36f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e3998a8-f783-4490-9618-9559db47e124"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d5f9301-b439-463e-95cd-d7164101143d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe498709-10ad-472a-8993-811780ca97d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37a299db-d09f-49ad-bda8-84319cf96337",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "076e3f80-7863-412c-81a4-bfcccf2f4ba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78833c7a-801a-4f99-a4c1-f949ef91e9df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "978df62c-7e3e-456c-ab39-8890c7f32547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4eec48cb-3736-4019-8e9d-218a0202fab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06cf411a-43fd-4835-84b4-b1a1a725f8a2",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "573b5e04-267d-4155-b23f-3a02c8cef2a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "492da0ca-16a7-4f41-94e7-0edec6787782"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d5b4e23-dca8-4f25-8208-2717ac448909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4dbfa86f-3263-489b-99cc-584207dd5690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02dc2ab4-644a-46cd-aab7-aec8f84569dc",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6c9a772-7e4a-4ba0-a3c4-a1e8ca74aa44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69a066b3-845d-4757-92fe-953a74e8fd7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "109d76b8-9af5-4341-89c8-75742247939c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9da75a32-88e4-444e-9447-af3cfc4527f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c5bcb52-3876-4f31-a9ae-7b07296dcc68",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3f5fe98-6578-4a16-bb75-fd27831b3b90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aea2b86-071f-4675-81b4-751fed811bb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f320b68-e5b4-4530-8223-128ea282c890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a983e6b6-e06a-43a9-a6d9-a867cd350e8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af0e19ab-f4c1-433c-9876-d01bcf520e93",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91315d33-b022-4086-871b-c295a163c498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "465ae826-dc0f-48f6-8dd5-b1a2e55ac0de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09c9eae7-7e78-4ef3-8a62-f19bfa998eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15af07de-d7c6-4db9-b233-4467a2d545e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c6c0815-683f-4146-9bb2-cc3ccf54442f",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a5ec9ff-c058-4262-a727-52ad5452e752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2004915f-ea71-4ba6-8dbd-00978a3bef15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62fb86dc-7440-48cf-a4a5-45ad8d6cf8b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "064ac52e-acb8-4295-8644-90519fd97ae4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1acc2f53-461e-4794-b948-66762edff262",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d7c7c9e7-6187-4bc2-b3e2-4a82a6aae085",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "059c3a7c-9367-4fc2-98b1-809a0e67b237",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "deaae3e7-5ea5-47de-8963-7d0ec657c8e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbea9f97-92a8-4f3d-892d-f1b147c2dcaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "83676985-431c-4ef8-8f0c-fddac22dbf4d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a506bf0e-bcc8-4177-becd-3b3f8b928675",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f370d83-1e22-4ce0-a00c-104decfd9a66"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "97fa526b-e611-4dc7-8c7f-409a3c3368d9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e5b354a-ca6c-41e9-82c4-ced00598a614"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a70e4964-09df-4aed-b3ec-5449aec0e64c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "90e26dbd-45c2-4b7c-8052-f055b264efe4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "047f617a-65d3-4796-86cf-9c96048f27e4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c084c5d1-cb0c-4a6e-9a33-2508620b19f8"
            }
          }
        ]
      },
      {
        "id": "a21456b6-f1f7-48d6-a77c-661a8073dda1",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "8255ba88-a10b-413c-a462-8136e1b28258",
            "name": "Negative Testing",
            "item": [
              {
                "id": "48ca7851-3203-4fc7-a138-781f80808645",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8b2552df-a3e3-440b-8998-558bd2cb538f",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "275e2322-2f25-4a97-9552-4d6460539c5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48a3445b-704e-42d5-a741-752449592353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a2f848a-1f39-4b78-919c-b6ed26430bea",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3bc55f3-22f2-4a07-92c7-31227d89704a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2fe33cb-362d-4ef7-897a-3702be18b219"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b316816-1500-4e49-b93a-5b62cb2b8b19",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b61d9e1-3942-4280-8e9c-25a610d3379b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dde71f22-50fd-4458-8ef1-23998e14dd7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fe2621c-af8b-4e76-952b-c8494d668842",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f05effd-31dd-4217-919f-28d18f3a0c99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "712b4568-738a-49ab-81de-06f2836bdb4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e3f7c79-9395-4fe2-8b36-698d7bb1302a",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4ba2f00-1d03-4388-85d3-827ea12491f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25d07917-d533-43da-a25f-f7199f598261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b44e043-e50d-4020-b434-dd8d813299e1",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ee67ea8-ab37-44f7-b483-d7ded1981203",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66592bd5-98be-42d7-be87-1022ae6118cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ae2b564-f32a-45f9-97f2-52974e48241f",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41b3dafe-9aad-4eb6-9a50-0ee1dfc4ed4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edd42e18-55a5-4dbb-af69-03892e9232d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3968efb-964f-45e7-be56-2bae9cf9744a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72f3f597-40d8-4d5d-9ea5-2d4c841a6a08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc13daf3-eac6-4d89-93ab-5d42847d28c4",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd130c44-9ef1-4b9d-aed5-c7f1c2223ce5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1dc543cd-3b88-4534-b63e-cb56defc650a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f2952f8-1b90-4273-9c03-6c53b98b6b07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65c94cb2-0178-44da-b7d7-66bedfdd347c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fa81cfd-f5e6-4779-bd3a-4492aa406c8c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c37ed31a-4047-436d-aaec-e4f2fbbf97c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86a355c6-33ad-4c72-aa30-3eb964f8ed9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5fe731c-e35e-4aad-9ee4-476c754080ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8238365d-7787-4e28-98ad-e21f371f34aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "761d851b-40a1-4d18-8084-c0fc0f208832",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3436ecc-c3b5-4f72-a7d7-454cf1739289",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8722372-5595-411e-bd2d-5a85b02e4c52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aaba154-2cad-48a2-b39e-65a0c106f3d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11cf247e-a42a-48fe-bce7-55911f849ccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a345dea1-bf66-4898-81e0-59d3022e854e",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe2c295d-1b8c-4ac9-9508-ab44a70361af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5db55e8-a1e8-48ba-b850-fdaee4193786"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86d678c4-470a-42b5-b403-f46eb43a909f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b3ec333-eada-4661-a3fb-55422bfd4288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73c6bea6-f172-4c7f-8e35-25fd80ab72e8",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1df8ad3-629f-4658-a9ae-62689fd63a82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5709957e-58cd-49ef-9779-0e8ad0ea41d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec073603-ff5b-4319-b6fa-c08cb519196f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27a7a1af-8f17-41d2-8d4d-43be3ab033df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d48431dd-6435-4cd0-b05e-47e6fe4a9306",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f280494-7bf5-494f-9a40-eeb1f2a1d0fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7616cc0e-f261-42d5-baa7-785485eb8262"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a2e34b2-cd3a-4c42-a404-9d4a32fc36ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24f8766e-f750-4f28-b188-5f506040d1d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cdea50b-a85d-400f-9ed6-4a761675ffda",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a54f5c43-e93a-4700-9cb3-6f8ffb76c149",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d840a67-6031-4426-ad50-4db550b40509"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac55c602-af02-4f02-acca-4b4bae91b591",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb0922dd-3681-4737-824d-e64b0cb97803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26e02ad5-635b-49f2-abdd-3ffe587a5697",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3378d0e4-51da-47b4-90c4-8cabbd01715c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3af5be4-2467-439c-abe5-5a963a7a8c7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "614e4891-879a-45c4-90f0-edb94f512644",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99e002ad-eb56-44fb-acc1-3d5b9805c2e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ab75826-73e5-4567-893d-195ef48accdd",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdf25719-6e31-47cf-8f09-b4d9e936e8b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d803bf91-604f-4a7f-8bc2-72e71cb6bfa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42ead76d-1986-4d65-a59f-46758bf3fa3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef6a68d7-fc65-4525-874e-62b7e1a09640"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68b18c3f-ca0e-4dc7-938e-87cb88dc8dc9",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9a16b5a-38da-448b-8780-182f25bf12ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ae18a7f-0418-40f4-8c07-0a63bcd4ef4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a845c6e-ee3a-4ea4-b7ae-02abc17403b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d25818e-26f4-49ef-a530-0519f60c7119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40425bd6-b28b-4866-acc2-e09363d92ca6",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f14066a-5136-4d5c-b763-3a797af7e633",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2633ee2-1e68-4fb2-a769-0497182e761a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f919283-ec45-4ef2-8c50-ee978a0d9a3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9816aa1-1470-40e4-a3a7-9908ab148a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27891b2e-1eaa-4b9e-9802-d88a77571cab",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12c20630-5f4e-4ce2-ba23-116987806f8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5331608b-cfd6-462c-8a6e-29763871ddb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "721066ca-5d0f-49ca-80aa-db9e9935638c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4266ef43-1afb-43a0-ad6d-064ae1d72d40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f46b8636-9e53-472e-a856-998bfb6af0d0",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aab9b1a4-b9eb-46b9-898c-87c409e207a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0b80363-7325-46ff-ac7a-888ba3084de8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "916482bc-d0ce-4137-b3a6-8c50d17eb04a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d78da0b-e551-4e28-ac33-dd2a8109e1e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1732c7c8-9cd9-487c-b682-9702ed6cfb53",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "493301e4-6b8f-4b59-8621-1a801f686e0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc352e72-d3d0-4d35-804e-76d536e818f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffa4718c-47e7-4171-9b65-285f1dc5611b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca7e01d7-54ac-4d36-8e22-ee86e2d69fcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2344e9a7-d52a-454e-91cc-8b8802243725",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1560bf2-b2ba-4d08-98f1-61ef3031fc1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86e69cd5-c6c4-4f19-84ed-5f55c214f612"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85372b93-9bc2-4cb1-9270-91ab160d8df8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d7485d2-c14b-4527-b3b8-c1394b54c33c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "244012dc-7c77-4c69-8153-8be0adabad3f",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c2f4c25-650b-407d-bbb8-d7bf65d526d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b48b5105-5940-45a9-9936-b259fc268761"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2421822-a7e7-422c-be0f-a2596a57d00d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a246f29-bd19-4323-b816-25c1366d0dcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7273e1e9-8bb1-4d1d-a104-0794da098067",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62f1c6e2-9951-4ecb-bf34-c148b9900dee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86aa3227-7948-4b59-915b-31983ec5b80f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b845dabd-c745-4874-bae2-ef9701c8d899",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd9e38d9-58cf-475b-a008-64be953fc82a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3146da63-f6ac-4ea3-9c4d-75b5b599df12",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19d59f98-ef97-4f07-9829-3be75287ce45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf20a0ce-0634-45bb-9ac7-d44125268cc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f1fabf6-f4f8-40df-b958-35e87a9214fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04054270-5b8f-42c7-b3da-07a777d3763e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92a2f22b-2322-4e7a-ac3a-d5ace2f7f15f",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98e2ac22-2b2b-4dc7-a4d2-ef5dad24fd76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "487277f5-b931-4b6a-a919-0ab142d834f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18c3b872-47c7-4fdb-a599-dbd10b13fc23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1818334b-495c-4c05-a94d-e1d23deb4da1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5819af56-47bc-4e7e-8dbf-66e4dffc206e",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51890186-171a-4c25-bb2c-04d47c57f6e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "115220ef-be87-4ed6-b320-16711e055474"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f28639cb-473d-4926-8d25-b0209bdc9e18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2c56018-dafa-4649-abe8-4652d6711985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a19d1eb0-0bfb-416b-b7d9-ab6a56f2dc22",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19684b45-d08c-4bd6-9674-38919086f098",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eeaf5bf3-f8b3-4c6d-a29f-b3143e67de47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9c49144-3ac6-4b02-9cbd-6d53db91e5ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70628ef1-f37f-4509-898b-b3cd956fd440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58249df3-a531-4b18-be8e-ce229555fc95",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3009940-e8f8-42f4-9529-2af382c4ba03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d30dc860-65d4-494d-8409-4b93b0faa570"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efeb9c9a-aab1-4254-9923-51819ef389f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59dda7a4-8851-415b-903e-1c158af2eb8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eeda27a-17c0-40a7-bc95-2f046f66d278",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af02d5e5-5c33-4572-a674-1f5e0fbe1158",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e4c6afa-3ef8-4075-bc23-86b3274638c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e57ddd-c3bc-4a7e-87f6-06235e7ce6ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8971c938-6d78-4cef-a756-ac23251f11c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48a3b498-c3e6-4d96-8f1c-4a15a45a80d8",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "014a9ac5-2d2e-474a-830c-26db21969e81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ead20074-ee86-4792-a571-352ce8aca48b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be6912fe-4e93-4d4a-be6e-f8572d0f80c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7baac22-cfab-4131-8b81-7fe186902c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aa84bb7-9d61-4b19-9503-bb0978d89f9e",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61c4f666-0e71-4c53-b8d6-b873ea78cbaa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce2d1c33-aeaf-4a94-a046-69fb763fc4b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76f8fc79-bee5-49b4-934b-e5b11d968d7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08af09b6-b393-4a8a-a45c-10664d29accf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "030247a0-82b6-49ed-90d6-1ae98b485057",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce972731-23ca-48d2-a114-badd32e5831f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9882b54d-84e1-466f-946b-e3c0e3f96e2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "880465c6-1d24-4584-9325-d4e61eca8467",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b49e2e38-6494-46af-bc70-95cffbd3ac18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a53f5f99-10fd-4b5a-9846-ae6fbbec7075",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35446f3c-852c-460c-880c-48d97b7398a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b221e38e-cd71-49e1-b3a5-4e080845955c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3160b871-7ccd-493a-89cc-2201793be3c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1aa2da76-cecd-41ca-b0cf-05c95c2be658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3a68c0d-0047-4f78-a09f-3f08aa0291e3",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa61592b-5557-41f0-9385-21b265c19c3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df3d8ce3-e4fd-4ee2-9f79-2a19ee90aa25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2c6cb37-6c96-44af-9aba-b06b6059650f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be323eed-da1c-41c2-8dd7-e305301cebe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcebfbdd-10d4-4fa7-9db7-0ad0ff733b44",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54f67092-7e18-4308-9201-469d86376c65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4516d93d-788e-42e5-95f3-7386d5ca7e25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e51e0629-f87a-47cc-9229-9acc87db275d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a77855a-665b-4fd4-b89c-0dc9e3eceb31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eabcb2d1-0afe-49df-b5dc-2ce5b04bd830",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76433947-09a1-4361-aad2-cf65b82e9664",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a29a58dc-3fc1-4f9f-88e5-45211c643f78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53b001f1-099a-49f9-84f7-96d30289a813",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cae3a3c1-072a-4f1c-adfe-5fb7b16dd032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4a2968f-04c2-4ab8-b5fe-5299e852d676",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3678d601-ebb5-4ff1-8ad1-c83ac5fa15ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22622670-16ea-46c1-8d2d-c1f6cf51f8ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db9e12ee-1c3b-4386-96de-042eacfabeef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d50129d-89c9-461f-b74b-c70fdb43c09a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6b9dcb2-4fb4-42fc-8de6-a9fc43ffc7f4",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d8913a2-520f-464d-936e-c69c9f4099b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "706fb96c-d201-439e-8a84-dbeb87bfffb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96dfd1ed-031d-44b5-9a6f-998a675fb8fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8754adc3-db67-4b3c-aab6-c1e34ee0b360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ce00a5-ee04-449e-aec6-6e02cba0f3e5",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6582633-46e8-4f05-81b0-c91ea68e8631",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fed1edc5-89f5-4876-9f72-250437a28084"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4fbd143-53ea-402e-aa06-35410feeffe1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3035046-31d0-43dd-8fe1-e73ed0d6aacb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab138cb9-9f71-4b33-ac3f-9bbd34d00818",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6415a1ee-26c9-4657-8e65-cbccae603a71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7d11fc1-20ec-4508-98c4-dbea1eb15032"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e954f4d-9129-4b22-b74c-ac062e6f5422",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ea3562e-6ef0-42da-90f4-723570b04321"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2cf9c21-0e0c-4728-ba3c-5806c0f62d90",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c645412-7bdb-4475-a76b-87da0e77fd81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1468f35a-6173-4f81-baa2-2d34aa397e61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91b9d68e-4c7e-4134-9ed7-5ad86a5fbbef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a99f794-4f51-408e-bb8e-e66fe7153890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "715f2850-f18a-44cd-9513-be7953113045",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7729e100-abf4-415e-9b12-1afd913e2b87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a58a7d77-6d4f-474a-ae96-ac3f29fddc55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "849504b1-8e14-484b-b9d9-284b7dd683bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e8119c2-347f-413c-9240-b87f255bb894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16f18229-ae88-43ab-9d9a-aa43369b5432",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b0b0a0e-ce51-4658-85be-58ddc877e0ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bebfbc25-1e06-4795-900a-b42bd70cc6da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c3b5035-87dc-4aa9-84bf-ddb183faa6d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bba4a40-247e-443c-a0fd-8d355f7c507e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13f9f2a8-33fe-48d8-8ac2-b2fb046879cc",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b389202-fa83-4b67-bb0f-06b8a39b32c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "229d6f23-67cf-48b8-8651-702082aefc12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9161804f-24b3-4266-87f0-56397ad4249c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a70c5c27-08fa-42b3-bead-c7a3cb85a59e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcadf79c-7ec1-434d-aaec-e1a268d98900",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79c85974-644c-4d9d-bb3f-797129dfa36a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a0de80f-2fe7-4bd1-b48f-c17ac5bc46ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "054c8bae-c490-4c13-8af1-e7661d405d64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a893aa2d-c3d8-47cd-a011-f92f578fef5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cbd7102-fc5e-418c-a38d-68b621156523",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ce6788-78d7-4993-b04b-87e82df79763",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0869125f-53b6-4675-9942-0db340e44a26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "842a0e12-08af-40bd-bc89-ace5d8222e3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f329f303-6cb0-4dcb-b410-d5596c4a991a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e90cbac-23e3-4fde-95f8-f28fd1ecefcb",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba9a4bc4-14b9-4cf7-93e3-3b018ca22f98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f5213cc-b669-46bf-8076-34cd5e6b8a5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e6a377-0bd3-420e-a176-ca6a1cbf686f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6607ed81-481f-4e37-a7f3-c3d8a92149a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9029171c-4313-4d32-92be-9037c4e9cc93",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe364c54-a4fb-4a5d-8e1a-622795c925a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f55dace-cb44-42a8-83a1-5b5826bc853e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3887e3c5-9adf-438f-91ce-fea0e73bc482",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "474b157f-8782-4c42-aef8-515c63551528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05104308-d1e8-401c-9654-3c6c3e2bb3b7",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f24ef63-f5ca-411b-8c32-77c2b06bfccf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c13cbd74-20b1-486c-9df4-4456d80b38f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e514cfa-5f6a-4ef3-9cf7-c8a3635788b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61dcc06e-9e04-4ae9-872a-77ea45820cf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a21d8d8b-c141-43ff-b91f-1bcd1be0fe8f",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71aaefd1-20ad-46a3-9b47-90bfb6538f8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e1522b6-ef25-4830-bcea-151cb1da73dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79831e5e-a59c-4224-a319-09c2153210cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fcfb9e2-0c56-4374-804a-a4d09607db81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79434437-e5bc-4439-b8d4-61fb36c0bc4f",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc4e55f-2208-4912-8ba7-394164a98b80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fc25785-aeec-4b5d-a200-29b2156f285d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1073faa5-e3ab-4be6-8af2-ffaa61e2998c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f23ceec-4b7f-4971-b8dd-213e393b3cee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c776fa9a-77e9-4ff4-9162-dc0f75f7ab9b",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29f9d682-8537-48cd-89a6-d62c6662939f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71feeb1f-0e02-4d90-89bc-556feff9d1b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00c1d23e-c12f-45b6-b714-d46266823147",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85f3e053-cd53-444e-a03d-beccdd5eb0e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08edf103-1b31-4b15-bc75-cfdbc93e67c3",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8071c801-7793-4d16-ba17-15558cd80b8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "462a55d7-9297-4fb6-8438-0ca0873adb6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0962edf-4d17-4002-85d4-4a3a0a7d151c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1b344ae-23bb-4c45-b7e4-05e3bc56de1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82948de9-861b-4b67-8f5d-684e6c5f2103",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffd95dfe-ad92-4c43-8edd-28c33f79bf4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e928eae3-21d0-4209-b484-b2eb3c40e95a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "176ee57e-b93b-488e-a979-52b83e0a4b1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d9f0e3e-a9cc-4e8d-8817-d8af90414cda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2314abc4-7539-4d65-a319-fb82e0ec1151",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3e737fa-2fa7-4fad-ac6b-5b474641b00e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d11f7045-8e51-4a89-8147-ad13af734c36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac4aef97-1417-4963-8384-39f270bd9373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39408c7a-4a97-4207-8d88-f374b1d51b42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49ce8f9a-b6aa-4c8d-b19c-ade3cc43e0eb",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68b4d29d-9016-4949-b68d-c7bd6d87338c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9372239-b006-4dfb-a9ec-788aded05cf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63fa3e5c-81f5-46f7-93ae-e9cb10a456eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9320e236-4cba-4486-b501-b6aa02a5a3d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3610057f-5719-41a6-91ff-548a36cf2dd2",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2953baf2-1770-4808-b142-2e8f314c213c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b84195a6-710a-4d49-94f5-7dd65cea46f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b87ff14-7744-4306-b4a8-c52c17e74d3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16f7302b-49d9-4680-bc37-d8551d7e9fe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceafd36c-fbca-4ed2-9a84-aad2cd9bf36a",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acbe8ca3-2081-4f4d-bf0c-8fb0cb61da36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73779aa0-70b9-423c-a321-9f86fac3917a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a252f48e-bc8b-48de-af15-7b0596e8d5ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f332480-a82a-4fe9-94d2-61a999094b26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59d565a9-ebea-4c73-89ef-98f5b55fee66",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d70abba-c6f2-4f88-818f-4e99d20bd7b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0a55411-3737-482c-b0a6-52e4506bc4f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92bb467e-786f-4618-9dd6-327b19687191",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59bf3590-a946-4b67-b5a8-40e4d22443b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b43a593-8495-405c-ae57-59d175af4028",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c044c2c-0d35-40d7-a963-65d78ed0ed87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c26dd5bd-1812-4088-a7a7-771e48364699"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7409b10b-8e24-4cf6-9363-2d0934cd09c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "812523ad-534d-4ec5-b34f-ee2d4629da7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a22d4c45-8e8e-4b82-b1cc-9e4ee7c66a79",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a2407f5-e4bc-4186-8375-7af274ec66c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e987c057-70db-49db-b200-4ac1f9297f25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f250ce8-ff05-44bd-8594-0d9793fb1f70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8375cb5-6d89-4a48-941d-4361ae6d3f3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fc5bbf3-3ef9-4a93-8a52-0c8ba6efee15",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d1f0b7-02e2-4580-802d-9ffd6f25f0b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5b8222a-f3b1-4852-9043-0da6a1d3d057"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7010e40d-2f0c-448f-a2b9-98287a845bb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58b7d5b9-5eac-4d00-a0d2-792c0a6eb55d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56d3a466-d5af-46e1-9fa8-b43b6c09cd78",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "603c1b2f-3679-4326-b8e0-56967e9b8a1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf2d99e6-c679-409c-9205-d59f7a3b68bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c967ab60-960b-4e34-ab18-613e029aa2e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69c5ad69-9737-4bdf-b84e-787ce97d5921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aecfa2d1-da75-4e5c-a70a-0dd2468f8634",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67cc244b-d3b1-4cb8-8626-84fe0adb73b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e04cece3-5a9e-4c04-b098-6026941c0946"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe2d6434-f152-4a4d-b822-cde666f1cccd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19f56f84-7dbb-4940-8651-1822bf489460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64c3bfbb-0f0d-4c7d-b3a3-63c518aee1a7",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47c7bc35-4a22-47bc-a778-d2255a5380a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d53a3279-05e2-455c-b0e3-4d9b6905bb03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "104cc679-d687-4523-93a1-9b14fd174758",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea82793a-86bd-4845-9b57-3f9e05ab83be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2523ef62-7f64-4e8e-9d02-96fd03fb2a54",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91e62db8-8f13-4612-b021-da1a31359dde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "027033a9-5761-4f84-819e-b894130cf337"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff8f75d3-e375-4b67-a1e9-a6ebcee81421",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb78dfd0-c976-454b-bc63-e526d2d38d15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cb80166-58af-46e9-b537-70c6c739a98c",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fe42465-861f-4f85-9b72-546888f2e801",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed3b407a-f6c0-494b-94d0-3b328cc49403"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "613a03a9-7666-4645-b5f5-40e405543775",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "228b2fb1-ba37-4fb6-bc1d-acd801b3d278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f6c21c9-26e2-4c30-aff5-b2ac094bcd34",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d64202fc-e941-41be-af1d-33c50b5b0922",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66b83d1c-5b19-4213-bfbb-6d884f37ae1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5bb4ec4-fa80-496c-8beb-d36cf48b3f62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ac931fd-a2ba-462a-b9bf-175efbcf94f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12dc35b9-6b9e-4b0e-8190-1dd921e6ae67",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc337d15-2d1b-4470-8ce8-b52a0fa4980d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0fe03be-dee3-4477-9428-2345cbfa52b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a403a1e2-5ffc-4f3f-990b-8e3749a21509",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "039353c6-3fc1-4883-809d-68d2ccd375b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b41c84de-1477-4e17-96ec-8be221cc14b6",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f38561c-2052-455a-9471-709708efb78c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "588cf86a-fc93-4970-8981-ec2b1f8aed47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e3431a1-1e27-4ac2-9aa8-5bc51482cb01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68d234b3-d0ad-4f46-9da2-31eba483e530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e82320b5-ce45-4f12-92f7-0ec323acde8e",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "314def37-bd83-4090-b016-129af18348f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "929c3a07-c1e8-4287-98b7-083371853651"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "849eac1b-fa5a-4fd4-98a4-37d32fdaaff5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24599d27-f397-4866-ad2c-1a0c78a58ad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a01bef1c-fc6d-49ce-9093-656c8aad174b",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3cb57ea-6a3b-412d-b325-9cde46dfcaf8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f3f98f3-1649-442b-803f-dd2a2da666c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5d12804-7e54-4a1a-8bb4-7b2bac986b7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19b8acba-9a9b-47d1-9e31-c914f713b157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31d4bbea-c530-4f87-9f22-dec7444ae231",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e66d785-07d2-42c2-9598-bcd6b170a600",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0be00488-f15c-4eae-b112-bf88137ff3ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2309dce-f8c7-49ba-87fe-39a62386f5f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30c1c4e3-86ca-4fe2-8881-5ec209c55655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eed4fc8b-223a-4dec-a13f-ba32911412cf",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e93eff21-d9c6-4473-ac09-3e3cea859e27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f9805c5-7a6a-4f28-b6ce-ae89c2ecf681"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f25bca28-920f-4bfc-bb08-e730376f67bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6109a431-23f2-435f-9751-2e3448592336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af5de403-46fb-47c7-9fdd-8367b26a0e4b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a78f3a66-1c99-4d33-9907-996f9ed489bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10c68fad-70e4-4f5b-9894-5edb6923016e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dd99d3e-6de8-4b66-a152-305c957347dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25858042-6f01-4334-812c-cfbd9d499407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52168e04-acdb-4c40-bd7a-fb502dbe8237",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3168fee-3df8-4e70-8546-e8b96dee9ed9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88847312-dc4b-4adc-a1a7-b9507d7209bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b67d83ee-4bf4-423f-b5b1-9b9c186edad2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f927893-a657-432a-9277-16b20d4469a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d02ded5e-9144-4b51-8a44-73e88bfbccb0",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2933186-902e-42de-90d6-34d636d12f35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1783a4ea-93ba-480c-94da-9e63ebc08e2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f70795a4-9a7e-4385-818f-ae823054c673",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "612d9269-689a-4f29-b616-4a279ac455c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a14b0238-cb0e-44d8-a4c6-36333d6700d2",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30592b29-e28c-4841-a89d-9075c42c7448",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb806bd5-7976-4580-ba04-8fc545155f49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74b28d69-efad-4834-8c41-63d1c0361b37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b82e845-b1af-4776-b269-36b0df17993b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1be78e6a-100d-447c-9783-b1e764062f31",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62ae233d-f38c-461f-aafe-e92bfb41bf90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "831d4ac1-1619-4fc8-81fb-a36a88fdd966"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f9a4485-655d-4be6-ba17-d90cbe05b994",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8344b7a-06bc-400b-a902-7eefaef66fe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d711a2a-a1b7-4029-8645-dcee7ef59347",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86e72599-499e-4555-bb2e-94b74031490e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "619cfe68-542f-4cb8-9edb-75beb7bbb51a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6420886-c383-4e0c-9616-a48fea4fb4b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34bb9fda-3b04-4a7d-9450-11fb4ac9045b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11b4fa01-5ec5-4473-8c2e-1d406718632c",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "147ee823-6c85-4109-a83a-0122d44b5e52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "819bd268-a5b4-49ca-988e-bfda6258b144"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6903d21f-e33e-49ad-9631-158342c659d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a686ddd-8b2c-49ab-b245-c551af261ea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e71f9bf-24be-4d1c-b1f9-981c67c20a3c",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02acb2ef-4fc6-4893-ba7e-64f03b3fec5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf69d6cd-099b-49d6-a986-974d464aeeda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f46caf2-9acc-425c-86df-669b62b0dc1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0e65208-e797-4393-80e8-d93ce6dbebae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66453f16-c99d-4edb-8e87-e0ca25e496bd",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87a2635f-5e56-457f-8422-44d156bb367f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "777fb34e-3349-481e-a10c-8e827f242c48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5144e459-bd7d-4562-9241-760a2f058302",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e191867-ea7f-49b9-8608-a4d4f50e6f01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b82ec48-e319-4cad-8486-d0eb94c03a49",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1796089-39c7-4aea-bbd3-f56409ad5b5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7222c751-0e51-4c28-9080-b0f35c76e05f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c8967f7-371d-4b75-a792-25162ed12e54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b93ada9-58fe-4262-8e39-3cd04787562d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bde7d00d-0702-4d39-9f3f-e330582a7300",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "443256ff-5d7c-43bf-a800-0c70880be9ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37eea14f-e2c0-4b2a-8794-c9207c0eef34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d06fe14-8230-4bfe-81dc-8985a9ea32d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5243bd9-dbc5-4a89-8f7a-c8236d8523d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46365b48-a2df-4159-8ed5-0b4a9aac1a45",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b948061c-5018-400b-ac06-1304f99b7da0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b0f26ee-f22e-4562-b26e-71c3b34f4b04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07553691-a407-4422-85cc-bf143b9ae82d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "055a9d4e-7a37-4d78-9913-7c0f92996778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c9b2395-de92-4889-9640-69796bebc265",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "180bd37a-3b1a-4ea6-8667-bde61088dfd7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17fb7426-4e92-4340-a968-a6d2d3da726a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9865ebe0-d545-4623-80c1-e1f9c6d3e2bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6fcd03f-c262-4c46-ae26-13ea8fbefcab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eee34e9d-5c87-48b9-a084-ffd5f2af1236",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52fb3ca3-b812-414b-8bac-f7eeb5ac2bbc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bfbcf2b-1096-41aa-882c-6304cb1e547e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2682ea83-9afc-44db-961c-032762ead535",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0281b3c4-a3d1-49f5-8600-50c1bf4b6f79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a658732e-e406-4510-82f9-e94a579a9ec2",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ae30d48-251d-4085-9859-32899db598cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cff6f315-b3e1-4f1f-9118-c59f4587d261"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "735cc0fd-38c0-43f5-b0cb-89aa44b0c36c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3138aed1-df1e-4563-a853-9a6e78f67238"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00e79829-a5b1-4e55-b984-0583a65a4091",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56fd8167-4fc9-4aee-921b-4c98d4a44b66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2927f501-0d8b-4e0e-a0d7-be22138e1942"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f698ad82-fe9b-445c-96b5-9cc3fff3a154",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fae2763a-18e6-4dc1-b02d-4acb628348a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55e62de8-ace1-4f77-9c4f-aef70fb0815f",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0933de77-b8f6-4f06-9776-57942e7c80fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a5535a3-ef8d-4d3d-861b-a3ee60188377"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97d671e4-a30c-4be3-83c4-d5dc950f2f4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b3b126d-64ee-4c2f-ab23-e1d1b374cfed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31152f42-ffcb-4b6a-84dc-a6791cb2fc10",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b98604c6-84ad-446f-bb91-7e0d6c0c7215",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e3bfd09-dbf6-43e3-98a9-472ed33704d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2b4e18e-6529-4822-a5ef-da32f2d482d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ebc321b-0bcd-4184-ae06-3acadcbc1f41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55c0ffe6-0b28-412c-80e0-3d55a9f688e6",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8721b264-56d7-4063-97d4-531b0d266e57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "498c5ebc-945e-405a-8691-d58e26d7820b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb0806e4-423d-40c7-8be1-99bb52fd6abe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44dcec4c-f346-47c8-96f6-d12bab16d850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b28683c5-8e0d-4eec-9ca6-e9d0d0fdfbd2",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aab8d779-0ffe-4745-b60b-972f68ef3f6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72fc827f-29b8-4a94-a894-2d09253b3682"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67dec853-5e7b-4686-85ad-df47cd5397c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9267fe32-71fe-49d5-af58-fae4facbd28c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "709f12dd-bc92-4251-818a-ddeb8ca6a92f",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0e5bc94-0a2e-4927-9617-67349d8dbcb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f09cec6-8d01-454e-856a-34823f5067dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5686d99d-2993-4627-acb8-a0afbc78f2c2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e61193d5-f21e-4e4d-9d74-06b4973efd4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84ea3100-7e9f-4f3f-8797-6a8fe69a7be0",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fdc3d94-0c33-46dd-96b7-160fde4a1ea9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d3efb8d-f3dd-4f6f-a43c-18b1ec30f8b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "810562c0-cf69-4f38-b177-127ae3fe8f43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eea5616-8b9a-4c94-8bd3-867ad283bdb4"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "96b80e1a-1447-4298-a860-6fec17847003",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b0eaa3a3-9a7a-494d-ad83-685e995828a9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "12158541-4f3b-4213-a133-7d668a478400",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9f14bb0b-0277-4e9e-83b7-d0bb91674770"
                    }
                  }
                ]
              },
              {
                "id": "b7e11fc2-5ba3-4988-b0d6-32ab24571889",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a4efd3c4-8dce-47b0-a491-df5bbc1fdb73",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6133a23-ad63-4250-9bad-14c55436d9cf",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c470db59-e0db-47fe-9fb7-d3cd3e9edaff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c791926-25a6-4d5b-951f-85bc89bf8fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "da02c93a-1e13-4bbd-b5e0-e29adae34a70"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ea180df-4cdf-46bb-91f9-fc0704e5d11d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ed7cad67-db90-42de-814d-90f33c66994a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "eb1304b2-0082-49a0-86ae-c1df86efb695",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "18f4e922-683d-4f8e-99ab-9777379d1425"
                    }
                  }
                ]
              },
              {
                "id": "3ec780e8-43f0-4bbd-9e57-36a43179154d",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "eb45d20a-638e-40af-81c5-8f1385c50133",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deb7bcee-d369-4ffc-9658-b1d3e71f4b8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "4dcbd1a9-c088-445a-92d5-5f28149adf28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7594355f-b93c-496a-99d7-99f58807a4b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcc277a7-e6dc-4684-a7ed-3a39ae358d51"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9f166ef0-359f-41c5-8f35-c3c6e7d6adf2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8cb14d1e-0571-4d00-8254-cd6cce143695",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1a2de11f-1bc6-4da4-ac71-8d905c614921",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "1929aabf-25ef-4456-af32-5c3adf53ebea"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c090264-59a9-47f6-958a-9cd644841def",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f8bff516-625b-4fb9-88ec-9f140e02855c"
                    }
                  }
                ]
              },
              {
                "id": "d3a5f068-c647-4649-aac0-806abda14d3c",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "73234b75-2b80-4ad7-8d9c-aef6ac11b2f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3a67b976-c545-4011-8cd0-e54282f73e16"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "de654c6a-1d95-4c95-bb97-72ba9c0a5991",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2290475f-5376-4838-859d-032dbcb507de"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a49a68b6-cc8e-4b3b-853e-3596ec019d45",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "0a604c57-8f91-44f4-a88d-3c4eeb07994b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4d3a1878-3cde-4e9f-8764-c56ffdbc52ab",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dbbfcf70-978d-4c5d-be27-a3093f617890"
            }
          }
        ]
      },
      {
        "id": "f321093d-1a5a-4475-a5fc-63a1529aec11",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "8b85a641-e813-4f81-8071-f6bed37477bc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ef1bb5e1-3649-46cf-867b-1dc6117601bb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "11d7f171-7e87-478c-85da-f747ec52df91",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3628f091-bf20-48e0-a99c-f90b7f9b45de",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "90247026-8b32-4ce4-89f5-c402ed231c78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d475525-9da9-4545-8473-fb1704e7757c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c875e859-5d36-4768-847b-59a1e6b0290c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b823373b-c5d2-4dde-ae75-abe529cf53eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f83bc702-58ff-41b4-b54c-c96cef626afb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6f9bc877-5cfc-493b-8e55-b95af286ef3d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "27b10039-ec36-456e-84c8-7b990b235b19"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5840b10e-74e4-42e0-9c03-4ef09ce7263a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "bbcf4472-6aeb-4ab3-96d3-e561f6184d6a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b01b75d1-84ed-4739-a24a-38bb0046ae04",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b94c5341-37f2-421c-8287-11b1fbcb5fe1"
            }
          }
        ]
      },
      {
        "id": "48cbde9b-e11d-4e8b-bde2-30068a1d1905",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "0c6f680f-4748-4648-bc54-3765663802dc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0aaddacb-6738-46b4-b02c-c0c8711fc56d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8f843670-e61a-470d-8c7e-d6ec467e10a6",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff238a0d-31d6-4b36-8c67-036056446b8b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "26f94b1a-3247-4ed9-9371-f5fc97ca239c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26c395dd-caec-45a4-b776-54301c2d63ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b886df82-ea47-44a3-9073-e4a7483c3bfc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6e68a62c-c338-4f31-8896-f04fcb3159f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "68ec57bf-b0e7-4e59-884f-951b60ed3d53"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed0a0f56-dc32-48b4-878d-3f0db5e021ae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0fb02952-5fc4-4f8b-bff4-92156ceb20cc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "26ea6d2a-2b36-4f02-a250-1510c0a38cbc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e638d99a-f4fd-4a5d-b99e-5df2e595cdf8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7619063a-5021-494c-9abd-51682b568e9f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d8965cd4-7dc6-4db4-896a-4c2a3eaa7df0"
            }
          }
        ]
      },
      {
        "id": "3ba528e1-d86f-47d1-af5d-4c09552c1853",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "e4c1a838-1559-4250-bdd2-e3af05151758",
            "name": "Negative Testing",
            "item": [
              {
                "id": "714283d2-e94a-4621-bb31-6c78c874485f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a1baabb1-8148-4ede-b117-9fc91f173902",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "703186fc-55de-4f3d-b18a-77e80a057f79",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "974ca081-4ead-4d83-9897-3cef41fdbfa1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "243d612d-6abb-4c9b-a0d2-1f6564b243a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4f9de7e6-093b-44eb-9640-bc2f9a59035e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "32530f37-f438-4376-85d1-7b963946e385",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "17cb54e6-8715-4921-9f9c-6210b0b149fc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6c698be7-f84e-4db4-b502-3d99c4ddfe49",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "317c5eb1-5bbe-45ab-8db2-8aa248291e20"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bc1769e5-55af-44aa-b1dc-59c4305119db",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "94abe10b-f852-45ab-9230-a781f8ee1a6e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7ada0f4f-e623-4052-b7d4-5750dec484de",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ccfbc2cf-0aca-47cc-9ae6-5491761516b6"
            }
          }
        ]
      },
      {
        "id": "e12d1648-2e95-4cc2-ad1e-27b5f61a15bc",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "91259ec4-ef3b-49b5-b4ee-6eb7604f1508",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c641eb3c-93d5-4e13-b6f7-4a3c219f35da",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "6195f1cb-f237-4f2c-9ae4-a13477d2e944",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ea52b01f-5d73-439f-a20d-6987e38d293f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0fcf0b63-8718-448b-92f3-3f74d1b47843",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 63.480701754386004,
      "responseMin": 11,
      "responseMax": 637,
      "responseSd": 79.16580743082336,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1697934972656,
      "completed": 1697935002824
    },
    "executions": [
      {
        "id": "7abb5542-add7-406a-a695-5375f33422dc",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "d6af6b77-3d17-400d-b593-e11fe95f026e",
          "httpRequestId": "ab46a214-9a07-4357-87e1-03883bd12bc0"
        },
        "item": {
          "id": "7abb5542-add7-406a-a695-5375f33422dc",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "9f984459-8070-493e-a9c7-904df16b0565",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 0
        }
      },
      {
        "id": "5ca6b15d-7e6b-48a9-ba59-274b911e87e2",
        "cursor": {
          "ref": "34dd8a45-2c80-4765-981c-cdfe8c932426",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d5c568e9-8294-445b-8fae-60623c0a2ee7"
        },
        "item": {
          "id": "5ca6b15d-7e6b-48a9-ba59-274b911e87e2",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "1f80890e-f92c-4bfb-a76a-1ceb82aa42de",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 0
        }
      },
      {
        "id": "3f51b5ad-43ea-40ed-a8ba-e4f8f3b55e87",
        "cursor": {
          "ref": "11aacadd-3ab8-42c3-9534-4a500d374d94",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "47324e78-098d-400a-b05d-b08d38a75842"
        },
        "item": {
          "id": "3f51b5ad-43ea-40ed-a8ba-e4f8f3b55e87",
          "name": "did_json"
        },
        "response": {
          "id": "8c8bcfdd-eb2e-4900-bc30-e8fda29581d7",
          "status": "OK",
          "code": 200,
          "responseTime": 434,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "358c9214-5482-4a60-b8e5-8956ac1903e0",
        "cursor": {
          "ref": "fcfce6ee-9782-47e2-9b8c-60a4315c411e",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "160c0442-8cb7-4945-95e6-fdd5712f366d"
        },
        "item": {
          "id": "358c9214-5482-4a60-b8e5-8956ac1903e0",
          "name": "did:invalid"
        },
        "response": {
          "id": "6aad33ff-1978-4e21-b59d-8c27c792c0cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "358c9214-5482-4a60-b8e5-8956ac1903e0",
        "cursor": {
          "ref": "fcfce6ee-9782-47e2-9b8c-60a4315c411e",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "160c0442-8cb7-4945-95e6-fdd5712f366d"
        },
        "item": {
          "id": "358c9214-5482-4a60-b8e5-8956ac1903e0",
          "name": "did:invalid"
        },
        "response": {
          "id": "6aad33ff-1978-4e21-b59d-8c27c792c0cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de0f75c4-12c7-4a3b-ade3-c99a91543086",
        "cursor": {
          "ref": "e37635e0-b159-40ce-8108-a1ea66ffc09a",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "fd63ad22-126c-4773-8053-79ed6ca27fbb"
        },
        "item": {
          "id": "de0f75c4-12c7-4a3b-ade3-c99a91543086",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "adba318b-9618-4411-b342-cd822d0a2954",
          "status": "Not Found",
          "code": 404,
          "responseTime": 88,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36ad82db-1d19-4050-b825-c1928ce625de",
        "cursor": {
          "ref": "33e9e94c-d4c6-4981-86ad-3efaf540d967",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a2ed621f-bebd-4be9-9495-e4025293d3e9"
        },
        "item": {
          "id": "36ad82db-1d19-4050-b825-c1928ce625de",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "4b7cf374-66ce-42cc-8768-cc1b5e31a160",
          "status": "Not Found",
          "code": 404,
          "responseTime": 46,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c72aaeb-eead-443b-b1c7-7daf199cb243",
        "cursor": {
          "ref": "60e26f4f-68af-4b01-96e0-30a5d89eeb8b",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "2849e138-3994-45a1-8ac4-d4752521d63d"
        },
        "item": {
          "id": "2c72aaeb-eead-443b-b1c7-7daf199cb243",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "fc6d0a81-fcdb-4cd1-80f8-c1deac3ad6c2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc42b90e-9f43-4675-891d-577e3fec5cea",
        "cursor": {
          "ref": "e274700b-d4c9-495d-b58f-4981546a3828",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "00e53382-4bea-485e-9650-022e8a820b01"
        },
        "item": {
          "id": "fc42b90e-9f43-4675-891d-577e3fec5cea",
          "name": "identifiers"
        },
        "response": {
          "id": "e1228bc1-8ce7-410e-947d-1ae396322c4f",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0330c56-b9ae-4072-96aa-b9ef9f6fc88b",
        "cursor": {
          "ref": "a1b616fe-fe3f-43fc-9f9b-f24e46ef0cea",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "2abf4b9e-11a6-4f13-9376-baba0cf24aa5"
        },
        "item": {
          "id": "b0330c56-b9ae-4072-96aa-b9ef9f6fc88b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2f8d8553-944d-46ae-86d9-01de131e0a41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4baee830-8a6d-4d75-819a-8d1de2ceb896",
        "cursor": {
          "ref": "8db2f954-b9c1-46bf-a414-1137ca736ffa",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f250d903-583b-4f6f-9321-e55bc6df979f"
        },
        "item": {
          "id": "4baee830-8a6d-4d75-819a-8d1de2ceb896",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "01da59b4-6c26-4712-ae48-22fc70b17f26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfb0a16e-585f-43db-8f70-e9e82fe53259",
        "cursor": {
          "ref": "dd2dc39e-fef3-4bb2-9eff-327ec5cbba21",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "99d4bdbe-1b4c-4590-868f-b2b1f81eb584"
        },
        "item": {
          "id": "cfb0a16e-585f-43db-8f70-e9e82fe53259",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "465d82e5-b8cf-447d-bf66-30826642b1ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e550c9df-b14e-4603-b426-09052e37405c",
        "cursor": {
          "ref": "c78321d4-43d5-4dcd-84df-691ed6cf48c9",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "64baf0ad-69a7-40e8-8404-24cfca3e5023"
        },
        "item": {
          "id": "e550c9df-b14e-4603-b426-09052e37405c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "c006922c-a1fe-4614-939d-eede6f8e8a4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2d51c97-30b7-4cce-8170-0944e7a54f58",
        "cursor": {
          "ref": "6e57a18c-a8d4-4807-976b-ec025b605ef2",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "86a95685-3e27-46f6-87e3-3ed6209cbf41"
        },
        "item": {
          "id": "e2d51c97-30b7-4cce-8170-0944e7a54f58",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "6d6afa9c-8381-4255-a293-9c4fbc1de7e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7a95db8-37dd-428b-998c-77133891bba8",
        "cursor": {
          "ref": "cd63094e-f663-451d-96ab-a9dc167f3f52",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "9a377b68-2104-43c3-b9dc-71299ff6b428"
        },
        "item": {
          "id": "f7a95db8-37dd-428b-998c-77133891bba8",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "038025b7-bd46-4701-b808-4d0623b6a98f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ef89d4a-8565-48fa-a140-4f283610756b",
        "cursor": {
          "ref": "71a9b49c-71e6-4f99-a1d4-f5a7e2e4e5ca",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "0af20208-2763-4fc6-aad6-42d26a866dc9"
        },
        "item": {
          "id": "3ef89d4a-8565-48fa-a140-4f283610756b",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "971f80e4-cec3-414d-8f71-6cb565e04c56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32d2aa0b-da6a-464b-9cab-60c3b490603e",
        "cursor": {
          "ref": "ac0231d4-9fd5-47d2-8ea2-104ce8859db6",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "06947ecd-e2dd-434e-ab7b-a298ed04e6e7"
        },
        "item": {
          "id": "32d2aa0b-da6a-464b-9cab-60c3b490603e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "916a7bb7-1931-471c-9c6e-1da100baf4e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d1e94b6-4f57-42e1-9726-aced27f14164",
        "cursor": {
          "ref": "da31fa73-4ead-434e-9430-7198e6a37763",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1f7209ab-190f-4d32-bd14-b4ac8bfe5e5e"
        },
        "item": {
          "id": "1d1e94b6-4f57-42e1-9726-aced27f14164",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "ee76fc8f-cf97-467e-896a-e5b01c20bdab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "066b89bf-d68f-4d10-88cb-797d6c0c0d70",
        "cursor": {
          "ref": "7339e7e2-40de-40a3-ab5d-90e16c6f2026",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "aa75dc43-ac48-473a-b7ea-c3e76b3ec4a9"
        },
        "item": {
          "id": "066b89bf-d68f-4d10-88cb-797d6c0c0d70",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "2281705a-1fec-4d0b-9583-322d7622b20e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "851795b5-26a2-4c40-b6fc-57e28ec63b81",
        "cursor": {
          "ref": "3056a5fa-9f4d-4da4-a514-98fb5ec96632",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7e7be405-7157-4694-8cf5-4be5d719759f"
        },
        "item": {
          "id": "851795b5-26a2-4c40-b6fc-57e28ec63b81",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "b8d5bd39-7265-4b5a-a44d-4bbf0c81df00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1de025f-ceaf-4456-85aa-dc8aaa2a5a6e",
        "cursor": {
          "ref": "2bf8a9f7-1014-494e-98b0-e4c0d0161b1a",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "877d0eef-7366-4223-8a0e-526f10396b61"
        },
        "item": {
          "id": "d1de025f-ceaf-4456-85aa-dc8aaa2a5a6e",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "b4a2abab-373f-4059-bb98-c5564c98e138",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab20c48f-86f5-4729-8e77-7aa3140cb91b",
        "cursor": {
          "ref": "67ae0dc0-3d8d-4553-b340-8ce6e158fd5e",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "9f4dc627-5fb5-4abb-9886-c58eb2f85884"
        },
        "item": {
          "id": "ab20c48f-86f5-4729-8e77-7aa3140cb91b",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "cfc59979-cf98-4d37-a8dd-dd20a5675a75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "501aedf8-2d32-4c13-9fe3-1329354a3f4f",
        "cursor": {
          "ref": "e1defb11-bdaa-4240-99cf-0b37b4cf48d3",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b1134982-a075-46ef-acc6-28b003eeb0bf"
        },
        "item": {
          "id": "501aedf8-2d32-4c13-9fe3-1329354a3f4f",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "a77ce7f1-e64c-4e1a-9e4f-03c8252bb245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80ff082f-1d93-4d3c-bc2c-94e6bbc0b07b",
        "cursor": {
          "ref": "5afcae74-d99d-44dc-8ed3-fe3b8f79702f",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "3cfb48b6-0398-4841-a6f7-9d8172a9da8a"
        },
        "item": {
          "id": "80ff082f-1d93-4d3c-bc2c-94e6bbc0b07b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "35fbb019-bb29-4d2f-9942-fdec0abc1dcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04c8dbeb-bf5a-4d22-841d-c3dd07398479",
        "cursor": {
          "ref": "f29212a3-aa20-476e-848d-025f66d8a431",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "6a1bd002-b0e6-4c21-9fab-9d6309d6d9a5"
        },
        "item": {
          "id": "04c8dbeb-bf5a-4d22-841d-c3dd07398479",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "78f7b9ef-e6aa-40ea-a31d-4cd3ca4aace2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88028dc8-9c52-4ddf-8f14-c7d2bbf1b983",
        "cursor": {
          "ref": "509c010b-b734-4a0c-b648-5522a3aaba53",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "5c586537-bf86-43cd-b77e-a0d0563f05c7"
        },
        "item": {
          "id": "88028dc8-9c52-4ddf-8f14-c7d2bbf1b983",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "69474b1a-5b55-4334-b037-c3c4f7bcaea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9406b99d-bc29-47c3-96c6-f9d8f060cd38",
        "cursor": {
          "ref": "4056b0df-6bf3-4b1c-b246-47d3f6ef0850",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "3af277a0-be69-4f25-881e-e0bca659581f"
        },
        "item": {
          "id": "9406b99d-bc29-47c3-96c6-f9d8f060cd38",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "af5a985f-9bf7-4a47-94c5-6204d9c94852",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09db1f06-3aef-4e1c-a91f-539af3d1b666",
        "cursor": {
          "ref": "bdcef3b2-5f67-4402-b461-e429fa9e05d6",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "2bc31d0f-0b70-4b3d-9b0f-ca6a702d0a73"
        },
        "item": {
          "id": "09db1f06-3aef-4e1c-a91f-539af3d1b666",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "71db0fda-8ee3-459c-89f3-3eb688f9f1db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cd085c4-52f4-42d2-b2a9-2d827c404ade",
        "cursor": {
          "ref": "37cff4f8-714e-48a8-90ea-ee2b4941b639",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "6a9d714a-0ff2-48ba-b2c2-a024ff4a6689"
        },
        "item": {
          "id": "7cd085c4-52f4-42d2-b2a9-2d827c404ade",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "1f3641a9-428c-465a-a42a-6d6abc8ec905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cb2c901-ad0f-4528-8bdb-9f99326263b3",
        "cursor": {
          "ref": "0de27245-6777-4b78-b43d-0fbfcfc70fb9",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "55ba60e4-5b62-4143-b479-8a049a5cf330"
        },
        "item": {
          "id": "9cb2c901-ad0f-4528-8bdb-9f99326263b3",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "dcdcac30-8baf-47b5-b5eb-fd0a32ac3a0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e22aca1a-6dff-4c63-8c02-2cfc52294a38",
        "cursor": {
          "ref": "a79f000c-d320-46b3-b6b5-3e956799cb7a",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "2d297309-8390-4247-ab00-0595091ff13b"
        },
        "item": {
          "id": "e22aca1a-6dff-4c63-8c02-2cfc52294a38",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "19587b2b-8760-4574-9367-f6e8595491fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4b27553-a389-4644-86d4-aa36253edbd1",
        "cursor": {
          "ref": "ef3d278a-4f02-4d2a-84ff-04432f68cef2",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "58133dc7-2320-499d-8a6c-b8e84343d7df"
        },
        "item": {
          "id": "c4b27553-a389-4644-86d4-aa36253edbd1",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "d9da6d08-c7de-4ec1-a65d-c3800b4326f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10b2ed4d-9375-4408-ba8d-fad2b0b1c38b",
        "cursor": {
          "ref": "3d49fb88-ad2e-42b9-af7a-c816796aad21",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f043e00c-cbc6-4266-b836-9fabbd10fa63"
        },
        "item": {
          "id": "10b2ed4d-9375-4408-ba8d-fad2b0b1c38b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "80e027d1-6398-44fe-bef5-1e885b6f689e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6098ef1-fd81-4d98-bc19-4a6a1535ce52",
        "cursor": {
          "ref": "d577aee0-0810-4a45-89ae-dbfa8e51bd7c",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "4252c4ea-28b4-4196-9731-f4c94206fc40"
        },
        "item": {
          "id": "d6098ef1-fd81-4d98-bc19-4a6a1535ce52",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "07cd829f-8b84-487b-9a6b-4b02863737d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b118420-53c7-4fb6-9193-526adfd1bb3c",
        "cursor": {
          "ref": "53b8e038-d77b-4cbe-8e01-98e19b851a84",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "e497eacd-f63f-4b7c-8864-6fa5667290fc"
        },
        "item": {
          "id": "1b118420-53c7-4fb6-9193-526adfd1bb3c",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "0737a0c7-0e6d-4f42-982e-f82b84d53c80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd991798-639c-4562-89eb-f70e29bc6303",
        "cursor": {
          "ref": "76b79937-37d8-44f5-9301-3d0d4b4d0374",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "50e489cc-be2c-4523-9a5f-6d9856205bae"
        },
        "item": {
          "id": "bd991798-639c-4562-89eb-f70e29bc6303",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "cfff42be-1b29-4f9c-b758-2e70ee1bf301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68828174-beb3-44db-a308-6e4059e7b811",
        "cursor": {
          "ref": "4c8a67af-ce9e-4e8e-860b-27fff4157495",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "c8a7cf23-dbba-4310-8272-9443bdb26fb8"
        },
        "item": {
          "id": "68828174-beb3-44db-a308-6e4059e7b811",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "51ba49f6-56c0-4061-a685-4464fa785ba8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d92eca8-888a-4eeb-a930-84127a810ea7",
        "cursor": {
          "ref": "a03ce4f3-bfd7-4447-8aa8-8e8254b949c8",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "880a3397-630b-4840-9660-7b7b831f6be9"
        },
        "item": {
          "id": "1d92eca8-888a-4eeb-a930-84127a810ea7",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "4d9bc9e2-f3fa-4cfc-9af9-ebb06cd09200",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b68bc92-3221-46ea-9146-34bc0120a498",
        "cursor": {
          "ref": "f3cd3748-f9a3-4a7d-8e76-8e267b26f816",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d520e615-055c-416e-bea4-a056aaa7a38b"
        },
        "item": {
          "id": "6b68bc92-3221-46ea-9146-34bc0120a498",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "403a0421-1204-4f30-ac0f-ff3836a75fb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b208ca21-e60d-42c3-8095-9817429aa4e8",
        "cursor": {
          "ref": "dc23fdad-d5bc-4b95-8380-ed3eee08126c",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "9c6139ae-8b8d-4900-a454-dd745e60d391"
        },
        "item": {
          "id": "b208ca21-e60d-42c3-8095-9817429aa4e8",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "27a78c66-8026-42dd-b2d6-da1e432004f6",
          "status": "Created",
          "code": 201,
          "responseTime": 637,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "3c6cc59c-17ba-4cc0-b67f-3e2424bbf248",
        "cursor": {
          "ref": "8d02feeb-e264-4dc4-b2d8-7f0d7d2ecc6b",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "c5d13edc-2e72-42ab-aebb-b83cb1cc2154"
        },
        "item": {
          "id": "3c6cc59c-17ba-4cc0-b67f-3e2424bbf248",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "6c617466-5e7f-4a25-9c03-ad02d116d0ca",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "82e6d4d1-01a2-4280-bfd1-f2aebdcc7b54",
        "cursor": {
          "ref": "9f75d86c-f777-49b8-81c0-f2f3957d62b1",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "4d338f77-26fc-4d41-ac93-a3a89d243758"
        },
        "item": {
          "id": "82e6d4d1-01a2-4280-bfd1-f2aebdcc7b54",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "0b342969-e596-43e1-935a-a8549f1268b2",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "a012b773-7130-4942-ae9e-2762db10270d",
        "cursor": {
          "ref": "c4af4d5c-cca1-4e0b-8c1e-c0780c2c41dd",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "fb53fb5c-2271-40c6-a8d4-6e6151f6dcdc"
        },
        "item": {
          "id": "a012b773-7130-4942-ae9e-2762db10270d",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "adf643bd-05e0-4c64-9e6a-a4459f8c6e1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "747b9001-fe22-4174-994d-2f55e419983c",
        "cursor": {
          "ref": "ade8cebe-f8a4-498b-b10e-c26467e0f448",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "62eacd19-3106-4227-8cfa-94dd19949cb6"
        },
        "item": {
          "id": "747b9001-fe22-4174-994d-2f55e419983c",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "105e1664-d709-4d3c-9b56-c21dc6b89330",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "d73147de-4508-4bd1-a60b-12cfded9e71a",
        "cursor": {
          "ref": "4d74b908-569c-436e-9318-4195dfcff9b3",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "a9475a71-3c5b-4cd7-8f39-d28105590f4b"
        },
        "item": {
          "id": "d73147de-4508-4bd1-a60b-12cfded9e71a",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "e3189863-70d7-4d9f-b9de-2379dee8aef8",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "f41a585d-bf3d-4c76-b19f-8e03891ac07e",
        "cursor": {
          "ref": "82dc720b-2040-4f2a-9f9e-1368059f0d0c",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "8e2bcb4d-0817-4b9e-b2a0-815b4cdf9b19"
        },
        "item": {
          "id": "f41a585d-bf3d-4c76-b19f-8e03891ac07e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d15079c3-4c5f-4776-a9fc-9151fd72714f",
          "status": "Created",
          "code": 201,
          "responseTime": 376,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "09f418af-f1ec-4fe7-b474-f09ab78d1b2b",
        "cursor": {
          "ref": "2a44a74b-446b-4a04-8a15-87d412b46250",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "36699e1a-4a5f-402e-95e2-31d6ee234a82"
        },
        "item": {
          "id": "09f418af-f1ec-4fe7-b474-f09ab78d1b2b",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "a1979951-26f1-4901-b47f-61ff8b7b3584",
          "status": "Created",
          "code": 201,
          "responseTime": 360,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "6d8781b5-dd2b-4661-9481-d2e1dacbd9a5",
        "cursor": {
          "ref": "9fa7bcda-1eeb-4658-8cf9-ce464d07ca99",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "af27dc41-2cbe-4cbc-806c-e841fe463535"
        },
        "item": {
          "id": "6d8781b5-dd2b-4661-9481-d2e1dacbd9a5",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "ba9648c4-01f2-4962-8bbe-35fe9eb659aa",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "cd6e32fe-96ec-4b1f-ae2c-56d0d3722e42",
        "cursor": {
          "ref": "e5cd2a3f-7b30-4cc3-91b2-96ffee50f5d3",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "77602d9d-4708-4923-af3d-e217f19aaa7c"
        },
        "item": {
          "id": "cd6e32fe-96ec-4b1f-ae2c-56d0d3722e42",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "7bbc9e9a-08c0-48e1-94af-8e8aebbeb352",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "7584d9be-9673-468f-a3f1-405ac1e90f69",
        "cursor": {
          "ref": "07ed0d1a-dff7-46c8-a737-1ce017eb2378",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "548d8625-b000-468d-b10c-0b6e35086b5e"
        },
        "item": {
          "id": "7584d9be-9673-468f-a3f1-405ac1e90f69",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "47205148-9f90-4081-9c21-0a48a8caeecc",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "cf3c6b33-4f49-4d51-bc7a-e6e72721b0d2",
        "cursor": {
          "ref": "ba4ed57a-2273-4341-b661-3a1b1c24d352",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b9b9c727-b7cb-41c4-8f02-c09cc5b3a595"
        },
        "item": {
          "id": "cf3c6b33-4f49-4d51-bc7a-e6e72721b0d2",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "025ee830-4217-4065-838e-f2afc1a973de",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "221134b5-69b7-409c-bce3-6986653e4780",
        "cursor": {
          "ref": "4fa8a3ec-eb76-4113-bb2d-da3ee460fdf9",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "23fffe9e-ba15-4d1f-91bf-d40e3f11026d"
        },
        "item": {
          "id": "221134b5-69b7-409c-bce3-6986653e4780",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "615f8ad8-90dd-4d9b-a0fb-69761f108e26",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "19bab173-d96c-4cc0-b113-db72a7d44781",
        "cursor": {
          "ref": "39258d96-aad8-4d73-a01c-9eac7bd230ae",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "775c6c6a-f3f7-44b8-9483-e713590d7e76"
        },
        "item": {
          "id": "19bab173-d96c-4cc0-b113-db72a7d44781",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "ea3e6ab9-3bd2-4c73-b8f4-f8524f2e71f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12fa11ff-7a47-4aab-891b-670912f18107",
        "cursor": {
          "ref": "bd14a9cb-75e2-4283-9f11-afecffa8a8c9",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "8e11324e-91de-42bf-bd14-fb888d899a22"
        },
        "item": {
          "id": "12fa11ff-7a47-4aab-891b-670912f18107",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "e5361693-3884-4600-ba1c-9bf205604f4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a79625b9-21eb-4d71-974a-d3e328df399a",
        "cursor": {
          "ref": "74ffabeb-0e83-4d61-9d53-8f9bc8750106",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "28c7ccc9-5fc9-453a-a5fb-77f9af4e8472"
        },
        "item": {
          "id": "a79625b9-21eb-4d71-974a-d3e328df399a",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "0e9af3c6-117e-4803-82d5-2cc19f1a1c68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3775a411-722a-4132-99be-934fe09a9143",
        "cursor": {
          "ref": "0cdf4a66-ce7f-4c04-a531-4338a10ae2c4",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "77d22545-b34b-4b53-94fd-d89a08f3206e"
        },
        "item": {
          "id": "3775a411-722a-4132-99be-934fe09a9143",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "a797fa2b-1d81-4311-b620-0f10f74c37b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e06d26d9-f4a2-4d14-8b08-c7c58e027c2f",
        "cursor": {
          "ref": "f2b665f0-4eb8-4edb-98fb-2a8a27b4364b",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "678d5975-e61e-4110-b87c-38cbc68a752b"
        },
        "item": {
          "id": "e06d26d9-f4a2-4d14-8b08-c7c58e027c2f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "8954565c-8dd5-4f02-9e3e-a22e8f467d44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "692c4c99-ed29-4b4f-8bae-423b86851a12",
        "cursor": {
          "ref": "0b1c7e14-b636-4fa9-93e1-2ecb176e6119",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "bdd50bbd-1336-483c-8150-7221a3bc0536"
        },
        "item": {
          "id": "692c4c99-ed29-4b4f-8bae-423b86851a12",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "795efa25-2f35-44ea-aa21-dbeffdd7c0d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71eb2b8d-edae-4b36-adf6-dd2bfc72454f",
        "cursor": {
          "ref": "50a4fb17-f54c-424e-a587-be90b597dcdc",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "32dae60b-61e3-435c-8283-0713c242b6c8"
        },
        "item": {
          "id": "71eb2b8d-edae-4b36-adf6-dd2bfc72454f",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "711160ad-3fad-4465-8ec9-00da042a6da0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b87a1c95-ea87-460a-bf8c-a9171e64aeb1",
        "cursor": {
          "ref": "b6a5cebd-5856-4527-bf67-39c6e9830a1a",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "77a2819e-fe61-4840-b1a8-a1d41fb3308a"
        },
        "item": {
          "id": "b87a1c95-ea87-460a-bf8c-a9171e64aeb1",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "5da80280-0d7e-4125-b51e-2692dd8aea59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a1fd7e8-d856-4520-8027-dc75be5247ab",
        "cursor": {
          "ref": "c9d772d9-3aae-49fe-81ec-de16210610b9",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "61ab9b2f-73cb-46cf-9735-77b5613620da"
        },
        "item": {
          "id": "4a1fd7e8-d856-4520-8027-dc75be5247ab",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "4c63cfd0-8a41-45f3-a5c0-0a236630e9ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0865b67-0cf1-415d-b2d7-32bdc9c956b4",
        "cursor": {
          "ref": "ccef2815-d67a-41a7-8e8c-d9ff6cffbab1",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "216d25b4-1213-42cc-a5d0-092590ed81e1"
        },
        "item": {
          "id": "b0865b67-0cf1-415d-b2d7-32bdc9c956b4",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "00597a7a-4c1a-40a7-b90a-91bcd1a3c5e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf802917-9e7c-478b-95b3-1b8a41fb8069",
        "cursor": {
          "ref": "6ec700cf-22de-47b5-8c07-6f1c264420fa",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "a2c1f6d3-db72-4828-a223-2efb293e8474"
        },
        "item": {
          "id": "cf802917-9e7c-478b-95b3-1b8a41fb8069",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "27b350e2-88f1-4188-ae7f-baa3cdf8e696",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62c83a3d-56cc-4687-b518-6a2472acf81a",
        "cursor": {
          "ref": "ceb428a5-ec98-4bd7-a541-52b9413c64bf",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "df6e0a6a-084e-46ef-a5e0-4c1dff501a9c"
        },
        "item": {
          "id": "62c83a3d-56cc-4687-b518-6a2472acf81a",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "840c71e8-4edc-4f2b-94cb-22ee011e69a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d5a6f63-8305-4130-b591-109d278f5472",
        "cursor": {
          "ref": "f84ff5f8-d044-4010-ac9c-0ac2cd4b76c7",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "c50dae4f-ee1d-491c-82db-c422e2b546e6"
        },
        "item": {
          "id": "9d5a6f63-8305-4130-b591-109d278f5472",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "8babde29-335b-4ac5-8c01-5653d7038103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93682274-b969-4eb0-b5ec-72c73628c457",
        "cursor": {
          "ref": "75c77a93-da67-496d-9d32-3b61cad468c2",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "09e2f537-37f0-4a99-a667-b771dddfcc72"
        },
        "item": {
          "id": "93682274-b969-4eb0-b5ec-72c73628c457",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "a78cf29b-f1b2-4176-9d96-6ae197be8e2d",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "7e62535d-dd22-411a-b8bf-23bb3fcbfc7d",
        "cursor": {
          "ref": "8a9e30ac-b544-4350-8cc0-6b8d13532c2c",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "425da0f5-3113-4cb2-8cf1-5b3507c4ab9c"
        },
        "item": {
          "id": "7e62535d-dd22-411a-b8bf-23bb3fcbfc7d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "4531666e-ce3d-4442-a63f-9e87d5e8cd06",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "7475058d-3743-4d8e-9526-114bcb8315e7",
        "cursor": {
          "ref": "cf5fa741-396c-4a40-b4f2-254548edd1a7",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "3b254bb2-a40f-49f8-b544-96a1d9218032"
        },
        "item": {
          "id": "7475058d-3743-4d8e-9526-114bcb8315e7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "2c6ccc1b-609f-4420-9d39-4e3a8fe919eb",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "ef9591a9-2547-472c-b029-34f5b6a4ea06",
        "cursor": {
          "ref": "e8948613-8725-4fd0-9cec-2307ca294132",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "a9baa891-62ca-4a38-963d-7bdc0fadd2a2"
        },
        "item": {
          "id": "ef9591a9-2547-472c-b029-34f5b6a4ea06",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "941efc17-cc8e-4dcb-8fd8-b62e3f147c8c",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "950b04ec-8315-474f-92c4-bece1dd8574c",
        "cursor": {
          "ref": "69651fec-eb78-4889-afc2-4778e839cf8c",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "c241bdb8-7651-453c-b909-f35a108209ba"
        },
        "item": {
          "id": "950b04ec-8315-474f-92c4-bece1dd8574c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "09e8419d-3d36-48ea-8f57-b50d1c7c12ee",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "b06cb7c6-b100-407e-8a9e-b6202e3016a5",
        "cursor": {
          "ref": "4a64850d-989f-483c-8317-a7886b0ff8f2",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "7344e567-ecd7-4cde-9f8a-7a0aa6769d43"
        },
        "item": {
          "id": "b06cb7c6-b100-407e-8a9e-b6202e3016a5",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "8c6f9d1e-6ba0-4c48-bc44-c6d3ec7fc423",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "160d04b3-b968-43c6-b78a-e9736f8cbe0a",
        "cursor": {
          "ref": "db114ace-a426-440a-ae1e-3350be661563",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "b7eec113-d6e8-4352-84f0-5e106bfbe238"
        },
        "item": {
          "id": "160d04b3-b968-43c6-b78a-e9736f8cbe0a",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "caac957e-3667-4e4e-8fb4-0491e2103e1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bf83c2d-135a-4c81-ae66-432151fe1aa4",
        "cursor": {
          "ref": "63e97237-aefe-4141-b320-001ce2ed402b",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "09168616-eaa0-43a3-8897-26f17d9c53ec"
        },
        "item": {
          "id": "7bf83c2d-135a-4c81-ae66-432151fe1aa4",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "38fdb8b3-b3c1-40ed-a444-8e3b8ce2614d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bc20f43-2392-470f-9198-4e43d94460ff",
        "cursor": {
          "ref": "9f59c98b-a200-40c5-9e60-58247746a626",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "dc704201-487e-4df5-bdfa-926c7c69eb51"
        },
        "item": {
          "id": "3bc20f43-2392-470f-9198-4e43d94460ff",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "189ab5d9-5b99-4884-8730-fbb4fb1a2bc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc0ff827-d01c-47e5-87d5-f0c71b85869f",
        "cursor": {
          "ref": "4dfdead5-75bf-4238-902b-c7665aa80618",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "a331266a-72b5-4b99-b84d-fc3de5ea157e"
        },
        "item": {
          "id": "dc0ff827-d01c-47e5-87d5-f0c71b85869f",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "fa796946-c09b-4bcd-aceb-5b16de007afa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a9130b4-a6b2-448a-86a7-191ee41a182a",
        "cursor": {
          "ref": "375bb288-354a-4f33-9e69-8387ae4682b5",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "c9144970-02ad-483d-a72c-b2c4e6777964"
        },
        "item": {
          "id": "6a9130b4-a6b2-448a-86a7-191ee41a182a",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "bf4ef83a-373d-4f83-be73-4b33d96ca0bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15a783b6-a8c2-41fb-842d-3c794000501c",
        "cursor": {
          "ref": "4d458b36-2e40-46dd-9b50-656b28b01a18",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "462e26cb-fa24-4bc5-8672-bc84a65fed04"
        },
        "item": {
          "id": "15a783b6-a8c2-41fb-842d-3c794000501c",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "50fafdac-5501-4062-a73b-e935cd0a18e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f547415-c0ef-452f-a83c-8774e02b72fb",
        "cursor": {
          "ref": "d0ae09ec-55ad-4912-a212-f6e92b2b2978",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "ec7ee1c1-c1e2-4596-9126-b370cfade762"
        },
        "item": {
          "id": "0f547415-c0ef-452f-a83c-8774e02b72fb",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "561f69ce-6995-4898-937d-14308c16a55e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59866502-18d7-4dc3-b35e-d49234f97827",
        "cursor": {
          "ref": "3fe66021-6bae-45f8-bf84-58fbb335e82f",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "1943d1e7-c62b-4643-9f70-736a3761a838"
        },
        "item": {
          "id": "59866502-18d7-4dc3-b35e-d49234f97827",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "4c76fa24-541d-4df2-b9ae-a63510e3e5f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b676e979-5ba5-4b97-8ed9-bf7be13b70fe",
        "cursor": {
          "ref": "eb87a203-5233-4426-89a6-d265abd72923",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f8cc5086-2163-4dac-8b16-5006fb4165c0"
        },
        "item": {
          "id": "b676e979-5ba5-4b97-8ed9-bf7be13b70fe",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "aba51c76-011b-4ed5-aa1d-986959806441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f6f7720-4fe6-4a3a-94a8-2d9ea30873b5",
        "cursor": {
          "ref": "b060057c-32ea-4177-88ee-1ca8c1f97f0b",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "0ae654a6-d2f5-47b7-94e5-f933ee24524d"
        },
        "item": {
          "id": "9f6f7720-4fe6-4a3a-94a8-2d9ea30873b5",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "9785900e-ead7-4696-9d7e-ae75f83ee9be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d54fdbd4-1b2f-4acf-9ce2-683a8a2a7238",
        "cursor": {
          "ref": "6011e5e6-9232-477d-878c-b0c6068d3e6d",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "1e123210-da37-4b4f-89c4-7e9b5529d135"
        },
        "item": {
          "id": "d54fdbd4-1b2f-4acf-9ce2-683a8a2a7238",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "70f1a3ef-6e93-4433-988b-b503fa9418bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8321a039-adb6-43a1-ad90-f0f84cb5b626",
        "cursor": {
          "ref": "72699980-8ba7-4fcd-8ab9-7cc63a57beb0",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "0502082a-605f-4eef-be4b-903258eccf03"
        },
        "item": {
          "id": "8321a039-adb6-43a1-ad90-f0f84cb5b626",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "27483c7e-d2ab-4977-aa34-6e2c35353305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8f9e1ff-2aa7-4920-9b80-8d6d1b555ee2",
        "cursor": {
          "ref": "0dbbd118-cd2a-4427-818e-298be326904f",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "1a93cc60-59a7-4e09-a636-18a6132d0f05"
        },
        "item": {
          "id": "e8f9e1ff-2aa7-4920-9b80-8d6d1b555ee2",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "e127f32d-100a-46b0-8964-dddfd08e033d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6dc990b-4081-42aa-b98b-9405a953d1b8",
        "cursor": {
          "ref": "2a8d2527-4303-4a24-b062-eaeb17c2690f",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "4b3e5f9a-8025-4791-81a8-d269e459a1d3"
        },
        "item": {
          "id": "f6dc990b-4081-42aa-b98b-9405a953d1b8",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ddcdb31f-3890-4094-9b6b-338c6cb1fef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f43f804a-eb69-45f0-a823-c7ca15834faa",
        "cursor": {
          "ref": "e3b5c90c-b9b0-4860-9642-b149bb5c939f",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "c29bcac8-a5f0-413a-9949-cd8f74030d7e"
        },
        "item": {
          "id": "f43f804a-eb69-45f0-a823-c7ca15834faa",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f74e2782-02ba-419e-9209-533e27489706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86854b3f-14a6-4f3f-8dbb-cee50ae8406d",
        "cursor": {
          "ref": "10704eb4-18d2-4091-af42-96a24bed5f0d",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "81059391-983c-4270-8eea-6e0a4f9638f5"
        },
        "item": {
          "id": "86854b3f-14a6-4f3f-8dbb-cee50ae8406d",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "a3d2e3c6-1b44-4592-9c8b-49a81d6915fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7422ffe-6429-438c-9404-6ea00a9d64d5",
        "cursor": {
          "ref": "ab2dd470-fe8a-4789-bd2f-ae4af10d06a8",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "44bda277-335f-47fe-bda6-036ffaad2090"
        },
        "item": {
          "id": "d7422ffe-6429-438c-9404-6ea00a9d64d5",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "d2a02a4a-ffc2-494e-8858-9ff937b46fbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20c11202-c437-4b21-be76-2402511920d1",
        "cursor": {
          "ref": "e67ce002-48e2-4d8a-8fce-42b0d1025d95",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "d8508bfc-b1c2-4f04-aa4d-76c9e7232279"
        },
        "item": {
          "id": "20c11202-c437-4b21-be76-2402511920d1",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "57314667-9ae0-478e-bb2c-ee314e37ca82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6c4057e-4e06-4e6a-92c6-aa10627307bf",
        "cursor": {
          "ref": "56e3d0f0-2464-48cf-90ab-364defb49a7c",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "a52b76aa-64f8-4cee-89de-eb4f359ee44b"
        },
        "item": {
          "id": "d6c4057e-4e06-4e6a-92c6-aa10627307bf",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "6c54dc9e-e748-431e-b9e9-d09de402d3be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "305eea3b-29df-4477-b7d8-608a68431e33",
        "cursor": {
          "ref": "2d7eded3-921c-44b5-bb09-82e506a1c0e3",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "5865d28c-5bd3-4ef0-83e0-87a1a68dd9cb"
        },
        "item": {
          "id": "305eea3b-29df-4477-b7d8-608a68431e33",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "b84ea81b-8556-46d1-81b9-65ff34028b81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b1ba5f8-f229-4fb0-abc2-2f40562dfa9d",
        "cursor": {
          "ref": "76ce4734-ff11-437f-89bd-e8232a024963",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "d4fcb216-eec2-4cce-8ae7-9c2086f77318"
        },
        "item": {
          "id": "7b1ba5f8-f229-4fb0-abc2-2f40562dfa9d",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "fa1aeabe-f311-47e0-acae-2780074a77ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0554697d-be36-4a62-b3e6-a6898e461bf4",
        "cursor": {
          "ref": "34eb0b57-977a-45ce-b1a7-501d4703912c",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5abe2ad2-0b73-4506-8c4c-f1ff5e91b193"
        },
        "item": {
          "id": "0554697d-be36-4a62-b3e6-a6898e461bf4",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "ad020a33-0320-47e0-be65-71e7099737ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bd196d8-0184-41b5-aff5-95ba609e0388",
        "cursor": {
          "ref": "dfcfa32b-cb55-4ac3-80a8-5ed6de2a668a",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "d9409ab5-75d0-46c8-871f-145840773890"
        },
        "item": {
          "id": "6bd196d8-0184-41b5-aff5-95ba609e0388",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "f4a21dc0-8dab-4fe4-a89c-d1983b9ec856",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4596f2d9-64e1-4281-86c2-6297cd436630",
        "cursor": {
          "ref": "0d61e0ff-459b-4c68-b124-88ef40948783",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "c77a4a3b-6461-49ff-ab54-4937a9c611ae"
        },
        "item": {
          "id": "4596f2d9-64e1-4281-86c2-6297cd436630",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "f5a8ffc9-1b2f-4694-b948-60b5e9f76f8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a563c41e-a42b-41d4-b3b2-68570e91b5a1",
        "cursor": {
          "ref": "2bd2cac1-9876-4a80-9aca-a38e674abca5",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "64eedfd6-3621-475f-93dc-d0e197b32a0a"
        },
        "item": {
          "id": "a563c41e-a42b-41d4-b3b2-68570e91b5a1",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "aa8ba788-1188-4e0a-a06c-aa46508ee341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb3990fd-7aeb-4fb6-b2b2-e433e878d9b0",
        "cursor": {
          "ref": "306f2254-1750-4a97-a02a-2d60a2ebeb61",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "d635c4ce-da76-4b19-b18e-cec3a8da1bef"
        },
        "item": {
          "id": "eb3990fd-7aeb-4fb6-b2b2-e433e878d9b0",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "4165325b-a6f4-4625-9433-34be3bcb5a28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ebb77d-0539-48ea-95dc-aef1dd4de5fe",
        "cursor": {
          "ref": "d733a826-d631-4e4e-8cf1-8f6507ed06b7",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "28356031-11f7-4c73-adc4-4baefcfa4ec2"
        },
        "item": {
          "id": "c6ebb77d-0539-48ea-95dc-aef1dd4de5fe",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "6ee530d5-920e-4dd8-94da-7af878099066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e8bdfe4-0251-4ea5-9d47-c02b2ba59ce5",
        "cursor": {
          "ref": "fc887ea8-23e6-4a59-96ab-8ab8e80301ae",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "d07cb2e0-1b9a-41b2-84fc-9046d73d321d"
        },
        "item": {
          "id": "8e8bdfe4-0251-4ea5-9d47-c02b2ba59ce5",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "35c5ed6a-0077-463f-b323-7c1f5ef17695",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af22fc02-5c0b-484e-9756-f0b4102310eb",
        "cursor": {
          "ref": "fb7d046e-9744-4bae-a723-bc0ed863b6a2",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "de777d78-24d3-4de9-9205-9b2f3e4c34f9"
        },
        "item": {
          "id": "af22fc02-5c0b-484e-9756-f0b4102310eb",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "26bcd2c4-cd2b-45d9-a907-e77ed8720e6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc0ed6d9-84d0-4705-b4c1-7d506f60a4db",
        "cursor": {
          "ref": "cc198daf-6513-45f5-bd95-083eac4f9518",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "ba6a5bec-45fa-4032-8fae-02bcd632cd60"
        },
        "item": {
          "id": "fc0ed6d9-84d0-4705-b4c1-7d506f60a4db",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "71cad81c-99e5-489b-9023-49a29c441ecb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7448aa2e-134a-46dc-8700-5b5cb911a7bd",
        "cursor": {
          "ref": "6b6d64db-6792-475e-8c4c-6600b6c9e56b",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "5ce86f55-bce0-45fa-9ea4-063b6f6eddd4"
        },
        "item": {
          "id": "7448aa2e-134a-46dc-8700-5b5cb911a7bd",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "a4b42d76-3f5d-4624-8011-d7b2110da34d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ad16e5e-c08f-4cb7-8cee-63a1bc252063",
        "cursor": {
          "ref": "73005762-4209-482a-a00a-9fb7222e182f",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "1789d364-9fd1-41e2-9206-16a45a6c16a4"
        },
        "item": {
          "id": "2ad16e5e-c08f-4cb7-8cee-63a1bc252063",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "1a52f306-eb50-4071-8725-9e1e465ba8cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "36ce2de3-4207-4ff9-af55-784162237ed4",
        "cursor": {
          "ref": "4244aee5-d4ac-49d7-843c-fc9ccc694815",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "3257ca4f-2296-4b02-a033-d484a9ace428"
        },
        "item": {
          "id": "36ce2de3-4207-4ff9-af55-784162237ed4",
          "name": "credentials_issue"
        },
        "response": {
          "id": "8635f1e4-cb2b-42ee-bd7c-3567b01d3e19",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1f25976-25c9-47c1-a604-5de510b7f7a7",
        "cursor": {
          "ref": "5de4dbf2-216c-4a9a-bd1b-52c3ba0e7db1",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "4543b027-21c6-4f9f-8c76-60882ecd4ba7"
        },
        "item": {
          "id": "c1f25976-25c9-47c1-a604-5de510b7f7a7",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "df912d65-38a1-474a-b67d-1ce73a426d8e",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5931fc33-3757-46d5-ba98-418c63510e2b",
        "cursor": {
          "ref": "9d1c7152-cffe-4bcd-9284-af057c430016",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "77771b97-e220-40a0-b218-927320c77605"
        },
        "item": {
          "id": "5931fc33-3757-46d5-ba98-418c63510e2b",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "c532566c-5914-469c-957c-8ff65230cc64",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d02e7426-82d3-4087-9467-8a2cfed35146",
        "cursor": {
          "ref": "b399db9f-79f6-41b6-968b-9d6d57b61a81",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "80fc7db3-be90-4472-b546-6b39080c4d50"
        },
        "item": {
          "id": "d02e7426-82d3-4087-9467-8a2cfed35146",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "5dc8189d-ce03-464c-a787-4bb4b0ae1082",
          "status": "Created",
          "code": 201,
          "responseTime": 370,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "293631e7-91b4-4b90-96c3-66c0f649be2b",
        "cursor": {
          "ref": "8fdb9c46-9c87-4fc2-b9a4-4a524ef86561",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e3cbd711-1f86-45d2-a558-f09826c065e4"
        },
        "item": {
          "id": "293631e7-91b4-4b90-96c3-66c0f649be2b",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "13f9ba70-a8ee-44e6-8568-c8e071f6a9da",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-10-22T00:36:27.759Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-10-22T00:36:27.759Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "1dd28318-ebfa-45a3-8ad8-9422270efbcc",
        "cursor": {
          "ref": "f8c87688-4891-4896-a233-7f41f0e1130f",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "7574c697-fd75-4102-a3a9-d5660c6ac4b4"
        },
        "item": {
          "id": "1dd28318-ebfa-45a3-8ad8-9422270efbcc",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "4ca54855-7e10-42ac-b120-5a053fea8ddb",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f5a1b89-59ea-4713-b79d-cf5d530c27b2",
        "cursor": {
          "ref": "b8991767-284a-42c0-ad70-c21f6142e1c5",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "ea70371e-9017-4e4d-80bd-b97e021897a3"
        },
        "item": {
          "id": "1f5a1b89-59ea-4713-b79d-cf5d530c27b2",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "40f3505a-2875-4cb1-b86f-5120534416d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "391e05ac-de22-4677-957b-dd2c94c32dcc",
        "cursor": {
          "ref": "3620a5dc-7b57-4e08-b6aa-4aa557ed0672",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "e85e8b26-55c5-441d-a94d-ce85e6b83fef"
        },
        "item": {
          "id": "391e05ac-de22-4677-957b-dd2c94c32dcc",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "3693ef94-7f72-414d-819e-eceb211324ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da6f473d-e06d-4d5c-a75f-3bdfe2e8367e",
        "cursor": {
          "ref": "a646367a-314e-477a-aab8-9d586d7f62ef",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "96766ebc-0123-4e4d-9bbe-c101d9429cd0"
        },
        "item": {
          "id": "da6f473d-e06d-4d5c-a75f-3bdfe2e8367e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "9f359a1b-0ee5-48d6-bfeb-9aa8c2d6e549",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e9d1149-819e-4542-8100-36ace1f3dc6d",
        "cursor": {
          "ref": "5fec9220-2249-449c-9d24-c858d1775c80",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a825ace8-eb7c-488a-ae5c-75feefb2a715"
        },
        "item": {
          "id": "7e9d1149-819e-4542-8100-36ace1f3dc6d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "cf579395-e818-4593-9d79-ab56d5624759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faeac491-e60f-428a-8735-0b8ceaaeecdf",
        "cursor": {
          "ref": "d82c425c-e927-4e14-9776-78a3007755dd",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "df602e60-f782-45a1-bd22-3a6c083f929f"
        },
        "item": {
          "id": "faeac491-e60f-428a-8735-0b8ceaaeecdf",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "85f00078-9337-4c38-bfc9-b8509d7c53f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85ca53e7-720e-4383-bc91-476f72d8c86d",
        "cursor": {
          "ref": "c1a6c6bd-849e-4bb2-ae85-11fa7cb5ed04",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f6b513b2-30e1-4941-8860-f08c01227903"
        },
        "item": {
          "id": "85ca53e7-720e-4383-bc91-476f72d8c86d",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c2779db6-3963-4746-b24c-3f04a331a5f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29c321f0-c022-4620-b994-b8e905832af8",
        "cursor": {
          "ref": "b6682804-c586-4b59-9245-6d8c5e0685ba",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "9570f81f-9ee3-4a0e-b078-964add379f80"
        },
        "item": {
          "id": "29c321f0-c022-4620-b994-b8e905832af8",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "058e637c-577e-42b6-b5d4-ac3da0b17c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4317f606-1ae5-4ea0-8e57-e7ac08bbd6b9",
        "cursor": {
          "ref": "e814f557-f176-4215-9553-86c01a8a8725",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "e8e3346c-a276-4e91-94db-ad309a871ddd"
        },
        "item": {
          "id": "4317f606-1ae5-4ea0-8e57-e7ac08bbd6b9",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4dc68ff9-f39b-4b05-a767-33d5df565a16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f30736fb-06a2-4557-b9cb-b2d6b75ce439",
        "cursor": {
          "ref": "d56df726-a242-483d-a9d1-bbdfa78598c0",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "0af38a67-5df5-421d-85f2-477fb1890a1a"
        },
        "item": {
          "id": "f30736fb-06a2-4557-b9cb-b2d6b75ce439",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "3b86f66a-7e10-49f4-9194-6a0e6c7a1451",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50d334d9-f925-4d99-a243-b4e97f66e8f1",
        "cursor": {
          "ref": "cb349e3e-38d5-4c25-9340-08917fe6124a",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d0f7c2a1-7232-4f67-9ee6-64c66a6d2cf6"
        },
        "item": {
          "id": "50d334d9-f925-4d99-a243-b4e97f66e8f1",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "017221b2-e53f-46d1-abe0-93d6fb7dea90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f538908-a475-4cee-9255-46a68757ac83",
        "cursor": {
          "ref": "53ec4093-b876-4253-ab86-3583f6e44ee9",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "c6fe6cac-9fde-47fd-b4c0-edba381e4ecc"
        },
        "item": {
          "id": "0f538908-a475-4cee-9255-46a68757ac83",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6e9cec20-3f5d-4ce3-948e-e84e067d8724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0802087-23fb-4cc8-a871-e3823fff0e14",
        "cursor": {
          "ref": "4e6745a0-b2e7-483c-89ce-04478f762d14",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "dbedef5e-0a86-4fab-ae3b-466dc0de53ed"
        },
        "item": {
          "id": "a0802087-23fb-4cc8-a871-e3823fff0e14",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "70b76763-7df0-490a-b331-15d8bbc47e3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fd26728-5e53-46c2-9c74-c1f6ac1a82bc",
        "cursor": {
          "ref": "45f2fd07-92f1-4d17-83f9-a4a697ecb2d2",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "4ca2ae1a-e3f4-47db-8600-8aa3e4997e5b"
        },
        "item": {
          "id": "8fd26728-5e53-46c2-9c74-c1f6ac1a82bc",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "2ec04c0a-dd63-40c5-8479-d84b103e5a01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "187f99db-6002-40ef-b377-0457a164c2e0",
        "cursor": {
          "ref": "e1a6168d-a7e1-495a-bd1a-f9b56573eb8a",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "e7c57e76-98b3-40eb-8b0f-e0aaefe77888"
        },
        "item": {
          "id": "187f99db-6002-40ef-b377-0457a164c2e0",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "e11716ab-8d18-4982-8e32-e940ce51f770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcd81126-cca3-4a83-ba6a-4dcb731855fc",
        "cursor": {
          "ref": "ade2c7c7-7a27-42c5-bc22-f971e8210102",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "f58dfb45-a26e-4ae2-b0f8-0543d1bc18ca"
        },
        "item": {
          "id": "dcd81126-cca3-4a83-ba6a-4dcb731855fc",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2bc2733e-aa70-4e55-8368-9b7dfd65f458",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a246a8e8-6a02-4594-b703-8cde45150c8c",
        "cursor": {
          "ref": "cbbccf27-f88a-4c3b-8c58-e9abec45258a",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "a1496b16-a5ac-42e7-b6e8-458fef309605"
        },
        "item": {
          "id": "a246a8e8-6a02-4594-b703-8cde45150c8c",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "33ad1086-2c17-4f27-be16-f9a606dcfd3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55d442f5-84c7-4166-bae0-ed356c90ce94",
        "cursor": {
          "ref": "be7eb400-0379-459e-ae5c-f4a78f3eef5b",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "3d530790-4561-46e1-ac67-0722adfcc0ca"
        },
        "item": {
          "id": "55d442f5-84c7-4166-bae0-ed356c90ce94",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c43b2528-66e1-4500-88cb-545a9ef7fdb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "311896c9-532a-46c1-9d1b-d165342c1bd5",
        "cursor": {
          "ref": "0b57b543-06e0-4d10-ada9-291ab40c435f",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "d0875909-bdcb-47a8-85eb-3ff0a4e69432"
        },
        "item": {
          "id": "311896c9-532a-46c1-9d1b-d165342c1bd5",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c94df2e4-24bd-471d-9571-dc7499838d7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7f69a0f-c2d2-4631-a752-71cbce488005",
        "cursor": {
          "ref": "0be8ca11-53b0-4a57-8471-26631baf3d41",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "228c5046-a808-4022-ae61-e54d20d4d1c7"
        },
        "item": {
          "id": "c7f69a0f-c2d2-4631-a752-71cbce488005",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "26da5bb0-637d-46ea-abc9-77d76374cc9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0f52ac2-c6d8-4b0b-993e-6aace681c9c7",
        "cursor": {
          "ref": "dc56d485-504b-4acf-9670-e33d207d9684",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "e835d5f1-2b60-4492-83b4-2b93af2cbcbd"
        },
        "item": {
          "id": "e0f52ac2-c6d8-4b0b-993e-6aace681c9c7",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "7658c3fe-2a8a-4c3d-be4c-69251d8a8ba2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "516f57ac-d912-4132-8002-a87c2734b4a9",
        "cursor": {
          "ref": "3d8794ef-ea8c-48aa-9b03-e778658318ed",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "424d23c0-c1e4-4af8-8edd-a430493f4bea"
        },
        "item": {
          "id": "516f57ac-d912-4132-8002-a87c2734b4a9",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "8ece2dea-79e7-40f9-81b4-1f57b4e0918a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5a4ad6c-deda-4e7f-972b-b7e6343adba9",
        "cursor": {
          "ref": "b7278910-22cd-4860-8f42-88deeaced818",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "5fc0e7a1-943d-4516-b3d4-52d47c0f7e81"
        },
        "item": {
          "id": "f5a4ad6c-deda-4e7f-972b-b7e6343adba9",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ded10fa9-ff2c-4b4b-938b-7786d44666a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9b11fa7-05ea-460b-8aca-0f19a9049002",
        "cursor": {
          "ref": "f5840c10-696b-4490-a67e-74d0e8cf5145",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "be4f791a-6751-42d4-afc4-cdb61aa273bd"
        },
        "item": {
          "id": "a9b11fa7-05ea-460b-8aca-0f19a9049002",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "71b4bff1-4922-400a-88e0-41952a73da86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bccaa32-eed5-443e-96cb-38f85b66e378",
        "cursor": {
          "ref": "c5fec12d-06c5-4d7a-8f30-ad2ccdc28338",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "b243bea9-7160-44d4-acb7-7df309666592"
        },
        "item": {
          "id": "1bccaa32-eed5-443e-96cb-38f85b66e378",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4aceaf15-411d-4ba5-bb6b-c525139b5d3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f48182b4-5188-40ae-81bf-0f01be962148",
        "cursor": {
          "ref": "de45ad75-b85b-4814-bfc9-ded6cba439d7",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "b67db8dd-8691-496c-a7f0-18dbdc994e9b"
        },
        "item": {
          "id": "f48182b4-5188-40ae-81bf-0f01be962148",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c657718f-191f-45ea-92df-6c7b8dd5289a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b4fc95a-f165-4499-bf0a-a67740060931",
        "cursor": {
          "ref": "4d8be751-93a7-4085-86d0-49cb57fce9b0",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "9ad5a5ea-e0f2-4ae6-a547-250fcc1f93e2"
        },
        "item": {
          "id": "7b4fc95a-f165-4499-bf0a-a67740060931",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "dcef367c-a0f2-495f-956a-9cf59c599855",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af0e17ab-f8a4-4e09-a5a1-e07a719e48af",
        "cursor": {
          "ref": "f5291bd6-0594-4fc0-a91b-14857c0c1d23",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c34a66ff-0db5-4794-925d-7759b832bf2b"
        },
        "item": {
          "id": "af0e17ab-f8a4-4e09-a5a1-e07a719e48af",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "3ffabcf2-39a5-4220-9602-f021eae726c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbf837f3-f554-4dbc-afb1-20d04d053e04",
        "cursor": {
          "ref": "ab435249-b0dc-4a69-a0c6-08f377c28d99",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "2bb1d85b-7c34-4799-aea4-e99acb54aa1c"
        },
        "item": {
          "id": "cbf837f3-f554-4dbc-afb1-20d04d053e04",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "e347bcbf-b0fd-4776-b955-ec6a8bcdcd4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1397d83-bc2a-41ac-b89c-bf5ebcc2caf2",
        "cursor": {
          "ref": "12895107-00db-4353-a80b-593fab86b8a2",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "6a061d8e-52ef-471f-84c3-9b7e9942e122"
        },
        "item": {
          "id": "c1397d83-bc2a-41ac-b89c-bf5ebcc2caf2",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7e892b02-ac58-460d-b977-9ff1ce977373",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "062e3333-ee1f-4b33-b65f-c53a348e6e63",
        "cursor": {
          "ref": "4c539959-97bb-45b5-9aa5-ea1c3d53ccdb",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "659bbd3c-3e40-4e06-be92-638897c4c068"
        },
        "item": {
          "id": "062e3333-ee1f-4b33-b65f-c53a348e6e63",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "737b124c-2356-44a6-a858-a9c83457e100",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7c52efd-b856-4989-b96a-ac15f323f8b6",
        "cursor": {
          "ref": "948de822-9392-4c8c-a28b-1d4fae4cdb68",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "6e83b90b-4308-4938-82e8-871245300cd0"
        },
        "item": {
          "id": "d7c52efd-b856-4989-b96a-ac15f323f8b6",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "22961bbe-a255-4ccd-8715-fda490938204",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29460336-7d30-4810-af06-def9d9a299a5",
        "cursor": {
          "ref": "e21157a1-6ca1-4915-922b-18d5dbd2b332",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "6ff9daba-69bc-4c15-b157-522a74cf3303"
        },
        "item": {
          "id": "29460336-7d30-4810-af06-def9d9a299a5",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "59ba877d-36c0-4267-87c1-370e4111212d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6b2e058-19c3-4e09-be6f-5fb914e9789e",
        "cursor": {
          "ref": "6f3ee848-bcfb-46f8-8d52-133ec9c59be8",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "66d7faee-9560-4622-b2cf-ecfb4e16b842"
        },
        "item": {
          "id": "c6b2e058-19c3-4e09-be6f-5fb914e9789e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d36beadb-c411-47de-8bd1-acae972fb6db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eb17100-40f4-46d5-9539-3e0d5520d0eb",
        "cursor": {
          "ref": "51b2058e-e7e8-4e21-8a7e-40990a5f2f04",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "e3654fbb-ca90-4810-b336-8ba5021a6cd1"
        },
        "item": {
          "id": "2eb17100-40f4-46d5-9539-3e0d5520d0eb",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1d6d66cd-40bb-4d8e-992e-26058aa01a70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b7a1a40-c606-4327-97fa-6e7c58392bed",
        "cursor": {
          "ref": "deb50636-8507-4025-8487-a4e714ac967f",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "1aa3e981-5a09-4372-8227-7e5848784ea7"
        },
        "item": {
          "id": "1b7a1a40-c606-4327-97fa-6e7c58392bed",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "52afb237-822a-4384-949e-3cd1f7a150d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae569495-eefe-4f1e-822a-fb411d5db2ff",
        "cursor": {
          "ref": "8884b30d-f637-47ec-828c-54294919584d",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "62fd616c-3c16-43f7-82ba-89e74d188d21"
        },
        "item": {
          "id": "ae569495-eefe-4f1e-822a-fb411d5db2ff",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "4c4a1e84-67de-4c34-8367-a90633ee6736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd611010-8ada-429d-aa7a-bfc2634039da",
        "cursor": {
          "ref": "f0ee1220-7656-4c90-bbe1-d425d1181298",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "92c4ec20-fc33-4d9d-a839-ce8b8d260c00"
        },
        "item": {
          "id": "cd611010-8ada-429d-aa7a-bfc2634039da",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "40136518-03be-4c79-803f-91bd252a0d46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "814072eb-5ad5-46c8-979a-869714bc4a2a",
        "cursor": {
          "ref": "d1ff963b-7970-460c-a180-6994dbee963c",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "46f024f4-d463-4443-af44-df3f25d73106"
        },
        "item": {
          "id": "814072eb-5ad5-46c8-979a-869714bc4a2a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "37f02596-c02d-4eda-98ba-605cfc04e45d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5e10e05-22ac-4203-9276-9e601a16b969",
        "cursor": {
          "ref": "350d725f-08f9-4ef8-833b-8a091873ea12",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "87911d4f-0fee-4dda-990f-d2c99b431a96"
        },
        "item": {
          "id": "b5e10e05-22ac-4203-9276-9e601a16b969",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d58918d2-8f2e-4c2a-a314-bf0f903a88eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3914f763-c6ad-4624-9fc6-e00e0d998108",
        "cursor": {
          "ref": "a1d12f89-a591-4285-a0d1-082753a6b223",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "802d9f37-09f9-46f4-8689-14e9135e8e8d"
        },
        "item": {
          "id": "3914f763-c6ad-4624-9fc6-e00e0d998108",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3b00b160-a6ce-42e2-8d9f-9ed7d45e9ecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62fcca99-b96d-4e9d-b721-1e1320efc19b",
        "cursor": {
          "ref": "fba269dc-c507-44a2-a4c1-736387d3a6de",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "d14f8589-1cba-4a89-b24b-a853e174334f"
        },
        "item": {
          "id": "62fcca99-b96d-4e9d-b721-1e1320efc19b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "845cadad-6900-48fe-92bb-b7ad03c4f097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cfceb41-54e7-4102-9d76-e4da9c87bee7",
        "cursor": {
          "ref": "8094f3af-f99d-407d-88b2-905618136ed3",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "98b92eba-663a-4ba6-ba7f-8828c6301039"
        },
        "item": {
          "id": "7cfceb41-54e7-4102-9d76-e4da9c87bee7",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "3f80521a-3db1-44fe-bac5-84b6c8234a1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb1169a7-118d-4ebf-8510-64995ef40615",
        "cursor": {
          "ref": "30cefc3b-3955-4112-ae1e-93f6c33ced06",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "07d24309-45c5-43d9-9169-7e6612992c5b"
        },
        "item": {
          "id": "cb1169a7-118d-4ebf-8510-64995ef40615",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "685f682a-2d34-4d8f-a464-b9af1d9352dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5399905b-19a9-406e-bd7d-37eb1038d304",
        "cursor": {
          "ref": "bb88a890-6ec5-4961-b74f-30a829d921a6",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "2c0d8d74-d06d-4ed9-ac9f-f959ca007b82"
        },
        "item": {
          "id": "5399905b-19a9-406e-bd7d-37eb1038d304",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "dde4060c-dfd8-48ba-ab91-de48994b9d2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "583a8f1f-9609-446c-864f-0e987e130b0c",
        "cursor": {
          "ref": "f7a3e38e-7ef4-48ed-a043-f58b412aab38",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "b3d54c25-6d8e-42c3-86ea-cbef2b84af65"
        },
        "item": {
          "id": "583a8f1f-9609-446c-864f-0e987e130b0c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "bb6af366-acef-4ac8-a8c2-5fbf0af9ee5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d9b7ad2-4c37-48d1-aabf-1cad9bd19847",
        "cursor": {
          "ref": "f35134af-408c-4c7e-a5e9-1a56581ddf0e",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "7099f640-5270-4d5d-b02c-fc0a381d2b67"
        },
        "item": {
          "id": "0d9b7ad2-4c37-48d1-aabf-1cad9bd19847",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "037f79f2-594f-4fd2-9b5a-7bfe3aca3fc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea23dd36-3e3c-41cd-8c4c-37d53b779d72",
        "cursor": {
          "ref": "6d1a94ca-3f06-44b0-9f76-e9550eed7062",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "415c096c-523b-4085-bfde-a9664c0e04a5"
        },
        "item": {
          "id": "ea23dd36-3e3c-41cd-8c4c-37d53b779d72",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "255777f9-caa3-4478-9af8-9eabff07ff39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b801343f-1e6a-4fb3-ac33-a92cd1b7d500",
        "cursor": {
          "ref": "1ccbc4fb-b64a-4990-bd2a-7c19bafef29c",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "e8dab1ae-bc92-407a-9bf1-c93a7794e00b"
        },
        "item": {
          "id": "b801343f-1e6a-4fb3-ac33-a92cd1b7d500",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "32c8c538-7503-4ef6-bab5-52a662c3cff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8191844c-bbde-4ce1-93c7-d82d21ac4249",
        "cursor": {
          "ref": "c0b78d37-068e-4d30-a343-f5006ef99029",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "dbb6520f-106b-43bf-91f5-fe627c8fad0b"
        },
        "item": {
          "id": "8191844c-bbde-4ce1-93c7-d82d21ac4249",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "622b88a9-9b3b-49bd-a578-afb7a7cdeda8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e967db4-42b0-4154-8e54-a34fa54761e4",
        "cursor": {
          "ref": "fe9dde5f-1ee6-4806-b9a2-70046c5025f1",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "9c7a0a97-3230-4932-8f75-d13fd0e7873d"
        },
        "item": {
          "id": "8e967db4-42b0-4154-8e54-a34fa54761e4",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "96ea48e0-50f2-4aa4-b7de-a3945625baa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fb0d807-b7de-4622-bbc9-979a6c295784",
        "cursor": {
          "ref": "c43d3344-c80a-4353-b282-858eb07648a6",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "8ca2e277-a2e2-4624-a04e-aca46f2cd35e"
        },
        "item": {
          "id": "8fb0d807-b7de-4622-bbc9-979a6c295784",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "4985a206-f1ab-40bc-b956-8c915a13c079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df3d22b8-a2e2-4ef9-b6e8-2d9dd43dc2f8",
        "cursor": {
          "ref": "47948624-ce3d-4ed5-80e2-6aef7159ad4d",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "3b6a8f61-69d8-41e7-9361-90682e30ec73"
        },
        "item": {
          "id": "df3d22b8-a2e2-4ef9-b6e8-2d9dd43dc2f8",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "fe04e430-4983-4887-b837-d757e4afe0db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eda1144-9035-4309-8ad9-0b79f4088d44",
        "cursor": {
          "ref": "0fe4a400-3bc8-4c2d-9d55-f774916ad673",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "4affef97-dff4-438f-a79b-476f8277662d"
        },
        "item": {
          "id": "4eda1144-9035-4309-8ad9-0b79f4088d44",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "52513c27-2ea9-47cc-9353-f9bcebb0cf60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c195475d-8e9d-490a-a8a8-08b203b09b43",
        "cursor": {
          "ref": "54668c03-05d4-4d4f-9132-e9b274dcd822",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "47a15cef-c10a-4fe6-9bad-7526638cc7cd"
        },
        "item": {
          "id": "c195475d-8e9d-490a-a8a8-08b203b09b43",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "000d225e-ea1d-4f3a-ac87-d8c718b6ed9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4807e843-29b0-4f4a-b726-5db1c10fcffa",
        "cursor": {
          "ref": "1e4fa065-f354-4f04-b7d1-b454eab3aeed",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "ff7da9f4-a6e8-4e81-adb6-263ec3fcc162"
        },
        "item": {
          "id": "4807e843-29b0-4f4a-b726-5db1c10fcffa",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "eb586c93-c841-4db0-acd6-fdf8fd180b5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ec7cd5a-5841-4e28-a941-5c9864deaf1a",
        "cursor": {
          "ref": "402d930e-02fd-43b4-a2bc-3925baab94b6",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "ef35740f-1362-4afe-a903-9cfad9839e2c"
        },
        "item": {
          "id": "0ec7cd5a-5841-4e28-a941-5c9864deaf1a",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8a19d08d-3bcc-4575-9d42-b58bdbe05cfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb69d949-bbfe-4f01-8765-f0cd0ddccd75",
        "cursor": {
          "ref": "aed4788c-b4ce-4d09-ba29-33b3ebf1ce39",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "e7b331a2-750f-4570-ade9-6b3a9d2808fb"
        },
        "item": {
          "id": "fb69d949-bbfe-4f01-8765-f0cd0ddccd75",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "27703cab-5658-4857-a46d-24174c2f7721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d6deb77-61f9-46dc-9d88-f989556a8187",
        "cursor": {
          "ref": "b5b176dc-643a-4d3e-a12a-2438d4583900",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "26be2a1a-00bc-4a06-9e0f-0b005b1808a7"
        },
        "item": {
          "id": "3d6deb77-61f9-46dc-9d88-f989556a8187",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d77f9a74-be70-4858-824b-e7494a080fcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e26a1bc2-9525-4c4b-8ab5-a60e23f40851",
        "cursor": {
          "ref": "d82237be-1044-4c83-a89e-e4d30f4ae62d",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b4b27ea1-d4c6-4e7a-ae2d-386dcb80199c"
        },
        "item": {
          "id": "e26a1bc2-9525-4c4b-8ab5-a60e23f40851",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "1098d91c-c5f1-48ca-abfb-8fbc41ee188e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af2f4004-e990-4746-9f40-12072caed5fd",
        "cursor": {
          "ref": "ca9445da-3d61-48d4-ba5d-5185f4d51b98",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "b144d02b-a5bd-4334-b318-ad649c1e6a1d"
        },
        "item": {
          "id": "af2f4004-e990-4746-9f40-12072caed5fd",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "9bb0ce83-630f-4a75-ad0b-5b06179cc157",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc06b0da-9b2b-4154-8c8e-29c5b4ddaf23",
        "cursor": {
          "ref": "79059c2e-cbf2-4f68-99bd-9cb4e7a16b25",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "12a04eee-5f83-40e5-8c38-cce00c074c14"
        },
        "item": {
          "id": "fc06b0da-9b2b-4154-8c8e-29c5b4ddaf23",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ffa584db-d0ad-4bb1-993c-a162a74fa7c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b52c222b-0336-4de5-95fe-69a64175328d",
        "cursor": {
          "ref": "93db3c9b-1d9b-486c-8227-204a600365d6",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "76611fc0-43ce-44f3-b3a1-24461bb1db6f"
        },
        "item": {
          "id": "b52c222b-0336-4de5-95fe-69a64175328d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "76037aa7-140d-41c6-a9a5-619e6c562ea3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a5c091e-a68a-46f6-a950-3579713fd5e1",
        "cursor": {
          "ref": "5bde0d37-716e-4d26-b15e-a5db7d03067d",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "61921cf2-f5bc-455d-a799-e4076a5fca54"
        },
        "item": {
          "id": "1a5c091e-a68a-46f6-a950-3579713fd5e1",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8b29ca25-ad92-48aa-b304-d24ee681f005",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27232e34-853e-43aa-a986-75abdbc234f8",
        "cursor": {
          "ref": "b00aee9d-3f0e-412b-b193-3f7a953d2b55",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "309a6937-cb7c-4898-bb92-9b599ec83998"
        },
        "item": {
          "id": "27232e34-853e-43aa-a986-75abdbc234f8",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "86577bf2-88fb-489d-a199-4a9df6a167b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37a299db-d09f-49ad-bda8-84319cf96337",
        "cursor": {
          "ref": "8f751413-52c3-496c-91d9-2e4247db88c9",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "6b40fe8b-e6ab-4f31-b6c1-3255a5dc413f"
        },
        "item": {
          "id": "37a299db-d09f-49ad-bda8-84319cf96337",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "4bc2bc52-6895-4b04-aa53-83c67f10b427",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06cf411a-43fd-4835-84b4-b1a1a725f8a2",
        "cursor": {
          "ref": "868fa6e8-0be8-40a4-8412-5fb85f8ec5aa",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "5371e514-dd2c-41e2-b9ac-2efbcc53ea57"
        },
        "item": {
          "id": "06cf411a-43fd-4835-84b4-b1a1a725f8a2",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "9e80ddb5-33d6-4c7c-af51-e9fce9a1a052",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02dc2ab4-644a-46cd-aab7-aec8f84569dc",
        "cursor": {
          "ref": "6c45c41b-17dd-4089-9751-96e5f4e68a8a",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "85a41baf-15eb-441f-b2a3-d6c3c5ae7941"
        },
        "item": {
          "id": "02dc2ab4-644a-46cd-aab7-aec8f84569dc",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "c3052849-06c4-42f9-bd6a-2ffa87740a37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c5bcb52-3876-4f31-a9ae-7b07296dcc68",
        "cursor": {
          "ref": "1e0964d6-4d06-49dc-a4b4-7b46e4755d4f",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "fea08b33-69fc-4c68-b7a1-082c40a5aaa4"
        },
        "item": {
          "id": "1c5bcb52-3876-4f31-a9ae-7b07296dcc68",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "e67c3e22-8cf8-4ad6-896f-3bc33451368f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af0e19ab-f4c1-433c-9876-d01bcf520e93",
        "cursor": {
          "ref": "d5c73dfa-13d2-4670-bd0b-ead145c0341b",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "898f5670-e509-4dcc-a6f7-0c7f7737bf35"
        },
        "item": {
          "id": "af0e19ab-f4c1-433c-9876-d01bcf520e93",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "15a1ac5c-59d1-4f78-9f1f-33a0f0bfb75a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c6c0815-683f-4146-9bb2-cc3ccf54442f",
        "cursor": {
          "ref": "c438b2f5-c1d2-4e25-9385-1e175418c222",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "f389b678-dfe8-49f9-9f75-2dc820d6968e"
        },
        "item": {
          "id": "3c6c0815-683f-4146-9bb2-cc3ccf54442f",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "ab185455-1ecd-48b8-8ee6-165f458708c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7c7c9e7-6187-4bc2-b3e2-4a82a6aae085",
        "cursor": {
          "ref": "79b705eb-3fc2-4773-ac09-aefde376b00f",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "e4e96620-dcc0-46d2-a0e6-afd96ee8233e"
        },
        "item": {
          "id": "d7c7c9e7-6187-4bc2-b3e2-4a82a6aae085",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "32a6a288-a84e-4822-bec8-23ff252f0a7d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b2552df-a3e3-440b-8998-558bd2cb538f",
        "cursor": {
          "ref": "c2e99b51-ed42-4d53-b08e-586a4b7bb8fb",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "1d7a004f-7768-46e0-9ddb-8274e4663aca"
        },
        "item": {
          "id": "8b2552df-a3e3-440b-8998-558bd2cb538f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c77d18fa-6e7b-428f-b4f4-0b2814f13801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a2f848a-1f39-4b78-919c-b6ed26430bea",
        "cursor": {
          "ref": "8ab0e7f2-7e63-4c55-8329-f7e655ec8237",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c11ee82d-5c91-480b-b492-fd2cbe972ff5"
        },
        "item": {
          "id": "4a2f848a-1f39-4b78-919c-b6ed26430bea",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "01534667-570c-44c3-984a-aecd8abbdbdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b316816-1500-4e49-b93a-5b62cb2b8b19",
        "cursor": {
          "ref": "778e6d37-4de3-42f9-a6ee-b9de33922329",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "d8601d80-0796-4e4e-b62e-f20deadda3b2"
        },
        "item": {
          "id": "5b316816-1500-4e49-b93a-5b62cb2b8b19",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "c53d4f36-5d2b-438c-a74f-f37b6c1473de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fe2621c-af8b-4e76-952b-c8494d668842",
        "cursor": {
          "ref": "7c263dbf-a147-49e0-a7e4-c3cf054706f4",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "19f9d3e4-ba51-4e1d-8a79-a160c85e5893"
        },
        "item": {
          "id": "7fe2621c-af8b-4e76-952b-c8494d668842",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "ed689f02-d186-45fe-849e-4deb2b7da7f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e3f7c79-9395-4fe2-8b36-698d7bb1302a",
        "cursor": {
          "ref": "d08eb2f5-ef4d-4760-aca3-423322da6dbb",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "78be6046-df19-48c5-b398-fdfbeca5e84f"
        },
        "item": {
          "id": "2e3f7c79-9395-4fe2-8b36-698d7bb1302a",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "7f1e0f10-0fe6-44f1-8e20-845354c5c5c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b44e043-e50d-4020-b434-dd8d813299e1",
        "cursor": {
          "ref": "4966f4db-b090-4cba-8f74-29ed048bb4df",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "33b19c58-d963-43a6-938e-44926b69853a"
        },
        "item": {
          "id": "6b44e043-e50d-4020-b434-dd8d813299e1",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "819d55e1-1be6-4dc9-a246-98bd6737b15e",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "1ae2b564-f32a-45f9-97f2-52974e48241f",
        "cursor": {
          "ref": "5d09c9fe-c806-47a2-a28c-18519779475a",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "a8e4ab81-c3a5-42dc-96ba-eb1a1aa56925"
        },
        "item": {
          "id": "1ae2b564-f32a-45f9-97f2-52974e48241f",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "6b46b6b5-8ed2-4bdc-b108-b824b63d91d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc13daf3-eac6-4d89-93ab-5d42847d28c4",
        "cursor": {
          "ref": "19bb48b0-a708-4e04-8797-ee38a040c9b8",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "adee24d0-1d44-403f-93b1-d71b57c28ca1"
        },
        "item": {
          "id": "bc13daf3-eac6-4d89-93ab-5d42847d28c4",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b08836c4-afec-4636-b86a-0a746aa78eb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fa81cfd-f5e6-4779-bd3a-4492aa406c8c",
        "cursor": {
          "ref": "229c7457-2d36-4dd7-81b3-42dca708d4e9",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a5f30689-d3b3-4613-b515-4e0825c981ed"
        },
        "item": {
          "id": "4fa81cfd-f5e6-4779-bd3a-4492aa406c8c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "080c63d0-302e-4c49-9549-75267fe73671",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "761d851b-40a1-4d18-8084-c0fc0f208832",
        "cursor": {
          "ref": "49875b6b-b40e-4dc9-b105-4882868a16ef",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "75de85b2-6fd6-43ed-9a5c-f307a2691ed4"
        },
        "item": {
          "id": "761d851b-40a1-4d18-8084-c0fc0f208832",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "6f289b79-fb57-455e-b49a-d0f2f74f2761",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a345dea1-bf66-4898-81e0-59d3022e854e",
        "cursor": {
          "ref": "e94299af-8f9a-4935-be52-8cef3cb09dc5",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "02e15dc0-3076-4dea-8715-e0872af91adf"
        },
        "item": {
          "id": "a345dea1-bf66-4898-81e0-59d3022e854e",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "4fa1c29d-cd35-4450-a8e0-0050f71eebdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73c6bea6-f172-4c7f-8e35-25fd80ab72e8",
        "cursor": {
          "ref": "d1db5e13-ac38-4e2e-ab9f-b57bce741f60",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "a5887ec6-6dee-46e2-a354-a5180df94f9a"
        },
        "item": {
          "id": "73c6bea6-f172-4c7f-8e35-25fd80ab72e8",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "99ef2d3e-7704-4d33-9465-d2e6011f5128",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d48431dd-6435-4cd0-b05e-47e6fe4a9306",
        "cursor": {
          "ref": "c4def748-f5b2-4a68-87e1-603307a6f61b",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "40555853-1670-445d-8e5a-1aecfec8fec2"
        },
        "item": {
          "id": "d48431dd-6435-4cd0-b05e-47e6fe4a9306",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "69682f65-1ddc-4bda-8d27-acc1bd9cbb00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cdea50b-a85d-400f-9ed6-4a761675ffda",
        "cursor": {
          "ref": "48b84233-5d8f-4779-b359-bfb3665c59ca",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "0db293ab-3496-4dac-aa00-331f1ccd2806"
        },
        "item": {
          "id": "5cdea50b-a85d-400f-9ed6-4a761675ffda",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "c633b14b-6d79-43a1-897a-9273f3af1875",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26e02ad5-635b-49f2-abdd-3ffe587a5697",
        "cursor": {
          "ref": "2d6f7402-ccb5-44e2-bfa2-4f2d9907d0c2",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "da7eb951-f65f-4354-a0dd-4e7655e6af45"
        },
        "item": {
          "id": "26e02ad5-635b-49f2-abdd-3ffe587a5697",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "feb8f022-556f-4f53-950b-96e207b390e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ab75826-73e5-4567-893d-195ef48accdd",
        "cursor": {
          "ref": "4ff85d32-0f0f-4c62-b731-2032f72e4f87",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "0d30cd24-2f5b-43c9-bd75-dfb16cfa66c4"
        },
        "item": {
          "id": "9ab75826-73e5-4567-893d-195ef48accdd",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f71b3acf-e889-4423-a699-27158aaf4a85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68b18c3f-ca0e-4dc7-938e-87cb88dc8dc9",
        "cursor": {
          "ref": "08fa2b6d-db9e-4d40-a21f-840eb4238f36",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "c6143750-aee6-45d3-8619-47610763b74f"
        },
        "item": {
          "id": "68b18c3f-ca0e-4dc7-938e-87cb88dc8dc9",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "11bf4fef-2368-441c-bf15-3adb9edd6471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40425bd6-b28b-4866-acc2-e09363d92ca6",
        "cursor": {
          "ref": "9595fc5c-ccd7-4485-8154-a083a675f893",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "21c49ca1-2a50-435e-a935-0d9344152710"
        },
        "item": {
          "id": "40425bd6-b28b-4866-acc2-e09363d92ca6",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "366f13e0-7aee-4be2-a944-a1efd78a0fcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27891b2e-1eaa-4b9e-9802-d88a77571cab",
        "cursor": {
          "ref": "843c6eb5-7fe5-4937-93e2-b964111cf211",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "556b8418-8dc5-43b8-9ef6-4b50d820fe92"
        },
        "item": {
          "id": "27891b2e-1eaa-4b9e-9802-d88a77571cab",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "dfad159b-96f4-4b39-937f-35b12a88268b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f46b8636-9e53-472e-a856-998bfb6af0d0",
        "cursor": {
          "ref": "a7c14ba2-750e-4c1b-9ac0-80ba51d688bb",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "a8f8f245-759f-4143-9531-940830efaebd"
        },
        "item": {
          "id": "f46b8636-9e53-472e-a856-998bfb6af0d0",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "96aabf98-8cce-4b15-8681-2d74ae13dc18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1732c7c8-9cd9-487c-b682-9702ed6cfb53",
        "cursor": {
          "ref": "ad06f3da-f803-45ef-a0c0-399a0d35a81b",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "a0bbbb0d-9fec-401d-b950-8361c4ac0cd4"
        },
        "item": {
          "id": "1732c7c8-9cd9-487c-b682-9702ed6cfb53",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "9986bbc6-45ff-4ea9-8c80-26816fd94f95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2344e9a7-d52a-454e-91cc-8b8802243725",
        "cursor": {
          "ref": "5ab6950f-aa05-4ffd-a58e-ae182003258d",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "ffc53ad3-f53d-48d3-afb0-78dbcca96def"
        },
        "item": {
          "id": "2344e9a7-d52a-454e-91cc-8b8802243725",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "889e1bb4-ca6e-410e-8940-7e1bfe0d6fe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "244012dc-7c77-4c69-8153-8be0adabad3f",
        "cursor": {
          "ref": "597f4f89-4916-430f-bb49-ffc0cf666d7d",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "12ae4964-0375-400d-921e-a2b674680586"
        },
        "item": {
          "id": "244012dc-7c77-4c69-8153-8be0adabad3f",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "92afaf07-e9ce-458d-9ab3-23f6baaa13ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7273e1e9-8bb1-4d1d-a104-0794da098067",
        "cursor": {
          "ref": "3ad842da-1d45-48af-abd6-b9d63929e127",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "9ea5ac3e-868a-47d6-9d53-8e7d3287c9b6"
        },
        "item": {
          "id": "7273e1e9-8bb1-4d1d-a104-0794da098067",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "1a408a1c-0fcf-4de7-b53f-bcf8924c5ef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3146da63-f6ac-4ea3-9c4d-75b5b599df12",
        "cursor": {
          "ref": "3f431420-bf86-4195-87ef-9d837244dd06",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "38f4100b-aa6f-4789-bd42-0c4e2bca7811"
        },
        "item": {
          "id": "3146da63-f6ac-4ea3-9c4d-75b5b599df12",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "94664135-135a-4f49-a45a-b4d85a9eef51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92a2f22b-2322-4e7a-ac3a-d5ace2f7f15f",
        "cursor": {
          "ref": "1f58148d-e945-4554-b32f-8710948573d2",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "7f0be64a-cf19-4fbe-8744-47cfce0759bd"
        },
        "item": {
          "id": "92a2f22b-2322-4e7a-ac3a-d5ace2f7f15f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "1d3d429f-ff76-47d9-ae83-48c0005f53d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5819af56-47bc-4e7e-8dbf-66e4dffc206e",
        "cursor": {
          "ref": "72817b85-4ff0-4f29-8d0b-3882f152d78e",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "15bbd57d-cd83-481a-b6a1-6a5f25aa01a5"
        },
        "item": {
          "id": "5819af56-47bc-4e7e-8dbf-66e4dffc206e",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "df5996fa-7a62-46e3-8e3e-157099f89d30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a19d1eb0-0bfb-416b-b7d9-ab6a56f2dc22",
        "cursor": {
          "ref": "de14a6be-f0fd-4edd-9fd4-57bc0d95e811",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "b44a3643-0a6b-475e-bfc1-2ed4382388f7"
        },
        "item": {
          "id": "a19d1eb0-0bfb-416b-b7d9-ab6a56f2dc22",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "edd0e85e-8548-4ced-b028-cdac25c44cc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58249df3-a531-4b18-be8e-ce229555fc95",
        "cursor": {
          "ref": "b2802dd1-028f-441d-8603-e7ec61029d56",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "1ec69643-d747-4149-a406-741aa4027b27"
        },
        "item": {
          "id": "58249df3-a531-4b18-be8e-ce229555fc95",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "80165296-126d-4113-8289-6cc248e74218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eeda27a-17c0-40a7-bc95-2f046f66d278",
        "cursor": {
          "ref": "03fdd5d5-0da7-4929-95ed-a98f2bcf4baa",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "c436a1f8-238d-4801-b1d4-683b407966f5"
        },
        "item": {
          "id": "0eeda27a-17c0-40a7-bc95-2f046f66d278",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "da72e981-1289-4212-8d8d-a53d5b8e55ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48a3b498-c3e6-4d96-8f1c-4a15a45a80d8",
        "cursor": {
          "ref": "b27f3fa9-ab92-4b60-b7cf-54032203c20d",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "2df1aa55-6170-4da7-b7fa-47559af72a6a"
        },
        "item": {
          "id": "48a3b498-c3e6-4d96-8f1c-4a15a45a80d8",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "666cc3bb-1f22-4908-bd2f-8511650c74b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aa84bb7-9d61-4b19-9503-bb0978d89f9e",
        "cursor": {
          "ref": "d561a972-7470-4535-ad5c-ebb069691eba",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "b539206d-1e67-4917-9f7d-03c600e56c3c"
        },
        "item": {
          "id": "2aa84bb7-9d61-4b19-9503-bb0978d89f9e",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "7cb6b59c-380d-4e24-8cfc-9a7e17b326af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "030247a0-82b6-49ed-90d6-1ae98b485057",
        "cursor": {
          "ref": "5e8479c1-0ba4-41b1-8664-f406efa110e9",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "7bf3c8a0-1af7-4b6a-b68a-dd12eddfda4e"
        },
        "item": {
          "id": "030247a0-82b6-49ed-90d6-1ae98b485057",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "2b90c771-e8ae-4b7d-aaf9-f3f1e289c177",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a53f5f99-10fd-4b5a-9846-ae6fbbec7075",
        "cursor": {
          "ref": "2d31ea01-d312-468f-9ede-7bc5c94b321a",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "59dd683c-6a17-48eb-bd81-90236765f9be"
        },
        "item": {
          "id": "a53f5f99-10fd-4b5a-9846-ae6fbbec7075",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "13ecd40f-f941-4544-8885-9d5fc98017db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3a68c0d-0047-4f78-a09f-3f08aa0291e3",
        "cursor": {
          "ref": "751dc3f3-a49a-4be1-873a-864a8a9d6cad",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "3373e7c5-8118-4016-86af-722467f8cc8f"
        },
        "item": {
          "id": "f3a68c0d-0047-4f78-a09f-3f08aa0291e3",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "77719284-9544-48e0-bdf8-86a6d4606ef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcebfbdd-10d4-4fa7-9db7-0ad0ff733b44",
        "cursor": {
          "ref": "a0f8363c-23d6-49a0-a3a9-839fe780d2d6",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e0eb95db-7ad3-4240-af59-3b8f95250330"
        },
        "item": {
          "id": "fcebfbdd-10d4-4fa7-9db7-0ad0ff733b44",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "b28277b3-a132-4ab4-93b4-5757359c74f3",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "eabcb2d1-0afe-49df-b5dc-2ce5b04bd830",
        "cursor": {
          "ref": "105aa957-cd93-44af-9a82-c1f1936e80b9",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "611f78b9-0269-4083-9727-e2870da232eb"
        },
        "item": {
          "id": "eabcb2d1-0afe-49df-b5dc-2ce5b04bd830",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "93258bf4-6718-4d6e-ba50-81ae03adcc58",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "d4a2968f-04c2-4ab8-b5fe-5299e852d676",
        "cursor": {
          "ref": "c074b8f0-df7a-4d37-a165-e8257bf9fe36",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "dd07ea91-7a41-42b7-b5a5-0a20b6a69327"
        },
        "item": {
          "id": "d4a2968f-04c2-4ab8-b5fe-5299e852d676",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "4c4a6c5b-cda9-4f0e-8817-603e73c00570",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "b6b9dcb2-4fb4-42fc-8de6-a9fc43ffc7f4",
        "cursor": {
          "ref": "19e65ce3-0696-4a2f-9369-e94e91df054d",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "0743f8bb-dc0a-4ea8-9629-dda74a6a958a"
        },
        "item": {
          "id": "b6b9dcb2-4fb4-42fc-8de6-a9fc43ffc7f4",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "0734a8ca-26f8-4c10-9781-58cf07f50053",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ce00a5-ee04-449e-aec6-6e02cba0f3e5",
        "cursor": {
          "ref": "da5edce9-760c-446e-9164-7791218f2023",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "21af2400-d533-4d92-983e-3b1459ecadba"
        },
        "item": {
          "id": "42ce00a5-ee04-449e-aec6-6e02cba0f3e5",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "13989798-1370-49b0-8d4d-731c949958e4",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "ab138cb9-9f71-4b33-ac3f-9bbd34d00818",
        "cursor": {
          "ref": "71a98162-70c7-412c-b48c-a1a7c3e896d0",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "1164990b-4ce4-4579-bb3c-6d2185b43c76"
        },
        "item": {
          "id": "ab138cb9-9f71-4b33-ac3f-9bbd34d00818",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "f972cd9c-f6ad-41a8-86ec-9ac29ff42ca1",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "c2cf9c21-0e0c-4728-ba3c-5806c0f62d90",
        "cursor": {
          "ref": "f3dde941-1c1f-4f36-b7ba-1876cd6f0184",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "2d367dd5-0f97-4d80-bb4f-0681beebc168"
        },
        "item": {
          "id": "c2cf9c21-0e0c-4728-ba3c-5806c0f62d90",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "6d8d6483-ef65-496a-9e25-9cd8426c6b4f",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "715f2850-f18a-44cd-9513-be7953113045",
        "cursor": {
          "ref": "fc4eaad1-8da6-4c8c-a3c8-71693408dbc8",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "bb331d0a-b9ac-40b3-b8ad-9f22e49c31c4"
        },
        "item": {
          "id": "715f2850-f18a-44cd-9513-be7953113045",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "70f4b9b4-3d83-4201-8c03-cc6b9c44b0ba",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "16f18229-ae88-43ab-9d9a-aa43369b5432",
        "cursor": {
          "ref": "a172650f-73da-4b40-8b2c-121e6df56394",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "008273a0-63d8-4fcc-9fc9-b9c6e62c109c"
        },
        "item": {
          "id": "16f18229-ae88-43ab-9d9a-aa43369b5432",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "ff33ce57-56d0-4e43-bd01-490c7f1c3fb6",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "13f9f2a8-33fe-48d8-8ac2-b2fb046879cc",
        "cursor": {
          "ref": "f39c25c3-ae1f-46f9-a583-ee1878068108",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "b0d03f68-a14c-4fab-a6ec-75a3fecb9f92"
        },
        "item": {
          "id": "13f9f2a8-33fe-48d8-8ac2-b2fb046879cc",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "fc985a4f-c9a1-485e-8b92-ecd361dc003f",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "bcadf79c-7ec1-434d-aaec-e1a268d98900",
        "cursor": {
          "ref": "e89ab8f3-d5da-4dd8-9b4b-40b1a9dd64d5",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "e453f11c-f570-4454-b3f2-d20301f2e89f"
        },
        "item": {
          "id": "bcadf79c-7ec1-434d-aaec-e1a268d98900",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "daf811eb-14c2-4f4e-82a8-849a6c6657c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cbd7102-fc5e-418c-a38d-68b621156523",
        "cursor": {
          "ref": "625b085c-3270-4eac-a653-dcae2cd52bb7",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "8c92544c-3d2f-46f2-9e93-55fe342c1350"
        },
        "item": {
          "id": "5cbd7102-fc5e-418c-a38d-68b621156523",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "50727f19-8ddc-4c86-9c02-40ceef1ef81e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e90cbac-23e3-4fde-95f8-f28fd1ecefcb",
        "cursor": {
          "ref": "2d276431-afde-4b82-bfb9-f4d0b39a729a",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "cd3086f7-381e-4fe7-bec5-57934f7c6e33"
        },
        "item": {
          "id": "6e90cbac-23e3-4fde-95f8-f28fd1ecefcb",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d787de7e-9862-43ff-9af0-29d119624a44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9029171c-4313-4d32-92be-9037c4e9cc93",
        "cursor": {
          "ref": "7458aa87-4b1e-481d-808f-aeecaba504c5",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "a7f435a4-814a-495e-8bdb-0085ed3c084b"
        },
        "item": {
          "id": "9029171c-4313-4d32-92be-9037c4e9cc93",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "e05d8155-887e-44b1-ad46-df9ade2caebb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05104308-d1e8-401c-9654-3c6c3e2bb3b7",
        "cursor": {
          "ref": "81b822d4-856f-4667-8826-406be0b2760b",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "cdc8033d-0b8a-4ab5-990f-c3a3885e767c"
        },
        "item": {
          "id": "05104308-d1e8-401c-9654-3c6c3e2bb3b7",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "c8367f21-fed1-4e8d-afd3-e2282554cfd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a21d8d8b-c141-43ff-b91f-1bcd1be0fe8f",
        "cursor": {
          "ref": "7e4d2bfa-bf48-40f1-926d-dc3da21b9f7d",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "341a054b-2088-46cd-9826-2940c0097530"
        },
        "item": {
          "id": "a21d8d8b-c141-43ff-b91f-1bcd1be0fe8f",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "915677e3-d74a-4567-b549-608dd32a7d14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79434437-e5bc-4439-b8d4-61fb36c0bc4f",
        "cursor": {
          "ref": "87bf6389-82b8-423a-88a3-eec27ce41209",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "819e77be-611d-4802-9f84-9eabd66af71f"
        },
        "item": {
          "id": "79434437-e5bc-4439-b8d4-61fb36c0bc4f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "19062f18-72d0-4b00-ae59-6bf365f9ee3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c776fa9a-77e9-4ff4-9162-dc0f75f7ab9b",
        "cursor": {
          "ref": "a8d85686-bd4a-48e6-8101-5daa9d1d80fc",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "163b9f82-cecf-41d6-bdb4-15bff36cd023"
        },
        "item": {
          "id": "c776fa9a-77e9-4ff4-9162-dc0f75f7ab9b",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "24c0077f-2fef-4444-9d26-5789774c27a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08edf103-1b31-4b15-bc75-cfdbc93e67c3",
        "cursor": {
          "ref": "a05b8eec-7eba-4f26-87ab-16e320745fe4",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "f7df0a15-717f-45c1-b8ec-533b84f33235"
        },
        "item": {
          "id": "08edf103-1b31-4b15-bc75-cfdbc93e67c3",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "59969b1d-7da5-4a5d-aa8f-5115e44c1ab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82948de9-861b-4b67-8f5d-684e6c5f2103",
        "cursor": {
          "ref": "9eb8c9f6-d792-4297-bf09-3d11c075464a",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "4853dde8-39c2-472d-860e-4ec1804c2432"
        },
        "item": {
          "id": "82948de9-861b-4b67-8f5d-684e6c5f2103",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "777d4d0c-3bf2-48da-99ab-86f1c49db952",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2314abc4-7539-4d65-a319-fb82e0ec1151",
        "cursor": {
          "ref": "4d4a3ff0-b3eb-4d3d-8f8c-54ca8ab85aba",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "b64c74de-d225-4037-bf3b-db38a22d2973"
        },
        "item": {
          "id": "2314abc4-7539-4d65-a319-fb82e0ec1151",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "86ddb53c-2817-485d-9245-bf934bb5ce29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49ce8f9a-b6aa-4c8d-b19c-ade3cc43e0eb",
        "cursor": {
          "ref": "19def51a-81d5-4d95-9585-df82cdd2be9d",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "76072139-70c8-4701-aacc-3d7cb8220a24"
        },
        "item": {
          "id": "49ce8f9a-b6aa-4c8d-b19c-ade3cc43e0eb",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "0132ad9a-9242-499d-85f0-07343dc9f2a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3610057f-5719-41a6-91ff-548a36cf2dd2",
        "cursor": {
          "ref": "7c6c4cdf-bb97-47e5-b3be-3e299a863d70",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "4f93d827-3ca2-4248-8839-97320398c907"
        },
        "item": {
          "id": "3610057f-5719-41a6-91ff-548a36cf2dd2",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "3c62347b-8ad1-4d40-aa59-c6d67ab2cefe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceafd36c-fbca-4ed2-9a84-aad2cd9bf36a",
        "cursor": {
          "ref": "592448e9-d546-414a-a5ab-4c27a208ad27",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "863cf80c-2124-48df-958a-e494743aa82d"
        },
        "item": {
          "id": "ceafd36c-fbca-4ed2-9a84-aad2cd9bf36a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "0763fee3-b077-4d1c-8af0-d8c6470c50fa",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "59d565a9-ebea-4c73-89ef-98f5b55fee66",
        "cursor": {
          "ref": "dd798b42-1d53-4679-b0b4-0cf8fee53768",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "6f0c6e14-dbc4-4749-9bd5-f0fa87a4b85a"
        },
        "item": {
          "id": "59d565a9-ebea-4c73-89ef-98f5b55fee66",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "09dc49d1-4357-451e-82d4-4c529420bef6",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "9b43a593-8495-405c-ae57-59d175af4028",
        "cursor": {
          "ref": "40c3b859-d8ef-4844-bffa-a95200d1c862",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "e3d53a28-d8a0-45c2-8003-ceffcec0484f"
        },
        "item": {
          "id": "9b43a593-8495-405c-ae57-59d175af4028",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "06d0425c-7880-4ad2-a250-590fbe3f35e7",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "a22d4c45-8e8e-4b82-b1cc-9e4ee7c66a79",
        "cursor": {
          "ref": "54e841c1-08dc-4b52-baeb-ab5e54e7f404",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "d63947d8-e811-49db-bc9f-a8e8ec46a3cb"
        },
        "item": {
          "id": "a22d4c45-8e8e-4b82-b1cc-9e4ee7c66a79",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "1d16bd49-2d6c-45b5-86ca-2047ed6232df",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "1fc5bbf3-3ef9-4a93-8a52-0c8ba6efee15",
        "cursor": {
          "ref": "da7ec595-819f-4d57-9531-00fccb780de6",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "d9e57957-ee16-42c2-b6b3-954e1a11c028"
        },
        "item": {
          "id": "1fc5bbf3-3ef9-4a93-8a52-0c8ba6efee15",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "504f0d4b-c4c5-4b2e-9db8-0dc00cc6dd3f",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "56d3a466-d5af-46e1-9fa8-b43b6c09cd78",
        "cursor": {
          "ref": "47873271-292a-4c3b-a59e-b6089d023778",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "2eee31df-bd9f-410d-8b2b-af34810a7854"
        },
        "item": {
          "id": "56d3a466-d5af-46e1-9fa8-b43b6c09cd78",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "df755ed1-0402-4959-bcdc-57a8db9a7265",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aecfa2d1-da75-4e5c-a70a-0dd2468f8634",
        "cursor": {
          "ref": "704b143b-4190-4d88-8912-424b7e28d3e5",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "1cffb4d8-9cf4-42cc-b266-e93d546b97aa"
        },
        "item": {
          "id": "aecfa2d1-da75-4e5c-a70a-0dd2468f8634",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "dd26a040-39db-4c0b-a984-8e56086dc1e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64c3bfbb-0f0d-4c7d-b3a3-63c518aee1a7",
        "cursor": {
          "ref": "780687fd-355e-4767-a8d6-96f79576677b",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "5029811f-8f38-4c61-873d-69aaa15ca05a"
        },
        "item": {
          "id": "64c3bfbb-0f0d-4c7d-b3a3-63c518aee1a7",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "e898d7e1-372d-4eae-a991-f823be9e217f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2523ef62-7f64-4e8e-9d02-96fd03fb2a54",
        "cursor": {
          "ref": "bc05207a-0509-4114-be8a-f86f8ea698da",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "d4e5dd36-f791-4144-b39f-f98a875fe29c"
        },
        "item": {
          "id": "2523ef62-7f64-4e8e-9d02-96fd03fb2a54",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "5ed6f0eb-4976-487e-909f-a711760a91b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cb80166-58af-46e9-b537-70c6c739a98c",
        "cursor": {
          "ref": "0c590f7f-d130-4ec9-adc4-30853a4d2bf5",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "65c4b6a9-1ecc-42b2-b698-41275024fa9b"
        },
        "item": {
          "id": "4cb80166-58af-46e9-b537-70c6c739a98c",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b6b02743-c805-47a3-9ab4-87774c26fcf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f6c21c9-26e2-4c30-aff5-b2ac094bcd34",
        "cursor": {
          "ref": "c09dfca2-80a9-451c-8bb3-f7da14aad16e",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "575c3e57-c672-456c-bf58-c125354c12fe"
        },
        "item": {
          "id": "5f6c21c9-26e2-4c30-aff5-b2ac094bcd34",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "60dd3aab-8da7-44d8-a57a-e34919998499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12dc35b9-6b9e-4b0e-8190-1dd921e6ae67",
        "cursor": {
          "ref": "22922e0b-1829-420d-bde1-329851e849a7",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "0fb45c40-4ac9-47ef-85cc-3db210beea89"
        },
        "item": {
          "id": "12dc35b9-6b9e-4b0e-8190-1dd921e6ae67",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "909e68ef-e45a-4071-9829-f025cb8e887f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b41c84de-1477-4e17-96ec-8be221cc14b6",
        "cursor": {
          "ref": "4363bd54-42ef-4a4e-a8c9-76f13c17f89e",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "941bfa53-8f04-4056-855f-5c0468a57855"
        },
        "item": {
          "id": "b41c84de-1477-4e17-96ec-8be221cc14b6",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "19382bc3-a258-4e3b-8f11-5d42c0490f7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e82320b5-ce45-4f12-92f7-0ec323acde8e",
        "cursor": {
          "ref": "96a0962e-3ec9-4348-979f-e82e0f91e7b2",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "fe8d3551-9c48-4dc6-9df8-a86eb28cbd00"
        },
        "item": {
          "id": "e82320b5-ce45-4f12-92f7-0ec323acde8e",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "66823c58-49d8-4f99-9f39-f21d1966d8e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a01bef1c-fc6d-49ce-9093-656c8aad174b",
        "cursor": {
          "ref": "13f007fc-fd06-4670-b42b-99e6cb05b85e",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "aa115636-b823-4bf9-bbea-8239c12ab6f1"
        },
        "item": {
          "id": "a01bef1c-fc6d-49ce-9093-656c8aad174b",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "79e8ff3a-b4c9-4c6c-983e-b2a75267183f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31d4bbea-c530-4f87-9f22-dec7444ae231",
        "cursor": {
          "ref": "3aebb4fb-deb4-4dc8-a2b9-7afc789050fa",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "81494564-c000-4971-841b-4d33b272ae7f"
        },
        "item": {
          "id": "31d4bbea-c530-4f87-9f22-dec7444ae231",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "06c3ff19-2356-4bd9-a5dc-cbf42ae7c277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eed4fc8b-223a-4dec-a13f-ba32911412cf",
        "cursor": {
          "ref": "39bffeaf-c89c-4654-b696-74cbd3190518",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "ef75e2e1-dac5-444e-a9b2-338589ff0f61"
        },
        "item": {
          "id": "eed4fc8b-223a-4dec-a13f-ba32911412cf",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "48871638-c038-4465-901f-bc2ab112dd98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af5de403-46fb-47c7-9fdd-8367b26a0e4b",
        "cursor": {
          "ref": "1977aa5f-7813-401e-8c95-20b4717edcc1",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "1e12923c-49e0-4abc-a164-7cc80180ac10"
        },
        "item": {
          "id": "af5de403-46fb-47c7-9fdd-8367b26a0e4b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "313c99cc-e846-4c93-bd09-d60ed1a3366c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52168e04-acdb-4c40-bd7a-fb502dbe8237",
        "cursor": {
          "ref": "69c55620-e614-4ba1-9acd-6fa6015f9447",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "79c89bd7-e976-4b28-bd6f-5bb9bf77109f"
        },
        "item": {
          "id": "52168e04-acdb-4c40-bd7a-fb502dbe8237",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "50be12ac-6af1-4e51-a81b-844fd5754d43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d02ded5e-9144-4b51-8a44-73e88bfbccb0",
        "cursor": {
          "ref": "1e3e7da8-c950-4bab-9f41-dbdcf490a7b5",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "9f662995-1275-47b9-96cc-26c5a395bdd3"
        },
        "item": {
          "id": "d02ded5e-9144-4b51-8a44-73e88bfbccb0",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "c2868a3c-637b-4fa7-9291-5bb0d2445455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a14b0238-cb0e-44d8-a4c6-36333d6700d2",
        "cursor": {
          "ref": "e364d9b7-e4f7-4cc5-b2f3-25a97aa8465f",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "e3afe1f4-a14d-4621-95e1-355b52a908a8"
        },
        "item": {
          "id": "a14b0238-cb0e-44d8-a4c6-36333d6700d2",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "ef89e0ed-5889-43a6-b56b-a6f8884238d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1be78e6a-100d-447c-9783-b1e764062f31",
        "cursor": {
          "ref": "b995774a-ea3f-4b45-b0e0-42d59b6cf1e0",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "37b56a79-f08b-46cd-bd10-4d1b5a03005e"
        },
        "item": {
          "id": "1be78e6a-100d-447c-9783-b1e764062f31",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "50c4f2e4-780d-4c9b-bd01-94f28f3feddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d711a2a-a1b7-4029-8645-dcee7ef59347",
        "cursor": {
          "ref": "8801e331-3f69-4ff1-8b9f-dc878a84ed7b",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "0c0c0e39-2139-4963-b712-c224c4294ddc"
        },
        "item": {
          "id": "9d711a2a-a1b7-4029-8645-dcee7ef59347",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "d494f720-048f-4f5d-96bb-bd7cda26e1bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11b4fa01-5ec5-4473-8c2e-1d406718632c",
        "cursor": {
          "ref": "5b4f837e-95db-48a2-a2ae-e836d8ca1270",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "d52272e5-321d-4379-8080-1162b1a7d494"
        },
        "item": {
          "id": "11b4fa01-5ec5-4473-8c2e-1d406718632c",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "7b2a02cc-6088-47d5-90ef-314ca0bfa528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e71f9bf-24be-4d1c-b1f9-981c67c20a3c",
        "cursor": {
          "ref": "33021c90-f86c-444b-b7da-fc5cc0e5e01e",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "42475993-70f4-4cc3-87d5-0bcc043adcd5"
        },
        "item": {
          "id": "2e71f9bf-24be-4d1c-b1f9-981c67c20a3c",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f354bcff-24ed-4a40-a988-43d80aa4b97f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66453f16-c99d-4edb-8e87-e0ca25e496bd",
        "cursor": {
          "ref": "3255ca06-406b-49fd-9a93-58abb2eda25e",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "472e0e13-b184-4d9f-b4b7-882aac54b18e"
        },
        "item": {
          "id": "66453f16-c99d-4edb-8e87-e0ca25e496bd",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "6525c6c0-3958-4e59-9b40-61a8f704b788",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b82ec48-e319-4cad-8486-d0eb94c03a49",
        "cursor": {
          "ref": "034278e1-0d93-41fb-8fa6-eb8c2478f223",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "6708e877-c417-41f5-b680-66e423a03181"
        },
        "item": {
          "id": "9b82ec48-e319-4cad-8486-d0eb94c03a49",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "2504fea0-0ca0-49dd-bc8a-3416fba500d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bde7d00d-0702-4d39-9f3f-e330582a7300",
        "cursor": {
          "ref": "f6eee81b-196f-47f4-aa1c-056003d888c2",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "438cb8c6-cdfd-4c2d-9500-a1b8b83fdd31"
        },
        "item": {
          "id": "bde7d00d-0702-4d39-9f3f-e330582a7300",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "f2ce14e9-3d86-4d60-849e-55b9e80f3e95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46365b48-a2df-4159-8ed5-0b4a9aac1a45",
        "cursor": {
          "ref": "4bbafb08-a903-4ecd-b7c6-500689b6d779",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "6a498bc7-aa5c-4518-a086-d708c0b48f76"
        },
        "item": {
          "id": "46365b48-a2df-4159-8ed5-0b4a9aac1a45",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "72f98f86-d52c-4dde-8047-177bfc4b1e89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c9b2395-de92-4889-9640-69796bebc265",
        "cursor": {
          "ref": "d6fb4534-0caf-4eb7-b464-326b2a121ef7",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "1081e1d0-41b5-47b7-a6e8-54d4e998b774"
        },
        "item": {
          "id": "9c9b2395-de92-4889-9640-69796bebc265",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "f94a9b5a-cef9-4ff9-86ca-2d2af711039a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eee34e9d-5c87-48b9-a084-ffd5f2af1236",
        "cursor": {
          "ref": "cb589518-74a8-41ae-830f-a0e05252bb8e",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "2417c68f-16c6-4799-a2e0-b34459e66887"
        },
        "item": {
          "id": "eee34e9d-5c87-48b9-a084-ffd5f2af1236",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "4ad6cdc2-ab2d-4bfb-b58c-263f04ec355b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a658732e-e406-4510-82f9-e94a579a9ec2",
        "cursor": {
          "ref": "c9a02455-2125-4ad0-8352-29a26bc6bfaf",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "a9b459d1-0cf2-4dfc-a993-57acd8fbaee3"
        },
        "item": {
          "id": "a658732e-e406-4510-82f9-e94a579a9ec2",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "cc096fac-10e5-4b40-a597-cc272d15687f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00e79829-a5b1-4e55-b984-0583a65a4091",
        "cursor": {
          "ref": "a9493901-1aee-4a73-85d8-135cd647762d",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "e6a06fef-c427-4280-901a-84201cdede57"
        },
        "item": {
          "id": "00e79829-a5b1-4e55-b984-0583a65a4091",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "569059fa-712a-418f-8b82-5a7420f0ec85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55e62de8-ace1-4f77-9c4f-aef70fb0815f",
        "cursor": {
          "ref": "21277294-d0b1-4792-b590-96b80ab1e958",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "2d571f26-43dd-471f-8af0-717a95c378e4"
        },
        "item": {
          "id": "55e62de8-ace1-4f77-9c4f-aef70fb0815f",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "87716b7b-9185-4b87-8a72-1d55d2e91e74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31152f42-ffcb-4b6a-84dc-a6791cb2fc10",
        "cursor": {
          "ref": "07e8aeb9-ccbf-4eaa-adcb-2c00b1667fcc",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "ddf53090-2927-4c39-9791-66322f37f6f2"
        },
        "item": {
          "id": "31152f42-ffcb-4b6a-84dc-a6791cb2fc10",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "610a9f8a-adbe-4ba8-97a1-b081885479e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55c0ffe6-0b28-412c-80e0-3d55a9f688e6",
        "cursor": {
          "ref": "0fe5ca35-4687-4bed-a021-0288c7612c8c",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "7897f316-2dfc-41ec-b670-ec827a8d35b0"
        },
        "item": {
          "id": "55c0ffe6-0b28-412c-80e0-3d55a9f688e6",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "b0c524f9-2eee-4328-98d0-b40268df9481",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b28683c5-8e0d-4eec-9ca6-e9d0d0fdfbd2",
        "cursor": {
          "ref": "286272ce-a730-4767-8670-4c2f18c1a109",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "49550623-ff06-4fe9-b04f-2b6015f687f3"
        },
        "item": {
          "id": "b28683c5-8e0d-4eec-9ca6-e9d0d0fdfbd2",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "9d24acd2-ac62-4e0f-a6ac-569113f48995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "709f12dd-bc92-4251-818a-ddeb8ca6a92f",
        "cursor": {
          "ref": "3b6b4206-d341-4316-b27b-a460183066c0",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "f43875af-aad3-4921-b0a4-a256d154919a"
        },
        "item": {
          "id": "709f12dd-bc92-4251-818a-ddeb8ca6a92f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "22484f39-3cea-4e90-a1fe-6b224321c074",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84ea3100-7e9f-4f3f-8797-6a8fe69a7be0",
        "cursor": {
          "ref": "919a7bd0-73ed-4d44-b0c6-e4ffe66e636c",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "f132bc88-5e73-40d0-81b0-39ed2b21200c"
        },
        "item": {
          "id": "84ea3100-7e9f-4f3f-8797-6a8fe69a7be0",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "04cd9e57-d0a0-4d21-ad9b-854c25fce7aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4efd3c4-8dce-47b0-a491-df5bbc1fdb73",
        "cursor": {
          "ref": "e9b5bae8-0bf0-4f21-9c83-ef98ff22ec53",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "2df13f64-2144-489d-8496-9fe3a73c0675"
        },
        "item": {
          "id": "a4efd3c4-8dce-47b0-a491-df5bbc1fdb73",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "8e99b531-80f8-43df-ac3a-66aa442fd46b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb45d20a-638e-40af-81c5-8f1385c50133",
        "cursor": {
          "ref": "7b2605f5-6277-46fa-abd6-280829217556",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "552f2461-bf05-4b8d-b76f-eae68b523a6e"
        },
        "item": {
          "id": "eb45d20a-638e-40af-81c5-8f1385c50133",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "e233670a-8fe4-4b51-ad99-3993cec2264f",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "8cb14d1e-0571-4d00-8254-cd6cce143695",
        "cursor": {
          "ref": "414dc566-b85d-44a2-8fc8-99fac9997cef",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "5378d03a-241a-4548-a72c-cb9c1a9a9b70"
        },
        "item": {
          "id": "8cb14d1e-0571-4d00-8254-cd6cce143695",
          "name": "credentials_verify"
        },
        "response": {
          "id": "3a240787-4d85-4d83-a9d0-bc1599b174cc",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3a5f068-c647-4649-aac0-806abda14d3c",
        "cursor": {
          "ref": "d1a39549-1715-4a3a-8e4c-d8ce3b8f03f3",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "8b352fd9-eae0-4590-babd-c161cea5bbc7"
        },
        "item": {
          "id": "d3a5f068-c647-4649-aac0-806abda14d3c",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "df697dba-28d9-45e6-8ad6-1919bbc604b5",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "11d7f171-7e87-478c-85da-f747ec52df91",
        "cursor": {
          "ref": "5738c3b2-0ed8-4e86-9888-76d0fc702f74",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "4d075c93-3d6e-48dc-b0de-131b8813f9d0"
        },
        "item": {
          "id": "11d7f171-7e87-478c-85da-f747ec52df91",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d251389d-f023-4484-9e50-388a3c6815e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11d7f171-7e87-478c-85da-f747ec52df91",
        "cursor": {
          "ref": "5738c3b2-0ed8-4e86-9888-76d0fc702f74",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "4d075c93-3d6e-48dc-b0de-131b8813f9d0"
        },
        "item": {
          "id": "11d7f171-7e87-478c-85da-f747ec52df91",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d251389d-f023-4484-9e50-388a3c6815e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f843670-e61a-470d-8c7e-d6ec467e10a6",
        "cursor": {
          "ref": "041b4257-c6bf-470e-a089-231cfd198789",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "488ee2f6-426f-4fe8-adcc-a172bff6c145"
        },
        "item": {
          "id": "8f843670-e61a-470d-8c7e-d6ec467e10a6",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "32853c8e-80b3-4511-a82c-d2bd7bd98085",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1baabb1-8148-4ede-b117-9fc91f173902",
        "cursor": {
          "ref": "148c6826-6798-489d-81e0-0e4bfe16669d",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "a403565b-7bf0-413f-a14d-e2e01cf652f8"
        },
        "item": {
          "id": "a1baabb1-8148-4ede-b117-9fc91f173902",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "7c45efa6-1e4c-499a-8afc-b226239eaa46",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}