{
  "collection": {
    "info": {
      "_postman_id": "e9c7f21a-ef69-4217-8f40-0424834c0fdc",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "6a3937ff-8a46-4143-97e7-42b249604647",
        "name": "Clear Cache",
        "item": [
          {
            "id": "0028d17d-5659-49a8-a575-f49ea4b0849d",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1e4b28a5-d9d9-472a-a59f-babe2e7353b0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "64a82f65-a350-4bb5-a98c-ce51c0aac01a"
                }
              }
            ]
          },
          {
            "id": "0264a724-1f5a-4ba2-8c07-00c00ec0ccf4",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ea38d758-6b3e-46b2-baea-bb911bef86d9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "677353f4-c84f-44be-af5b-27fd83aa2276"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8e4d46df-66bd-41cf-afc2-831bd477cf50",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "14d66e83-5fc6-402b-8060-a85415b4cc41",
            "name": "Positive Testing",
            "item": [
              {
                "id": "609e6162-e86d-4709-a096-bf48a16b87b7",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c249f2b7-591a-4149-95fb-54baca454e2e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0fe19402-5969-4d7a-ac55-152fd1d239bc"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d458ccf2-297b-47e0-9424-5755f2521f5c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0cb0842b-f833-49b8-9f67-fba25c96dfb1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8e3f53b9-7ea5-4805-9d5d-91e591893091",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b4d839e7-0778-4a86-84df-d7bf3fed26d1"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "442a518f-7db4-4b94-adaa-7eb82df24cf8",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "b30d1193-0ca9-4247-ac7b-d59eb04a3cbd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a73fed3e-af98-48af-809a-90dc036f8475",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8faea4db-e523-499a-9acc-41d1edc0b86e"
            }
          }
        ]
      },
      {
        "id": "81f69140-bfe3-4c89-8631-e89846af2d4b",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "5f58fdf9-5d3b-4a9b-ae34-05faea6a4e79",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7ef67019-ae36-465b-a5c1-73f44edc2bee",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "063864cc-239f-487c-a0ab-06a7f8eb0f9b",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b095eb9e-ed08-4d70-bdaa-537e369c89f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0dce5220-a20f-4ffd-b0ab-b418b0810b45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc4cff8d-d6f6-45ee-94c4-b913515b524f",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2516430-3a67-41f1-b8e6-7e619c7f4061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f0c33b66-c17f-47d0-8755-4b08786e351b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fb4ab88-c4f1-4152-8929-8411ef45b45a",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6329478-464f-458d-acaa-d75c49c68846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "08229b30-f4c6-4e3f-8ef0-5fdee147a5f0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e74ddc97-eb05-471c-8fae-a29941d857fc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c6a0bd6a-8569-49f3-8f25-a79b988ba1fb",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd95831a-4924-4827-a49a-8c4b82336cbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "22525c8b-d930-413c-9546-0ed7156cd71b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eed8aca-1daa-4eee-8ad1-d1cf607c5f0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "145b43ea-492d-4357-9ab6-5a3a1e45029f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ffe5a495-640d-4a80-8a04-a7f427bc333b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ebb860c5-fe0a-4735-b51a-2bccaceae9fb",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "03aaaac2-f03b-4b45-8073-4feca3965f5f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f5795a08-d4e7-4d57-bcc5-ddcebdefc48a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "65bd624d-6006-4337-adc9-f431f7cf8129",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "8081dea9-6910-4713-821e-a4002c81e157"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9d357199-8183-48ef-b238-d4401e7c077b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0456c36c-9b82-427a-8aec-b13ef74131c8"
            }
          }
        ]
      },
      {
        "id": "2750d9ed-276e-4d29-b42f-c7474e8557dc",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "cc472eda-0611-4aea-825e-1a4f7f31a44e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a7832c92-30c8-4cab-ae29-bc440a312361",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "6ec9a656-caca-46ca-91b7-996217ce73cb",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28cffe5f-5589-48a0-be14-d3ff7eced66d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0f8e55c-d838-4c6b-a2f0-da1543df965e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "add068ae-7087-4822-860b-42c4fe3cbf80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d3519d88-96ca-4413-979a-2ed64ba3095e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b38d136-27e7-46b3-a67b-e5d05a683449",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea6d0070-a0ce-4696-9cb5-c64f1172a5a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0e47a8e-d678-4c67-81e8-ede723bc3351"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6289136f-fe24-4527-a48a-b06f8bd2a9f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "164d32ab-ae6a-44a9-bd6d-3608c2e051b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53931a1b-4caf-4e9b-97f8-4ce301afc4ad",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8030f5dc-bb8f-444d-9a4b-2a07e4467a69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff03a73e-6c66-490d-b18d-e04985475e58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f24e8136-a2cb-405e-b633-623d301b5ce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f9c9b91f-ff96-43fb-b2af-a56a6659afb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f200f11a-f43a-449e-8c4f-7efd6b1e876e",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21562c9b-5e1c-487f-8b01-a1643294fd7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c944aa83-c157-493f-9256-2a9a80a021df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47c3da60-ee27-4c50-a4e9-20ba50fa214b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eb437598-0a42-4ca1-af1d-59756a22143a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa212947-f8df-490e-9d7f-3bb1fb61781a",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4050991a-1b25-4ef3-ab22-c0e33e1eb531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90e80217-6a6f-41d1-9b61-1504cea1f25d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef5edaea-1adc-4129-8d32-1eb188a0a8c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f65d95a4-2b13-460d-9857-f5c8f7f2fb69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e221274a-1e0e-4159-aac1-62889630da32",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de8b6928-15ca-442d-bac2-704cbab75624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6f210cf-8436-4a43-b307-de0d6bf8d035"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed3dd61a-e86f-4048-bc72-2d307376c380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "50677528-5cb1-4e3e-a579-302fb89981ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ff1f008-5d4c-46a5-9eac-ca1371506b40",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0643ee8-3b64-4b2d-ab89-97292f588820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3a3e84f-6d3e-45ab-a529-85aaa8bce2dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6a40d63-2950-48c5-89e3-aeb78033ccf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c9dc0f1e-76c9-428a-bce7-582615b790be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73381642-31d0-4633-a7dd-fa8902906543",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2909b3a3-754f-4d39-83dd-0239ee3563f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f7d0310-0e58-4ae0-920a-dd5a0038c6a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "603930b9-797b-4cea-8490-964bea1312fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a3335462-397f-4454-9089-34edbf938c5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b5d5549-4e8b-4f03-86f5-8822aa070291",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "263fc333-962e-47db-b2b5-042227a6cc94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc8aa069-7e4e-47c5-93ef-13149831bf0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5507d8d9-66b0-44fa-b60d-496c361729cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "83d95876-1577-4d19-8ceb-f496fa390c67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76e9e58a-7a50-4c58-a6e3-7a442d647983",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80fc8a55-c6b9-44c9-a9fe-4c56c61402b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29868828-a5cd-4c1e-b6ca-43714e6a9c92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f8e8fb7-1728-49e5-a404-5c53890388f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4501a770-6da9-4db2-b26c-f8cd1714f0ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41b8e0b3-3d56-4317-87ae-4f1a47e68f44",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22c06f7a-7f08-49b2-b06e-e8d927b8b28f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1511ee3b-b1aa-4f93-974b-dc509ebb40b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb656eb7-c9df-4504-a20f-fa0ba1a6f2d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c70a2f7c-4972-4fc2-9d87-327a72ff1417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "155de797-8014-4c1e-bed7-5c14b963325f",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd8b2367-b477-43eb-8d7d-a9638b12ac28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b02e486-1e43-4322-8753-f6a9da7c3c3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58b6698c-dbbd-40f9-a471-4b741851c433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "104c952c-782e-4f02-a21d-940a998d8a51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94326e74-41b0-4d1d-a668-e15950969808",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9eae760-bbc3-4621-bf30-9aca0e246894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d43c08d-c895-4c3f-a821-f5cdea63efd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a54c6fc4-583c-417e-abc2-8d52a2278a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f8d51e03-95c0-47c5-ae45-3f51cfb318ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1771af58-99a1-44a6-83a0-cfdfabbd9745",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a98464-c519-4633-bef4-11f1d506ca4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52be271d-fd45-4912-a9fa-a7351c8a7d4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bcb6980-573b-4a92-a15d-5503154ca264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe6dcc34-ac80-4e56-abd2-6f133318b8dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2b6aa4b-d04a-4051-a771-87fa52fb8e9c",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f1d863e-8710-40b2-8e6d-f3307dc326d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23dbc146-3889-4fb1-adad-c3432494ce9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f518d35-e41a-4499-9b61-a61c61fa1517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "326a803a-489e-42a6-89c0-a81813fb5236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97cc89a2-0297-472a-b858-752c8c393add",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "513f5af8-07b7-4b6b-a416-cbb5174e0f3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "024d85ac-9654-4328-b682-b38246b95b23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "106297bf-5605-4c01-ad72-671b9d57bec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f8590615-7396-4c8a-bfad-b8bbcdb493a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2193d85-3c99-46ab-ac84-a0aed8b83dac",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f20943b1-a0c8-41ee-b28c-a6d154915e60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2829a5be-2a6d-4c3a-ad5f-7e619b9c0c63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c276015e-78a9-4986-a01c-35b5991fc7f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "70d549dd-68b7-4209-886f-befc408cdd87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecb24349-8880-4743-8c50-17e136aadcb4",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba0916b0-6b7f-4510-8c67-d6401ea3b6ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "968498ca-8125-455d-855a-4ecd0a73654f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23e5d3d5-f766-405b-be9c-b6e425d1419b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1b6a0d2-2d7a-40eb-a2ec-fae93644f75b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f05a1a8-631c-40d8-927d-63b9e6955049",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dfcc157-fa4e-4985-b6bf-7bef25e042d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ba4cbef-cfdc-4356-9cae-d239cd744731"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "111f8346-5178-464b-bb06-d2480f4ed78d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfd2489e-0e34-4eba-ba64-ba3741c68815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c08595d8-d29f-4604-b048-12b1f110e92a",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "699066d8-ebf3-4444-9da2-262f051ce2b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abaddc53-2fb1-4619-a91b-c6a0fa33dc11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e4b48ff-afb5-4725-9e05-1c0a7f2bb398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb388976-a082-42ba-bd70-df89e9742de8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a8156b7-1dbc-4be8-81c0-fb86c0d7ccef",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fc0a102-83af-4a2d-9196-1f1eb11ce9e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6683d725-c106-4bc2-b439-09a31be0177f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f314030b-8380-46f5-86ef-a3ea208e00d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b358af3-68e5-4543-92cc-595a78d445ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7468db1-bc08-4f0f-8ee4-bcd041637cba",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "732bc2ee-38a2-45f3-9ad7-45ff9b4d7b66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e47e536f-55c7-4050-a1b2-5dce661c24c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b146578-f1f5-4a3d-8091-4c80798234c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6721334f-1317-417b-b112-f4a50c2623ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d23900f9-f9bb-4fce-bf95-7fc9a780b04f",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6c4fe68-4e03-4a9a-bcdd-540f71847444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73003a10-a58f-4503-8e26-ba28bda676a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fd124be-8f49-4d30-996d-1b3a6bf3195b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "abb28283-f8e4-424f-87e6-3e026dd34048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6414fd7-d1a6-4df1-9a05-5f7ea25ce7f4",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f60152b-a8fd-48b7-99b4-73ebf2345fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de7322a4-f8dc-44e1-969a-4d4fb36a49f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5450be0-7e1f-494a-935e-ac4f47b51fa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "362cb56c-598f-4113-a39d-a94fe25c9f87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4083af16-3bc5-4276-9479-0b06d973f78e",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cd133fb-5142-458a-908b-c7687a040186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1f203e6-8c02-43a7-ad7e-df1ae64482c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55a3088a-0ad0-4798-b159-708c58c05503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fe3231b-77e6-49da-bdff-0834cbf4daa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcabde82-4235-4be8-827c-b2cfa740f750",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fad58720-0927-4825-aa3b-76b3142c3394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82aa89bc-bbf2-4e7a-a430-2020c6d05924"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c8ca482-222a-4f58-a3fc-4b9c1a713f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a5f39f2-25f6-4cba-950f-ff68117fa394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "197d9055-c87d-4a98-9798-61003966ecfe",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4b5ae4d-ca4f-45cd-9077-2919ac2a1c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34c761e2-e5b6-44eb-b518-2836117d3f04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba749bdb-1dd8-4e31-8a9a-ae84cd47f5c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ddda30f-cb6b-409c-b4d3-394913c33b57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d3a1487-54fd-4737-9c79-ed4e6eddca95",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abbce754-84a6-4d86-b289-28eeef1ac91b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abd1e121-33b8-4c62-a4f1-b8bbcd8c965c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d86325d9-6f6e-4135-afaf-c8cbca9d460f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac03b3e3-df1c-4894-ad49-3654f0072d0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4188f444-599e-43c3-8c02-63f42c5a862e",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "849d8b83-a3c4-4f21-919b-2a8b8baad1a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b51a92b-0280-4baf-98dd-ce57ab00d330"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42355dfc-2d8f-46a9-9bad-09660701ff6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3eda5d4f-e07f-4936-8fdc-c61c08932bc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e7c9dd9-02f0-44c7-af45-67cc2033506e",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "243af186-a77e-4a70-804c-bed8dd24ab39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8ad84d3-d0f8-4276-8d05-7c25e1869db0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b512186-dab7-424a-97ae-69ede0ebdff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "03dc5eee-6303-490a-81d5-303a16ef9edf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc12ed4-91c4-48a8-854a-a0184674a224",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55168892-3fd1-49c7-a090-34ecc1da04dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1867d01e-d7c1-496a-9548-b5d1595c59c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a79d6194-1d63-40f0-a996-73ca4c3b045d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b32d48c-af7f-4a5b-8956-0ed148fb288c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10916d54-7b4b-493b-b42e-7379e6de73e6",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5e3f58b-446d-43c9-9ce4-eb474b327f1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10fef0ca-1c59-48c4-8c94-454a06dcbd41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "489061d8-8ce2-4422-a7c5-ff421fa24259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cfa91d7f-ef2f-4223-92e0-a35a1e708e4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd05c6af-dc6a-4f7a-a027-2f178f3292f2",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3db33bdf-e98b-4e1d-be9e-5c01285c344c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "353362b6-6c60-4b7e-acaa-ba04e865d110"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f81fa3b-1349-4835-ac28-219db4d89a67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4c3847a-af7d-4d90-9563-13006e355680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4bf561c-32ef-4d35-858a-9a4e95828062",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "143f4c05-43cd-4c80-a80d-ea49285809b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "738a8784-abeb-4ba8-abad-ec013f6562aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2791d511-4af8-4ee9-bf18-26aee2a5db6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e1eea87-7ba4-4f04-aeb8-8672343261df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b5d97ed-7177-47a1-9166-113c05c81cec",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b26696d7-55f1-4c51-bafa-f1501cab569b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85ef2fa7-14c2-4349-beec-e06b66d897e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5527d1f1-85a7-468d-8f6c-d16384338874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "36e20b9a-0b2c-41b7-aeef-c03751786db4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccdd51eb-9bed-4e78-877a-752ca8bb1092",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b78780f9-4038-4285-8751-faf919d65678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "39ad574c-74b5-4190-b950-2845741fe50b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f895116-fad4-4b8f-a834-990bbc49b69a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9e10a879-c0cd-4304-9fe6-2d636b11d036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de8807fb-a24c-454b-958b-33f3bb204778",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40242652-0e80-402a-bdfe-e7034690cc6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a598c551-8030-473c-908b-ab57dc07bdeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b47efcbf-097b-4d7b-9ad5-7ca8b0a4773c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e603d88-4227-459b-af16-664fe5970ece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3299a5e0-bf5f-49ad-b92e-b90d3261061e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39791cd6-1e33-41f0-837a-6e42c5e0e434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05862dbf-b102-4e1f-83c9-699b4d0e655e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77de53ac-b851-450c-aa98-9fe3dfc3ac6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c64783cc-31eb-4ffd-8c7b-d7bde67cf19e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6997bb3d-def1-4f9e-bf53-508f6bd69e9b",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df2371ad-d0ac-4dc1-9017-f751faec939f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "845f6d39-a52b-447e-b20d-0015b333f824"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52356395-0669-4c80-b230-2390eb01a403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cec16687-9d62-4a23-bc9a-1415f4518f51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f303641-a90c-4738-9bb8-6b9d06067006",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "931a2755-777f-4806-aa68-fa1732c7a560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7affdfb3-f0ba-4c87-8029-1525f0e2bf51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "386621b1-c2ed-4075-aa20-85a7e8a82c63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5204e470-665b-4cdc-835b-395936c5f505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a262a0a7-cbf9-4b07-b6f0-a77b112a59a1",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c316518d-d420-423b-abe8-d440e606f263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ffba2db-f5d5-4540-af24-c2637eadafb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb6f7172-8312-4da8-acf0-c1abb25d8a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9d48daf6-1ba1-4685-8dcb-9532fe3a2b4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbd8e810-ebba-47df-9049-86f7bab3762a",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2561db44-b84e-489b-9fb3-f3f4fd6593d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c80747a-eb89-4279-a023-75943eb05d60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10ade13f-455a-40a2-9a08-861619e40f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "1580ed85-3869-4dac-b48c-9044786c34ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f44aa802-7ef9-418b-a02e-a5673606491d",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3f28279-518c-4e16-8fd8-3c76356b4ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d588d5d-2e42-4570-b3a8-a5fdded5f181"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32b7f1bd-7329-47de-9a18-28ab5f7d3bf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "432e4547-e9d4-4f18-a14b-7f8ce5cb035d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca4e268-9397-41f1-8584-d2009f055939",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43c8a705-0dc2-4f1d-8602-0bc45df91177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5f89577-4d97-409e-8f15-e584aa02d857"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b6ba119-885d-4317-8644-1fa1c3e2250a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5e1a37c-e437-4d0a-b255-fe6c7738a4c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6336a577-093d-47f9-ba2c-b28e2599e652",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd082094-a3e0-4251-8a69-73780c9b9417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc0a9185-d5b7-419e-8f04-b94c66c81dd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6de7d700-de59-4827-b738-6922e9c1cde6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a070435c-a788-47a5-ab38-e25e9bceb046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "debf2eb3-bf52-4baa-aace-4728572afd66",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "762166ab-4cb9-4393-b304-7d70178fe2a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b10d9577-e7ae-477b-a013-23f020efe878"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1191e83c-d787-4d8a-a2ed-02af9efaea31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9670055f-55ce-4a08-8475-8e2f06523633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e9c0111-41ae-466c-8e8e-ba4cac192f91",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fb02d29-041b-4fe8-92d1-768bac0efa83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ee7e1cb-8760-47d2-aa77-d475b7ad2ade"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a19f2e82-64fb-4055-9500-c85e349c0d81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8cf691f8-a5a5-43a0-9d51-afa8c2719baa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dde421bb-1269-4cff-bb86-6366d86ef5a7",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "119f187d-c5ed-4109-9a20-160814ffb55e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89626058-5d01-411c-966d-fa488e26c024"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c532e2be-29aa-4637-923a-34f8d88908c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b76cf379-cfed-47bf-a037-79f503621821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "070ade37-c5bd-4812-b3e5-050021615dad",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1412cc3d-53aa-44fd-928e-9ba822876cb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "925d1284-1f62-47cc-8f2d-5f22fd40e833"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57c6fd58-500a-4ebd-85de-f3910b58a886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "65f22e54-1768-463b-9e00-e1c351196bb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31ff1fa2-ce6d-4190-bdec-0c705fd51251",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c19e7e32-fc49-404a-83e8-3b69b5d1a79a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38ac479a-444b-4b86-bff6-d227197a8a68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff4d4994-11a5-428b-b36d-1d2b8e796302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "36b06f69-9238-40cc-ae64-8552d74b0115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0334a791-47a8-4aa1-adac-2defe5a355c6",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4682982-332a-49be-a392-1d7b428cc2a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e44c1049-f206-4bda-aad8-9c1d9c8fd347"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4da25d7a-0a57-42c7-8d53-47a04dbdaf1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "d623b1e7-3e6f-470e-be33-7240beb44eab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "667f982a-6623-4e3b-a239-d7d327d0aa51",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7698c71-8718-42c0-b490-c58f796a29b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4d566e1-eff2-4af6-bb8e-56d29ea5556b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fec45124-8cae-4e4e-b9a4-8f3f82ecd9b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0041867-18b2-4d5e-bf16-8ca8152cf88c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d1b222f-aee9-488b-962b-44e164377274",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3b872df-41dd-410f-beed-0314054ae496",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b32ffe0-c7af-4ed5-9683-b252700a1b7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a6d3d67-a13f-43a1-bd0c-bc767add30f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "79847f9b-edaa-4a32-a7fc-677f9b1716e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b02f917c-e362-4ac7-99d3-3ce641ef1862",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "124b269a-34f5-44df-a991-d3c69a78715b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f24bc453-d636-4b05-b4ea-fe86f464609f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d95139f-620d-488d-a337-acae8958e7ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b4b3bb5-f392-4e65-84d8-ececa0a78276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42b675fa-f684-48b5-8230-df191bca0c81",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa5ef99e-143b-4408-8982-4f66e705acbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f835e59d-930e-4790-95b1-ce795d00a58d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f4407f7-84de-4179-a01f-054b6b23323a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "30f0e708-5c77-4b88-ba33-12eeb5d9fed6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "465118b4-3033-491e-ab5f-fdf9765ef961",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b02a89b1-815b-4e84-afd4-b9eba02374ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08410d1b-9b93-48a2-9831-352f9af88560"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fac8086-1fe6-44b2-a9df-11f5891f96d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "3af5a502-b94e-4989-b90f-7c8c34e8f911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b717bb48-1948-4e4c-8832-0bc75786f9c6",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59cd4e4f-121a-4c87-9b54-9239085541c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8392262-8928-4ed4-9a34-4381643edbca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "480cfba5-6232-4a6d-b350-73774f9afd57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "dafabb70-c0c1-4009-8520-683e398457a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c8f82af-20fd-4333-801d-27f30f94d3f2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01c89fee-f28a-4b5d-9036-0dcb2b513943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "053cab4b-2ecd-4b4c-96c7-6d7b75f6abde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2319fe8-2082-4418-810d-42c92e90a5de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "fdfeee4b-3274-413e-ae7c-2cebd6250389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d39c066b-8781-4cfa-acc5-58f5586dc2ca",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9da21105-dfde-41b6-8a1f-8d5c6eded23a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a655064d-4097-4fa4-9ac8-a39c95251361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "760c35ae-1a8d-44c3-93e4-b6e9788f55a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef1e9f2d-0567-430b-a34b-343ddebdb619"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02d682d3-2c40-4caf-b61c-fbb91367a706",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c124367c-459c-4379-bf58-dcecc58b514f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10a208f7-de3c-4f42-859e-89542d90295a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b31fca40-221a-43ff-8c97-05d29f0777fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa56738b-df35-4bf1-a341-e4b12ce7afd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0930737e-97f0-4740-990b-d273bbeac94b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e44f9d7-a670-4346-adb9-f8d47c60ac37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9ff0aef-d1b6-4918-8fde-903f94c2a360"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd67ce57-aebe-48db-9dd0-70a9624ec78e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "013e86e0-c419-4ed5-9605-231868ee4482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52405e1b-bc78-4d88-af1d-4270c6aad24b",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a03e458-4a82-4551-b4c9-0c568bfd7161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d171716d-704d-4ec1-bf11-1e7fa74dac6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "293b38d1-2aa9-4b2d-b25f-dad4e2fc8979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "f532eb04-30a3-4b49-8e9b-7caea85b2d2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce504c18-570b-4ff5-9848-14aebda8d207",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75ebfbbf-def5-4286-bafe-8b22a85cf253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40fe63c6-8770-4325-8444-cd04516d4d73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "967b7404-a252-42c1-8746-26a03f5ea48c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d21abc9-dd92-4779-ba07-da9fe17f169b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fd8419e-6d7b-4b5f-bdb9-79e435b8d988",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49b84bd7-fe49-475b-ada7-b22e0a5aa10b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1010366f-bc77-4360-9a14-3bcfbda6b32c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ed33e8a-9bd4-4f66-971f-4f4156f3a02c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1896219-afbd-4309-9dfd-7a0d1125b1f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4af3b93d-cb3c-440b-a1db-8f78357a5319",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f77c63a5-3457-4dc6-bfb2-32d607375aed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0a24725-7719-41cd-bb64-f4b864ee7c9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42ac709a-3efc-4ac5-8288-4e275093428c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3304736-14a0-4b34-adca-1e3c7de11da9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57156639-2d19-4bb5-8b6f-593af0ad9600",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f44f44c0-f9be-4392-b413-f79431cad23d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdfc82e2-6ed1-4a56-ae2e-24685db60b49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a08405be-577c-4731-9b9c-8f9324413d9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c5fb144-87fa-4509-a074-f44fc39c947d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b0cd977-a51a-4006-a9d5-00fd642adb7c",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aca55cd-b10d-4059-a91a-a31071a09348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e285ca3-f49c-4936-9b24-6c5a899231c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c27f307a-0de6-474f-b53e-ab83837d24f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "40cbfff7-cf07-4134-aad3-1d5652130cf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d4c4c7f-d4cc-4ad7-9b88-9e57d1a0475e",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fab38a1-b891-4cf2-9e96-1ba387041681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32e0352c-dec8-4239-9a28-00fed96391f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7d1d5e6-f91f-478c-bbad-ece2f04c329d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b07101f-aba4-49cb-8cfa-50fc984d8e94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e1ba75b-5e70-48f2-baac-3493fdf5b65f",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64e6f3f3-a6b5-4256-a449-6fbf54dd8751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "904f89ca-b0b0-4771-9484-d6c36d33f101"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a5c10b8-9848-4133-896d-d92680984308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3831289e-6846-4b05-9b11-d2aa1dcd2136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebf97559-3da5-4d7b-b6cb-0a270d5cc732",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ff40fb-9cf8-4e24-9b8d-a75e5dfadaa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "362b24b6-c7cd-426e-8d8a-21c2f82835a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd7bb9e2-e9c6-41d0-b6ee-43d74e983c4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0bf7e0bb-aa3b-4a94-82b2-6b746227bd8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5be136f-6682-40fa-a6fc-c9f70a5d318c",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd809661-cc6e-45ac-afdf-5f6267fd534b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b123213a-83d9-4d74-a1c8-15c38fae7210"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e75ecd2-2236-4af0-9523-d003f7795176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c57129e-73c3-4658-adeb-d79c442cf790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6bc0367-73a8-4c51-be29-4d72c92c6379",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6be6c47b-07d2-4122-aeed-cacf25c96a32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c41fdca4-68ec-4641-9412-b94ae561f50c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "744f8716-8a07-41b9-91d7-b7c1cb63c979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8f76082-12d6-4623-b996-4bb34519a64d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13878159-28b2-42ed-8674-3d7002e43b9d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d509e8-fbe3-4f22-8261-08e0a79fe04b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ac1a213-d3ff-4644-b6d5-f70936a4cf01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5660b08f-dc86-4c60-9c8b-c03be24202ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f891861-9204-457a-8b70-3607db1b9569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "769d2513-74c4-4689-a63d-8dd0948b139d",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9ac388d-1f7c-4337-acc3-d79231ebd34b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb57ec39-34ad-4dcc-a870-4eb2a2cf1958"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c71f2a20-3d3c-4a4a-9b4a-55e373916b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c14141e6-d85f-4c5a-8c5a-2ae9d839578a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c4bfbf5-c221-48e8-bcdf-e1f4f8ad1f3f",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d7185fc-9338-4644-8825-bec806cdb645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7b37155-a8c1-438d-aad2-0010b78e1394"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b38e28e8-89e2-4bd3-8df1-0508e3ce1e8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "06b69fff-d2ea-4bd0-8ac4-cc14c73ace8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98f85d54-791d-4a38-9bc5-b471dabc4fad",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d86d4f06-64fc-4f50-b4d0-368e280bba3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4342ff51-16a8-4ecf-972a-fff582889e42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57b90856-cd00-4165-86c7-0afd1c7cf5a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d7c0892-ad74-48be-9dbd-cc207257bcee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c52112ca-e8ad-4337-a600-43f15224c2b2",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c0c0ba6-f183-42c2-803b-bba7d70bb336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "964259e7-21cc-48d9-8f3b-348584c55bce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e25d0e2-956a-42ca-8c18-e8592899bfe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "817dff48-2cf3-416e-9726-718fba215cab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "441458d7-3524-47d3-b8f8-fc57b962f64b",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56e9a154-01ab-462c-898f-d2d05510d521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb4b6725-22dc-45ec-9186-13b4708c8370"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f51c83-3019-4232-b0d4-089527a8f128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d48e993-6c03-46fb-81ad-ac84ddca36b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8ba1f8f-baa6-42c6-a7b2-61626df90ee9",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de1523f5-3387-4d87-9fa7-9b1ea7a4c6b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba209d2f-9e7c-4eb8-a6fd-5280211c3766"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "035434eb-99d9-4a60-aa39-33506c8fc5b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d0c41531-6095-49d4-be68-855fe1d8aa62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7616e46c-0ddf-4113-bdc9-3f2604594b5e",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56503351-09bc-4da0-bc12-9d0f013ee3a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f62a531-9c46-4f8a-9ce2-47902aaf7f7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6420ad8c-8355-4a02-bce6-f8bf43ae52d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "960a2081-c74c-4e6b-926d-567c036c617e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab988c63-e3f3-4399-8638-92bf87e673de",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5fc6930-1634-40c6-a04f-84e45460bca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bc336c7-a9f3-48fe-9d24-6d261ff2bc89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb2872f9-6cc5-4f70-b329-fcc0aa75e71f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8913b9d-4be4-48d9-90bf-c7a747f707e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d1ab615-3c7d-49d1-8858-6fc9fe40fc60",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50a83689-f6c5-4298-8ee6-beaf2fee7c69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd1cfdac-6edf-4bb9-90a1-f49390399bcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2b6c9d3-1f0c-43fb-b1f0-dbbd8806843f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0455e6da-c775-4b64-838c-3e64a4057916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d5bd9e1-7ad2-4007-a767-cb3a44fb54e0",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ab696d6-08db-4b97-b3bc-972065105f41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56e84273-139a-4b6a-b246-34a34c7220f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdcfb771-3d49-4b6b-b677-6c2217bfd892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "691a2504-1d24-4522-add3-e0627af03af3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eee077cd-93d1-4c08-889e-0055cff6d199",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4859b5b3-022d-4f07-8408-2626e5074204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a2c045d-7273-49da-b04f-b419821df1a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cd2e31a-f9f1-4b30-a396-acb64c87f3d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4a8b9b3-aeec-4e20-9b46-5d39b6d93d19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75a437e5-ccc0-45d4-b262-589ad915d4bf",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09ad9eca-f6a3-494c-a171-6f546332916c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eb6a630-8115-4e6a-94a9-d9ffc644f652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc905de3-ad31-4461-ad91-87d91f17629a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ac40c8a9-49fd-4ab4-b9cb-78aad1f4dc0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2cdad6e-acd3-4599-815e-f1aa5505dfc0",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52bb2ae4-a3b2-4c97-b4b6-f5ea448f243b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed75c186-ff87-40f8-a75e-e0036f39e0e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f616c46-7e91-4a86-9783-4501db8870e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "44c724db-06c2-4f38-807c-8f8006d52897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e2759e3-915c-4b93-bb4a-25bb04688abb",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "314b71e4-7844-44a4-ba32-b17a59c451bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3ea1d00-a183-439f-8cf7-945963905b0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "803c0cad-22eb-4fea-a995-5c2480a76a31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab13b4da-d9f5-41eb-9904-0f707c1d35bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25443097-2308-4479-ba47-4eb7e5f758f3",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0065927-ad9f-4b88-a486-edaad18c621d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86ac8811-22da-463f-b043-7b16c0d68be4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07b1c71b-77c0-4314-9cd7-a06f2d54e2e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8720b8f7-da62-40b8-966d-cd0d3e315cb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4ffab73-50ca-4232-919d-5a6f844fa239",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20167951-dff7-4a11-b996-2fffbd150bb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afe803e8-fed3-4946-830f-abc8718b6ac2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8404f2e2-dbd3-43f5-8467-ac3da59461bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c1b525a-766d-4ea9-86a2-35819c42685b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcfff2b4-0c0a-493e-a996-35d571f25fb1",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4ab10be-eba7-4b72-a01d-d33488919430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "995abc07-8d77-4961-b980-cb2a3938f534"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35db8684-56cf-468b-920a-4ad03a28f0f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "786a94a2-1b33-4902-9b07-11b0dc35ea75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddee0925-dc47-412e-8ef3-0a4e4b5512a2",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1c4a88f-f9de-47ed-9b27-0a5646a885c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb3642a3-32be-4222-9f6d-b96d51ad733b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93f062eb-f223-4569-88fc-ea0d5f9f7f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f9eab37-d4d0-4eda-99ee-d568f0c68ac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9ef03c3-8534-4425-a27a-af581885df0c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "367f1da6-6cc9-466b-867f-aa1766d09ea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b27c9e37-75a3-432a-9b63-dd536c7b8368"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f11f8f8d-0806-493c-809d-f924b3cc6122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c298e2a8-6991-4729-b4c0-4de6e7942dde"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1453eea2-e845-40f0-b035-d9108efcac1a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "32aa6100-1b69-43b7-92c1-dc841a8e6408",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdefbf58-5317-408c-b5a2-5858c3b55c02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3b00b127-b2a5-41c3-bf0d-372064e8db95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f7ff380-3656-482a-ad26-78c8de04c4fd",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7a804021-a549-43c6-8455-ff6b737dcc07"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "42a458f9-8c9d-45f0-92f7-25d3c2dc18a9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cace5691-b84e-454a-9b0f-c53881454b6f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "755e58b7-4d45-4cf7-b5b1-e2031b3b5cd0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "70fef584-6206-4548-b16a-d73f2f8820ea"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fcd913b8-7e2c-4651-8fda-8a099dbee812",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2bb8aa05-ab5c-4a3a-be76-79b776575235"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5295baea-8286-4e42-ba2d-b9c52a876f5d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a7950322-2c45-449e-a630-ecf1689ada01"
                }
              }
            ]
          },
          {
            "id": "0d2c28fd-4b2a-4329-aacb-5da1d6df9359",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7e63187e-3282-47eb-80c9-e330497aa071",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e216dbe-bd3e-4546-a42a-647f3e24048c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "362ebe09-0699-48ac-a9dc-f25efaf3ac3c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "966a330c-7c70-483c-a8cb-d6d6721ec5b7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bf81a324-9fa7-45dd-b23b-6ea9608541b6"
                    }
                  }
                ]
              },
              {
                "id": "975bc4ab-5eb3-40bd-abb3-5b090f46b564",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "217615dd-1fe9-425e-8ff9-364e0ac23e57",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3fe73824-6acc-4dc7-b7e5-9f974f057808"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d11a6a0-2a9c-4cd3-a7f0-4cdd9e6325fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2281cbe8-d6d4-419d-8c21-1445513f7d84"
                    }
                  }
                ]
              },
              {
                "id": "661adf3e-abd8-4f7f-bd50-b44eacf3f988",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5b9824d3-4e22-48ef-9407-5cfbe6f9ad71",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ae71e43d-abea-46eb-8031-afd62b44fbf8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0fa7a92f-461a-437e-91bb-605f3d9ad262",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "118ace0b-0daa-4c5d-8e7c-f75141068db4"
                    }
                  }
                ]
              },
              {
                "id": "89584c6f-6268-4d8b-95c3-fb006ea23ba9",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "435c4401-dc3b-4796-a26c-27dd126e2358",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4cbc441e-f839-4a8f-8ed0-3075d1ae4304"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "022a8a38-61e5-456f-a328-1105fbc3f2ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "c6e4fb83-8f47-4d98-be98-93e5474cf0d6"
                    }
                  }
                ]
              },
              {
                "id": "5c4d0032-bbeb-4660-91ea-5f49778e9ba4",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ca8d3df2-495f-4424-ace4-b5f07161e222",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d6b6ce2b-afa1-42e4-b0e3-e9d08b4290dd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2a8e2c47-c02e-4a0e-bf48-7e5a17f1d107",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "003d0738-1372-4e14-b483-e652c1dc7e21"
                    }
                  }
                ]
              },
              {
                "id": "b27683e7-a6ac-4dd3-aa89-ed4b3d6bc522",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fd04824c-3f21-4d42-94e2-a791a72b5922",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1f882212-45d5-4604-8d6f-051f92893706"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "23c585a1-0a86-485b-a744-a64fe38d426d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ac094367-0b01-415d-b781-4372fb29e5dc"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a024a4b7-fe4a-4217-8daf-0d9cd059fc66",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0503263a-d925-4a0b-92d9-df98042a4fb3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2e3dbf65-453d-4b10-8adf-eeb883bf887a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cf4e1e00-e704-4f55-8f66-50859cdb341b"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4203c7bf-78b4-47d4-afff-09f38d3c88ec",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "084a7f7e-dfa6-47b8-8a88-eab19d5b2755"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "39dfec65-f6c5-46c8-8bb3-78496bb14846",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4f959155-a0de-4b86-8c34-cbe2cb8e34b3"
            }
          }
        ]
      },
      {
        "id": "94f605f8-6bad-411d-b9bc-d14812829212",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "693fb4d0-e28f-4e4d-a8f0-408195d1bfe7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "80d57c7a-b028-45ef-94c6-50f654064077",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "46cae744-299a-4517-8673-38f99d22af4d",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0976e00-1db6-4ab7-b937-57143e187675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a8bb4ef-c21a-43a4-a318-c71896b9fab7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40e2d0eb-013e-405c-8686-3fe8f561c271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "2721eb72-03b5-49bd-ac1a-aa0a5697135e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7c6f344-59fa-45a2-872d-26ed5c3bbeb6",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90630bd5-ce1b-4a8a-bf94-16f77f71706c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "356ca653-bc71-4eed-89cb-7f6b893916d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d6efc85-199f-48f3-bffd-ba4d21954583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f7407ef-2868-442d-bb8a-25f5d21c1a14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d502fad-23af-47df-b259-43bc54b4fd38",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8a886e9-13f8-42aa-a575-8cc40c9f581b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f587786b-2a5f-4f01-bf1a-4b6ad1bf3035"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2898cd86-18d6-483f-9e8a-db614bea8bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca7895f0-0f40-458a-816a-bba870d6f659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dbb9cef-ce55-40b9-9ea5-effe8a59dce5",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e0be9d1-2dbf-4803-8d14-e2cd5287fb68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fa709c2-0de4-404d-9cc8-7f99085a59cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ea8f23c-db07-4b44-8068-ad10ebac0962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2f5e892-1fc5-42ef-89a7-d3b9cf1dd13d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb1293fc-a0a9-4627-bdc0-9be17fba2003",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d44ff25a-055b-4ead-8498-c0ff65149000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43546173-24fa-45c8-bf17-f586d142294c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c729288-41b3-40d3-805d-c1b85c4df967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ebd35cc-4975-4c77-ac9d-79997a7cba0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b56b8c73-c378-4b93-8f3a-bf53425917c2",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eaa0d40-70dc-4849-8b8a-b811a848804c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c89f58d3-8b79-4fb1-baae-fbbacddddf63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7390b2bf-872e-4ac7-abab-218eb69dc4c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd04e674-57f0-413c-8566-32169f1b1ec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74b24310-5fec-420b-b529-0be557273643",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0e57435-1c82-4d07-ba7e-94fd163cd3f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d1a49bb-4b8e-4c59-bdb0-84c8888e5c56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71ef3952-69e1-451e-b1c3-8d71c2c94b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "86af3a2b-c2a5-4b31-aa2a-b3df98ec8d2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da9ab78e-47ce-4797-827a-5173b1710b24",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af5a0996-93f2-40fc-83ac-5ca126d59ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abea10d8-1baa-4e5b-9d2c-1b5530a3e1f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6df7ecb6-ab58-4a03-8fa8-37cce26f37e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2f49492-77eb-422b-b564-a18a7e2d8036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "626d4c79-f117-484d-85d0-3f4e213451c2",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7876c24-fba1-4770-88f1-5eec0f735387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7346afa1-633d-44b7-a8f1-68d0bb1d37f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9d3102b-a395-4335-89e9-71fcd3b5bcd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9bd38f2a-eef5-43c2-96e7-9c6c699360b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cac314a1-81d5-4c89-9da6-ba8910ba90f9",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "159c2551-b9ec-4a62-813e-37d611d1d5d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aabc095b-f216-4015-89b5-fff6d56d6d8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87db57e3-2949-4677-8c72-977a3433cadc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0eaa534-89bc-47c9-bdce-cff660135736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4595c6c-cc66-461f-9f1e-b25092f29136",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf412061-35d9-4cbd-95bc-042043eccc90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92687bbc-75f2-44fd-8781-66ddfa9971e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c37a26b-17a0-4b2c-a5d0-21a37f045b2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "1861def3-9411-41fa-af19-b489a9f3925b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c8e478b-ee7a-489d-b511-d067e75db96f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a6ff6dc-676d-41d0-bdae-4ac1d40face0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2be91b77-a04d-44c1-8bdb-53d83b84ea77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62bfcb4f-c1bf-48c1-828b-8e76fe1b99f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f0039ead-adc0-4a34-8b6e-37894f5121c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31557c57-fb71-4824-bffd-5c9eb3b349c5",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9182bca2-8707-4d65-a0cb-8b9ee4611e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e42d46cf-b393-4d99-9988-762432874e8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f8d96d2-2eea-43b2-8a5e-b920d9db15ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3f6c9c3-ebd2-47f4-94a9-8b53ae06b3d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eebe009a-2ad8-4442-b32b-292900983631",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dadc733-2922-4f7b-b537-0277471069b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40ea8f10-4928-4011-8631-5cb87f63e010"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87b62a09-8399-40eb-a4f2-f43ba8027306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c3a222e-9439-4739-8495-9eea7b60f1b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c98a512c-cc24-45bf-bc07-434258e5f3cc",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5fb5e0b-f7f7-494d-90a6-966e9d224a25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2dcbb94-14bb-431d-acc0-3e5aa43e3a01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90b2113f-b41a-4e3b-ab0a-ab91bd36979a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "45f7630d-c018-4d29-a247-065a8936a83d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99b22875-f151-4fce-98e2-a4141479ac83",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f770a2e-1d87-4464-b849-4af724e715aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fcba564-be3e-4165-9135-357f79a60f54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34d1c58a-0b1b-465a-bb31-ce920b2c4ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "96ab269b-1f29-4182-b6fd-db00c329d8be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3425ae6d-27af-4043-bd85-d6569264a358",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22dbbb01-b62d-44d2-aa5e-1dfe88ea569a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14ef52ec-aa20-43ec-b615-414627b858f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0c0741f-09ed-4a89-989a-bf2db49a30b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "181efb2d-315f-45ef-8c64-8f4c2d20da4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "482095fe-7945-4c7d-9aaa-c7ea97fe3349",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "019cb8df-58c9-40ca-821d-01c34d0fd713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "279b97c9-b9c8-45bc-a42e-880f3689b729"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b499cdc8-97ff-4145-82df-d61078856195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "18ae3f61-3f55-4025-992f-de57e6039fe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3860f005-5a62-4e7b-992b-1209290b9900",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30a304a3-9d97-4930-b09b-d29c24088545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee724eed-7eef-4e61-a241-dca60717697f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "585e8af6-798c-460e-8b58-77e0d02302c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "51ff5eea-2c7b-4a06-a515-787e19a7dc2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49d150af-4705-48fb-80a4-b85f101ed871",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e773843-74d9-41d0-8571-b3410a8c543a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "956146fc-445d-4c2c-be0b-e0422aa4e9b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb509d78-ac66-44b2-9129-3d987dcd8968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e517917-cec0-4066-afb4-1205324270ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fbd9cac-9aab-4567-bb29-ecd00bd60fa0",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aa6e4cd-ccab-4286-9f75-609c58e870dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82e044c3-afaf-4392-896b-440fbb6b2c47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7a53df1-bfa1-4a99-a3b9-7e39a9a0f872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75d36d06-f7a4-44ba-bbe4-954c86a2cd27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80e821a5-b68a-478b-9741-30596077279f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c588bb0e-0ad1-4f62-8399-778c62b4ddc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f21d2e38-c22d-4d1d-9c4e-4193f88c9d61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0652396a-6611-469a-ac97-c42e13bf43af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "551c94d5-78b8-49d5-b55d-ca96655e87e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d4fad86-0bd6-4d6a-9b9e-bf33eca9ec53",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e42ab101-2d6a-410a-9936-ea63221ebf44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8392c161-e3ef-47f6-900c-6b1fb3650829"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfdded1b-80b9-4013-a642-b34c12f8ecce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad8f39e9-f556-480b-8ea4-8737dfc40f68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "918946ac-af21-4898-bf3d-f26be8f5018f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1d871fb-0c8e-4b5f-a29f-5497846a6b4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc5606d7-af8c-4d46-aa8e-5f4200ab65ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af9704c7-a3c2-477c-ab42-06e33997b7c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea839267-598f-445a-8d9d-fb838febcca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfd84f73-f3d4-4727-a4c8-8c08cd288187",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd454e94-cace-4926-a0cb-ad85ea88e358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbce9aa7-0343-4eb0-8fa3-bb751b0f2617"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce98e81a-9556-4f07-99ee-1bb9dcbb17a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7043214-0ee1-4595-8c13-bdbb2994a41c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a1b97f6-90b5-4c12-aeee-415c8cf7b2d3",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5c6bf64-11a4-4831-9523-d05352432c9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36dc8034-6aae-443a-bf95-914bf4e9af7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e5580cd-781e-4566-a12b-cf6809e036ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b86dc8d1-7a3b-443f-8342-d0320fcb922b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60e05d09-563f-4ddf-8c21-c2409aad42f4",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f772a439-9146-4628-854c-a9521aa087cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24c5e98c-b761-4993-8142-7a269061056d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e878091b-df06-4ce1-9e74-21dbd3b8106b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "451a8428-da78-499a-ab3e-af0650d6167d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d316f5e-d704-4a1b-b9a1-823c2b088992",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3962fb92-4aff-47de-ad37-83d88a7b3b2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d0f7ff4-8307-45c6-bf98-d213e640c46d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "600f47ec-f9de-41ca-a0a9-b44458921fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d10cbec2-786e-445f-afcb-d4e8548e4dda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb43626a-2e16-4183-a2f5-585f68bac79c",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb84039f-2b18-454d-9967-3bba2ad19602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "214ec47e-858e-4091-a49d-441f4385415d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9754dc3a-df4a-4d18-9824-628ad4730273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa28e5bb-d506-426f-bd30-dd31cabb11b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e871b314-03a8-45ad-8ef6-2fa32a002ffb",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f28ede03-5e46-4e97-a645-aa95550e85b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18b6eaa0-825c-44cf-87ae-0f34fbc91410"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84621c4e-5261-4b4e-bfb9-ea148434c1f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "773b1b52-63b0-431a-af61-ac8c26a050b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58e83461-80db-442b-a976-3adb003bd828",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fdd4f69-b62a-4611-b420-6baeeba470da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1cc2b06-8637-4a76-be5f-48474f49ea76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b270ddb-8a98-4524-ac96-e9b19d012700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b147cf3-8716-40a5-88ec-a1e7e3a3cb1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcb36ee6-b52b-4278-a4ff-1b9f4c90bc42",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56778a5e-b172-43d5-8002-9c1172150945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3b7e9ac-45b0-416a-9a4d-4d8d525255e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fe4be51-16cd-4433-9c08-eb1c5c1e1657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b28a0059-3fa4-4880-b931-9846075c11e0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "449caa47-f9f3-4839-a9d6-45cc493cb87d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f3de5f4d-4bec-46a2-be40-927e865fcec5",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c967c26-db2b-4b8d-9aeb-1bfe077512bb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "113b92cd-ac49-43fa-8113-4f8f6517cfba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f03e2daa-1100-491d-b66e-69164f078be5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "699d138b-c513-4c83-9306-ae0a448a12fb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c0f9da3-b1fb-464c-a8e3-d3efdf291c8a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f66a2f86-d12f-4e90-9b6c-6603bb7afd6f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "65d85112-dcc8-4b92-928c-282a0f078547",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "18bf17a0-3f6f-4e62-a8e1-05a296a1d3f3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "123a0ac8-a386-44fa-a4e4-68fa96ae57d2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3870df00-01b3-47ce-bd19-5c92f430171e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "48aa2721-e08c-4461-b541-cf97258d5158",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c2ec9f48-fc61-4fa0-9a2b-762482a134a9"
            }
          }
        ]
      },
      {
        "id": "bba9c82a-3e74-4ca4-8e7f-e5e24b8ed706",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "a78e8749-1783-49d3-aaea-5272b7a15321",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2b37b466-248e-4cf4-9772-c412d8d2ab27",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ceb6106c-e3e0-46b1-a889-6d20c346b30b",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5334bdf-aa0c-45bf-bf31-8b5f11e0ba4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c144173-df40-416a-aa4a-64103fbe1d83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86c9167b-10c6-4207-a0d7-a96e2684463f",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d835cebb-be2b-43c4-a1fd-810ed685e2e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f04609a-51b9-47d7-b193-04f18314e2f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b11c55d-b016-4df7-8aef-29bafe6fc32c",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11fc14b2-85b8-400e-899c-2db346aef910",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0cd961c-c51a-4a54-858b-cadc594ab500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3786716-7079-4a5a-a27c-8d503f46d5c8",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d019dd72-daec-4426-b1cd-1c7ea9bae776",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28940807-3afc-4586-91dc-3a26ddb97599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15350e77-51cc-4af2-b892-f6ad0229cd91",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0d1ac78-641b-4ebd-9763-0700b2a1636a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d290dd7a-800f-4eb0-8695-a74f03563cbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70b089c2-0b4c-486f-a7c8-4abccf612269",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ede0251b-35db-441b-88ba-5f9ead8086b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4ca1584-a852-4c95-a5b8-ed3167de52c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fbb30e2-1348-4ec4-8420-d562b1abd29c",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ed3904f-ba91-4897-911a-9107fcfec9e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6588ec77-77ea-4168-8e73-e2dbe177ba70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d2fff48-1b85-4a98-88f5-e3eeee946c3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c87c6b86-492d-4968-899a-69079c45c2c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dba038d-a664-488a-bfae-ce8b593ae74e",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1539a44e-74af-44e4-8df5-2e9b8aabd5f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67318576-98c5-4fca-9835-e7621de63858"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24eb86a2-b236-455c-bb6c-5548ce08c876",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8de23c8e-c026-4671-ad7e-ba1e3284d681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac2314e-0204-42cd-b11c-89ef11986add",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6580db4a-3bf3-4170-8f12-c3b75786430c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34e2f519-015e-499b-88c1-694e63f42954"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da655901-dd69-4837-ac92-66d8f92b9332",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7ee021f-02bf-4876-b027-5bb32b3961f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9177722b-c602-4374-8033-fc2f230aedff",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b130175d-cf4e-46c3-b8b9-5b06bc0d47b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "024209e9-2fc6-4aef-9d80-551f66483387"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2acf477c-87bc-492f-a8bf-577a400b30ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a4bff16-0147-4d26-814f-55d504440aa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10445ceb-91d3-4679-8487-498d77ee757e",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f059b095-28fb-47af-a980-22738c0fb941",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6ce0d3b-f08f-46c0-90c5-97fa5d2bcac2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e015e8a-4b19-4b68-a746-6036a0a23598",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d5f575f-eb89-439e-80c8-982114749f5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae9ef24d-a7fa-49d0-8afb-30a543ce2708",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "702988a6-aa31-4eee-bab6-4cb7b9797708",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17e9e4e8-8e8b-4abf-940b-dab93f15d052"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "758b40bd-d41a-4826-8b2b-7a481263a574",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4a99059-20c4-4f28-be4b-59ec899e06f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce5aa417-6825-4f06-a087-ed9ac9a51c3f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2c09172-31e8-4873-a992-cee7d6060201",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b263173d-f332-4c6d-a6e5-44090cd2e81e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57fd2169-8f2a-488a-a5be-d987d9ea75f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c29a2bfa-6ffa-442e-90d9-b3867c7b673b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "722e1e9d-3876-4b00-b413-232e0c0aa512",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea9c7f52-7024-4647-951b-98e4e0e63c2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bab6992a-1dc5-4004-9244-87a23e34c86b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f117e79-dd3f-479f-aeba-c7048034b077",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c544ae96-dd46-4c4f-a50f-5346210af46c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7af08c36-4d8e-406b-a0bc-00eefb074333",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cd3ce4a-572b-4854-8158-a97479a87a80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64133cb2-3dc4-4ab2-8abc-b777d36274d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "deaf3f7a-cac1-4191-a886-a2fd19141218",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55f614f2-0c3b-4207-9404-5321ac3a2b41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7faa634-5a0b-45aa-8010-79abb016d22f",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eadeef7e-4e71-4027-9d26-71d2a6e46c4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5236470-49d6-45f9-9b2c-0f681dd6eb6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07cb9980-9387-4dfe-84b9-ad3931c84ace",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "510def32-3c1b-41b7-bfdf-d8edbec6831a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28fcd78e-1d28-48ba-9e6a-b7424b70dd9c",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77e7f320-c5dc-4287-bcb2-ec16e79c60e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a29c7f8-bfe9-4bac-b676-fbe45b0300c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a05084e8-8948-4eda-9f6f-16a71ab5ee3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a17fac75-cd5b-4b62-b114-4e372481d212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "570ff0ce-75ea-4048-a89f-7cde4785d824",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d602a6e-25f1-4f73-ab73-fa17dca7f4f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9163b12-5f92-446e-9899-01bccdab07d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be556e36-a8d5-4299-9641-52bf216a779c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e699eadc-a61a-4ab1-87f6-9eef18fbd543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c69fecda-24c0-4cf1-a44e-24f403966fed",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fbcb017-7152-41e1-8c69-e3a33a443c01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e37e991-2585-48d3-9a94-aa1a6efdc6b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "453ba02d-9878-469a-985e-3c08d14e8a53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e26fee2a-7cd4-4b78-9d31-4a1ca474fc96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4c944c8-ec56-41d5-b7ff-4c90466dcad0",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74da37be-882d-4b09-9354-15afe3bae5bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "670e52d8-5850-4928-bab4-073ff940bcd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b008b1b-8032-4977-a5c9-d4bd713c5371",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f20265f5-7d9c-4e91-afbf-4e98cf258571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4709b097-2e47-494e-bf41-ddb82f2b84e7",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5ba726e-c12b-439a-af30-2e8e2e54db2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ad74d50-a664-47b4-8876-9ac4cdfe44f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4612ebfb-3a67-4c98-a10c-6529fdb4b9ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5d14eb8-0d5d-4126-9691-201c8375dd37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13d826c1-289e-4fb0-973c-696933969edf",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab3e370b-8d47-46db-a24d-78187445ffb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fefa7172-3706-47b2-a58a-5440e5d5c11f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed30e5c9-2ba3-4c04-bd3e-9265ff1e78e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb9f1b4e-7727-4bcd-a065-01645ed6c08a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "020e81af-da19-48ca-920d-27e02719152d",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a181e507-44b0-4c67-976a-6ebb6513f263",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "325eef26-9b10-42d5-92c7-f39b36c994fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f5e0132-df37-4ba2-a449-ca6d13246dbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "038282e8-8dda-4260-8206-1fc3381b72e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee9d2ed-10c3-471b-974d-a69aaa0b1393",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b685922-c4e2-4a93-bb77-7f00d8a3b4d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df8de213-fa0a-4860-b4cc-98c91b2a432c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d3a952d-9f53-4426-8098-7b6bc1211d18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74165a67-1e21-4cce-9015-710f818447c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ac03e1d-1990-4a45-83b6-b6f5b3e7261b",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66a908ba-b6fa-4339-8095-2106f892a627",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9dde57b2-d923-4e8d-a12f-5b04dfd50976"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e430537b-a170-4b6c-bd19-fd82593d1426",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93a9afb1-a564-484a-b6f6-637c9a060844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34b5d60d-a45e-4e82-8701-b53614c0603b",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "041486b8-1d80-45c4-87f5-605d368abfa0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8a9b237-a6a8-4c99-8127-2138e7966429"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caec0c90-dfc4-4472-8bf1-88ec2a5a9d83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43b42a5b-bdb3-4456-8d6d-e22a5f2b6ec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2ec02ca-c8da-4d79-9ffc-f5f9324b0c21",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af35ad81-e40f-4eca-89a0-3c42e37a17ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69ad6c2d-5ce0-4332-bb2c-16cad26234b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64eec6c6-bdc0-46bf-89ab-8240d7ceb95f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65c07544-4a5a-45d4-836f-4378c64a6232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b52eaa6-c663-47a1-b848-4f41afa74c6d",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6b7a622-e604-4152-8e1d-a7ab7d5459ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1356442e-6a01-446e-ad54-9eb430fd8e90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34afee72-d90f-40f2-a74e-ff602b770d84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce70d194-4f4c-43ba-a297-fa9ba29df84c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10834d2d-daaa-421d-98ea-1409e64c04a0",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d2b380e-4021-480a-9e35-bf96eb0c289f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72f47674-03e9-4044-8626-3fb133607d32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93cf4cb4-f848-41d6-adcc-9304b4fe6316",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c15bae4e-2ee0-468f-8491-6044429533af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abb475bd-be75-4220-a1db-b87583790adf",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3b08eba-be3e-445b-b32c-4ad64f24ca87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66d00978-2b0a-4292-bef0-a0d405fa7dc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7cb242d-3b95-4c1d-9c6a-7fe7c14a531a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "523fa213-43e2-49b1-b2d3-da64d305a79c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03edce2e-0983-4416-b0d0-81fdd9017b26",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe63b15e-01a9-4882-a244-0ace6298a9da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc129f01-e693-43d3-91e7-7e9190c9511f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "055e6038-df8b-44f6-b08b-0d28c1e56b0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aed77e6-dcec-45ed-8240-d3fba61b0218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e2f7da6-fc46-42bc-a0a4-ae2466288c0c",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7ba5398-c651-42bb-bf30-1344f0eeb014",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aaab1329-64eb-456e-86a0-59be10b80e80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09f1dcd6-aa6a-470c-8b1e-b8d42af293a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8df7752a-6eb6-4371-9c1f-ca358de200d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01845f2b-7d0c-44c8-8234-ca5bb0d30e9e",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf50fc33-de2a-47b8-9e88-9372d8097a9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f36fb0f-04b6-411c-93cf-c255b51add29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "050b993c-7c0a-481f-96d4-0aa47976b099",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64ee4345-d81f-4da7-9fae-54bb47852b18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0d22b05-49f8-403a-b5be-925e7eeb29eb",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84e48764-8979-4d58-8de5-367f2d82e7a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "992543bc-a75a-4609-bb7f-8a46fce8c564"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04d9ac88-3ca0-4900-b1ed-4dacd0b6df08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d69a5a11-b279-4c8a-80a8-f968f8454066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a706892-0504-460a-953e-17872ed261c1",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e531c1c-ac85-412e-bf1b-2068d96b6f48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8738a2aa-1187-4b57-b2e5-a6bf48eb03ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae251c5d-74af-485c-8306-ee3f1077bef9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9beb1c93-df32-4f00-b21b-fa4ecb4ed091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cad693ce-445f-4956-b456-86a6b317289f",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad2fc69e-c4e6-489f-97ab-fa13e7244470",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c88be4fc-e7d4-4847-a1f5-8ece8562c143"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3919fcf8-e804-4c4f-9bf3-cc4d71744729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdf020a9-1ef7-4f1e-984d-a794dc2d8ed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fba4616d-5ffe-4460-991f-ce8274ef1baf",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81918edc-9e30-4c9d-b313-2b48338212ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79a7d195-3202-46ae-bf77-804d89bb4def"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebe88684-3d6e-4836-ba5e-8a651c5b4e33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8413b45-5746-485c-aedb-0117ae5cda39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e7c5dd2-aeeb-4b23-b21e-95a280a28276",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed5ff154-19dc-46a3-ba58-6b5076a98e21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d89c403-62a7-4592-a7b2-155865901293"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33fdc042-df90-426b-8361-0e101b704276",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "114cd09e-69fc-4be3-bd58-7ff9de7de6cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d288042-8527-4847-a92e-9a41d4d274a7",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "739cc0b5-92bd-4f54-b8b7-7fa137f8220a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d525451-a011-41af-aaff-bdbb0674f323"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0be7f91c-84e4-47c1-8094-0c09fe8533fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e0b1236-c769-4dca-ba6e-aa9f27fd513f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea4b2eab-1f5f-4bc2-9a06-a3ef51566fa8",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5a1ad82-9569-4c13-b318-c5a606997ab0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ffea22f-2fcd-47f3-9c17-283903a59d53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b412a70a-30ea-4c7d-8309-5d6a62d9461b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e55c4ad7-b086-4a9d-8466-eae5aef9f1bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a142c2b0-1c55-4a49-b4ec-f10d15ded399",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d018252f-e69e-4f7a-a759-796ed1a0a0e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e95b7ff-4730-4f93-ba7c-a3a194541a18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da577ed5-5e3d-4d80-919d-52fa1c44199d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea9079f3-dd12-41bb-ba39-94a21966ff57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f68a3c7-b22d-4a6f-b4d8-46b425e2034d",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b54f034-3b19-4f3e-a027-d4cc59a43980",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eccd5014-369e-469a-8a26-d0fefc3b2ac9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57bf3408-015c-4145-a752-aa45d07cb1a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "530d86cf-9f97-4eaf-bc59-b7454bf4fa2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a14447d9-9a93-497e-b618-2ed40b0bf23f",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2847a0da-9846-4b5a-be5c-f627b18c80be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44acb507-7360-45d5-a44d-551c7fc83462"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26be71a8-879c-469a-a29e-81c9f2c9f190",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea9aee7c-baf2-4ec2-9676-aa00f959ba49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bfcffc8-e129-49b4-8235-57ec3fa72e44",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a258635a-7117-460a-ae58-5e3506bd0b3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd78a3b2-51a1-4a3d-afaf-c778367e9a55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b37e1850-7010-4ee1-a1ed-bfb7600dcf3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "927da531-237d-4202-8b43-ecdef0001ce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8c87627-ecd5-4ed0-ae8c-11425c21d18b",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fe72761-b431-4492-a008-080aa0b772dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e4064e1-3db9-4820-8b53-d40b85817755"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7bf52da-cb7a-4a7d-a7f4-9484233cc811",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ddf4e6d-35f6-47e4-aac2-d802d92b8794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0536bad2-68d6-42c3-aed3-aed35c08e3bd",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f49cfb5-1783-41aa-b2de-fc7d7a454c4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e82fc3a8-7ee8-4cd2-a64e-6137ac6aab65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3c0ec32-7002-41ce-bac9-6b9439e681d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d15b1fe6-d8a5-4913-b798-4fc2cbfe4d93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e69ae0e-e73c-4746-9b8c-2f3525bdc5f6",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59ed2962-de7e-4af1-adb2-17fbc74da2d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9345664-55b9-4e38-b150-03ab5dea16f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1b2bdaf-b8a9-44e5-8ee3-4c14c3754882",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae9cd7ce-c477-4198-bfc3-fcdc2f6bdb2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33372cc8-a6e3-4528-b7ae-e28926281478",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b34c7413-9438-4f08-bbef-a961a92cb0b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba5a82b4-1b3f-42bf-9569-8c7ba93261ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fac6f51-3de1-47d2-b69a-e69a891eb0ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d688ed91-7a6d-407e-95c2-37cb7966c3fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "910c27b5-e52f-4c69-8854-aa0d7f0f5726",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c544023-eda3-4ad0-85dd-988bb191e877",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36d19d95-0f9b-4865-9f99-e972e8171742"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ab74f7-2e0f-46cb-93ca-4a17f9fb72fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99d9a296-9ca7-46c9-9039-21c44b2a8ec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f709d8c-c35f-4b22-85d1-fdf33dc10596",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "561812f7-ff79-479c-adbf-d20d9cb3d503",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "079c240e-2d70-465b-bf1d-a3a55a9f8d6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d91b0164-b63c-4c96-84d9-5a2e062db028",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3e45063-4bf7-4ae3-8966-7f6a44d5e1b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5ed5e1b-6020-4085-b8dc-09c0814ec45c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41bb83a4-7b31-446e-8ef3-547666cf1bf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23306698-1f12-48ef-9beb-759188c2e27e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4bb7c62-8c93-4c37-a2c0-d4c55eda7895",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e04deded-f8c6-454e-8f8c-456479276645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad77b575-0811-40ca-a5c4-7222771a8947",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8875242-0937-4fba-a80c-c2f4a6ca086a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3db214a5-fa53-4136-836b-f1d9bbe13654"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39e7fda8-4227-456b-bed6-de560aa6257a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab57801c-af3c-45db-b2c4-61d6d1591905"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40f7a4c0-64d0-4103-b179-2df0b878056b",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3457575c-d31c-4e94-b30e-b5ea768411c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b756448-c226-42d5-a797-a01970e3a432"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb72df9e-af74-4127-81e5-eeb48bc949d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e976b9e-d1c3-4326-91c6-46331a12ffd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55cb1fc4-2287-4710-8bea-56fa32bc32ec",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10abbd27-fadc-4518-8d04-226fc636bef9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29267a81-787b-46f1-b8b9-f018552ac67b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efce54aa-32e7-4592-bba2-b32126bba9e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ef6acdc-d8a7-477e-ab7b-78d1b2082bf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1347e47-cc97-4bbb-97ad-0d49c093ecc6",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0182ad9c-3294-420e-8aee-a574798b97ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77e053c5-025d-48e4-843d-4fbbc98b4d34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed3ee946-027a-465f-92ea-6f623a1b5f50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3804eac-e01f-48dd-b661-b930fbf65430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43a531f1-9bac-454b-b10e-50a024d137ec",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d23745ac-b55f-4efc-a194-3efbdc766c1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "256b4de7-7710-4820-9e55-643a6ab51f92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39cda546-2c89-413c-bbf4-cf949f1b289b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fbccaf2-6129-4453-8b13-62da4bfcdc65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e168bb4a-3a21-4a45-8a4d-96d2500c1301",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b012b81f-8862-4661-a4df-69e895e2b4dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "702cf405-7697-4b28-b974-b86258234985"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af2f6ddd-8df8-449b-82cc-1c2a8cccc2fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a33a202-7d6e-4ecc-abc2-67439db000d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25752aff-e002-431d-a0e2-2c52a1bfdb99",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c4d63f8-bfbc-4e67-86ee-fea39299d11c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65392c53-5d62-47c2-9ada-f2827e1a20cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06a31ff7-3192-48ce-ba8c-3b96aaf46fc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5416c26-f751-46e7-ae75-d36bd898e839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eea3f9f-6852-49ac-b9ea-0b2a5ac2558f",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b876cb19-bef8-463d-8b0d-3b94594ca530",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eaededa-8ef8-4734-a373-813ff9b3c59d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0747740a-d370-40ba-b9e7-3b379a2414eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "478f216c-c7e6-4265-9d0d-f41d50a26dc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d7684e2-d5b0-430d-9316-28dd6f7f589f",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eee09ff-7eae-484b-b94e-01398bd1e785",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5854ec01-3bf6-493f-af0e-73519c80020d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "788549e8-164f-4974-8123-2e8010308bbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f6bd3d5-fb99-4fc7-b3af-b49a2cc44acf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "968166b3-6541-4673-9f07-65edf60e26cc",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c35d29c7-3f09-4c71-9baa-0a0436ee37c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "070016af-994f-4004-abac-d0497b9e7b00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc032b70-27e2-4256-811b-4e86f4600aa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c0a2ba1-9c65-4062-96e6-1a357a3211e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eddf84e2-d8bd-4b5d-aed0-b35f15232a2c",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f40682fe-6cf7-4336-90af-961a196cba72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7154f86-fb4f-41bb-99fa-8bf14b98c78b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91da6e09-3ae0-4cb6-8891-e2f58b71e806",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62f480e8-b136-403a-8164-6303ae14c2eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49e79f0f-2db1-4378-9569-c538bfefdb34",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba405c3b-0b46-4fae-8e83-8867c8bf1bff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95803414-e29d-4d06-a630-cff58613ddde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddc6f169-a912-4d0b-b714-ffb450bfacca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b8b4f8e-880b-4ea7-9600-5eb0bbbdcc97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44d3d6a7-c1dd-4078-a837-363b0bbcfed4",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb6001b6-a510-47e6-b4c6-099b2b329112",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68b56b30-d715-43f4-914e-15bd43483575"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f124b89-88b2-4300-9aa7-aa6fb48a49bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c5dcb9e-60a4-465b-9ef0-934660006d8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59923a55-c945-40be-ba96-02d94ec11269",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3fc1e64-cc11-4e50-966e-a170327479ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b2ff98c-666e-4645-a752-ffd29ad3f436"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b75dbb5-b303-4d8a-8d43-57c8578bbad4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "633086cb-b145-4a20-862b-8aaa1b8ce231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51f66e2f-4fc9-4ec9-8602-f5abdc594d7d",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9db6ebd3-6fa7-48c2-a914-58798bd9a451",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fccf15f-9fa6-4ad8-bd70-bb2a3459934f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18a3af9f-4619-44ef-997a-6ea256d2eb20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95ba2698-16c4-42ce-a131-868d2ad7fa61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ab11c96-e9e6-4dae-8dd5-eaa7ddbe9f1b",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e64c5146-ef3c-40eb-b504-90bbf720236a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bac6cfad-c88c-4c79-b49f-9ba531966386"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60c5b53d-16c2-45b9-b1c7-602d73cd0403",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e5dac11-0c10-437c-8a4a-9692408b4ae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10b3cfac-6914-4d20-bf64-b6ffbf5cf748",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eff20b8e-640a-4a40-8fd1-756ea7a0b3bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2ba0f63-7d34-4084-8d39-c8096b120ec1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b9cbf71-80b7-440d-be73-6ab930913e0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5c4ad31-af35-46e1-ae63-c0178b1dc89a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6842f150-9020-4cfc-a1a4-211392e3bead",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec8c3b93-6775-4492-9631-9546eaa28f9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b843f439-290b-4c09-a2f4-6072baec2f2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6812481c-a279-43a2-b48b-019ea0c41696",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bdefb5f-de0d-44e5-a6b9-8966bdbee2b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3df60d97-d6e2-4bc1-b298-a9dc1128ab5a",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0a6804e-3fb6-4979-90d6-467879db164d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a08c9b26-4d8e-479a-9a49-b1c5f75d2c19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d34315c6-b3bb-4817-b03c-76efdb78da7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cbed0fe-dfd8-4224-9222-59462fd72f4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86fb67d7-8277-4cdd-b7b0-06c161ec696a",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17468250-1076-45f1-a70c-0fa42a5d2694",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c658c6e0-b3f9-4491-91ba-574687718726"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58e32aa2-294c-48c9-be44-e25d7065d231",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b7c4b1b-51ac-455e-8975-031191e80cb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c74f500-0c20-4a99-9eec-a91515cae0f3",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70590fbb-c2f7-4ba6-a153-b6710615c87b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d085f8d-a939-46fd-8704-2296aafe1090"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9acac97-8c5b-4d74-837e-ee3b8595ecb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8dcc90f-2298-4e87-9240-522676fc27ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe0bdaf6-f3de-4ea2-bf11-bca3252dbd82",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5752d719-6a71-4beb-9ecf-05e5cdd6b202",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6de7168d-9fbe-4684-b816-75729ba76ae7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7fdbe15-89ca-442f-a3b7-b3cfd458503a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfe4a074-2851-446e-86a8-b0a3faf883fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49a027d0-ab1a-4ba9-943b-3125566cb6f3",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d416c79-9fdd-4a2b-bd11-cabd4c92950b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "959d2571-b462-4371-a835-b42361b7bc62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdf99471-819c-473a-a8d7-cd1c5067a992",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "742db090-c055-4630-b5cc-8bae6acbfcc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0678473b-a3b4-4c22-b501-0c187b4ffa24",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "873be989-7ba8-4e23-b97e-d3d5b5c852c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a6f6d72-2536-421a-a8d0-18c545ffc486"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "925fefc0-c0ba-4f0b-a2b5-cd22315d87de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18d03729-3b3a-4938-9559-a5f90b699538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23be75cb-3a37-4b86-b33f-b0ef8ef3225e",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6b9512c-d50a-4ec5-b41f-69c0c6a48c1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c199642-1a66-4f14-a7df-1ee84963c677"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae7d4f87-a6d2-414a-b3ea-fef5e32354f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ec9c673-46da-4150-84f8-d9411f4aecfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c26768d7-e9bf-4eb5-b588-20e218882757",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "213def66-13a4-4bd6-8674-0e9df06927fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8786f582-96d3-4441-ade3-d20e41749576"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c099fcb-810a-43a2-a2d1-c3a1a28dedd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4a2368b-95fe-43bf-8491-3dd328df2ec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "612b712e-2bbf-44ab-9526-d59f9a3247ec",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d41b85d2-f212-47fb-9541-2c191b295e8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "047ec697-dc83-4890-839a-83b10dc7cd15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac32ce0-6679-41c4-8320-0b508ed889ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f0e8a0c-6ae3-495d-8b83-69af1a061b9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a6ff55c-fa27-4570-beac-2074bda1ad14",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4713bed3-24d1-470b-90d9-3d22228579f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40c37707-d183-4ab6-a220-8c87622f4c42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93e802c0-68f3-4f65-a032-9895035de528",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27ce2048-d28d-44f9-b715-41bd1511df79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e797816c-f223-4ccc-94ee-b27df6befe3b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecc2001d-a332-40e4-bd26-3d3e7b6fb412",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b61d5a1c-3e44-4ce8-b748-14f4f2b09d4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba186693-c12d-4ad6-ada7-6420de5001f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ccf7861-de3e-484c-8416-cd5a9109e1ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51795ea6-03da-4b44-82a5-5d50101e0150",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a93bde2b-65a0-48b8-9770-0e7eb51d9fcf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00f38fa6-0d99-4b14-b049-09a3ab8dd28d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "433dccdb-c32b-4f5c-885b-5c67101c3208",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75acd134-32a5-4cb5-a317-b728b9b713f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c98d341-24a5-4c0e-b926-1cfcd40b84ff",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23e6be5b-6789-4f95-bcae-82c89cbd251f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80762807-b7ae-4918-9e9f-90d9fc5387be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdc55806-d965-456e-97d3-8b47feba86c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfa306b9-de22-4d5f-8511-c7787018af71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "175a468b-a438-4ae6-a37d-3dd9085b56ef",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaac1726-1b02-44b2-9549-11b085b2543f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8f802dc-2ca6-4d6c-9fcb-7ff50bd4fe1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a135a52f-b1b0-44c7-a555-1cc5da4360c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89eae19c-2cf4-4443-bd05-872315065a0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b8c972a-6e7f-4423-8619-eaba197ff44f",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38698658-43e4-495b-b17b-228f8adba9aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5977b07-f124-4c5f-8c60-4d4e7e1712ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb475794-d557-40d2-8324-2af9524e9d42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8184db4-55ae-4888-9fe7-7a8e67735a8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a75aeb77-ea7d-49a1-ab2c-c8c17ca8a9b2",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e736ff7b-4cf3-43b3-ae66-99dc6cda6206",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27d207a0-0c2b-4831-9793-afc72c1cbd16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aba34cc2-15ec-4b10-8614-cd76164afb0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d97eb7f-16c6-4d76-82de-2b01cc13dd5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9db64b09-21ff-445a-926e-76cd2e9a7b6e",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53de0a4a-3e91-4a5f-bdb1-ba672948a26c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30cf94b8-e422-4a03-84ff-6391f8c4f975"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31064741-8e86-4090-bb9a-ad7377c280a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d9ed0eb-d75a-49ee-bcea-e0bac95ee91c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0bab092-c8f2-4a0f-bebd-cc2888581dcd",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "862ac0c7-fbdb-48d8-999b-12d914184a2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3988840d-addf-463b-8ee2-ffce34dcdbb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6b8b427-df4e-47af-88f2-2d48dc6afccf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0741970-60e1-4fae-9646-cc1fe87c6304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e614e61-1bd5-4104-965f-e4934756b847",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a2b4191-284c-4c3d-869b-17310f13fe35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71183ac3-05b8-41c7-94b1-750122a16b55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f260e714-5fc4-4f00-9d1d-e40387fc8068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c13703ed-98ad-44ed-bbdd-22c2a576670c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4dd2b21-590b-4e61-9272-34935898f832",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd2c3782-93a0-45a2-886e-e3b3b1412bde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fc11421-b926-4a91-bf8d-7cebb129c827"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5930dd06-12d9-414b-9ee0-90b75a575105",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0a1f303-929c-4530-b870-2acea72280ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb06609d-eeea-408b-b61c-353dfe4ee90a",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f24bad83-a67e-4538-85f5-d5264af770d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "622caf68-30d7-4502-bc9d-90e5fd93fe7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "846d0762-9f11-4404-9257-cb8d83775952",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d990057c-9c30-4bcd-9ae8-4d90f8212585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a189947d-d247-4c90-ade2-928cd0c10684",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3df82426-314f-4fdd-8048-4d871e70b803",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "049f0617-4b85-45c0-9929-86c2c1156112"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccd89820-38c4-434f-9862-a688bb7fc22b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d31eea7-150d-4274-82cb-648b857df15b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "753096ab-584e-4e68-b224-cfc990ae7309",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a989f50-e76b-4636-8cdf-21d7d71c9d43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "149e806e-7879-4ad1-8e48-58bf78673b59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6d6edda-663d-4325-a3ca-54c189cbffbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f480c71f-2ca1-40d9-a3e4-dd360f8bb841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2edc0ab7-b81b-40f8-a01d-48faf0524c21",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29b2eddc-cc8a-4839-a479-ca23c0469b75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ae05882-12b9-46b9-846d-14239a4f20b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e153d300-b67f-4de8-956b-73dd14b93815",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0aee073a-4cc3-48e1-aaec-593197141277"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c794720c-5057-4af9-8b6d-b1d8b60cd0d0",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "510ac35d-807d-4785-b0fc-c62988b20a9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ab61b25-ee21-4739-bedc-231f147d0834"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d8285f-00b3-4861-9f39-bd7aaa659198",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79387a6c-6dfe-471b-9b5d-d5fb6ba4dbb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d782642e-15ea-4d62-a900-03936178e783",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c857b35-d640-4e49-afe9-24bb1d8f762a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8962133-7271-423e-a627-00c6e0b3490e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "000283c9-e5e5-4b0e-81b9-faedebfabf82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "824a2cb8-a87f-40e7-95df-7ecfeaeb9006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f66e77c5-733c-4c0b-92c8-ce9dfb49296e",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49057723-fd3a-49c8-b7c7-7f523f0049af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe51c47f-8570-432f-a11c-b4ffb1322c68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c86f93f2-f90b-480c-98bf-e7906e078186",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1aa0c1e2-09b3-42a6-b73c-e564e4af40ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc698263-e605-4699-8118-0c461f94a0b7",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "523c8b07-ae73-4370-bbca-966a4708b292",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d60057e-8ccb-4f53-b60f-1cf9e6fd3f07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34ea31fa-51e0-4a64-befd-54549e8f580b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6ea6622-aa4b-42e1-9d0b-b7eb8be240b1"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "080bc6cf-9962-4cfa-a606-2e163de45439",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fad696e4-5940-4d98-93d8-623d191b922b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a353c69c-afe0-4b5e-892f-753c387421ce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4da3fb53-51f8-406a-bffe-8157f033019b"
                    }
                  }
                ]
              },
              {
                "id": "fe7bdf58-1ca4-4e3c-bd5b-ca66cf98837b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c992df1e-d665-40fa-8580-a49068803e76",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ec18939-9c66-4b31-a91f-2e544c49c37c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "5f3e5ee1-30ab-4dcf-94c6-db7eaf245d56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eb4a847-eb21-40ff-8a73-34d884f2bd63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f62c59e3-5702-46ee-bed7-b67c96bfc04f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c1477dc4-543e-454e-823f-c87595df7287",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f1f624ce-0397-4e79-ae83-d1036b76e549"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "77110b6c-5b03-470b-9c4f-785a50b7e688",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "454482f9-70fb-4508-9c28-c0d6cf6acd92"
                    }
                  }
                ]
              },
              {
                "id": "77ccb454-fd86-4f21-8ed8-e528a8b88f0d",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "7ea1005f-8a29-481b-b994-fbd4e4319e7c",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "905e8002-bc21-4028-92f0-1092064bde42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "7964eda9-66c8-446e-97a4-6d747393f461"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0abe36f2-b2f9-42e8-8df9-b6cab58b93e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7a2f50d-759e-4252-a349-57f86b82f7ed"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6c05e589-db62-46cb-be3f-1c5f06bc620c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d66c03bb-71e6-4d55-a1e0-e39c8b7e91fc",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e579f844-16ac-4f43-8760-294945bb551c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6916bd40-495e-4ef6-bf03-be62250442e7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dd982ae1-6d61-46da-b93a-393b9c680a1e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "129dc79d-ba8c-4e1b-bed2-3d1ac6f7ba08"
                    }
                  }
                ]
              },
              {
                "id": "3aa0f088-acc7-4477-a37a-f705aa2fdaa5",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "efde5a88-35bf-4ef7-abec-b78f0fe6f780",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "104afdc9-e066-4375-96c5-72556d882619"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8bc477cb-bb19-4845-af8a-d766090f355b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "20fde872-2f53-4f1e-b1ed-22dede3563c0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "215a0472-a608-40ac-aea6-d3de3c432f58",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "489f330d-753f-4ae6-a195-748c295ca4fd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5421fd2d-f69f-443f-ba64-8126f5d953d4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8e946a79-af10-4fa9-8dc0-ec2fb0766281"
            }
          }
        ]
      },
      {
        "id": "400eaa8b-85c4-4b34-8af4-c1e2c4edc823",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "ecc6ef20-86dd-44f7-8907-9353b5bb6934",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b268e235-e85e-4b94-8f09-327dcd8bb3a4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "638e5ed0-db36-4384-b8bd-6d2c2d52486e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3a5576b-fe9e-49c7-a952-8fa7eedfcada",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "df5664ca-df8f-4f66-b461-cc6bc665d050"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a73b30b-2504-4543-9d2a-83540cd9560a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "09b75b0f-da87-4784-98f9-28fb171066c0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3cd14808-a956-490c-b5fd-7ed729a0b66d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5dad520e-ceb1-4dd5-8c15-41c5d3d6c855"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "490ed70e-1205-410a-8613-bb235ffb7154",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "736632b8-56d1-43fd-ba78-48e2d52654be"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9494b2dd-fe05-4aaa-b14e-1a84e0dd4092",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ebe72d10-f3f3-48a7-a325-649d01fe61df"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "96f44100-303a-4149-a5dd-189486b8adac",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1bf08eeb-24b0-47b8-8d20-78041ba3e385"
            }
          }
        ]
      },
      {
        "id": "86e80fc3-c212-4056-91ba-b645359a1236",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "71fa92fc-a53b-4e0c-bc7a-15b8432dfb06",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fb62af9d-e820-4245-a569-ea59c854bf24",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7978cc1d-fdfb-44d3-a3bb-ad271eedab2d",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9d0e3a1-645e-406f-b1a6-53e1c87d5833",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b8de6f38-be8c-4feb-bb2c-4e4b296fa41a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d38abb2-4143-4785-9b93-09dcde239350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7e544e3a-881c-4b59-bf74-cb230fab9267"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5b345511-c27b-410e-bbd8-474cd09fde95",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a8a119f1-24f7-4f3a-aa59-b2ad0482b881"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "77b09db5-d029-4bcd-96fa-038652b1d424",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b40d3ecd-741b-4dfd-ba5f-0ba47ed1846f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "57a8efad-789b-4234-af2e-53d65749e9c5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6a1f426d-3692-439d-a604-ca127cef2ed8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f5020446-e7d4-4d41-8550-0364d2ffea9e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "70ff812e-3889-45fb-aadb-ad58470c382b"
            }
          }
        ]
      },
      {
        "id": "f2fc0a03-9570-4fb5-9974-3a1fd0cf62b5",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "0fc80cf8-2458-45d9-bc13-a94311cf2324",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7a356b50-7649-4b74-a223-b7ea6beee074",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "698219b8-aeba-4fa5-97bd-921d6e4c6e8b",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cf2a3d6-1011-4de0-a11c-13a7c8f46ff7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "67bb37bd-9f5d-4ad9-9d7d-d16e2f152f81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a59a229-1ebd-4efd-bb62-3ef21dafac4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c417d9c2-6713-4543-b8f6-6641900c131e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3962eedb-f218-4a8f-97ce-55a842ee5a18",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "25b42fd3-d618-4e53-a1bf-33cf101f01f3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "99160f57-1298-4c5d-82bb-0c81d6a39ae4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3d9966e6-5cc5-4281-a7af-a44d61747ef0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f8b71ffb-265c-4e11-902d-e107c27f1928",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ca97690e-07a5-4efe-8baa-f9456215666e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fc78a367-e08b-48b8-9ad7-6ade418bd7bd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "533cd5d8-a867-444a-b122-5722fb50dd49"
            }
          }
        ]
      },
      {
        "id": "3decbf56-da1e-4e07-a8ba-42d5cce70433",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8e6cb1e5-d0ac-4368-9702-2d5fd4bd716f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b04dda0e-390f-45c2-bc86-a094a5f4a14f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "32e31624-4c0d-49ac-b74d-b8c73751c48d",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0b102f3d-8026-4dbb-91b3-f5e05a8d9fd3",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5f60663e-f2c2-47eb-a486-ecad171ae079",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1853,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 246,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 495,
        "pending": 0,
        "failed": 30
      },
      "testScripts": {
        "total": 931,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 922,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 268.1422764227642,
      "responseMin": 15,
      "responseMax": 6490,
      "responseSd": 861.2323039595262,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1686876163369,
      "completed": 1686876239729
    },
    "executions": [
      {
        "id": "0028d17d-5659-49a8-a575-f49ea4b0849d",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 244,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1b1b7f58-2077-410a-a851-deff2b4f54aa",
          "httpRequestId": "5d08cb61-601c-4101-a49f-f7ab6f200f16"
        },
        "item": {
          "id": "0028d17d-5659-49a8-a575-f49ea4b0849d",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "32c63f2a-b663-4d4e-9fc9-f0e241380d9a",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 0
        }
      },
      {
        "id": "0264a724-1f5a-4ba2-8c07-00c00ec0ccf4",
        "cursor": {
          "ref": "25e63625-08c9-4acf-bbeb-abd9ea5e6c77",
          "length": 244,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "1fd04545-a981-47c1-95f9-5cee3735dee5"
        },
        "item": {
          "id": "0264a724-1f5a-4ba2-8c07-00c00ec0ccf4",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "113c023b-8a3b-4639-81bb-c19453c102f8",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 0
        }
      },
      {
        "id": "609e6162-e86d-4709-a096-bf48a16b87b7",
        "cursor": {
          "ref": "f7713b07-a4a3-4f8f-a2c4-005788a9d2fc",
          "length": 244,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "34427ad8-e47d-45a8-af0a-6a45ca0b279f"
        },
        "item": {
          "id": "609e6162-e86d-4709-a096-bf48a16b87b7",
          "name": "did_json"
        },
        "response": {
          "id": "21c3df26-0a22-4374-a417-97cd3affcc5d",
          "status": "OK",
          "code": 200,
          "responseTime": 411,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "063864cc-239f-487c-a0ab-06a7f8eb0f9b",
        "cursor": {
          "ref": "882a7400-55cd-4d47-b57f-ee9b4d85a06e",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a8115677-1859-4012-9649-56bd27df908c"
        },
        "item": {
          "id": "063864cc-239f-487c-a0ab-06a7f8eb0f9b",
          "name": "did:invalid"
        },
        "response": {
          "id": "bd236527-9f99-4eda-89f1-83da3115fb54",
          "status": "Not Found",
          "code": 404,
          "responseTime": 2225,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "063864cc-239f-487c-a0ab-06a7f8eb0f9b",
        "cursor": {
          "ref": "882a7400-55cd-4d47-b57f-ee9b4d85a06e",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a8115677-1859-4012-9649-56bd27df908c"
        },
        "item": {
          "id": "063864cc-239f-487c-a0ab-06a7f8eb0f9b",
          "name": "did:invalid"
        },
        "response": {
          "id": "bd236527-9f99-4eda-89f1-83da3115fb54",
          "status": "Not Found",
          "code": 404,
          "responseTime": 2225,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "bc4cff8d-d6f6-45ee-94c4-b913515b524f",
        "cursor": {
          "ref": "d72c1346-845e-410b-a02c-385afa4d1b98",
          "length": 244,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "96b7641c-f9c2-4d8f-a07c-4b3cccea1dcb"
        },
        "item": {
          "id": "bc4cff8d-d6f6-45ee-94c4-b913515b524f",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "e11a8b78-eb54-4364-bad9-d8388301c0d8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 27,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fb4ab88-c4f1-4152-8929-8411ef45b45a",
        "cursor": {
          "ref": "85b4b0a2-181f-41c7-ac53-9fcde9f1a48b",
          "length": 244,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f6044f3f-f069-4817-91fc-02255acf55ab"
        },
        "item": {
          "id": "9fb4ab88-c4f1-4152-8929-8411ef45b45a",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "0852ad64-2881-4fe1-821b-83e410a1783b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 27,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6a0bd6a-8569-49f3-8f25-a79b988ba1fb",
        "cursor": {
          "ref": "47ae9855-d609-41c7-8ccb-6a84de263d67",
          "length": 244,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "cd189426-7251-4753-96aa-4f0c96331f04"
        },
        "item": {
          "id": "c6a0bd6a-8569-49f3-8f25-a79b988ba1fb",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "51b96c91-e873-44e0-bd7a-f0bd928b9c74",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "ebb860c5-fe0a-4735-b51a-2bccaceae9fb",
        "cursor": {
          "ref": "d664630e-f5e0-4add-8300-67f5e64d2c8c",
          "length": 244,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3a3723e4-c14c-4c23-88d3-f845a1afd73a"
        },
        "item": {
          "id": "ebb860c5-fe0a-4735-b51a-2bccaceae9fb",
          "name": "identifiers"
        },
        "response": {
          "id": "37d34f08-bc67-4b6a-b875-544c094ca26e",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ec9a656-caca-46ca-91b7-996217ce73cb",
        "cursor": {
          "ref": "116cbc42-197c-47b3-b531-869a58107caa",
          "length": 244,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "1ba2ab90-094a-4ef8-ad02-78cedbb78634"
        },
        "item": {
          "id": "6ec9a656-caca-46ca-91b7-996217ce73cb",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "7b47e4d3-11e3-4a6e-854c-3c54ebde61a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b38d136-27e7-46b3-a67b-e5d05a683449",
        "cursor": {
          "ref": "4e56be28-ce88-4726-a284-56afdfe00566",
          "length": 244,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "491c19a8-c5c1-49a6-aeb0-43df8105b24f"
        },
        "item": {
          "id": "6b38d136-27e7-46b3-a67b-e5d05a683449",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "08c36a06-5873-4d2f-a1a0-5a056c06ffc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53931a1b-4caf-4e9b-97f8-4ce301afc4ad",
        "cursor": {
          "ref": "3b920fd2-95dc-408c-82d3-ed5d11f89f9d",
          "length": 244,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "14b376b3-b50e-4556-b9e6-1b45b3415b45"
        },
        "item": {
          "id": "53931a1b-4caf-4e9b-97f8-4ce301afc4ad",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "955ea62b-eb73-460e-b941-5c109c1f4640",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f200f11a-f43a-449e-8c4f-7efd6b1e876e",
        "cursor": {
          "ref": "b79501cc-0c56-4953-90b1-85a777ae7adc",
          "length": 244,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "d763939e-2d07-4d1e-81b4-f0f301041a28"
        },
        "item": {
          "id": "f200f11a-f43a-449e-8c4f-7efd6b1e876e",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a658d780-955c-4903-898a-fa2bb272f1ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa212947-f8df-490e-9d7f-3bb1fb61781a",
        "cursor": {
          "ref": "d22734c6-f09e-4d35-b38c-6358734edd88",
          "length": 244,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "cd9b15c7-43ec-4351-a19a-229b73500c0b"
        },
        "item": {
          "id": "aa212947-f8df-490e-9d7f-3bb1fb61781a",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "f7ad3ace-5a76-4208-970d-7ec27175f25f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e221274a-1e0e-4159-aac1-62889630da32",
        "cursor": {
          "ref": "3984bf02-38b1-44c7-a0b9-ee38a2032bba",
          "length": 244,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "786c7c18-a314-45d1-97a4-6e42f5a7d6e5"
        },
        "item": {
          "id": "e221274a-1e0e-4159-aac1-62889630da32",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "b0fb4f26-e426-4c79-be45-3af7886857d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ff1f008-5d4c-46a5-9eac-ca1371506b40",
        "cursor": {
          "ref": "ec60bb57-c3a1-43f4-88e4-a3beab9a4d1c",
          "length": 244,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d1cf719a-7a15-434b-ab4d-b71001b5182a"
        },
        "item": {
          "id": "4ff1f008-5d4c-46a5-9eac-ca1371506b40",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "7d9d890b-1266-4928-a067-76d53ff243ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73381642-31d0-4633-a7dd-fa8902906543",
        "cursor": {
          "ref": "55ae8f9d-c18c-4285-a479-c3b035252bc0",
          "length": 244,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "aa9d430b-f1e9-495a-9ec1-8e83ec45eebd"
        },
        "item": {
          "id": "73381642-31d0-4633-a7dd-fa8902906543",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "d31ae235-c347-40ed-a2e9-56980ed087d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b5d5549-4e8b-4f03-86f5-8822aa070291",
        "cursor": {
          "ref": "1d628151-f557-46e4-99c5-ccefddc71513",
          "length": 244,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "fa6527fc-978f-49c5-8f86-486eda1f60b5"
        },
        "item": {
          "id": "7b5d5549-4e8b-4f03-86f5-8822aa070291",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "40763d71-faca-44b2-8ab9-7c00d16927de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76e9e58a-7a50-4c58-a6e3-7a442d647983",
        "cursor": {
          "ref": "2183514d-88b3-451a-bfa6-0177d1c362d1",
          "length": 244,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "3bcc4408-0851-4156-bafa-fd4ff164ae9a"
        },
        "item": {
          "id": "76e9e58a-7a50-4c58-a6e3-7a442d647983",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "ca34cb7e-ee65-4210-b12c-85c5a4161da2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41b8e0b3-3d56-4317-87ae-4f1a47e68f44",
        "cursor": {
          "ref": "f96fa8b2-a89c-4596-8b13-2eb624aaa59b",
          "length": 244,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "11196d58-ebf9-4392-8541-66a08b3b6a55"
        },
        "item": {
          "id": "41b8e0b3-3d56-4317-87ae-4f1a47e68f44",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "5ed6aa17-f470-469d-ae4d-a40f41558024",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "155de797-8014-4c1e-bed7-5c14b963325f",
        "cursor": {
          "ref": "a77189d9-396f-45e3-b158-7e81c65ed15f",
          "length": 244,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "35106b02-d136-4076-8c67-a076ab757372"
        },
        "item": {
          "id": "155de797-8014-4c1e-bed7-5c14b963325f",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "7572d9de-9034-4d7f-84ea-a29039383023",
          "status": "Created",
          "code": 201,
          "responseTime": 1055,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "94326e74-41b0-4d1d-a668-e15950969808",
        "cursor": {
          "ref": "c6402fc3-7ecb-40d4-8fae-697f11fb6363",
          "length": 244,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "21b26705-b330-4bbb-9646-3df007ad8201"
        },
        "item": {
          "id": "94326e74-41b0-4d1d-a668-e15950969808",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "0e38ade7-1d30-4516-9ba0-fa2aa3f00480",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1771af58-99a1-44a6-83a0-cfdfabbd9745",
        "cursor": {
          "ref": "7794d84d-72c2-44a3-b881-863c8fa1de16",
          "length": 244,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "7513855b-743a-44a7-be53-c8bb5f162d4b"
        },
        "item": {
          "id": "1771af58-99a1-44a6-83a0-cfdfabbd9745",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "bf91a30c-9ffd-4419-9a43-2b4d2f12744a",
          "status": "Created",
          "code": 201,
          "responseTime": 6490,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "d2b6aa4b-d04a-4051-a771-87fa52fb8e9c",
        "cursor": {
          "ref": "ae022838-227c-4888-9cbd-ae4bf778def9",
          "length": 244,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "82cc4697-00bf-4671-af80-7c7fefdf852c"
        },
        "item": {
          "id": "d2b6aa4b-d04a-4051-a771-87fa52fb8e9c",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d26a0f03-0e10-4057-b9df-99f60950b20b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97cc89a2-0297-472a-b858-752c8c393add",
        "cursor": {
          "ref": "618a2926-0fb4-4135-9dff-22cd2fe0c15c",
          "length": 244,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "9342d74d-b8ca-4475-92b6-bcb60f66de9b"
        },
        "item": {
          "id": "97cc89a2-0297-472a-b858-752c8c393add",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "5a63d285-0d0f-4704-a28d-3efe8d2c2d05",
          "status": "Created",
          "code": 201,
          "responseTime": 5867,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "c2193d85-3c99-46ab-ac84-a0aed8b83dac",
        "cursor": {
          "ref": "9e5a93f1-c692-4ff1-827c-03b97e441c5f",
          "length": 244,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "656fbc5b-175f-408a-9e46-dec3fbf8ce4e"
        },
        "item": {
          "id": "c2193d85-3c99-46ab-ac84-a0aed8b83dac",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "5049dc07-5b9b-423f-8998-ae07bd13e2b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecb24349-8880-4743-8c50-17e136aadcb4",
        "cursor": {
          "ref": "4835b980-e7ca-4024-9433-856ce1536a5d",
          "length": 244,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ba9c76bb-33d0-40c4-9400-a4b1b3326aa9"
        },
        "item": {
          "id": "ecb24349-8880-4743-8c50-17e136aadcb4",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "8f2958bd-7669-47da-b571-788eef92414e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f05a1a8-631c-40d8-927d-63b9e6955049",
        "cursor": {
          "ref": "d38da3be-b761-4238-8cd8-3989f16b3d04",
          "length": 244,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "05edd2eb-e9f2-465d-9b8a-24b976e15bdb"
        },
        "item": {
          "id": "3f05a1a8-631c-40d8-927d-63b9e6955049",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "bc6901d7-3107-4a40-8064-67e9753b1508",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c08595d8-d29f-4604-b048-12b1f110e92a",
        "cursor": {
          "ref": "2a463fd9-aa34-4ccf-8ae5-db4896399de0",
          "length": 244,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c5428b6e-e0d1-4d8d-9163-4a2632b07b64"
        },
        "item": {
          "id": "c08595d8-d29f-4604-b048-12b1f110e92a",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "989587c7-3e84-41fc-b2da-e3169d736134",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a8156b7-1dbc-4be8-81c0-fb86c0d7ccef",
        "cursor": {
          "ref": "993ae8fe-a4e8-4b4c-9ed8-53ee00f50d06",
          "length": 244,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "b30e446c-2786-4211-85f6-2536dc594cb7"
        },
        "item": {
          "id": "5a8156b7-1dbc-4be8-81c0-fb86c0d7ccef",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "128d04df-52b7-4c50-93bb-dfef6fb8169b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7468db1-bc08-4f0f-8ee4-bcd041637cba",
        "cursor": {
          "ref": "344a0dc3-7813-402b-976b-d5aca98ec442",
          "length": 244,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "74f4d0dc-d702-404b-b929-ea0ac0b4693b"
        },
        "item": {
          "id": "d7468db1-bc08-4f0f-8ee4-bcd041637cba",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ceff0a35-beb3-47d3-959a-919b203984b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d23900f9-f9bb-4fce-bf95-7fc9a780b04f",
        "cursor": {
          "ref": "74be7786-d9c6-45fd-91ee-17064b06a470",
          "length": 244,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "42a9eb66-35e4-4bf2-a0e9-742c5bc81ad4"
        },
        "item": {
          "id": "d23900f9-f9bb-4fce-bf95-7fc9a780b04f",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "2d8792df-48d3-44d6-a497-056968041e28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6414fd7-d1a6-4df1-9a05-5f7ea25ce7f4",
        "cursor": {
          "ref": "dc66547c-48ce-4ad4-81eb-345011d8e698",
          "length": 244,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "adccbc6d-c864-4587-905c-b80340c00c70"
        },
        "item": {
          "id": "a6414fd7-d1a6-4df1-9a05-5f7ea25ce7f4",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "5edf5f51-550a-4d80-a9b4-039770ab6486",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4083af16-3bc5-4276-9479-0b06d973f78e",
        "cursor": {
          "ref": "37e69a28-6628-4baa-abc4-43b2e2b30e88",
          "length": 244,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d908d63f-2eed-4416-b7a7-b0ad93610518"
        },
        "item": {
          "id": "4083af16-3bc5-4276-9479-0b06d973f78e",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "ed865b0b-1dc4-42d1-aca5-fb3aca80ab94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcabde82-4235-4be8-827c-b2cfa740f750",
        "cursor": {
          "ref": "cefcf953-41d2-4cab-84b2-75207519f0d5",
          "length": 244,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "f0be2fbd-3942-4822-8ffb-9ef17c19555c"
        },
        "item": {
          "id": "bcabde82-4235-4be8-827c-b2cfa740f750",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "d1ae0358-8634-4e9f-be3c-559a8a1177fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "197d9055-c87d-4a98-9798-61003966ecfe",
        "cursor": {
          "ref": "09bdc118-d94c-43c7-9d5d-4393a0dff2b1",
          "length": 244,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "e919d6a0-161e-482d-8c87-a42ae91e0f49"
        },
        "item": {
          "id": "197d9055-c87d-4a98-9798-61003966ecfe",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "c4d00e5e-4b51-48b6-899a-a6bbff5089ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d3a1487-54fd-4737-9c79-ed4e6eddca95",
        "cursor": {
          "ref": "6c5a41ec-41d3-476c-8c9e-96b000c0814c",
          "length": 244,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "17372d0d-ec2b-4a12-9527-150dcb975ace"
        },
        "item": {
          "id": "1d3a1487-54fd-4737-9c79-ed4e6eddca95",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "85eed062-c8bd-46a8-8f77-f994b7aedc66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4188f444-599e-43c3-8c02-63f42c5a862e",
        "cursor": {
          "ref": "b1be1f54-f620-4f8c-9c97-215eb4276f87",
          "length": 244,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "235ccf4e-7286-45ec-b1ed-04d94260f9fc"
        },
        "item": {
          "id": "4188f444-599e-43c3-8c02-63f42c5a862e",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "a312ed0a-b8ea-42e6-9a27-2308b0a02ead",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e7c9dd9-02f0-44c7-af45-67cc2033506e",
        "cursor": {
          "ref": "5523e599-dd94-468f-afbf-4cf768719884",
          "length": 244,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "78df0e9d-267d-46d5-b377-3896fb4b07d7"
        },
        "item": {
          "id": "8e7c9dd9-02f0-44c7-af45-67cc2033506e",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "ded64329-a21d-4028-b501-c070902f2500",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fc12ed4-91c4-48a8-854a-a0184674a224",
        "cursor": {
          "ref": "ef8cb4d2-29d3-40f3-a6a1-88f394f77255",
          "length": 244,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "2f80d0fa-d95d-44a8-8eaa-dc3be644ccc7"
        },
        "item": {
          "id": "8fc12ed4-91c4-48a8-854a-a0184674a224",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "cf8bc2b2-8082-4b60-bedf-172baaf7f514",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10916d54-7b4b-493b-b42e-7379e6de73e6",
        "cursor": {
          "ref": "29f5a2e0-ff74-4722-a4b4-8c0cb4f06c4b",
          "length": 244,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "c60ddd13-d645-4472-9797-59c3c4e8c6cd"
        },
        "item": {
          "id": "10916d54-7b4b-493b-b42e-7379e6de73e6",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "c1e7f830-8818-4fb8-9022-459e6c4377e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd05c6af-dc6a-4f7a-a027-2f178f3292f2",
        "cursor": {
          "ref": "8cce6202-bdba-4bca-b7a4-7481bb745848",
          "length": 244,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "21674e0a-9bf9-4808-b770-446c4f27a185"
        },
        "item": {
          "id": "fd05c6af-dc6a-4f7a-a027-2f178f3292f2",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "4033e85f-3537-4e21-b96e-e57a5dd2a015",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4bf561c-32ef-4d35-858a-9a4e95828062",
        "cursor": {
          "ref": "99392e6c-ae3a-498f-b215-e7049a219546",
          "length": 244,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "a09d80cc-e5fe-4400-bd93-57a068fedfca"
        },
        "item": {
          "id": "a4bf561c-32ef-4d35-858a-9a4e95828062",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "30e662cc-798d-4452-a78d-72e300d699fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b5d97ed-7177-47a1-9166-113c05c81cec",
        "cursor": {
          "ref": "2b494c01-09f5-4215-9a8a-590c0452c77f",
          "length": 244,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "0e8942c3-4b51-4774-9f8a-26cc2a2fd5b8"
        },
        "item": {
          "id": "2b5d97ed-7177-47a1-9166-113c05c81cec",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "9d89c960-3770-4659-8bf4-3ea3d1085023",
          "status": "Created",
          "code": 201,
          "responseTime": 2958,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "ccdd51eb-9bed-4e78-877a-752ca8bb1092",
        "cursor": {
          "ref": "49456bf4-7a9b-4b3a-a2f3-28c005191dd7",
          "length": 244,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "65ee6e43-3dae-42f5-8be7-4c9ad0c8bef4"
        },
        "item": {
          "id": "ccdd51eb-9bed-4e78-877a-752ca8bb1092",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "9caba9e2-3b21-46f2-8bda-96e9142a8598",
          "status": "Created",
          "code": 201,
          "responseTime": 3443,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "de8807fb-a24c-454b-958b-33f3bb204778",
        "cursor": {
          "ref": "b432cdb0-bba6-4616-98af-8452a665c82d",
          "length": 244,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "8dc85e0e-fa69-40e7-9a38-104244ed1a39"
        },
        "item": {
          "id": "de8807fb-a24c-454b-958b-33f3bb204778",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "8d62426a-b93a-4419-b2b1-bbefb5738a46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3299a5e0-bf5f-49ad-b92e-b90d3261061e",
        "cursor": {
          "ref": "6a2f86a9-3538-4ca8-9873-d714a95ec329",
          "length": 244,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b348e9f2-e8de-4b61-a82e-fb00a621864c"
        },
        "item": {
          "id": "3299a5e0-bf5f-49ad-b92e-b90d3261061e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "839a06cc-53b9-4467-be5b-8b43c70a7e48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 140,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6997bb3d-def1-4f9e-bf53-508f6bd69e9b",
        "cursor": {
          "ref": "35e4f403-303e-425b-b63a-806574e5c0aa",
          "length": 244,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "a3bbd928-3d0e-4bbe-869b-3ea53d6395d2"
        },
        "item": {
          "id": "6997bb3d-def1-4f9e-bf53-508f6bd69e9b",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "57457533-6d3d-41d3-9e30-000c668e4405",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f303641-a90c-4738-9bb8-6b9d06067006",
        "cursor": {
          "ref": "39e89bf4-45c0-49a8-9ee8-b323d9a0f0fa",
          "length": 244,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3c19c14e-d773-436f-b266-284fa2218119"
        },
        "item": {
          "id": "7f303641-a90c-4738-9bb8-6b9d06067006",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "1978d70a-3b14-440b-855f-d34acd918569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a262a0a7-cbf9-4b07-b6f0-a77b112a59a1",
        "cursor": {
          "ref": "5b614e1a-1333-46dd-82d9-4a389dc4be55",
          "length": 244,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "4402affd-aff4-4275-9735-7300a81d35e2"
        },
        "item": {
          "id": "a262a0a7-cbf9-4b07-b6f0-a77b112a59a1",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a7cb8ce4-2c14-4a51-a42b-c0c567a67f18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbd8e810-ebba-47df-9049-86f7bab3762a",
        "cursor": {
          "ref": "4538fd22-618c-4738-a07c-5e334735b85c",
          "length": 244,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "33231575-a7c2-4827-856f-c9b256c1664a"
        },
        "item": {
          "id": "fbd8e810-ebba-47df-9049-86f7bab3762a",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "cb841faa-07dd-4054-86f6-677897fefc86",
          "status": "Created",
          "code": 201,
          "responseTime": 2271,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "f44aa802-7ef9-418b-a02e-a5673606491d",
        "cursor": {
          "ref": "5afac490-b090-4cb0-9dd9-559537f9d798",
          "length": 244,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "8326194a-071c-4e6a-97db-8effae94d41e"
        },
        "item": {
          "id": "f44aa802-7ef9-418b-a02e-a5673606491d",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "cc5a75b1-58a2-4ac9-9749-3715b078d7a5",
          "status": "Created",
          "code": 201,
          "responseTime": 3039,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "6ca4e268-9397-41f1-8584-d2009f055939",
        "cursor": {
          "ref": "47dbcf70-e405-4762-ac7c-f24fae3e7815",
          "length": 244,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "2f45a040-e80c-427e-bdee-cbb49e8c153d"
        },
        "item": {
          "id": "6ca4e268-9397-41f1-8584-d2009f055939",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "1f44fd22-18d4-4231-bb46-493b0ac787a8",
          "status": "Created",
          "code": 201,
          "responseTime": 2802,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "6336a577-093d-47f9-ba2c-b28e2599e652",
        "cursor": {
          "ref": "c51fad6f-4eec-4e0c-b0f5-c466a84969d6",
          "length": 244,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "ae159de2-67f5-4c08-9aff-6f44eb8187df"
        },
        "item": {
          "id": "6336a577-093d-47f9-ba2c-b28e2599e652",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "9ac5f00d-0ab5-4d41-9fee-6e60f4789266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "debf2eb3-bf52-4baa-aace-4728572afd66",
        "cursor": {
          "ref": "e24a0625-1af2-409c-a9e0-05544cd3002f",
          "length": 244,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "97006900-8ec0-47d5-9819-01f47405f573"
        },
        "item": {
          "id": "debf2eb3-bf52-4baa-aace-4728572afd66",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "50777eb9-1cd1-45ad-9566-b14053153b19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e9c0111-41ae-466c-8e8e-ba4cac192f91",
        "cursor": {
          "ref": "48296690-c597-4d98-ae7b-09e5ff93e6ec",
          "length": 244,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "73099844-fd2f-4309-ae53-3acc816d3ea0"
        },
        "item": {
          "id": "4e9c0111-41ae-466c-8e8e-ba4cac192f91",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "64988533-82c0-44d8-bb35-8f9be9e8710c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dde421bb-1269-4cff-bb86-6366d86ef5a7",
        "cursor": {
          "ref": "e688341a-905d-45b6-8533-054a766b6dcd",
          "length": 244,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "9579bfac-18c9-40ea-9be1-69b62cb02b78"
        },
        "item": {
          "id": "dde421bb-1269-4cff-bb86-6366d86ef5a7",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "52d0f214-027c-4b5f-b542-f8edc5fec331",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "070ade37-c5bd-4812-b3e5-050021615dad",
        "cursor": {
          "ref": "c50f24ba-cf24-4ca9-839b-ffa7453aeb33",
          "length": 244,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "d85683a9-da83-4e3a-aeaf-06a0016bd5b9"
        },
        "item": {
          "id": "070ade37-c5bd-4812-b3e5-050021615dad",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "fb71029b-9a39-4914-84cc-cade00206cd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31ff1fa2-ce6d-4190-bdec-0c705fd51251",
        "cursor": {
          "ref": "0580c20e-9416-4f44-8687-743d25a66c05",
          "length": 244,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "aa3d7947-4a83-493c-b9ad-77ac87c316cf"
        },
        "item": {
          "id": "31ff1fa2-ce6d-4190-bdec-0c705fd51251",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "2a7de59e-3900-4982-b76d-b0aab840be10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0334a791-47a8-4aa1-adac-2defe5a355c6",
        "cursor": {
          "ref": "78daa909-e66f-4065-b6e2-1230f91b3f4c",
          "length": 244,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d725cb95-fecb-4690-8df5-b9de38e95c07"
        },
        "item": {
          "id": "0334a791-47a8-4aa1-adac-2defe5a355c6",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "6188ea4c-100e-4d66-b32c-53eb95913992",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "667f982a-6623-4e3b-a239-d7d327d0aa51",
        "cursor": {
          "ref": "7624e6d4-e7b8-4d2f-aa66-51fc5efbb785",
          "length": 244,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "e850488c-2218-4142-ad8c-f8c183d61242"
        },
        "item": {
          "id": "667f982a-6623-4e3b-a239-d7d327d0aa51",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "f19b4d73-d026-4782-8d01-8a003aa38c50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d1b222f-aee9-488b-962b-44e164377274",
        "cursor": {
          "ref": "280513be-225c-45d5-a5c0-43ccabf7d3a9",
          "length": 244,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "43b72ee3-0273-4658-9aff-fcce16e2af21"
        },
        "item": {
          "id": "4d1b222f-aee9-488b-962b-44e164377274",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "44d7674d-db2f-4926-b36d-a747d125836d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b02f917c-e362-4ac7-99d3-3ce641ef1862",
        "cursor": {
          "ref": "28409319-78e1-480c-832d-0290cd2bea71",
          "length": 244,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "d945614e-7cec-4dfd-bb2a-8ea535ecb6d4"
        },
        "item": {
          "id": "b02f917c-e362-4ac7-99d3-3ce641ef1862",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "29b80b14-ba27-4d30-9dbb-5bf60d7af487",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42b675fa-f684-48b5-8230-df191bca0c81",
        "cursor": {
          "ref": "0cfd14c9-772a-4846-ad37-daae29c4f215",
          "length": 244,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "2014d250-5ef1-4f96-8c22-df7ad2e9305b"
        },
        "item": {
          "id": "42b675fa-f684-48b5-8230-df191bca0c81",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "b3ebe962-b8d2-40b9-8f9f-c4287d02bb2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "465118b4-3033-491e-ab5f-fdf9765ef961",
        "cursor": {
          "ref": "46bb6387-555a-422b-9fec-92686c75faab",
          "length": 244,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "9c19b875-6dc6-44e6-b990-8e7c9e564394"
        },
        "item": {
          "id": "465118b4-3033-491e-ab5f-fdf9765ef961",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "d110faa1-3528-4dd3-9c5d-8843144cdb30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b717bb48-1948-4e4c-8832-0bc75786f9c6",
        "cursor": {
          "ref": "86898642-af76-4d6b-8377-bb61b82a4d06",
          "length": 244,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "9502c0f0-328c-449a-8eda-80108fd97007"
        },
        "item": {
          "id": "b717bb48-1948-4e4c-8832-0bc75786f9c6",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "d6d77632-8dda-4fb0-976b-c71eef41b64c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c8f82af-20fd-4333-801d-27f30f94d3f2",
        "cursor": {
          "ref": "5a2314ae-4e26-4c39-9969-8212b6e59ec0",
          "length": 244,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "ba37e371-3a89-4956-a4cf-ca0f9266c43f"
        },
        "item": {
          "id": "3c8f82af-20fd-4333-801d-27f30f94d3f2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "fb56a5de-ea6a-447f-b03a-ba3e50ef03f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d39c066b-8781-4cfa-acc5-58f5586dc2ca",
        "cursor": {
          "ref": "33b7cd9c-93d6-45c4-acfe-791ddf80da55",
          "length": 244,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "516d9ab3-916a-4924-957f-91ae3b6903eb"
        },
        "item": {
          "id": "d39c066b-8781-4cfa-acc5-58f5586dc2ca",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "13618530-ab4c-4dc7-b222-9c70dd0eb0d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02d682d3-2c40-4caf-b61c-fbb91367a706",
        "cursor": {
          "ref": "925d7175-40f4-45cf-8db6-80ad545a981d",
          "length": 244,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "65d1d86d-caee-4e8d-9250-bb38e1661be7"
        },
        "item": {
          "id": "02d682d3-2c40-4caf-b61c-fbb91367a706",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "3fa773d3-88a1-44ef-9b04-2d39aa255c26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0930737e-97f0-4740-990b-d273bbeac94b",
        "cursor": {
          "ref": "f32c05e4-1165-4443-8023-104c1cad5e67",
          "length": 244,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "7abc199e-7b57-400e-9d22-24b9d7df3fbc"
        },
        "item": {
          "id": "0930737e-97f0-4740-990b-d273bbeac94b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "caedfe46-f9e4-4fcc-a286-948b10e6c665",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52405e1b-bc78-4d88-af1d-4270c6aad24b",
        "cursor": {
          "ref": "cf42691a-1d05-4355-ba92-a02bc5d710e9",
          "length": 244,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "0c2e9ad8-6a62-44b7-8bed-2e6ecba4c46a"
        },
        "item": {
          "id": "52405e1b-bc78-4d88-af1d-4270c6aad24b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "8c511e64-c2d1-4524-a07a-ac36724e44aa",
          "status": "Created",
          "code": 201,
          "responseTime": 3415,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "ce504c18-570b-4ff5-9848-14aebda8d207",
        "cursor": {
          "ref": "6b2797f0-0cab-4568-baa1-a7f45142eac8",
          "length": 244,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "9d4b84b8-04f0-49a7-9414-0514cf9726c3"
        },
        "item": {
          "id": "ce504c18-570b-4ff5-9848-14aebda8d207",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "a48446fe-59de-4479-a057-061355c37fad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fd8419e-6d7b-4b5f-bdb9-79e435b8d988",
        "cursor": {
          "ref": "6d050711-89a6-45bd-880c-4820e38d2936",
          "length": 244,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "bb29e85f-61d6-400a-87bf-f4d1901b17f8"
        },
        "item": {
          "id": "6fd8419e-6d7b-4b5f-bdb9-79e435b8d988",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "1789573a-1f24-448a-afbf-09cfb7221093",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4af3b93d-cb3c-440b-a1db-8f78357a5319",
        "cursor": {
          "ref": "f5ce034b-7001-4859-b7ff-cc54ae0121e6",
          "length": 244,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "6663c96e-70c6-4d99-a9f7-ae064fa65cda"
        },
        "item": {
          "id": "4af3b93d-cb3c-440b-a1db-8f78357a5319",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "43328423-2a70-4297-a6d1-57770aaf2041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57156639-2d19-4bb5-8b6f-593af0ad9600",
        "cursor": {
          "ref": "c8fe3319-db10-4ca0-a544-5484e79be07f",
          "length": 244,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "f4a1dc96-3003-4b66-8314-ef9c1219e8a6"
        },
        "item": {
          "id": "57156639-2d19-4bb5-8b6f-593af0ad9600",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "48c11a0a-5f79-442b-aab2-c66e1b4f2cb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b0cd977-a51a-4006-a9d5-00fd642adb7c",
        "cursor": {
          "ref": "d9759b2d-8891-4d69-858d-b2884b470fe5",
          "length": 244,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "f68db581-3a60-4100-85bb-953da8a75c51"
        },
        "item": {
          "id": "1b0cd977-a51a-4006-a9d5-00fd642adb7c",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "0f1069bf-8762-4bda-a571-e201bef8d724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d4c4c7f-d4cc-4ad7-9b88-9e57d1a0475e",
        "cursor": {
          "ref": "08b3ca53-5d22-4a00-bffa-a76df647447d",
          "length": 244,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "41afd188-b848-4b4a-9eb4-885eb1db1816"
        },
        "item": {
          "id": "1d4c4c7f-d4cc-4ad7-9b88-9e57d1a0475e",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "a53b9c03-aeef-4550-b776-c8e566d1f829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e1ba75b-5e70-48f2-baac-3493fdf5b65f",
        "cursor": {
          "ref": "4755ac15-8082-4717-9a40-d67edca088a8",
          "length": 244,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "91b79be8-6711-40f6-8383-97a5077d9ce3"
        },
        "item": {
          "id": "4e1ba75b-5e70-48f2-baac-3493fdf5b65f",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "1b07c984-03e7-45f6-81b5-1d3cd49914e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebf97559-3da5-4d7b-b6cb-0a270d5cc732",
        "cursor": {
          "ref": "8bcaec51-fbc6-43ef-bce3-eac93dda1924",
          "length": 244,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "64b9534c-f9b5-4ba8-9391-06d561c524db"
        },
        "item": {
          "id": "ebf97559-3da5-4d7b-b6cb-0a270d5cc732",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "73499be3-3aaa-49d9-bfe2-c8a21c6c83bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5be136f-6682-40fa-a6fc-c9f70a5d318c",
        "cursor": {
          "ref": "f77c41a4-b34b-404b-b95d-dc908117512f",
          "length": 244,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f89597d3-c1e2-4c80-86a0-59f50e1c59b7"
        },
        "item": {
          "id": "c5be136f-6682-40fa-a6fc-c9f70a5d318c",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "20f6065f-74f3-4151-923c-651c7a31ed00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6bc0367-73a8-4c51-be29-4d72c92c6379",
        "cursor": {
          "ref": "83ed4296-1523-460a-8412-18905c2f59e4",
          "length": 244,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a8e2e8fa-08f7-481c-8277-84e4fe09a73c"
        },
        "item": {
          "id": "d6bc0367-73a8-4c51-be29-4d72c92c6379",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "90ea19e6-804c-4189-a9c8-07c321747e51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13878159-28b2-42ed-8674-3d7002e43b9d",
        "cursor": {
          "ref": "6d865d9b-fbe0-4791-9b59-663a34882575",
          "length": 244,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "d8864f88-96fd-46c7-a213-04abab78498f"
        },
        "item": {
          "id": "13878159-28b2-42ed-8674-3d7002e43b9d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "578eb5e4-6110-4158-baed-8f01afaeafcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "769d2513-74c4-4689-a63d-8dd0948b139d",
        "cursor": {
          "ref": "561a6983-3c7b-43af-8358-768ed6562a2f",
          "length": 244,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "31f05947-9c94-4f7c-a5d4-ffbd9387faeb"
        },
        "item": {
          "id": "769d2513-74c4-4689-a63d-8dd0948b139d",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "021a6a14-8294-44ef-80d9-118781997ca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c4bfbf5-c221-48e8-bcdf-e1f4f8ad1f3f",
        "cursor": {
          "ref": "b8dea069-22d6-4bc5-a28d-98ff8cffaec2",
          "length": 244,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "00b17393-9571-4f57-ada9-8875dc156f19"
        },
        "item": {
          "id": "6c4bfbf5-c221-48e8-bcdf-e1f4f8ad1f3f",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "478b9828-0e87-4117-9af0-0898ab5ae222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98f85d54-791d-4a38-9bc5-b471dabc4fad",
        "cursor": {
          "ref": "deab26fe-65c2-489f-ba4a-fac6a8b18650",
          "length": 244,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "c89410b5-37a8-4a2e-896d-75b464b04ac8"
        },
        "item": {
          "id": "98f85d54-791d-4a38-9bc5-b471dabc4fad",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "c8bfc772-3be0-4d4b-8eaa-5a938f947955",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c52112ca-e8ad-4337-a600-43f15224c2b2",
        "cursor": {
          "ref": "b7437b03-157c-4e8d-b12d-542046459e90",
          "length": 244,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "d810a879-c103-4944-8930-a6c39c922335"
        },
        "item": {
          "id": "c52112ca-e8ad-4337-a600-43f15224c2b2",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "8ff8e73b-cb61-42f8-ac6b-178eba9d305f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "441458d7-3524-47d3-b8f8-fc57b962f64b",
        "cursor": {
          "ref": "149b2df7-1521-4932-a35e-80a2abafe5c5",
          "length": 244,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "fed1baf0-b6c3-4fc1-934a-1151b52efc09"
        },
        "item": {
          "id": "441458d7-3524-47d3-b8f8-fc57b962f64b",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "368d039c-3697-478c-978e-b2615f8eec0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8ba1f8f-baa6-42c6-a7b2-61626df90ee9",
        "cursor": {
          "ref": "926a0f94-8e6a-489e-9562-693728b1776c",
          "length": 244,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "24f96c83-a31e-4480-acf9-3da5edbb68e3"
        },
        "item": {
          "id": "c8ba1f8f-baa6-42c6-a7b2-61626df90ee9",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "d97dd929-7fa5-4095-9e9d-df080bfe9827",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7616e46c-0ddf-4113-bdc9-3f2604594b5e",
        "cursor": {
          "ref": "f8a66061-1aa5-48a0-b9ab-c04f47ae66fa",
          "length": 244,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "9e50da0b-27fd-4d7d-8b93-30a6c4a3930d"
        },
        "item": {
          "id": "7616e46c-0ddf-4113-bdc9-3f2604594b5e",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "dcff8d3e-afa8-43a8-81df-044dec6104c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab988c63-e3f3-4399-8638-92bf87e673de",
        "cursor": {
          "ref": "f5887d4a-2099-4b6f-9831-3e8d1b6d0285",
          "length": 244,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "b1b160d0-c9b3-4da0-ba37-fabdd577c638"
        },
        "item": {
          "id": "ab988c63-e3f3-4399-8638-92bf87e673de",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "fdd78d55-dd82-4446-927a-ea3126b34aec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d1ab615-3c7d-49d1-8858-6fc9fe40fc60",
        "cursor": {
          "ref": "5851b255-74b1-4b77-88f3-3c173cbf6aa0",
          "length": 244,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "cc130b07-a59f-4f74-abbf-54b90a0ee0c5"
        },
        "item": {
          "id": "2d1ab615-3c7d-49d1-8858-6fc9fe40fc60",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "89826b38-308e-46bc-9cae-38001d9d5831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d5bd9e1-7ad2-4007-a767-cb3a44fb54e0",
        "cursor": {
          "ref": "ff40b7d7-fdc1-4b9c-8ffa-7b31ef3b21b4",
          "length": 244,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2ba291c1-d026-4750-8854-33fec53ab5d7"
        },
        "item": {
          "id": "5d5bd9e1-7ad2-4007-a767-cb3a44fb54e0",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "19f7996a-3632-45a8-bed0-5f58364c064e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eee077cd-93d1-4c08-889e-0055cff6d199",
        "cursor": {
          "ref": "3ccd071e-b9af-49f1-8b60-21d82b6ce81b",
          "length": 244,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "f8bfccea-7ba2-4199-a51a-4133728e1749"
        },
        "item": {
          "id": "eee077cd-93d1-4c08-889e-0055cff6d199",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "209c32af-740e-47a9-81f8-e0e39f4e4f64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75a437e5-ccc0-45d4-b262-589ad915d4bf",
        "cursor": {
          "ref": "64f4bc05-ff79-453c-948f-703171ed207f",
          "length": 244,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "d981f0e3-c4ed-42a1-b9bb-64e6267e0ba0"
        },
        "item": {
          "id": "75a437e5-ccc0-45d4-b262-589ad915d4bf",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "1e0a160d-e86f-4837-b399-c26d052c9d4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2cdad6e-acd3-4599-815e-f1aa5505dfc0",
        "cursor": {
          "ref": "a347eadb-eafd-4c3c-9ca2-b9b16cf62578",
          "length": 244,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "9208ac7f-20b2-4ee4-ba3f-6e270b26d479"
        },
        "item": {
          "id": "b2cdad6e-acd3-4599-815e-f1aa5505dfc0",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "3eef1af0-ff36-4293-b1b2-9913fe90fe52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e2759e3-915c-4b93-bb4a-25bb04688abb",
        "cursor": {
          "ref": "bd5a319e-040e-4c91-988e-a16806cf97f3",
          "length": 244,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "51eeb61a-daf1-4068-a0b8-e6e2a4a58c46"
        },
        "item": {
          "id": "0e2759e3-915c-4b93-bb4a-25bb04688abb",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "badffd2a-a438-4c08-aa01-0fc7b88b839c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25443097-2308-4479-ba47-4eb7e5f758f3",
        "cursor": {
          "ref": "2f56bd69-f50b-4fe2-84c8-7ffa2593b134",
          "length": 244,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "d76c7197-00e5-4c0c-a555-bd359c32b1b6"
        },
        "item": {
          "id": "25443097-2308-4479-ba47-4eb7e5f758f3",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "85b18a30-edcf-4167-a45f-935314814d78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4ffab73-50ca-4232-919d-5a6f844fa239",
        "cursor": {
          "ref": "2cc78a10-db95-49dd-817a-27df5bda796e",
          "length": 244,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "f43adfdd-d0bb-42b3-9da4-028ce24bb72a"
        },
        "item": {
          "id": "a4ffab73-50ca-4232-919d-5a6f844fa239",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "5aaf8a9a-8e1e-483e-907b-f6a43178be03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcfff2b4-0c0a-493e-a996-35d571f25fb1",
        "cursor": {
          "ref": "f9a568da-9ac9-4e65-bb8a-86fb78e43020",
          "length": 244,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "88cde604-7e8c-4f92-bf6f-2b54d3195791"
        },
        "item": {
          "id": "dcfff2b4-0c0a-493e-a996-35d571f25fb1",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "a69bc225-e20e-4952-bab5-3be6ed0273bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddee0925-dc47-412e-8ef3-0a4e4b5512a2",
        "cursor": {
          "ref": "22513d14-1d7b-4242-ba15-ce563e1a45c6",
          "length": 244,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "8ee4388f-b725-477f-8855-41087aabd008"
        },
        "item": {
          "id": "ddee0925-dc47-412e-8ef3-0a4e4b5512a2",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "a5d35151-3bb4-42bc-a381-feb0bd1ebc50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9ef03c3-8534-4425-a27a-af581885df0c",
        "cursor": {
          "ref": "49278f84-61cd-4ef9-865e-a5c74dfaf7c3",
          "length": 244,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "9612ef66-e68e-4261-ae5c-3332911c3c66"
        },
        "item": {
          "id": "b9ef03c3-8534-4425-a27a-af581885df0c",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "25c72fc6-a2ec-4471-80b2-edde9a907e0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32aa6100-1b69-43b7-92c1-dc841a8e6408",
        "cursor": {
          "ref": "61a7e34b-2d9b-4b91-a6c9-bc6f70dda61d",
          "length": 244,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "46296a44-9c6a-47a7-8ecc-82d981a68c2d"
        },
        "item": {
          "id": "32aa6100-1b69-43b7-92c1-dc841a8e6408",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "bfd03c52-58f9-4019-9507-f87f0315d16f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "7e63187e-3282-47eb-80c9-e330497aa071",
        "cursor": {
          "ref": "b68c3016-6c01-4960-989e-a79ac1c01457",
          "length": 244,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "5080dcab-9bfa-4f97-9c53-ccafa497c5b8"
        },
        "item": {
          "id": "7e63187e-3282-47eb-80c9-e330497aa071",
          "name": "credentials_issue"
        },
        "response": {
          "id": "883fed6d-edfd-4042-8c91-5cf786443604",
          "status": "Created",
          "code": 201,
          "responseTime": 1991,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "975bc4ab-5eb3-40bd-abb3-5b090f46b564",
        "cursor": {
          "ref": "423bf299-2a14-461d-a3eb-654089a79fc2",
          "length": 244,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d5a7b9ad-17d6-4f3e-90c6-854259e45477"
        },
        "item": {
          "id": "975bc4ab-5eb3-40bd-abb3-5b090f46b564",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "2a61215a-1712-4720-94c0-74bdccae2790",
          "status": "Created",
          "code": 201,
          "responseTime": 2515,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "661adf3e-abd8-4f7f-bd50-b44eacf3f988",
        "cursor": {
          "ref": "9fdda3b6-711e-467d-b953-94a568322508",
          "length": 244,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "397014f9-1339-47a6-b5f7-e89d4067d026"
        },
        "item": {
          "id": "661adf3e-abd8-4f7f-bd50-b44eacf3f988",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "659ce7e0-2d88-4485-a41b-f5f73da5341f",
          "status": "Created",
          "code": 201,
          "responseTime": 2379,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "89584c6f-6268-4d8b-95c3-fb006ea23ba9",
        "cursor": {
          "ref": "3d35ce84-a299-412d-a89c-8b6ff1dd93de",
          "length": 244,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "5c84cf46-e684-46e3-856f-1e2be1a4de5c"
        },
        "item": {
          "id": "89584c6f-6268-4d8b-95c3-fb006ea23ba9",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "02af6ffe-9061-4b6b-bc16-c2f6b242b6ac",
          "status": "Created",
          "code": 201,
          "responseTime": 2527,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c4d0032-bbeb-4660-91ea-5f49778e9ba4",
        "cursor": {
          "ref": "b48a31fe-b605-4bc0-a525-8601f5057a98",
          "length": 244,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "2b4ccfd6-a295-4a7a-83a8-45a167074ed1"
        },
        "item": {
          "id": "5c4d0032-bbeb-4660-91ea-5f49778e9ba4",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "f1f4f51c-572a-4cab-bc93-259abe078afd",
          "status": "Created",
          "code": 201,
          "responseTime": 2526,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-06-16T00:43:39Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-06-16T00:43:39Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "b27683e7-a6ac-4dd3-aa89-ed4b3d6bc522",
        "cursor": {
          "ref": "9f5d3783-9755-4718-9898-db44982fcabd",
          "length": 244,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "ad3b6762-66f8-4b29-bb44-2191c4fd4814"
        },
        "item": {
          "id": "b27683e7-a6ac-4dd3-aa89-ed4b3d6bc522",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "0625f0a0-9f00-43f0-bb3f-ce1e358e71a7",
          "status": "Created",
          "code": 201,
          "responseTime": 2390,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46cae744-299a-4517-8673-38f99d22af4d",
        "cursor": {
          "ref": "4e65d389-7897-4ee0-8e7a-f29955435b73",
          "length": 244,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "680079d9-174e-4d0f-bed6-bf82d29ab9e7"
        },
        "item": {
          "id": "46cae744-299a-4517-8673-38f99d22af4d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "69d8cc53-2a5d-45e9-9958-d92d520801bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7c6f344-59fa-45a2-872d-26ed5c3bbeb6",
        "cursor": {
          "ref": "b323c69a-0ebb-4c5c-855a-0aefd867baa1",
          "length": 244,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "f3b8fefb-9feb-4155-bbe6-afe1f59622cf"
        },
        "item": {
          "id": "f7c6f344-59fa-45a2-872d-26ed5c3bbeb6",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "4848fb9f-afc1-4859-b86e-53abe19184be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 144,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d502fad-23af-47df-b259-43bc54b4fd38",
        "cursor": {
          "ref": "5a32e471-94f6-4efc-8478-43754225315b",
          "length": 244,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a293a211-4403-4b41-8f09-523d9b7d7251"
        },
        "item": {
          "id": "6d502fad-23af-47df-b259-43bc54b4fd38",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "21da7b71-4ac4-4c49-be3f-c4e0ec2b20b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dbb9cef-ce55-40b9-9ea5-effe8a59dce5",
        "cursor": {
          "ref": "2c98c6dc-aa76-4637-96f7-acbd1b350bba",
          "length": 244,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "96d27814-0693-40fa-8a5b-9c93ca4d8ccf"
        },
        "item": {
          "id": "0dbb9cef-ce55-40b9-9ea5-effe8a59dce5",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "4b56b6dd-7aa4-4f70-a3d3-b8e4a73d1730",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb1293fc-a0a9-4627-bdc0-9be17fba2003",
        "cursor": {
          "ref": "f6b60f4f-c0c2-4c66-a277-b53236e23419",
          "length": 244,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "07097f6c-a09a-45c5-894e-ed2f80a5b6ac"
        },
        "item": {
          "id": "eb1293fc-a0a9-4627-bdc0-9be17fba2003",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3c4713c0-c754-47d8-984a-66e989b5d13e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b56b8c73-c378-4b93-8f3a-bf53425917c2",
        "cursor": {
          "ref": "6a63c73a-266f-4cf4-a1f9-9f6d4cb3d68b",
          "length": 244,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "1c3fb23e-ce63-4e7c-8b0c-fbb206d4988a"
        },
        "item": {
          "id": "b56b8c73-c378-4b93-8f3a-bf53425917c2",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "40c386f7-543e-4ead-9515-77e05db72d1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74b24310-5fec-420b-b529-0be557273643",
        "cursor": {
          "ref": "bde9e24b-ca17-4ba9-bc9d-ff6fe9f67e77",
          "length": 244,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "1fb21977-437f-4485-acf4-87ff8e174e43"
        },
        "item": {
          "id": "74b24310-5fec-420b-b529-0be557273643",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "a288bbcc-0c4f-4e91-8524-93fe8802f4a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da9ab78e-47ce-4797-827a-5173b1710b24",
        "cursor": {
          "ref": "b3b7ad92-b4a4-41cf-9945-3109764f6432",
          "length": 244,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "6e18cf5b-07dd-4be5-a155-593456160c26"
        },
        "item": {
          "id": "da9ab78e-47ce-4797-827a-5173b1710b24",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "458f6d1b-7c50-4f58-b788-082ee61001a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "626d4c79-f117-484d-85d0-3f4e213451c2",
        "cursor": {
          "ref": "2639a552-bdbd-4b6f-9e1d-a4dd7f92d75e",
          "length": 244,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "d2704eec-6db4-452e-8fb6-00285b915fa5"
        },
        "item": {
          "id": "626d4c79-f117-484d-85d0-3f4e213451c2",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b7545e9a-84b8-4648-b067-0784367e5fbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cac314a1-81d5-4c89-9da6-ba8910ba90f9",
        "cursor": {
          "ref": "a77d1af9-10f0-402f-9b75-c6802e18d47c",
          "length": 244,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "ea95b905-f5bd-44c9-a531-a6cca0a7de7e"
        },
        "item": {
          "id": "cac314a1-81d5-4c89-9da6-ba8910ba90f9",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "48d2ba92-b922-41eb-b257-831920876585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4595c6c-cc66-461f-9f1e-b25092f29136",
        "cursor": {
          "ref": "b484d4c9-e6f3-47be-9d47-99ee00ea3945",
          "length": 244,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a7864e2d-f73d-486e-9580-96b0a83c7e0d"
        },
        "item": {
          "id": "a4595c6c-cc66-461f-9f1e-b25092f29136",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "5eea3562-330f-4a10-877f-30c3e61f0f63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c8e478b-ee7a-489d-b511-d067e75db96f",
        "cursor": {
          "ref": "41dfd489-bae7-4b19-b3ea-a09b1e9f956c",
          "length": 244,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "a9915f16-73e5-4213-8f5e-4a24ecadbdc0"
        },
        "item": {
          "id": "1c8e478b-ee7a-489d-b511-d067e75db96f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "6a61df04-8b8b-4229-95ca-e78a7496d73c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31557c57-fb71-4824-bffd-5c9eb3b349c5",
        "cursor": {
          "ref": "e02ee19d-076b-4eb8-ae13-872fd7b6ba5b",
          "length": 244,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "1781136a-1d40-42c4-b1a7-18e05027a1e9"
        },
        "item": {
          "id": "31557c57-fb71-4824-bffd-5c9eb3b349c5",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "3257bcbb-a214-4f53-bf3e-28ad0e7292ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eebe009a-2ad8-4442-b32b-292900983631",
        "cursor": {
          "ref": "85222e50-5915-4e34-abce-183bad5dfec4",
          "length": 244,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "313ebb4f-c6e6-45d1-84e7-56fc2376cb32"
        },
        "item": {
          "id": "eebe009a-2ad8-4442-b32b-292900983631",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a99b58dc-2a5c-406f-a9c4-11296b410b5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c98a512c-cc24-45bf-bc07-434258e5f3cc",
        "cursor": {
          "ref": "0e6eeed4-4148-4383-81ea-095db9e9ae58",
          "length": 244,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "68fbec3d-74dc-4658-97c4-7846514177cc"
        },
        "item": {
          "id": "c98a512c-cc24-45bf-bc07-434258e5f3cc",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2c45471c-f2a0-4873-91ee-827e8cbb56da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99b22875-f151-4fce-98e2-a4141479ac83",
        "cursor": {
          "ref": "4e7ee2bc-aaeb-46f9-96ce-ef85ed9645a3",
          "length": 244,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "fdd1eec0-3200-4fb4-b2db-52a1a3ad588f"
        },
        "item": {
          "id": "99b22875-f151-4fce-98e2-a4141479ac83",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f9b8ae4b-573e-4037-a3bc-1341395d9ea6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3425ae6d-27af-4043-bd85-d6569264a358",
        "cursor": {
          "ref": "21d194e5-8e7f-4651-ae8f-1a73d5127add",
          "length": 244,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "490a86b8-613e-4903-98fa-5babe0d5744c"
        },
        "item": {
          "id": "3425ae6d-27af-4043-bd85-d6569264a358",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "a6aed751-6fda-4cbc-9b1b-c0e57550a7ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "482095fe-7945-4c7d-9aaa-c7ea97fe3349",
        "cursor": {
          "ref": "b72c53ca-4d52-4dc3-996f-8065185a4496",
          "length": 244,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "2b91cf96-6b40-4315-9995-ba101787c4b0"
        },
        "item": {
          "id": "482095fe-7945-4c7d-9aaa-c7ea97fe3349",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "2cc1c868-c0cf-4707-a1b5-99ea5136e14f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3860f005-5a62-4e7b-992b-1209290b9900",
        "cursor": {
          "ref": "e9effcd1-27d5-417c-bcf0-f1c51332d3c0",
          "length": 244,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "7572c436-bb67-4a16-be3b-639187b8cf81"
        },
        "item": {
          "id": "3860f005-5a62-4e7b-992b-1209290b9900",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b9a6e45c-9837-4476-bb14-2d0d9d54099f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49d150af-4705-48fb-80a4-b85f101ed871",
        "cursor": {
          "ref": "edb38b55-9d41-42c6-83a4-0b60f8438125",
          "length": 244,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "8b43f443-af56-45b5-95a5-ecf4084619be"
        },
        "item": {
          "id": "49d150af-4705-48fb-80a4-b85f101ed871",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "72c4563f-6554-4c4e-812c-969f04d3f084",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fbd9cac-9aab-4567-bb29-ecd00bd60fa0",
        "cursor": {
          "ref": "50ee8cad-6b06-4011-9011-834495f63d95",
          "length": 244,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "6d007248-feb2-46b8-b4a7-11335f367c46"
        },
        "item": {
          "id": "9fbd9cac-9aab-4567-bb29-ecd00bd60fa0",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "57cec601-8d66-465f-bbe5-9b7c85e96c8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80e821a5-b68a-478b-9741-30596077279f",
        "cursor": {
          "ref": "61381203-0b4b-4bc2-a7ee-fdbcbd2adaf0",
          "length": 244,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "fbfb9c3d-51c3-484b-a594-2975824264d8"
        },
        "item": {
          "id": "80e821a5-b68a-478b-9741-30596077279f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c9d4b59e-615b-42ec-912d-809391b309f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d4fad86-0bd6-4d6a-9b9e-bf33eca9ec53",
        "cursor": {
          "ref": "b63f70e6-a82b-4b3b-a1c5-d92cf25544ed",
          "length": 244,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "8491f851-ff3a-4edf-8da8-6fbe4c63289f"
        },
        "item": {
          "id": "1d4fad86-0bd6-4d6a-9b9e-bf33eca9ec53",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a24d39f0-f63a-479d-9c3e-16f3718121f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "918946ac-af21-4898-bf3d-f26be8f5018f",
        "cursor": {
          "ref": "d776ff28-c4ef-4f8e-b6fc-5b349eb1847b",
          "length": 244,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "33917d0c-04f7-49e0-8931-8c0b0c53c992"
        },
        "item": {
          "id": "918946ac-af21-4898-bf3d-f26be8f5018f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "50ef5967-f987-46bd-adfa-78726202e8dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfd84f73-f3d4-4727-a4c8-8c08cd288187",
        "cursor": {
          "ref": "3a197da2-0ad7-4a28-aa69-2d0a5a98d2e8",
          "length": 244,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "3c6d9943-ef7e-48e7-9bae-99ba3818aea9"
        },
        "item": {
          "id": "bfd84f73-f3d4-4727-a4c8-8c08cd288187",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "0220c3d2-f4ec-4022-be64-0b3016f010a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a1b97f6-90b5-4c12-aeee-415c8cf7b2d3",
        "cursor": {
          "ref": "ac85293c-b572-484a-8ad1-4c2f96143883",
          "length": 244,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "9e7a34c7-9d8c-4d40-9c80-0beede6ad947"
        },
        "item": {
          "id": "5a1b97f6-90b5-4c12-aeee-415c8cf7b2d3",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "9400eb2f-3237-4e2e-9c95-257681d15b94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60e05d09-563f-4ddf-8c21-c2409aad42f4",
        "cursor": {
          "ref": "3d6cb702-bc57-4e25-aea0-756851abaec9",
          "length": 244,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "6f74e1ef-1488-44e4-8270-6faec06aaa91"
        },
        "item": {
          "id": "60e05d09-563f-4ddf-8c21-c2409aad42f4",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e0cab949-e2dc-4c13-a250-710281c3ea9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d316f5e-d704-4a1b-b9a1-823c2b088992",
        "cursor": {
          "ref": "474afeed-1b2c-463b-931c-3a7e34b4c246",
          "length": 244,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "62b1c5f0-50cd-465e-a2c9-bec08d0181c3"
        },
        "item": {
          "id": "3d316f5e-d704-4a1b-b9a1-823c2b088992",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ed78baf9-761f-4149-9562-ac895a93c87c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb43626a-2e16-4183-a2f5-585f68bac79c",
        "cursor": {
          "ref": "db00422e-9071-4bb0-9d2d-fa2e8b9374f9",
          "length": 244,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "9dfb1a28-ddfa-4fa7-ae1f-f20b109ace40"
        },
        "item": {
          "id": "eb43626a-2e16-4183-a2f5-585f68bac79c",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "58438b89-b72e-44b3-87b3-f50573a6c23b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e871b314-03a8-45ad-8ef6-2fa32a002ffb",
        "cursor": {
          "ref": "b94eb41d-e556-45ce-8baf-93555444927d",
          "length": 244,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "72a8353e-9915-4201-b9e4-7b8f6ac7fbad"
        },
        "item": {
          "id": "e871b314-03a8-45ad-8ef6-2fa32a002ffb",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1d8f84e2-2329-4876-bc65-125595107ce1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58e83461-80db-442b-a976-3adb003bd828",
        "cursor": {
          "ref": "29b8288b-5385-4499-99a4-369306f5bb8c",
          "length": 244,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "fad39fb0-bfc8-4d39-a3d8-5d11dffd973a"
        },
        "item": {
          "id": "58e83461-80db-442b-a976-3adb003bd828",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "0ea6f145-9b31-459a-a53d-587e29f66abf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcb36ee6-b52b-4278-a4ff-1b9f4c90bc42",
        "cursor": {
          "ref": "72f0394c-d6e8-4c7d-a078-7cb10ed24063",
          "length": 244,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "bf30abd8-a8e9-440e-a43b-67c209254539"
        },
        "item": {
          "id": "dcb36ee6-b52b-4278-a4ff-1b9f4c90bc42",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "2bcf2188-034b-4228-85a8-11e3a817baef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3de5f4d-4bec-46a2-be40-927e865fcec5",
        "cursor": {
          "ref": "99ce3fb2-d0f8-4962-8b0e-cc047832cf81",
          "length": 244,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "b52f21fd-629d-4ebb-bb07-2812fd14c3fd"
        },
        "item": {
          "id": "f3de5f4d-4bec-46a2-be40-927e865fcec5",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "9827f947-b2f3-458a-b3db-36fba1afccbd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "ceb6106c-e3e0-46b1-a889-6d20c346b30b",
        "cursor": {
          "ref": "5e5beac8-ca94-4d27-ba7f-9366659190ba",
          "length": 244,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "07615bae-bca8-422e-9fcc-2696cb6f2672"
        },
        "item": {
          "id": "ceb6106c-e3e0-46b1-a889-6d20c346b30b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "4aee2b45-1991-4f23-b3b7-184deb06d558",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86c9167b-10c6-4207-a0d7-a96e2684463f",
        "cursor": {
          "ref": "ae8c4a60-e884-4a9a-b909-67c3de422eda",
          "length": 244,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "8341adce-7e88-440e-8de6-9725e125a8de"
        },
        "item": {
          "id": "86c9167b-10c6-4207-a0d7-a96e2684463f",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "3c7b6c09-ba6b-4401-94fe-19d762807acd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b11c55d-b016-4df7-8aef-29bafe6fc32c",
        "cursor": {
          "ref": "1e239935-25fe-4271-b563-bf219d7687f7",
          "length": 244,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "6b3e741b-aecc-4d39-866d-dae44a46c013"
        },
        "item": {
          "id": "5b11c55d-b016-4df7-8aef-29bafe6fc32c",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "f8604563-f16c-4f3b-9d6f-5676d1bfaed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3786716-7079-4a5a-a27c-8d503f46d5c8",
        "cursor": {
          "ref": "f0ddcc62-35a4-4821-9387-e782c3c0205f",
          "length": 244,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "886b79a8-c3fd-402c-8445-926b79532366"
        },
        "item": {
          "id": "c3786716-7079-4a5a-a27c-8d503f46d5c8",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "8b905ea1-8d6c-4ccc-b109-c66d7d86e00f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15350e77-51cc-4af2-b892-f6ad0229cd91",
        "cursor": {
          "ref": "c4233cfa-046d-4dad-be81-1cd58ab9ae24",
          "length": 244,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "0d7bf7c1-e9da-48aa-ba58-c417d7d45544"
        },
        "item": {
          "id": "15350e77-51cc-4af2-b892-f6ad0229cd91",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "fddc69d8-b2fc-49a8-888e-4605f281e841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70b089c2-0b4c-486f-a7c8-4abccf612269",
        "cursor": {
          "ref": "bd6d22e1-827d-49ef-8058-387486a2bb08",
          "length": 244,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f8e6be4e-0d27-4d1d-9c6a-4ea71b01c8c0"
        },
        "item": {
          "id": "70b089c2-0b4c-486f-a7c8-4abccf612269",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "2517faeb-32bd-4d40-b1b2-3388d7ed9921",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fbb30e2-1348-4ec4-8420-d562b1abd29c",
        "cursor": {
          "ref": "f9e6d9b9-5a7d-4c77-a46e-840c49edb2b3",
          "length": 244,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "fc7f8112-d54b-472e-b08f-133d09707578"
        },
        "item": {
          "id": "0fbb30e2-1348-4ec4-8420-d562b1abd29c",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "86002d49-796a-4856-b696-810610c23ea8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dba038d-a664-488a-bfae-ce8b593ae74e",
        "cursor": {
          "ref": "69ccf44b-5f59-41f4-b014-4875010aedde",
          "length": 244,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "6a8897d9-46a3-49fc-bedb-0540abe83146"
        },
        "item": {
          "id": "1dba038d-a664-488a-bfae-ce8b593ae74e",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "0d519c49-2b8b-436a-87e3-740fbd5e7757",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac2314e-0204-42cd-b11c-89ef11986add",
        "cursor": {
          "ref": "cff5ad48-f9d6-4a0f-bfc3-599f4709e306",
          "length": 244,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "cb3a69a8-7c9a-46d1-9b6f-d52d07c01717"
        },
        "item": {
          "id": "5ac2314e-0204-42cd-b11c-89ef11986add",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "ff41e3e9-5a3d-46c7-b9d2-12bc2bafa1cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9177722b-c602-4374-8033-fc2f230aedff",
        "cursor": {
          "ref": "4b0d1792-9c7a-4112-88f6-304fa47393f8",
          "length": 244,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "dd5191f6-3d3a-4818-a8f9-70b2a6fdeb1e"
        },
        "item": {
          "id": "9177722b-c602-4374-8033-fc2f230aedff",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "51d355a1-69d8-40ee-bc8f-5e8ba82b8a70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10445ceb-91d3-4679-8487-498d77ee757e",
        "cursor": {
          "ref": "024a6afc-fe5d-4601-96f7-f38a46c4b0fb",
          "length": 244,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "349b766f-1f79-44d0-aed1-7de4cbfbcea6"
        },
        "item": {
          "id": "10445ceb-91d3-4679-8487-498d77ee757e",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "c04d8c70-7f37-4539-89ed-9aa67f9947f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae9ef24d-a7fa-49d0-8afb-30a543ce2708",
        "cursor": {
          "ref": "5ed3efb1-c946-415b-8d38-e59269d818ea",
          "length": 244,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "83757cec-ce1d-4ae7-99da-d011177a48bc"
        },
        "item": {
          "id": "ae9ef24d-a7fa-49d0-8afb-30a543ce2708",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "ffbe0a8e-86c7-4ca5-9483-c01b078051d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce5aa417-6825-4f06-a087-ed9ac9a51c3f",
        "cursor": {
          "ref": "1c436061-a574-476f-9ba5-e625923777b6",
          "length": 244,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "13b61744-b82a-46f6-ad63-2357f0316e65"
        },
        "item": {
          "id": "ce5aa417-6825-4f06-a087-ed9ac9a51c3f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "84bf3af1-a2c7-471c-97f3-8934598144aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "722e1e9d-3876-4b00-b413-232e0c0aa512",
        "cursor": {
          "ref": "16c33d2f-d3ad-45d6-84a6-e1350d527a8c",
          "length": 244,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "473f2811-752e-4208-a3b8-d210b44ce387"
        },
        "item": {
          "id": "722e1e9d-3876-4b00-b413-232e0c0aa512",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "beb467aa-8b0c-48ee-8f65-a1a05b11f6bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 871,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7af08c36-4d8e-406b-a0bc-00eefb074333",
        "cursor": {
          "ref": "feecba54-0570-4c75-bb0a-97cd2ba137ae",
          "length": 244,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b9aeee61-9820-4cd5-aa4e-aac776b70a3d"
        },
        "item": {
          "id": "7af08c36-4d8e-406b-a0bc-00eefb074333",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "3702c26a-b83b-4eac-8d5e-119823d3cec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7faa634-5a0b-45aa-8010-79abb016d22f",
        "cursor": {
          "ref": "620edb71-44e9-489c-9003-42107965d3d3",
          "length": 244,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "453c2b35-9ce5-449a-87eb-dc3dbbd050e9"
        },
        "item": {
          "id": "a7faa634-5a0b-45aa-8010-79abb016d22f",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f806e090-ce01-4538-9ff9-ae1267aaf51a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28fcd78e-1d28-48ba-9e6a-b7424b70dd9c",
        "cursor": {
          "ref": "a3cd3850-527f-4814-9dfe-2e9fffc3d51b",
          "length": 244,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "486838e9-56da-4e7f-83d6-0e3c5856858b"
        },
        "item": {
          "id": "28fcd78e-1d28-48ba-9e6a-b7424b70dd9c",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e2b18126-35fe-4405-a9af-77ceee937829",
          "status": "OK",
          "code": 200,
          "responseTime": 288,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "570ff0ce-75ea-4048-a89f-7cde4785d824",
        "cursor": {
          "ref": "1ee73650-60bc-4fbd-b731-081ac0212c5a",
          "length": 244,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "55d443ff-5592-408e-889e-a0fdaac9095a"
        },
        "item": {
          "id": "570ff0ce-75ea-4048-a89f-7cde4785d824",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "bf8869e2-113f-4b94-a096-52eb79dc32f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c69fecda-24c0-4cf1-a44e-24f403966fed",
        "cursor": {
          "ref": "ecdbfe1a-56c3-41ff-9055-28b98b6f61d2",
          "length": 244,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "4351cc64-5c1a-426a-a354-4fe785d022ac"
        },
        "item": {
          "id": "c69fecda-24c0-4cf1-a44e-24f403966fed",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "8e81e1e3-c016-4aae-9555-f5586048ee17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4c944c8-ec56-41d5-b7ff-4c90466dcad0",
        "cursor": {
          "ref": "dd066419-2b81-4985-9528-8042f54ef2e1",
          "length": 244,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "34cb80cf-e7d5-4fa6-badc-c965d67614fd"
        },
        "item": {
          "id": "c4c944c8-ec56-41d5-b7ff-4c90466dcad0",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "e50087d6-c26d-41aa-a202-9e89a44b3a98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4709b097-2e47-494e-bf41-ddb82f2b84e7",
        "cursor": {
          "ref": "10b69ad6-52cf-4a89-888b-63ef604ba6d9",
          "length": 244,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "a0c78fb9-01a4-46d7-b967-1df51ca6ad26"
        },
        "item": {
          "id": "4709b097-2e47-494e-bf41-ddb82f2b84e7",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "e2646231-7734-439e-b715-3c6c57f1f374",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13d826c1-289e-4fb0-973c-696933969edf",
        "cursor": {
          "ref": "6d44cd38-020d-4831-ba67-ec9eb1641efd",
          "length": 244,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "befd939f-753e-4c77-8b95-934c893b5cf1"
        },
        "item": {
          "id": "13d826c1-289e-4fb0-973c-696933969edf",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "58a06d33-6379-4b48-9a11-b4f1a1f96738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "020e81af-da19-48ca-920d-27e02719152d",
        "cursor": {
          "ref": "013b35c5-0289-423d-936d-46f281a7d838",
          "length": 244,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "019a0793-92e2-4766-817c-fd4702ee7cb2"
        },
        "item": {
          "id": "020e81af-da19-48ca-920d-27e02719152d",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "0ff4e3c0-bee3-449f-a0eb-7e0964cd998e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee9d2ed-10c3-471b-974d-a69aaa0b1393",
        "cursor": {
          "ref": "79b173f8-3e23-4bc8-863f-4bb7446291e3",
          "length": 244,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "be9d52bc-afe5-425a-90ba-63c7cf8266fe"
        },
        "item": {
          "id": "fee9d2ed-10c3-471b-974d-a69aaa0b1393",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "f79e1299-5e85-4dcc-8b4a-fb58923ff659",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ac03e1d-1990-4a45-83b6-b6f5b3e7261b",
        "cursor": {
          "ref": "1225b9d3-86e2-417c-9610-13d05a5c722d",
          "length": 244,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "bcf73abd-2817-46be-895a-23be286996ee"
        },
        "item": {
          "id": "2ac03e1d-1990-4a45-83b6-b6f5b3e7261b",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "4c77ee55-71ec-4dda-8f1b-bc879583d843",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34b5d60d-a45e-4e82-8701-b53614c0603b",
        "cursor": {
          "ref": "63ff473a-b98d-4513-b60e-644f811fa051",
          "length": 244,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "847edb3b-6a84-4ff1-a15c-77cbdeb58739"
        },
        "item": {
          "id": "34b5d60d-a45e-4e82-8701-b53614c0603b",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "bdc4d595-f227-4403-9254-275ae86b9365",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2ec02ca-c8da-4d79-9ffc-f5f9324b0c21",
        "cursor": {
          "ref": "f5634829-35ce-4362-a684-fc6a114caea2",
          "length": 244,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "d7ad0e86-d930-44af-9b2f-8b58702a8d90"
        },
        "item": {
          "id": "f2ec02ca-c8da-4d79-9ffc-f5f9324b0c21",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "e890d726-0ed8-41d8-9b08-eb279b361527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b52eaa6-c663-47a1-b848-4f41afa74c6d",
        "cursor": {
          "ref": "36b0a27c-1dbe-4640-904d-1cce9c2180eb",
          "length": 244,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "95f48fe5-8c56-4874-99f2-969a80738982"
        },
        "item": {
          "id": "9b52eaa6-c663-47a1-b848-4f41afa74c6d",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "44d2b2d0-6a5a-4f77-940b-e13f6f0ae238",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10834d2d-daaa-421d-98ea-1409e64c04a0",
        "cursor": {
          "ref": "48b10d31-451e-4d51-a696-78190d721301",
          "length": 244,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "72694392-9377-4cf6-800c-393f9ca3acbd"
        },
        "item": {
          "id": "10834d2d-daaa-421d-98ea-1409e64c04a0",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "c30ae861-85fe-4196-a342-cd7a4b442c35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abb475bd-be75-4220-a1db-b87583790adf",
        "cursor": {
          "ref": "c149763d-d0e1-4fdb-9011-0290a64318e4",
          "length": 244,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "783c5049-4522-4ca3-8aee-8f56ee4a96ca"
        },
        "item": {
          "id": "abb475bd-be75-4220-a1db-b87583790adf",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "a623a632-bb07-480f-ba0d-0f27d4c706ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03edce2e-0983-4416-b0d0-81fdd9017b26",
        "cursor": {
          "ref": "43adf064-5ede-41ca-afb4-cf61eba119a2",
          "length": 244,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "ee1e7972-714a-4f02-8583-a7492e5af6e7"
        },
        "item": {
          "id": "03edce2e-0983-4416-b0d0-81fdd9017b26",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "1296be3f-7471-4687-bed9-2fca3ca0c5c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e2f7da6-fc46-42bc-a0a4-ae2466288c0c",
        "cursor": {
          "ref": "e3945590-ca04-4aad-97fe-da1933673298",
          "length": 244,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "afbeeabd-8216-40b2-933b-c139de6fb6e7"
        },
        "item": {
          "id": "2e2f7da6-fc46-42bc-a0a4-ae2466288c0c",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "9a7a729b-2a67-474e-a273-bbe279e22b6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01845f2b-7d0c-44c8-8234-ca5bb0d30e9e",
        "cursor": {
          "ref": "aa8503fe-b027-4b70-a22e-3cf8f4656f94",
          "length": 244,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "520e26b9-2154-451c-ad5e-050dbb3f5e30"
        },
        "item": {
          "id": "01845f2b-7d0c-44c8-8234-ca5bb0d30e9e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "940d7106-172c-4e2e-888a-db56ea38bf6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0d22b05-49f8-403a-b5be-925e7eeb29eb",
        "cursor": {
          "ref": "a1d9d5ea-e964-4de3-a586-b7940dbef6ea",
          "length": 244,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "b2b5edff-2eb3-43e1-8b63-288e545dc8ba"
        },
        "item": {
          "id": "a0d22b05-49f8-403a-b5be-925e7eeb29eb",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "2f56801f-6641-41bd-976d-cf3281dc01f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a706892-0504-460a-953e-17872ed261c1",
        "cursor": {
          "ref": "df32b96b-a432-4129-b504-808ed6ec78f7",
          "length": 244,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "ebb89a30-fac0-402f-b392-05b18a1d1094"
        },
        "item": {
          "id": "0a706892-0504-460a-953e-17872ed261c1",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "9101905a-c343-414a-a253-f55735a06402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cad693ce-445f-4956-b456-86a6b317289f",
        "cursor": {
          "ref": "1fadf31d-a56a-4613-bf51-06ba54d0eecc",
          "length": 244,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "d791be55-00c0-426c-8c8c-5cc89147cde1"
        },
        "item": {
          "id": "cad693ce-445f-4956-b456-86a6b317289f",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "2163e73c-713b-4d49-92b6-0fd77cbf7815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fba4616d-5ffe-4460-991f-ce8274ef1baf",
        "cursor": {
          "ref": "f3950e87-4313-413a-a33e-94b52368c9f8",
          "length": 244,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "09eaa32c-693e-4e11-bc82-d5ca1cb55de5"
        },
        "item": {
          "id": "fba4616d-5ffe-4460-991f-ce8274ef1baf",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "f1f7ccd0-1257-465c-889f-8627fb71ff0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e7c5dd2-aeeb-4b23-b21e-95a280a28276",
        "cursor": {
          "ref": "30b3fafd-d7ac-44a5-8906-00c81aa8a103",
          "length": 244,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d42b2c4b-164b-4600-86ca-580b7585ed7c"
        },
        "item": {
          "id": "8e7c5dd2-aeeb-4b23-b21e-95a280a28276",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "d9938623-3f35-4dd1-870b-6fea2c0b9b40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d288042-8527-4847-a92e-9a41d4d274a7",
        "cursor": {
          "ref": "880517cc-1ce9-491e-9ebb-b6df77c44ac8",
          "length": 244,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "10fe97d8-65d8-4fd4-9c34-70c6d7b57f3d"
        },
        "item": {
          "id": "7d288042-8527-4847-a92e-9a41d4d274a7",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "8bbe886b-e375-445e-b6dd-63fbed927110",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea4b2eab-1f5f-4bc2-9a06-a3ef51566fa8",
        "cursor": {
          "ref": "5e5982b4-5ab2-419f-ac5f-882ce7ddbead",
          "length": 244,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ff795bab-7ac0-460f-931f-a53b9a0093f9"
        },
        "item": {
          "id": "ea4b2eab-1f5f-4bc2-9a06-a3ef51566fa8",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "19a36120-457a-412b-aa4e-4334f9627b14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a142c2b0-1c55-4a49-b4ec-f10d15ded399",
        "cursor": {
          "ref": "a68eb168-62ce-43be-bd7d-da51be4d4589",
          "length": 244,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "dd2ae609-8a01-434d-bcd6-b7f2e68d0b2a"
        },
        "item": {
          "id": "a142c2b0-1c55-4a49-b4ec-f10d15ded399",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "704c63b3-ec00-45c5-aca7-3fc657a96ade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f68a3c7-b22d-4a6f-b4d8-46b425e2034d",
        "cursor": {
          "ref": "350929bd-6dc4-4b8d-9734-fda0d6051ab4",
          "length": 244,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "bbe5e71a-9332-4d68-8aae-8c2517d09f9e"
        },
        "item": {
          "id": "7f68a3c7-b22d-4a6f-b4d8-46b425e2034d",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "1202c4f1-94bc-4309-8855-2efb07466106",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a14447d9-9a93-497e-b618-2ed40b0bf23f",
        "cursor": {
          "ref": "6c5b8966-bde2-4037-bb82-75c2c57e9a5b",
          "length": 244,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "d417cff4-c9f4-4b80-a40a-78115f3bcb79"
        },
        "item": {
          "id": "a14447d9-9a93-497e-b618-2ed40b0bf23f",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "a0bb21ac-b6b6-4a6e-8f4a-251292c84bc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bfcffc8-e129-49b4-8235-57ec3fa72e44",
        "cursor": {
          "ref": "e5729cd1-53d4-4a88-84e6-c55230d1e0a4",
          "length": 244,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "e5f10cbf-0a3a-4bad-8269-8fa72490ba29"
        },
        "item": {
          "id": "3bfcffc8-e129-49b4-8235-57ec3fa72e44",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "1618b699-e6ef-4264-ad2e-d881e3c1a00e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8c87627-ecd5-4ed0-ae8c-11425c21d18b",
        "cursor": {
          "ref": "af3fbe66-9de3-4215-9291-b20287f8aca8",
          "length": 244,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "c80e336c-7100-4417-8705-2dc174fea5e8"
        },
        "item": {
          "id": "d8c87627-ecd5-4ed0-ae8c-11425c21d18b",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "1780eebe-429f-4099-b407-a1533b137cce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0536bad2-68d6-42c3-aed3-aed35c08e3bd",
        "cursor": {
          "ref": "2787684d-3254-44eb-ba05-dbee3ca9fb65",
          "length": 244,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "5358a631-3044-4831-b66e-880b83738e12"
        },
        "item": {
          "id": "0536bad2-68d6-42c3-aed3-aed35c08e3bd",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "ca2faf57-231b-4f33-aef1-2c0d4bef7726",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e69ae0e-e73c-4746-9b8c-2f3525bdc5f6",
        "cursor": {
          "ref": "cae64ffa-1877-4aba-9da5-6427eb44c5bd",
          "length": 244,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "42f71809-b10d-4edb-8fb1-ecc43fe40cc1"
        },
        "item": {
          "id": "7e69ae0e-e73c-4746-9b8c-2f3525bdc5f6",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "9b717252-ee1f-4989-aad6-623bde1ddd82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33372cc8-a6e3-4528-b7ae-e28926281478",
        "cursor": {
          "ref": "9dd628b1-7f2a-4b87-9b8a-50fe090ac259",
          "length": 244,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "6f58b7dd-9f73-4008-9dff-d4faf5c42605"
        },
        "item": {
          "id": "33372cc8-a6e3-4528-b7ae-e28926281478",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "f2ccec76-4250-43cc-b12a-f45d39f9a63e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "910c27b5-e52f-4c69-8854-aa0d7f0f5726",
        "cursor": {
          "ref": "1579a83c-4b99-4b49-b2ba-553bd0beba1e",
          "length": 244,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "0b8b7d8e-9597-4f8e-9df8-1e2816f0a178"
        },
        "item": {
          "id": "910c27b5-e52f-4c69-8854-aa0d7f0f5726",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c37c5b63-a245-4869-83a0-019bd024f180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f709d8c-c35f-4b22-85d1-fdf33dc10596",
        "cursor": {
          "ref": "ab1022b2-cf79-4340-afe9-b107e4080f28",
          "length": 244,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "0d4fab94-4700-4192-bc48-6a275ab094c4"
        },
        "item": {
          "id": "5f709d8c-c35f-4b22-85d1-fdf33dc10596",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ff996ed6-cff6-4667-bd57-8339270bc31b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5ed5e1b-6020-4085-b8dc-09c0814ec45c",
        "cursor": {
          "ref": "224cacbe-e5d5-4d55-b29a-3d1be848a537",
          "length": 244,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "e2d7be01-c8b0-4856-847d-97e556230de9"
        },
        "item": {
          "id": "a5ed5e1b-6020-4085-b8dc-09c0814ec45c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "4c303ef3-4b06-4906-89f5-5d4fcb26cddd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad77b575-0811-40ca-a5c4-7222771a8947",
        "cursor": {
          "ref": "3684322d-3c33-4586-9996-92a606fd677b",
          "length": 244,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "3903e47e-f7f0-4347-989c-45b573f20fa9"
        },
        "item": {
          "id": "ad77b575-0811-40ca-a5c4-7222771a8947",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "65c20d37-b765-4a8f-bc34-692cce2fbb01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40f7a4c0-64d0-4103-b179-2df0b878056b",
        "cursor": {
          "ref": "d9bc6c75-bb53-4bac-ac31-0e861db72bc2",
          "length": 244,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "b13ade3c-0c86-480c-a4ae-c22872e92a11"
        },
        "item": {
          "id": "40f7a4c0-64d0-4103-b179-2df0b878056b",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "90751475-34ad-42d3-bb66-8b8dc82fec76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55cb1fc4-2287-4710-8bea-56fa32bc32ec",
        "cursor": {
          "ref": "4d283ffe-74aa-4cc2-a8ad-7f06b7c7ff65",
          "length": 244,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "8991a37b-de8b-44bc-ba76-258230d86188"
        },
        "item": {
          "id": "55cb1fc4-2287-4710-8bea-56fa32bc32ec",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "8b4c93d9-84c1-49fd-9b80-d5b5c83a6e47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1347e47-cc97-4bbb-97ad-0d49c093ecc6",
        "cursor": {
          "ref": "6e0c9258-8942-4416-903f-31cfe3aaf739",
          "length": 244,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "2b507807-9221-4bdc-a01c-4ce58531cb42"
        },
        "item": {
          "id": "c1347e47-cc97-4bbb-97ad-0d49c093ecc6",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "7c3efc04-47ef-4d1b-8bc5-84bf07b379f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43a531f1-9bac-454b-b10e-50a024d137ec",
        "cursor": {
          "ref": "60af3d17-181a-4b20-bfb9-dffd01cd8d72",
          "length": 244,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "c8baebc3-0ca4-418c-a61b-2387f8b66b71"
        },
        "item": {
          "id": "43a531f1-9bac-454b-b10e-50a024d137ec",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "af65ec97-5a5e-439c-b644-9f0dcef66249",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e168bb4a-3a21-4a45-8a4d-96d2500c1301",
        "cursor": {
          "ref": "bb65557c-029d-4cd9-87a3-867784d56a81",
          "length": 244,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a458313e-2d69-49a3-a733-68b5009bcb3b"
        },
        "item": {
          "id": "e168bb4a-3a21-4a45-8a4d-96d2500c1301",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "c5138fcc-4c4e-4193-b38e-6a52c0ca1db3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25752aff-e002-431d-a0e2-2c52a1bfdb99",
        "cursor": {
          "ref": "72511462-b7d7-491e-a314-d5bc09345aff",
          "length": 244,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "86064db6-ea53-48d1-826d-2d1c8c0d3829"
        },
        "item": {
          "id": "25752aff-e002-431d-a0e2-2c52a1bfdb99",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b84efc36-64d9-4e1e-81f3-5f606f58dc3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eea3f9f-6852-49ac-b9ea-0b2a5ac2558f",
        "cursor": {
          "ref": "97406d27-763f-4403-ae83-7ce177aff3cf",
          "length": 244,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "d34a8682-08cf-4d9b-8168-cb3112df8cd2"
        },
        "item": {
          "id": "4eea3f9f-6852-49ac-b9ea-0b2a5ac2558f",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "789fa87f-60b5-485f-ade5-0ecae9e08e8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d7684e2-d5b0-430d-9316-28dd6f7f589f",
        "cursor": {
          "ref": "de04a1ef-249c-49c7-8f82-c9d5737c76d5",
          "length": 244,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "8e94a8ef-925e-49a4-aee7-9aeb1d480cb5"
        },
        "item": {
          "id": "5d7684e2-d5b0-430d-9316-28dd6f7f589f",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "901cd6f3-0353-43e3-85f9-6a6882e3800e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "968166b3-6541-4673-9f07-65edf60e26cc",
        "cursor": {
          "ref": "e6fde820-a006-49e5-b197-8c1515be5f9f",
          "length": 244,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "38922d09-8146-4fcc-9d73-60adc465ca33"
        },
        "item": {
          "id": "968166b3-6541-4673-9f07-65edf60e26cc",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "4eac3510-0694-4f82-8642-d2cf541cedbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eddf84e2-d8bd-4b5d-aed0-b35f15232a2c",
        "cursor": {
          "ref": "128fc5f8-c5a4-4b63-bbd5-8f0c040c83c8",
          "length": 244,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "04e80447-a79d-4afa-95ed-e7f4aba9ef66"
        },
        "item": {
          "id": "eddf84e2-d8bd-4b5d-aed0-b35f15232a2c",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "268a326e-5a08-45c0-9d53-2f2bc2f39871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49e79f0f-2db1-4378-9569-c538bfefdb34",
        "cursor": {
          "ref": "df1907b7-2a7f-4ebb-af1b-e6eb334e7396",
          "length": 244,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "8c82a2af-1346-4ced-b33e-006cb61465ed"
        },
        "item": {
          "id": "49e79f0f-2db1-4378-9569-c538bfefdb34",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "4b9487ff-60c1-4d10-9e95-9212468b11cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44d3d6a7-c1dd-4078-a837-363b0bbcfed4",
        "cursor": {
          "ref": "3ec3a621-b48c-4205-8b5c-b2c1016e14f2",
          "length": 244,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "5af62661-aae5-42c5-a57b-29f4e27e07ca"
        },
        "item": {
          "id": "44d3d6a7-c1dd-4078-a837-363b0bbcfed4",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "cd58a29b-5466-419f-aec2-e804afb59235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59923a55-c945-40be-ba96-02d94ec11269",
        "cursor": {
          "ref": "2d9cf1eb-1e58-4fb2-ad81-9266bffae3cb",
          "length": 244,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "eb1ec68d-78f2-4988-85e2-e5866988bbc3"
        },
        "item": {
          "id": "59923a55-c945-40be-ba96-02d94ec11269",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "1897215a-9e08-42b5-91e5-dda087d62e5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51f66e2f-4fc9-4ec9-8602-f5abdc594d7d",
        "cursor": {
          "ref": "7541b596-2ad9-4632-982b-19ee9b48bb2c",
          "length": 244,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "89934925-186b-480b-89a3-9ac0aa556a01"
        },
        "item": {
          "id": "51f66e2f-4fc9-4ec9-8602-f5abdc594d7d",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "0b38c926-4487-424c-b904-f58750f34ed3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ab11c96-e9e6-4dae-8dd5-eaa7ddbe9f1b",
        "cursor": {
          "ref": "a9b48409-ae4b-4ec1-8863-2151d1bf9ee1",
          "length": 244,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "3469c5e7-f8a4-4352-9b3d-546ac7d05190"
        },
        "item": {
          "id": "4ab11c96-e9e6-4dae-8dd5-eaa7ddbe9f1b",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "1bdabf95-3fc8-482d-a3f8-b2a1ef96aee0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10b3cfac-6914-4d20-bf64-b6ffbf5cf748",
        "cursor": {
          "ref": "5f540de7-4310-45af-aacd-010a93db6834",
          "length": 244,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "bf9006ff-2077-4d36-9723-f4f19ac5a28e"
        },
        "item": {
          "id": "10b3cfac-6914-4d20-bf64-b6ffbf5cf748",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "c6f339f1-6231-4df8-919b-7e38d2c6dfa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6842f150-9020-4cfc-a1a4-211392e3bead",
        "cursor": {
          "ref": "4287d5bd-030a-4a64-9606-493cd8644542",
          "length": 244,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "472b1105-0590-4def-8867-738e9eb59d94"
        },
        "item": {
          "id": "6842f150-9020-4cfc-a1a4-211392e3bead",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "ad978bb8-cc7b-467d-8938-2adde967dee4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3df60d97-d6e2-4bc1-b298-a9dc1128ab5a",
        "cursor": {
          "ref": "d9a42bcc-12ed-4301-884e-e5cc5a52da0d",
          "length": 244,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "9a7e6c37-0108-4302-aaa7-11f0642f535f"
        },
        "item": {
          "id": "3df60d97-d6e2-4bc1-b298-a9dc1128ab5a",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "68ade555-a098-42c6-8a1d-effdb657708f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86fb67d7-8277-4cdd-b7b0-06c161ec696a",
        "cursor": {
          "ref": "5369b256-dea6-4621-8c10-07611be615f1",
          "length": 244,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "e67cbf67-818b-4932-963b-28dbbd3beec8"
        },
        "item": {
          "id": "86fb67d7-8277-4cdd-b7b0-06c161ec696a",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "5af07bba-c141-4f32-b9b7-e4253d719000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c74f500-0c20-4a99-9eec-a91515cae0f3",
        "cursor": {
          "ref": "f633c1ca-f7f4-41a5-9f65-0ecc912353c3",
          "length": 244,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "5f77ca03-bb55-418e-b68a-26823eba5d1a"
        },
        "item": {
          "id": "8c74f500-0c20-4a99-9eec-a91515cae0f3",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "38f24cda-baa2-4008-91f2-d148c42b7e70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe0bdaf6-f3de-4ea2-bf11-bca3252dbd82",
        "cursor": {
          "ref": "1697c36c-3ef6-4984-b1d7-b2ce51a15698",
          "length": 244,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "8236e560-e182-471e-8c49-5f0006c97040"
        },
        "item": {
          "id": "fe0bdaf6-f3de-4ea2-bf11-bca3252dbd82",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "efa1d532-5814-4e32-b0b6-d38a54af2501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49a027d0-ab1a-4ba9-943b-3125566cb6f3",
        "cursor": {
          "ref": "eebdb27f-1e28-413a-92d9-c1f4ddbb2884",
          "length": 244,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "4d848d2d-117f-4d53-a0d0-e1e75de69fdd"
        },
        "item": {
          "id": "49a027d0-ab1a-4ba9-943b-3125566cb6f3",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "69a30752-ca71-4eeb-a123-33c80bc036ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0678473b-a3b4-4c22-b501-0c187b4ffa24",
        "cursor": {
          "ref": "dc383731-56d2-477c-9694-c41c4f4aa194",
          "length": 244,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "fb7d71b2-ba34-4f20-b84e-de300c74485c"
        },
        "item": {
          "id": "0678473b-a3b4-4c22-b501-0c187b4ffa24",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "cc9e913b-01f0-46d5-97f4-11a1856ce00f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23be75cb-3a37-4b86-b33f-b0ef8ef3225e",
        "cursor": {
          "ref": "73bc31f9-1bc7-478e-ae5a-7970153dd073",
          "length": 244,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "26d072e7-5a22-44de-8b76-dd2aafde1f22"
        },
        "item": {
          "id": "23be75cb-3a37-4b86-b33f-b0ef8ef3225e",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "d989df1d-43bb-4b9d-9292-428116e75aeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c26768d7-e9bf-4eb5-b588-20e218882757",
        "cursor": {
          "ref": "b525fe9a-f21f-400a-990c-67cda552542e",
          "length": 244,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "d085364a-be0b-46cf-90fe-9ba1835df38d"
        },
        "item": {
          "id": "c26768d7-e9bf-4eb5-b588-20e218882757",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "3b6180fe-2a78-4917-be6f-f4dcd1c38b97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "612b712e-2bbf-44ab-9526-d59f9a3247ec",
        "cursor": {
          "ref": "b1da1860-f18e-4129-a615-715f2e9b0625",
          "length": 244,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "f966789e-73b3-43c5-a714-dd427ecc172d"
        },
        "item": {
          "id": "612b712e-2bbf-44ab-9526-d59f9a3247ec",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "33a1b234-c855-4907-949b-e9da3d5803a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a6ff55c-fa27-4570-beac-2074bda1ad14",
        "cursor": {
          "ref": "d50df32d-95a0-4333-a4f3-c976573dc3fc",
          "length": 244,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "e2b2981f-c945-4e10-b69c-a82a9f5327ce"
        },
        "item": {
          "id": "8a6ff55c-fa27-4570-beac-2074bda1ad14",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "355e8ca8-76dc-4d0e-9333-9cfb3d0653de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e797816c-f223-4ccc-94ee-b27df6befe3b",
        "cursor": {
          "ref": "be95c5ee-de50-427c-af52-bc7a33ab4d70",
          "length": 244,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "57b3cdc6-5651-4097-845f-b3b804d60ac5"
        },
        "item": {
          "id": "e797816c-f223-4ccc-94ee-b27df6befe3b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "6f08922d-5052-420c-84af-4dff8fc8a418",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51795ea6-03da-4b44-82a5-5d50101e0150",
        "cursor": {
          "ref": "0594588a-03b1-4fe7-95e4-3cd18d837404",
          "length": 244,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "380c194c-8c5d-4657-908c-02482a519a48"
        },
        "item": {
          "id": "51795ea6-03da-4b44-82a5-5d50101e0150",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "83cf9eb5-df77-4c74-aa9d-96f85bbe050e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c98d341-24a5-4c0e-b926-1cfcd40b84ff",
        "cursor": {
          "ref": "5bf6e340-685a-4c4d-8541-be21a74d7770",
          "length": 244,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "b7dd58a3-dad4-4914-a917-8a002282c242"
        },
        "item": {
          "id": "8c98d341-24a5-4c0e-b926-1cfcd40b84ff",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "62d7cc98-1bc6-4679-9602-16c3c45cfa85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "175a468b-a438-4ae6-a37d-3dd9085b56ef",
        "cursor": {
          "ref": "a3e3e3ff-82db-459b-97c6-775a560aaf37",
          "length": 244,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "cc0cd922-feec-4876-a001-c4c31c79cc55"
        },
        "item": {
          "id": "175a468b-a438-4ae6-a37d-3dd9085b56ef",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "94e639ce-0c82-4e31-8e7b-717cdca79f9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b8c972a-6e7f-4423-8619-eaba197ff44f",
        "cursor": {
          "ref": "15260756-4b49-48e7-97ca-f06f1995377d",
          "length": 244,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "8ea2309a-ca7b-4f19-bc8c-7720c24ef0b7"
        },
        "item": {
          "id": "1b8c972a-6e7f-4423-8619-eaba197ff44f",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "a7a4f425-2787-4e75-a287-97a3905db4e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a75aeb77-ea7d-49a1-ab2c-c8c17ca8a9b2",
        "cursor": {
          "ref": "bb5068dd-c555-4635-9024-a3579b8c973b",
          "length": 244,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "6c16e534-3586-4a7f-9df7-5c2031be05d2"
        },
        "item": {
          "id": "a75aeb77-ea7d-49a1-ab2c-c8c17ca8a9b2",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "bab5b016-7e69-42c8-a179-0365ff9250bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9db64b09-21ff-445a-926e-76cd2e9a7b6e",
        "cursor": {
          "ref": "0fede212-7996-4c2c-bafb-9477fc6805fc",
          "length": 244,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "834d2a60-609f-4a20-8a66-020daf765b28"
        },
        "item": {
          "id": "9db64b09-21ff-445a-926e-76cd2e9a7b6e",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "dda5fb02-24f3-4cd4-b5a4-1fde3a0ab8e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0bab092-c8f2-4a0f-bebd-cc2888581dcd",
        "cursor": {
          "ref": "8621823f-f16f-498e-875b-68e92d98f8c5",
          "length": 244,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "418b79ca-5d28-4784-a79d-a0520eef0984"
        },
        "item": {
          "id": "e0bab092-c8f2-4a0f-bebd-cc2888581dcd",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "20f25c2c-c890-4bde-9e94-1b333b41cf37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e614e61-1bd5-4104-965f-e4934756b847",
        "cursor": {
          "ref": "2a7b83a7-d700-414e-af1a-ac058720d919",
          "length": 244,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "d5240b43-73a0-473f-afbc-9d63a6a2965f"
        },
        "item": {
          "id": "1e614e61-1bd5-4104-965f-e4934756b847",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "5a7f31d9-e82e-4c42-8b46-465e13a7a493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4dd2b21-590b-4e61-9272-34935898f832",
        "cursor": {
          "ref": "dc4261cd-ba88-4c61-8142-df4172ce536f",
          "length": 244,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "2260a4e4-33c1-444e-84ee-4d5fd5239bf5"
        },
        "item": {
          "id": "e4dd2b21-590b-4e61-9272-34935898f832",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "be2605ce-13df-4fc5-afb9-81c89ec556b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb06609d-eeea-408b-b61c-353dfe4ee90a",
        "cursor": {
          "ref": "22ebbddf-3047-4fbb-a7c0-ed89bfe2c4c4",
          "length": 244,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "6619045f-f2e2-4c53-bbc9-4fadb3b0df3b"
        },
        "item": {
          "id": "cb06609d-eeea-408b-b61c-353dfe4ee90a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "577cda86-6918-46eb-b8ee-64dd709ab2ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a189947d-d247-4c90-ade2-928cd0c10684",
        "cursor": {
          "ref": "a63b2c56-ef9d-43af-9b5a-c47f332dc271",
          "length": 244,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "3ec86cfb-f8c3-4f51-8f25-d7b15f2538a3"
        },
        "item": {
          "id": "a189947d-d247-4c90-ade2-928cd0c10684",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "3c665f37-2e8c-438c-8146-cfefb5de4782",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "753096ab-584e-4e68-b224-cfc990ae7309",
        "cursor": {
          "ref": "25f2217b-9be9-451a-985f-3fbc2f6d33fe",
          "length": 244,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "8aeac798-d91a-45c3-b563-a4e395f1ba40"
        },
        "item": {
          "id": "753096ab-584e-4e68-b224-cfc990ae7309",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "72d86d6e-e2fa-4e11-b4f3-9ecd46485308",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2edc0ab7-b81b-40f8-a01d-48faf0524c21",
        "cursor": {
          "ref": "f4baa468-cf73-4840-b947-4806bdaa8d0a",
          "length": 244,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "5cb88ed8-8a97-41b4-9cad-b20360e08aa6"
        },
        "item": {
          "id": "2edc0ab7-b81b-40f8-a01d-48faf0524c21",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "05f7d960-01c7-4f7d-8e11-51046e351db3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c794720c-5057-4af9-8b6d-b1d8b60cd0d0",
        "cursor": {
          "ref": "a8e23faa-9e9a-4e8a-a769-c4213d7251ec",
          "length": 244,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "dee1eef4-693b-456d-bb74-d78de15162db"
        },
        "item": {
          "id": "c794720c-5057-4af9-8b6d-b1d8b60cd0d0",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "8855a206-8dcd-48ec-a88b-9b2eac372ddc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d782642e-15ea-4d62-a900-03936178e783",
        "cursor": {
          "ref": "d986afb1-561f-46d6-bd24-c9ae51bcbb69",
          "length": 244,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "5cb31af6-2ac2-4071-85c2-67f6798dcedd"
        },
        "item": {
          "id": "d782642e-15ea-4d62-a900-03936178e783",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "09b44189-d5c2-4ac6-8f84-036cea102360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f66e77c5-733c-4c0b-92c8-ce9dfb49296e",
        "cursor": {
          "ref": "43e489cf-de8c-4066-b66a-d3b49696cf1d",
          "length": 244,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a0074eb4-26c9-4b9a-9151-dd3a7f22c086"
        },
        "item": {
          "id": "f66e77c5-733c-4c0b-92c8-ce9dfb49296e",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "9718bbe7-dd5a-4511-8870-401b3332c09e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc698263-e605-4699-8118-0c461f94a0b7",
        "cursor": {
          "ref": "40cd44ff-bef6-4651-82f7-5dfced266066",
          "length": 244,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "4b592aaa-68b8-49c4-8b56-547fc5c4d042"
        },
        "item": {
          "id": "fc698263-e605-4699-8118-0c461f94a0b7",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "9305d3db-6a3e-4133-ac9a-4691b7853073",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c992df1e-d665-40fa-8580-a49068803e76",
        "cursor": {
          "ref": "72d49ad2-7913-49dc-919d-96f311dc6aaf",
          "length": 244,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "763c0bda-f4ff-4c50-8948-a1ca537fe906"
        },
        "item": {
          "id": "c992df1e-d665-40fa-8580-a49068803e76",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1720eacc-a20e-4eaf-bdbb-5ad43df6993c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "7ea1005f-8a29-481b-b994-fbd4e4319e7c",
        "cursor": {
          "ref": "16b42d08-8182-4ad8-822d-10e4f787d7b4",
          "length": 244,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "0343cc54-f8f6-412c-814c-2e2e44311985"
        },
        "item": {
          "id": "7ea1005f-8a29-481b-b994-fbd4e4319e7c",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "abe402d9-ccc5-437e-93c5-80f207051887",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "d66c03bb-71e6-4d55-a1e0-e39c8b7e91fc",
        "cursor": {
          "ref": "02ceacbd-fcc2-43d7-8a38-daa5f8ab4986",
          "length": 244,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "59b355a1-0059-4e12-85a3-5f73b5a95cdd"
        },
        "item": {
          "id": "d66c03bb-71e6-4d55-a1e0-e39c8b7e91fc",
          "name": "credentials_verify"
        },
        "response": {
          "id": "b7e10e24-61e1-472b-b2f8-a72cef948a14",
          "status": "OK",
          "code": 200,
          "responseTime": 1965,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aa0f088-acc7-4477-a37a-f705aa2fdaa5",
        "cursor": {
          "ref": "fb677a87-bf9c-40c2-b880-6cfc43ba632e",
          "length": 244,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "e6482a2d-e1c2-4061-9baf-225f88cc71a4"
        },
        "item": {
          "id": "3aa0f088-acc7-4477-a37a-f705aa2fdaa5",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d589491d-447e-4b61-9786-270672c5f603",
          "status": "OK",
          "code": 200,
          "responseTime": 3198,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "638e5ed0-db36-4384-b8bd-6d2c2d52486e",
        "cursor": {
          "ref": "5ed0d310-f636-4b5a-869c-ba35da038cf8",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "5889740c-d812-4f0a-8a93-6c5ff3fbf820"
        },
        "item": {
          "id": "638e5ed0-db36-4384-b8bd-6d2c2d52486e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f117746a-49bf-4793-8a2d-5d45effb93a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "638e5ed0-db36-4384-b8bd-6d2c2d52486e",
        "cursor": {
          "ref": "5ed0d310-f636-4b5a-869c-ba35da038cf8",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "5889740c-d812-4f0a-8a93-6c5ff3fbf820"
        },
        "item": {
          "id": "638e5ed0-db36-4384-b8bd-6d2c2d52486e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f117746a-49bf-4793-8a2d-5d45effb93a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "7978cc1d-fdfb-44d3-a3bb-ad271eedab2d",
        "cursor": {
          "ref": "6a80fe5a-f1ed-44e6-a668-c48fc6507274",
          "length": 244,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "c8fe3f16-b67f-4dc9-812d-9df7f6e8b1d6"
        },
        "item": {
          "id": "7978cc1d-fdfb-44d3-a3bb-ad271eedab2d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "3c38c380-82ee-4699-8cf7-80702784ab45",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "698219b8-aeba-4fa5-97bd-921d6e4c6e8b",
        "cursor": {
          "ref": "a30138a0-45d4-4110-adc3-3efb3bac5298",
          "length": 244,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "0eae0862-84ee-4ff6-b223-e42a51afcc95"
        },
        "item": {
          "id": "698219b8-aeba-4fa5-97bd-921d6e4c6e8b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "98adfc70-643b-4170-8b07-17e1d6981e55",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      }
    ]
  }
}