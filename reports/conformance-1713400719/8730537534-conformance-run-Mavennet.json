{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "0a33f950-a371-47c0-9dac-726f1e1e88ef",
        "name": "Clear Cache",
        "item": [
          {
            "id": "c348447e-e293-4947-9acd-8283bb9ff423",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8f543369-67dd-475a-b13e-fcdd490ae606",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "190a0b16-f093-4619-adcf-9432dfa5e73b"
                }
              }
            ]
          },
          {
            "id": "7143f388-83b0-475f-a219-5d952a0f29fc",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a50d2b7c-9c2b-46ac-a9ca-b9afdb9fe108",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8014b528-d71a-473d-ba12-4e94f31bd47c"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "d696abfa-e96f-4939-b1d3-212af96a9f0e",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "506da4da-60dc-41dd-8c76-07e1fe5abea4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "dd8976e6-e583-47dd-80de-93315bf44862",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "38ebe4c1-50d9-473f-902c-93b06fff8b9c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "85a464e4-cdd8-466a-bc2d-4a417dd53d57"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b6c429fa-165c-42d7-9dd8-93922569c7ab",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6f29f245-d210-4e0f-bdf5-9b26f80c8b06"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5c29ce95-1c12-49e9-bde8-c8a540056142",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "be16d471-ba05-4df1-82bd-d70104a4ced3"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "78051972-1746-4b43-8935-7dc3a3f2531d",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "d89f66a6-65d8-484f-be1d-c75b4a323438"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9da09244-9fa4-4659-815f-f19a73308ef1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0daf2688-523a-432e-b33c-c475c3c09271"
            }
          }
        ]
      },
      {
        "id": "cadda27d-0c11-4072-b0ab-261dbc6e0cf1",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "0a87a029-b031-4097-823a-bbfbd693e7ab",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6c513f9d-06c6-40f1-9eb5-717b6fcdc775",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1ce10cd4-b985-4bca-8a69-def0cdda04e7",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad02c95-8ec4-48de-bc0b-16b69be34614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b359d3a2-3517-468a-89a5-a5a9750df102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "665db111-7a5a-45be-9f49-c056f807a4d4",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22667355-05d5-4662-926f-1a03db2da1da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1d0ba3c7-aa54-4918-8428-5d2a43a3e578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "645a989f-04fd-414c-b185-43e25ceaa6b4",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "078382cf-bd09-4834-9482-6ba6247f09f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9a6d8aa5-2d03-4f80-a2be-e847397c6f0e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ea31ae22-a0f5-4826-aef3-dab225b1b4db",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1708c864-c3c3-4ce7-a5ff-2fa7ebae133e",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "538c1956-e887-4efa-9049-097a241ee3d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a1045443-726a-438f-a434-baf3aa6a1a42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afe03024-6366-4434-ac7c-80b0ae5f2ab8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07c7e39d-8319-4316-a47b-913d84c67f7d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9c85e1a2-60ee-4ff8-ae2a-35f5f0297db1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "29eae1dd-f573-41bb-a370-e66af47cd299",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a852889e-e267-4773-b4af-a6181334c025",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "6fad9919-afc0-4b46-ab6b-5b10b1c10046"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cd961aba-7937-4aea-b92e-56e8935d51d7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "7e724201-934b-450b-a0ec-8095a2f6d113"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "224d3b8e-e23f-4e5b-b5b8-a07058dfff85",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ff5646c1-97ba-4179-a184-95acdc93b00c"
            }
          }
        ]
      },
      {
        "id": "0025dbd5-23d9-47c4-8e4b-7c1e35d55de2",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "220981fa-bef9-40e5-9c82-0a23126ea622",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fba405b2-99c5-4364-870e-041da0174fc5",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "251f0681-5994-40f6-a833-7d7d56c707c4",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "378b105a-e7b5-44b4-a3c1-d7b29e7e0f83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54b80c79-ecb0-4aaf-915d-9ad3c9f1967c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1f64a0e-c673-4ba9-a32e-052ea2e3ab24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c98265b-daf7-4d41-8095-239a469dd64b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e09bcf5d-0d85-4f72-b093-76fbf370a7fb",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b96e8b6e-09b1-428e-aab5-b09fffaae9ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "890c74fc-a11e-48a3-bc0b-c5ca150795f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddf98470-9658-465b-94ed-1dc6e627ae87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da5ab7cc-fed7-4cfb-b30b-c31efff2477b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "360b7867-39b4-4e0a-a761-dc0bd4087739",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18fee445-14c3-4938-9dab-22dd914db1c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a70e25d4-895d-4518-950e-595cc7cba363"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc6cecef-5aab-4202-9840-93011714fad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "99804750-20d5-4038-9d66-5b8e39438490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24f025df-59b5-4775-a4a6-124e00f4b362",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b945b84-9411-433d-a15c-1b1b785f2da3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9aef9ad6-08bf-4493-bc4c-931c5b5d25df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0afcc543-94ac-49de-b035-496af5334665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c58109d7-61f9-474d-8d35-5d4852b9b2aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36213a8b-532c-4c52-a1e7-cc5a183dc6d0",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00681796-b642-46d2-afd8-6f8a7524e071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8c3f199-c447-413b-b8b6-0d8c682293fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50809c25-58d7-44a0-8476-230d943d5f5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f74897d-8e73-43f4-8a45-32b461de492e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5206e441-584c-4a9d-b403-cbec73a1cf50",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f187330b-5189-4567-b9d9-8e3355e7f870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4db7d19f-e49d-46a5-a022-2861628067ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3c1b733-0513-4c28-b3c6-49609e69f6db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "59b0fbab-7fbd-4a48-97fe-ec9d002ac1d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0101b8a-0b7e-4abe-b05f-2c778918874b",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d4e45a2-a868-4be5-8ef0-11857c931c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e047c68-ed87-4719-8e21-1fddd59ce250"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dd0c273-f31c-4586-82c9-ccf0fd65996c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e454cff4-eaa4-4ed0-89fa-359cbb041aa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "181add80-f33c-4d16-b033-5421b5f4486c",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7666b715-9770-45da-b6a6-1a9cd8e5faa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbd21a4d-438c-4649-a505-5daa8583206a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52e8f19b-e78f-483b-bf48-27affea84b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "733dd244-d551-48dd-b97f-4cd23355d16b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "359a4832-eae2-42e9-b30d-105e5ca87ff8",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88db6617-3aab-435b-9034-1f33783822e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "109e4b1b-f8be-4d7e-9916-a8a2c6a39bcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aca0eef-cd17-44b5-8463-0bfaf6513be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8fb681a0-a4ff-45c1-9724-8b5bf244d55c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05a17418-f1b2-4c06-a75c-bee4732b0b9f",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9068e48-2bc6-46ea-a5d0-5df394f2097d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3ac6da5-fa5d-4d32-9d76-b36f707f716a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fe7b538-8f89-4115-8107-e6d1ec17b385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "687e5954-c38f-4056-91d3-6663e55be2b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62c29c9b-f0ab-4d59-afa6-200191b50939",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a986a7d1-ae36-4fb8-81a6-e38dd092c87f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a380cc4e-28b0-4d42-9fc0-eef68368cc57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52662f6c-1ef6-4286-9f57-e254d29a5310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a838a8a5-00b8-45f7-8558-937756d2b5b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9921fb4b-d428-42b9-9d9b-73da543c973d",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89a56916-051e-4618-8c48-6079cd33f5a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d609d13f-c08e-4d8e-b797-a0b99ff9eeae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9b23a1c-5699-4280-a69e-15d1acbb6015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d12c363-60ac-4576-9e50-b482a02a73f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ee9a9f8-ae33-4cb6-ac85-cc315f692a44",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a422620-2b2a-4f6a-b7a5-c5f351e74d91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dcf9726-ca48-43ad-b415-2a4afaf08c6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a37b303-8eb6-41d8-8b25-1ce2f2fbb1af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "28243541-f882-45d2-9238-a7a7351191db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bca322d-f7fa-4402-a35e-a2a111a23f6c",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa730969-7194-4edc-bc37-e95a5d6c07f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cc79da7-23f5-41f3-9665-2f1f40c4016b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b0c26ab-bcd4-49cf-8bd1-cd891cc54d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "77dc9985-ff53-4f00-92e5-6fa8a1917b5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3631f61d-a079-4796-b0fa-e72270b7a949",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5165e408-1435-40fa-81e6-60e19ce295af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f519e1c9-2dee-4bfb-9c06-86993597a798"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85702418-24db-4019-b25b-eef817e79912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "28d28aa4-c5ea-4515-a133-456fb1a02f84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fac16c17-02cc-4224-b2b5-818b3cc172fb",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba9a80c9-8c6d-4257-8c85-5f94e2e100b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb75d2eb-64d9-4e5f-8372-e9ef34272d40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48d95b8b-7363-4439-9549-6e690240b9ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "13d6efbd-c1bb-4fa1-9391-c3ff281d7364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aea197d1-c18e-4565-a260-4cd16d03c6da",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "442aad7b-1813-4e7d-a3a4-72d79d25c828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3649c31-5d46-44d6-bee7-c861d9d21c84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d69caf12-3025-4902-81d3-0451069245e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d1cf7307-a8bf-486b-a951-07ea3aab689e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4125fc14-1bcf-483c-97ab-d9e96b6ce80d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aca00322-ab80-45ab-b1d0-7a427872a10d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e86d067-725a-48ab-8ab1-c3eb4d6b9f14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1cf6652-0cc1-4e0f-9bde-6a4ba71bf03a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c138ca91-c039-4fd3-9810-3944fac2693b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ced4c33-15fa-4f40-973e-7f52a9a70db5",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90a641ac-abf9-4b8e-a761-11ba9c786a8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7f54e13-87e1-4ed0-8b2f-a0df31455231"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "893567a2-4ffb-41f0-bc3a-a9b87c19eb49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb8efa25-ed57-4cf5-a413-282f9c5fe93c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18e93a8d-7fd0-4c0c-aa63-0b4c89d1752b",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5060bacf-da68-4b53-ada7-fdcbae1e2e86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64598bda-cb40-41d4-9500-e2e09e6fadf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f3607a4-40b5-47c3-9e15-86338f54123d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2f8ccdb-9476-4705-957d-48194db15a90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6175062-02a2-4830-b7b2-c11eeaf9892f",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b65a9bd4-b6e7-4d0e-b0e3-86d6698bf325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b1403e0-84d3-4807-bca3-acb44870e7bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96c539de-767b-41ec-bcbc-08144724d839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c05f96c7-bb8d-40ca-85f5-2af7c77dbdcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f46ddfad-806f-48b8-a393-3f157cb59487",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e44b3dd-3a5c-4037-871d-ebbb1b681339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f40546f-0f15-44b8-bb8a-e31e94f68e7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34464797-ad1a-4bf3-b90e-d196bb5d43f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a99a8fb2-2c69-48ba-b60f-61b85c2ee07d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51add920-a28d-49fd-9e33-933d387e6c89",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee298550-b5a0-4312-8013-6203db89c3b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d2dbb79-5278-4c27-a9d4-12905c75048f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6f336d0-066c-4299-ac8f-37f320ab0f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1223fd11-5982-4339-b256-a793af6c3ead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18848bb5-d274-4ee4-942e-fb04e7e6da8b",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f597857-246d-4e5e-9faf-06e6ca586bde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53f23dfb-90ba-4c2c-9f54-1e5283bcce66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47168bbc-eba1-4198-afb9-a424537285e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "62dbc8f7-1063-440b-ab2f-ff7fb624215b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1667a950-154c-43cf-b82f-0a4be1c29d7f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "570ee30f-db7d-49b0-aad6-5d67618bb98e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50e69650-3e85-47b6-97bd-4246fd133b56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09a31f78-3c73-4db9-a578-4fdbe43f50eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a68e397-5796-47bf-af33-4e59a30998c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d99b5d65-16ef-4ed6-be44-14d5e7f0b7ba",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de4a8c3d-8b01-4ae7-83cd-7a483638cf7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfc009bc-597c-4458-b8e5-f0339abd06a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74c99ffe-621d-4a2f-82be-432fa33b084e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ff3d239-ed52-4b01-a0b6-3a2588be176b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "524a32a7-66ee-4852-8bd8-ecad0d733861",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c459afb-3904-495d-ba92-e6113ab18ca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "279b4cb4-c666-4316-a96b-2685f7df25cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a660de04-dcb7-4430-97b1-4cbbb19eeefc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "791e1231-fb97-4818-a76e-f724f09cc0a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29558874-2347-4ae3-aec2-00dcf9f83557",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0147956-3954-4b2e-8955-350e90006a2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa02f4c4-0094-4829-b73e-08723f345690"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f403b19-5d60-4809-8e3b-48901fed2a4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab8c814e-5dbd-481b-9d7f-bfede7abbb66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cd96a1e-2d67-499c-9272-2a54d105097c",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f098fb4f-6e24-4738-a20e-8c0c845b54f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d7f3b26-5487-4534-931a-82ce8f3d5ddf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "699e8095-8bf6-4b39-9455-f8ed7169bd4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4a651fa-229b-40e3-b1b4-4168f6d04b59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a0d39d7-53ee-472a-84dd-5cf9cc8ee3fe",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f06ee42c-833f-478f-9430-b47b5aec2854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76930d9f-d8b0-47c9-be2b-4309ac1d15b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08f20f5e-9a55-4551-a3dc-05aff9fc70dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9a62b59-d70c-42bd-a8c4-e69bcc9f65cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7146ac4-bb25-44db-9801-2e102061b637",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a4edeb1-b459-4130-96cd-09e833c9ae5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa17329d-d155-4c7a-8731-fd3c7988c52f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eefd2e7-9e7a-4de2-8fbc-b23d1dce6e02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef65ab52-aede-4309-9b91-ac123e7785fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "398e56eb-dfdc-496c-8a6b-149f600d7f12",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26efc4d5-35a8-49c7-b9e5-9f5dcdcfb8d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9dab023-07ee-4787-bc99-4b160c540597"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "101fa029-f1fc-4ad2-806b-07091074b1f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d34639e-fa80-464d-bb93-5a5c156d186c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99441e0f-b89c-4657-9590-2ea287489493",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d6bdd1b-7ad2-457f-85e1-3e1c8fc0da36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15ff2097-6932-42d6-a4a8-5a5f08dffda7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c435eadf-0b66-416d-87e4-37aea86146a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "193d98a4-2d87-4d3d-8e88-c4d054c1e687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fec41ac8-2c44-4ac5-a6d8-5bc2ca6c97eb",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bf7f7c9-56ca-402a-ae80-d5d7c3c13780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b12ed7c6-cb4e-4cb4-86c6-6f13acffe753"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "142b3132-d704-4f1e-8e39-16511612134c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0abd942-7da6-485c-be7c-a511efd951bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d8d7b84-3b47-4145-9ad1-481152fa157c",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c52eef73-abdd-47d8-9a92-d7f8ac5a29ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2822cead-43e5-4ddd-9ffb-00de186c2e65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0d84261-3c96-43ae-9cd5-cada2fb98981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "49d3e892-ae79-43e0-9480-78e5b21a163f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b379f44-0f97-46f3-8397-11b6ca981f19",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d30b208-7222-4ed6-82f9-e37792023f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0a3dd214-bbbe-4676-a94f-f98bd929a7b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5af3dff8-216e-4c86-b947-4d1ad2f5c14a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2a328553-a003-46fb-b49b-295dcb3453b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "745e9e9a-83a1-4e56-98da-5f074827813f",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79598ea5-3036-4e43-ab3a-dd0c0e537953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cfc928f-9e90-408d-a468-fbcd7586eaf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82b17b8b-8d2a-4ed8-a11c-b4eca01cede9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1fb1de7b-c3e4-4afa-9c79-7fb64aa22a4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "096b3065-a26c-4ea7-a839-4296997ae4b7",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db336338-0af6-4151-8bd0-02e8a1769993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f66229a-7dc7-4004-97f5-ac20abe3cb1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9d1d456-b627-4392-a82f-9b134bd495a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa322f42-7971-4a89-9ae1-46937cdcf345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ff40a40-7a81-44b0-906b-984a5dc8e618",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "023701c0-8a90-49e0-85a2-dcfc4b0940b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaeb7cac-3b93-4853-8eb3-6f87f74d66ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06f4079a-f3d2-465d-8a1a-9186ae99784b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ce848d15-48bf-4358-9a1f-9f32510dd56c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "951c852a-408b-4cb9-9675-2f5b8f69d6d6",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94f657fa-14e0-4f60-b203-277af9b044d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "639aec80-edd6-4ced-bbaf-ad3dd5318bec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "101f8c96-6883-403e-8fea-7aa3a0d50a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea3ad827-4319-4934-9b10-74f4ce8e8467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "042c06c1-70c5-4f45-9304-426fdc227d0b",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60f7a403-c482-447b-8bb4-bdadbcff6364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1ca849b-e120-49df-882d-f00db0f90efe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cab637e-1d9b-46cf-956c-a20392bba557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a192fd87-aa28-4afe-93c0-15e1f63ab9ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "854b159d-9127-4bc9-bc3c-cd1961ab670f",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8cd6bac-fd2f-421e-ac97-23f34e06fd07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32b50f01-affc-4363-b195-2cf60cce2acb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e7660ed-bb64-44cd-9066-ad5cecdc0857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "20ba0c55-13b8-4274-913f-e5719a739dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c2bded-f854-4e5b-83fb-05ff27d1f01d",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53c5a7e1-0274-4d1f-ac1f-7538b83e7025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ef70c66-9f9b-4c4c-9b43-9d2419ffaef9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b52b34c-6db4-43c3-b452-cdc27a3aa8e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "41202a1a-9833-4353-9e51-8c20a37ad396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20addc98-70ea-4cc7-9866-ec81f99049c6",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79be630e-2ee2-498a-8fa0-db9f59d2adca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0f5b5ac-83a8-4ad6-b32b-0752f426fa4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c926beea-a357-4056-b3e3-bb860a5227d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9d6a829-70da-466a-8765-653d9d734bd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f85b7604-ce1c-4a7b-8937-70f33297c68e",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0917718-7f3c-4579-a4b7-b8702245bd58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "904975ff-98f9-437a-af8e-70193e688737"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7771ed42-7fee-4106-98b5-a877254540f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "87eda348-9aa2-4bab-b0d7-134b4e977f5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6932c2d-1766-4103-9880-5388b1379fe1",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ee541f0-1947-4c6b-808a-8441a1e4359d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92b734d1-4f0d-4eb2-ae9e-cef296529ea2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b3b2729-6e95-4388-a1a1-6f03c7131519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bf87f9c-4afe-436f-bc17-5eaaf88aa412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d53b3ea2-2318-4c2d-ae6f-75fc7320849f",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d008e12b-df78-462b-be5f-6ca503cc0651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78f8d5d9-262e-4656-b092-f506ee8ab658"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d8197ef-8a44-4ceb-a061-f64cb3f512ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5179e33-5448-46a2-b1df-8d5838db4535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cb23bd4-dfeb-412e-bc84-39ae8688b8b6",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7819f81-fc80-4c07-9512-ef95e7b8b35e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7c15b04-9c1f-4032-b9ab-2ab786197e86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7db04354-5203-47ef-a63a-ab442f830d6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "01092569-c198-40fe-9143-2f476186728e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "973efe97-c1be-4483-af65-2524f2635eac",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4cca2c5-d19a-4f50-bc9a-8cfa8ad7761f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "febc84e4-ea27-483b-83a5-5d91c5dfa103"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22260e80-b008-4904-9a3b-9775e2b8c8c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c9294c7a-79eb-4caf-a9f5-1edbda7f0b1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3181747-0cb4-4991-8450-65868624496f",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e85917d-c81f-4b8b-8c9e-98bf4e0e220d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22b6b869-e15f-4d38-b06a-f27e3361c6af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a3ebd11-d24f-4dc2-82ff-bbe4be5d61f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "79ead607-9be7-428c-9fe8-f43a76b4fbef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed72f1fd-89a8-4f3c-9d39-ccfa3b7c2039",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51c13606-3479-4b52-b60a-a713b5c56562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5a89d9b-e57a-494a-bdae-5464632ff660"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c33f2112-2b30-4d30-ad92-58a59b148a6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "123b7393-d240-4ad4-9569-57f6450b12d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0b4c646-942c-4b3c-bda3-bc8339c54dae",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfd6e86b-0bde-495a-a8b1-6296b5346cf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f90866c4-30b1-40bd-bd03-a3f7c4b1f00e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff9d1dc5-0eba-4193-852f-b1f210466958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c92f929-f207-4696-92c1-ac17347d003f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b5b6f7e-00fe-48d9-8b0b-7e3f8c34174f",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bf0298c-1d57-4f63-86e5-b0f55abe65c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "065f4a5c-5c19-4288-b6f2-42c98c4bd00e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90e0bb04-ab56-47dc-adc7-24996b4fb182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e804a0e1-0127-43c5-ae56-421e810a2103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53e9a3a6-4495-410b-baf0-262595a3131f",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad4c13ea-5dbf-4f47-8d26-578e7976d029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4d4e9e2-a52c-470c-88b5-84a162ca00f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90cec14e-f960-4f6e-b060-0670ff4ed92e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6598c51d-21b3-4ed1-b118-6314177cf31b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff9a74b5-ffe3-495f-8401-6fa63c70d39e",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65b2b1e1-3535-4065-a663-b4a35a114628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "620302db-dc15-48b6-bd65-0f230e5c371d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "766a5df0-1d08-4bee-8880-00667583099a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "629f1e42-1a6b-4c92-9cd0-e73a49df0b28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d04f82ee-62e8-47cf-addd-d6bd785e96af",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af1c3d55-97cc-4be9-89bc-069de80c9edd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "457bb9de-8229-491b-910e-b1b514abb8b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3877a5a-77b7-47e3-905e-23470198e81a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "6fbceff3-d8ab-4ac2-aee9-9de0b2d1ab2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e797350-c76f-4717-beac-c196ef16989a",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2617ad1a-cadd-4a47-8217-85ffbb290d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "566f314e-2bcd-4da2-92cd-7ca2cd192ef9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e1ef208-db39-4eb1-9302-c0f7a485fe19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0713e682-eb9d-437b-a253-08837a152b63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e50ed97c-569a-413c-93bb-14afb9a49713",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "489cd06c-5202-46e2-8950-db42bad97b55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8430275a-487c-4db6-be78-cba5f55c59f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b71123e-4137-4540-8ef8-69f998c82482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1fc8ee6c-8f1b-4d57-99e5-d54e70e0a86a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f63d5536-62d0-474d-a8bb-cfa774c7a815",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bcd151d-b679-4f4c-846a-9748c8341eef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae767d40-8d5f-4de3-a27b-3d30919ceea4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0084206d-a665-414f-9517-a331db73c517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d772d1f4-13fc-4b8c-a5f3-9231af651763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5163f36b-85a4-42d7-9d60-d7762b09da56",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd7001f0-851c-4585-9f6e-e30bcd9f411f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db1a6c62-b7bd-42ab-b75d-fabcf170f8aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7bce784-af51-4643-bf07-f55efff07f6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c54be4dd-b81b-44e8-926c-68ddf0042b8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a7db631-d12b-4c0a-b65a-ea24f1900120",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0413163a-d9aa-4dc3-a036-d1cfe692dd30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea80720e-e884-4268-90e5-e7d2eee1eff3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8afca12e-2522-4b82-8fc4-5e75819a1b53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec825d54-a557-4626-bf7a-490c661d7766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1edfe034-adfb-43cf-aae1-740db642e272",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d34f2ed-0170-4a1a-b4ef-c50712ea0138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1477c978-8986-4bb5-80ca-b8e0e68c3124"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "511aad88-ae27-4554-99a9-5539852c2cfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "a465e5f8-7e10-46ed-8d75-2f51e3193bd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d1c6e99-7df9-4584-b004-82e1513aaeb4",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4bb60c2-5db7-456a-94fc-271235509ded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "434b16bc-d1a8-4f68-a21a-d7899efe5d8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45a8908c-8ac2-4dd7-8ff9-1b4b98de37ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "13801267-ddda-4e38-b0f5-7372cf4a3107"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2035904e-d97c-4640-90c4-94baa6a1de1c",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93926281-40bc-4154-a074-ef69e678894a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5699452f-542d-44e1-b926-12952a9faeb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e8113be-ccef-43e3-a2e6-d70759fa4dd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "405ac379-565f-414a-a43d-7991d4e2ecc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9541d6f0-ddf6-428a-a509-4d079bcef5da",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18c83b45-3f3e-4935-b2b8-61a287acc011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc34819a-c45e-433d-a207-81131d305d6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bb945d0-4ae9-482f-bd5c-b7f409c86628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5be9a6cc-3064-4e18-b011-6871e019f37b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddd67567-38ba-451d-b651-a461a70be1fd",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fa1f973-5961-4d8d-9263-8822d877b4f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95301485-7d4c-455c-ba2f-5c57729c8369"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5b4d2e0-4406-4c3b-8ecb-42848bd7c038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a67892a9-de23-46f8-b618-306d42c339fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea22b007-f5da-4017-bfeb-8ff5e2e896ba",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf6d4b39-5e53-4ba2-b4ec-29df80134421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb6c2f3a-0994-4da3-890f-248481c0ab06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10e0968e-4468-464a-aff0-0f2a8b4e3091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "811b268e-e5d7-47f0-b7f8-69f2f83fbe11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32adf2c9-28b9-4c65-9f19-d850c91e216b",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4de34c5e-940a-48d1-8c5e-f17a2c92630b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "757a9a9e-22d0-4101-91b6-2fe504167301"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbc4b10c-5b4a-4360-8214-c3af91413c24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0e77b12-c794-43c0-8ac5-033f8ea38327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccca425b-899c-40f2-8b1d-6d193f36da6f",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e44a3408-b05d-4283-ae01-caa1d5940a56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bd2f572-b986-476b-b443-80c02d10fa57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c39a6a19-dbf2-46c7-997a-76c1bd3df6b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f314e366-515c-43b2-b859-00a2f1d02471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a11f57ab-9f1f-4434-9cd3-e3c52338e16c",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f007db6e-0f1f-46e1-a930-6678d59e2932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce0f9b02-bea2-4298-b925-299eca7a2761"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e60611bc-8211-45c1-b97a-2b01beaef145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e87a993d-d71d-432d-8d63-12f02cd350db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5e5f0b7-75e5-4756-b5c3-2c8d0757ae1e",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28284035-cab3-4d1c-a0a1-dc0ea2dd0586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "403206b5-24f0-4ecc-8020-e2c795f3e37d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b43fca7d-9577-49d6-bd5c-091ced34ff28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4f88e5a-71d6-46d7-bf47-92c37a992f23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c298032c-95ea-4f77-ae45-6b4573629881",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afef3f19-e258-4eeb-9606-caf3c3768ac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc73c7ab-dee2-4906-8bd7-abf0daff87f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88d364c7-9388-4436-a897-40aeaa3d8dbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a00b87c-f3a9-4213-a349-1385a0cb226a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b5b161a-5758-4bbf-b0d1-7b5d5493c117",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46da6278-0038-49d1-a099-467845a00f80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c7cd7e3-b690-46d8-b673-4d5544a131e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b76cfe89-dd5f-4e36-b766-6200dba2f597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4388080d-cdbc-4be6-83e4-e939ccc03b5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e85f212a-bde8-44ee-bf19-17a14063f2b8",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e7a21ad-aabd-41f1-bc60-faf93935fff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "564ae75e-6ff6-4446-a19c-f9ce9f026d0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af154b6e-d3aa-444d-a346-e8ef8c0ae336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cc379e93-6265-4214-9659-54cedb367e2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1830bad-2e86-4076-bc37-dc561a0ebe01",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19dbd9ef-fde4-4fd5-aa22-e12f9784fe7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bc401a6-8884-4397-aac0-cc436f34fed8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34e8d567-2d54-4b84-aa45-7ec4edffdcbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "79710d1e-9701-49d1-b0b4-2d6f637d1e10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acfd737a-63e8-45c6-8547-f380c6ddc8f6",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2458f6a7-a805-4b84-8dfb-685025d3b354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f18bd32-0768-496b-b10b-c9d3d1012857"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffaeb715-6331-4d12-91e3-954a4da7a069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2cc5e150-d835-4ff1-95d6-dfa5dd5102f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51c5e80e-aa97-4395-a1a9-add124738093",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5fa7324-b148-4cad-8885-0d430aef581d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89921300-5fca-4c3a-8933-bcf17ec24952"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edf0338c-d6cd-4a9d-8c33-755b5b297c44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "250822db-b1f3-4bc5-8a5a-972ea6578ad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29025b73-862f-4b2f-89d6-bf4c535b8fe8",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bebe8d7e-ebc6-4aae-991b-4ce878e8c650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "813145aa-3314-419c-962e-5de7d7b23649"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15dd54b3-c493-4322-a536-03f20d014b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "da7dba8b-1a64-432f-8293-5d16d7bfa91b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c6ac69e-8a4c-4eb4-bee5-b3726768b5e6",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "706cf846-434d-43f5-b899-c56286f25287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a576c7bb-4502-4606-a445-f266bef01fd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fb82cb9-efd5-4a25-91d8-67735fa9cea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3181a006-4377-4459-8cd5-c126fd32a11f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac63c089-cc5b-40b2-a9a9-432f377762c5",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6913ea7-3dd3-4a3d-a9de-f3a5c4e2e1dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2b57b26-b2fc-4325-8cc1-3e511e050b0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f6591c1-1720-44ab-a80d-19980cd0135f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e588032a-af3c-4b6c-b3b1-5623aaa0de11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f149c3af-5317-402d-bfd3-ffa38fe2de5b",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34c8deed-f3ff-4024-a85c-60cc1d00452f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd0e9b26-3e71-4e39-afeb-4c1ba93dc166"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84ef5757-ab01-49f0-80a2-7ba9cbc06d0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2a74e53-e1ae-4b81-9c47-6d68d56cf600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f22e1ba-a093-4fa0-b48f-0c0eec663779",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1df324c2-3b7e-4559-ae5f-23ac6fec576b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa40affd-f382-4cc2-be67-f9405247ce67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8371fde-1eb8-4ad3-bd0b-a8a8e07c84de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf9a00d3-c214-47e0-9f39-53dc20005ce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01fa9b63-7844-4f97-8cc1-f8dc78fd51ba",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3558ad91-e6a8-440e-9761-642259e9916c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6d769a5-7660-45eb-97d6-35fa50ad3c8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f7aa4bd-4f01-474d-9eb6-b0fc972bd071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4cf8f8e1-851e-4164-b5ca-7a02e9224427"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10edf307-ad9a-483f-876f-bbba108c3fc7",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbe3b893-57d5-4cf4-b6b7-a051466be6e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14637e5e-d72e-4fe5-a185-67f2a3a9933f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b1e213c-1202-4125-bcc8-215d50a1fb2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "46fb892f-f09a-414a-9e79-958e861378ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e2a41a5-66af-4fef-80b0-1b9f57c5d202",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dc4dee4-9b67-4312-bcaf-74da16c92753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69ffbb60-8aa6-4838-ba51-6aadd6d5007c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3100294-c960-40f6-80dc-53e74f119fcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "81a3c983-d6e4-4080-95cf-842ce7b01f05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9953a83a-9628-49f4-a5c0-c5298e5f2ed5",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a029e57-9214-43b6-87ab-4a5c633be168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cecdce81-ebd3-4277-84f1-3336974101eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a8f1696-0023-47fc-9d0d-147c9a5517a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "df47cc36-4022-4704-bdc4-bd2bd66eb6b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbe7ed79-0026-4035-b846-c26ca1ba950c",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd8db541-1a37-40e0-b4c9-208d2c164317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3879dbf0-04c5-40c6-a697-8fc2eba0dda5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9aa5dc6-28d1-4894-8751-eb9d6b806f68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "67716dce-ba48-4edb-9c9e-18e9c8338368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f07effd8-08ee-4ea9-acfb-9dfa26634811",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b501c5b9-0aa1-41f6-a65e-4c5cb95285b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e53043c3-de41-4867-b168-6c2962f6e068"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fd8bfe8-6a02-4803-bb34-65d70d3c1209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7fa62eae-36c2-44bf-81d1-31bd80b245c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26993ee6-badb-4942-9b77-fb507758966e",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "690b15ca-8284-4699-8ba0-01e8171d8822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a594b6c1-a80d-44c8-b743-63da39de5140"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41c2088a-21d0-486e-a2ab-629b3666a519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c9d9aef-2591-48de-ab1b-88eecbf4c2ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cc3121f-8c57-4563-8bc5-690b2768904f",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc83ed3-b3c3-4b58-a614-96b87e83e665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca607e1a-1c20-490e-9bd9-a2aba56412e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c3b4c51-a4dc-40cd-b6b5-05183d26da16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c26723be-1fc3-42cc-8aac-cac880f7bf52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c383b6a-20b2-4b5a-9c42-05dd0b61da8b",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de13577d-c1e0-4265-8442-278ceb37ded2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6a2f1b9-d9b2-4173-a00f-dfa91d736fa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96337d7d-7f87-4071-a4d4-a0651bafee12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "57dd240c-533b-46de-bf51-0de400404340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "207f1488-4c00-4396-bc37-e7237ccfa661",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0aad505-cf4a-4bd3-91d6-278e3f52417f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "0ff9824a-28e7-4a0a-99c4-2e0b478caf2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd6ed276-691b-4503-816c-ef4a0e121491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f819fe30-7b86-45e7-8542-aee56e368d6c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9734875d-496c-42b7-93e1-f9635e16e484",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "146e5e0d-7b0e-4707-bd1c-f3c2b24d2324",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88b1c13e-6d29-45e8-b524-9ea0acfd9e94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7fdad64e-cdbf-4a5e-86ec-df44e947135b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d18ac502-961f-427c-988f-f078b53e1ce8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b06c718b-a4ae-455d-93f1-964cc5bbd3e1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4b3971d9-2a1d-495a-a86f-e08701cd834a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d5f2116c-aeeb-4d69-bc90-36db9ce642bb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f6e58eb0-04d7-4f08-883c-48dafcf02f23",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b6f7cef3-c99d-4283-ad87-0bfdf86a4165"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b8a9eebf-73c3-4a5b-b98c-cfd02413bcb2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b69928d2-bcdf-4db1-bb7b-0990ed16042b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5b707b0a-8815-4bf0-ac74-6060acd79098",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2f67a1d8-09fe-49c1-b6f4-0d5c98c05b94"
                }
              }
            ]
          },
          {
            "id": "c8b30cc8-ccb2-4068-bc45-b049c739f958",
            "name": "Positive Testing",
            "item": [
              {
                "id": "af88a80d-35ae-458e-aef5-09c993ea4d0b",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "d7f60a3b-d9a1-4c9b-bea4-ab9bec1885a1",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8494bccb-c67c-4ae3-bcad-b841fc9275f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "2a6291cd-3819-4f36-9179-6d87b9f6141b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8425e8b4-c2c3-435e-8118-fd5bcddf389d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57df6424-a951-4c82-9f75-ff8b3ebc1761"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "773394a7-2648-497f-9bb3-52140c92b452",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bdf15592-2aa8-423c-909a-c93fea1954eb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "45bbf230-c214-4044-9b07-2bb561af8c17"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b79aee9-1a8c-4384-9da7-c6352a8f832e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "70835a04-eb4c-478b-8e2e-a7b514109b8a"
                    }
                  }
                ]
              },
              {
                "id": "305e7543-87a8-4754-9301-89bf509711bd",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5526dc02-8d34-4463-bbdb-345e22064dc4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2284e832-9156-41db-934f-3fdacbfce3ea"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2d8e609b-16ad-4568-816d-773fab052e30",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cb14c102-a5ca-4fce-8664-d3faf40e169a"
                    }
                  }
                ]
              },
              {
                "id": "a221ee18-945e-4cf4-a805-f9c80a0c15ed",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2047ccdb-6214-41ed-847b-9ad205b5e063",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d9c82c5f-2739-4665-a29a-2539552d4fe8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0be7448f-75a3-474a-8b09-b77f8da1262c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "208aebcc-d264-4136-a7d4-df82717c5d74"
                    }
                  }
                ]
              },
              {
                "id": "a4666a03-3639-48d8-82d4-cc923534561e",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "15bdc30c-113d-4347-a3ef-c11809d1ac47",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a09bd9ce-8a8c-4778-90d4-25636e15d91e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d71204a8-632b-4585-ab11-ea00274e4e72",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "df4f7afc-f57e-433a-91a4-d05280c28888"
                    }
                  }
                ]
              },
              {
                "id": "73dcfc66-79da-4755-a096-7ee81ce2ec2a",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "07b8023f-e67e-4e93-ab7a-64d5840d6a40",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "52193a01-2c0a-46aa-b177-540de80708a0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "86d622a9-88af-41b2-aa09-945d6528a2b6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "94f9a11e-52be-452e-8d36-ca419ea6c768"
                    }
                  }
                ]
              },
              {
                "id": "fec59db5-20e5-43f0-abe4-172f6b2fe221",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "78ece3bb-722b-4db2-b3db-0f554cef6258",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0c647295-5f07-4c96-9e0f-67219df8facb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cd5b100c-db29-400b-ab03-b711786f0a86",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b442f8bf-45d0-415b-9e45-891aad39b188"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1d2f13ee-6cbb-4b03-ade4-4f00bcb16e75",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b7eb8f6d-7330-4430-8839-260888eea545"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "06c909a7-dfdf-46be-a8d0-155265a2d2dd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "683dc976-99ce-400e-901b-f02b65168a8f"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "86f6a19f-4499-464a-97e3-2c7c4fab8b17",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "e13070f1-237d-414b-a554-43d4cb769fd0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0e72a070-450f-4a6a-ac42-3a348f65c92a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "660af212-2c5c-4db2-8cd1-b97fae196f5f"
            }
          }
        ]
      },
      {
        "id": "f51e4d69-d0f3-409f-b681-024a1740b9e7",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "691d0e3b-3740-4b98-8227-569631b2bea8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "19143330-f106-453a-a95f-74c9e8de1d69",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2e367e1a-e850-4472-8871-33dd41240d83",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cf36f2c-37ad-4c9b-990f-c7736eb8f94a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a6d9f19-76cb-4d67-91d5-ec6ce40161be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf98c75d-cc38-462c-a70d-f150863ebbec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "4bbc56cd-a702-4de5-80dc-fe82f750b1c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "100ea5b7-4d41-40e1-b1fe-51b60b06a616",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b281be0-b45e-46de-a205-b83f626763fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f431630a-acf5-4728-9f05-cffb74530986"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ed9320a-062c-467c-90d9-bf751377c5fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7fcdec7b-14fe-454a-9531-0406aac9a2ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dc3d2e8-58db-4a55-a5e6-c3c43f7318c3",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20d71517-6f6e-43ec-aea2-be97ab8de871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90f2d7cc-d8ee-489a-8b58-2c3c96d993f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fa35bdf-8612-444f-93a6-adf9fcdf538c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "10461559-49d3-400a-90a0-b7643d1539f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea5d97aa-0f88-48d4-be06-3278916ff9ee",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4040386-0d07-4703-b48e-65b9bcc6e3bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b29c702-b5af-493b-b40f-0b32aee48cea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "105f0009-24d1-4005-9dd0-820778888e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "28a22522-3247-4a62-9ecd-bf2af82e4ec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cc01bda-835d-44bc-8ad3-8aa3bc3d62ce",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae403bba-679e-4a59-86da-b9f65971df8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25b2963d-03eb-46aa-ac3c-0effca2c91ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe0a9925-8ce2-45a5-bdfc-eaf86d5755dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3f645af-3f2c-4c97-8091-8cb53cad1b80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e507dd05-4a08-4bc0-b078-f2f5069f1233",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfac9f6e-5d89-4709-9f6c-932ea8a2dfc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1aaf8c3-8e09-405e-8eed-c718b8316620"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0bff03f-4f71-4500-8d6f-2d5ed06e600e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca825f7f-0aa0-416a-9e4f-ed7b5ff81edf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1bcff3b-7443-4b6b-910a-e74e0e9a0109",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b550adf-0e89-467f-acee-5023900bdaac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8751726b-ee0d-418d-bb6d-dd62c38e98a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47546a6f-b9d3-4561-944a-34f8940f5d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "68498e00-8b3f-4c19-94fb-998ebc96dcf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7775acd3-7bce-4f84-b7db-3775fc11dac9",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b43e3b49-6ce8-42a5-8966-cefd087fc31e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0873be8-6a97-4624-9a62-49e732ac1e58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9ed5b5f-ac57-462e-b528-c69f265b4767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "32175d55-9942-4b86-9e03-9d15180e1baf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "393d6b9b-eaf9-4a36-9a09-b83bc99f5e5c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61a5368b-9320-4ed3-95cb-9b96bc121ddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be99dde6-f36f-4681-90bf-47247c14c547"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb69fbb5-aab5-4a0c-bd0f-2b35894d7b3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "084d8cc8-0521-4fba-a17f-2c268cef265a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b011b926-10ce-43b9-b85e-3de187372272",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "337d017b-9fe0-4ecb-8bbf-0842394c9ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c8e94e1-7d7a-42f3-9aeb-90c004413dbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c36dee8-5844-4edf-b8eb-6709cc9fd228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "075bd8e5-e9dd-4b79-973b-973122955e6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af7e8087-a78d-4ccc-b7f9-1c1c0512bc2e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff4f4752-d1dc-456d-89b6-6c158eeeb501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e20e23f-7913-44f6-b1c9-8a6b45dafeab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6877a7c-7007-48f0-a225-4668f8f855a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4085cd27-5f25-4028-8a88-91bda2056620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d00f308b-5b8e-41c3-8744-34d936cfac46",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "729ae15d-ac63-41d6-b73b-d3475f4dedfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70555065-b30d-46ef-8878-29b886e96f66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaa4395d-ae5d-45e0-8e64-19b8fe666a6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4c3132d7-2b90-450f-87fd-cdc460045815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9babd32a-4b92-48b0-aed2-e73fa000b12c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7aa9cb5-7b0b-42c2-9f74-785b352d254e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "002910a3-096f-4035-b68a-a4a892447b58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "052f506e-1913-4e86-a8bf-b3251f8dfe62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2dc0cd1c-4de9-4c6f-add8-0a5cdefb791f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53bcdf6e-2970-4d2b-8e86-f92eeed418b5",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b7a1be2-3a1d-4b0d-a963-77547f72cb74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4440c92-b287-455f-9fed-c0df22b354b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f9e3a6b-1942-4277-9835-be00d3e2ee5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f28ac37-1766-4b4d-ac64-60445de5ad42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df674e7f-36a6-4b6b-988f-257132908645",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07cd4068-4407-4d9c-850d-ceb017b70582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "237447ff-fb1f-4024-9bbb-1a5afe74adaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04c07a0c-83ef-472a-9af3-1e048b0b3d96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a7b7f83-18f7-4150-ac8e-27d1ef996dee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6a4d47d-47ff-45a3-8418-ba1ec5a66364",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df0a3046-423f-4bd5-9529-b8a257462d9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89b0c72f-2d0a-475d-b554-c68f24ed047c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f49d34c2-ed90-42ea-af5c-4884d5e898c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff444de6-87a4-4ce1-a1dd-9e205b16692e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "234913cb-50b6-45b6-a4a1-5fe03060ec2b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5388e0be-0260-4f84-8252-f48d68e7a557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6776af4a-6dd6-477a-9c2b-1c56f99a4261"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d348893-fc39-47ac-8834-329a46119415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "89b64d22-0c9e-4057-89d8-55f452e8aeda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91456ee9-3acf-49e1-aaa5-e3e1c0c5acf1",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca38f3af-c280-4223-b2f1-8d941509c7a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d155ec6-7e7e-4594-a55a-b66238b0280f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1488a377-f3e0-40e9-9a94-ad15226ecbcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b7d7174-8fbf-45eb-ac27-678ff1bf1c77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0635a3e8-0326-48b6-ad3c-031fd9660bfe",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7b9d1e0-d678-44e4-8993-9f483062c472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d64a2ff-fd9a-4092-aa36-2a29ebcded9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a317a871-c201-42a4-ae7b-37f86250d56a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5e141f6-491d-4336-9eea-fff62ea5476d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "246add9f-059f-4d75-8ca3-3d9fb5119e73",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6805d2f-dc86-4f67-81b7-691a16cb2f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb4e46ec-a454-4033-a9fb-30c9e586e468"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5c64e84-f83c-46b5-bd0e-035eb3e32d33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "43d4d29c-5212-44e6-8352-02897747562b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c019a312-9d08-4a83-8295-4a4d69295756",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "068f4922-be3d-42c5-86ec-f984fe095af6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76ca6a70-37d4-4fd1-8b25-68103adada92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f547ac-9d6b-440b-8357-a13b10bc9eb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c204a6e8-7b3c-4eeb-a088-bf5c176cd8e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c34a18-17f9-462e-8ff1-d894c443b323",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fcef8e9-3039-4602-8039-9ebeda214b2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dd6f134-f62d-4c52-8503-e22828374086"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c152d7d-4e9b-4de7-aabe-306c8b2b2698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "864e5b4a-e580-4a65-a575-54559d6c2615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7881c65f-783b-4c80-baa9-fd6f6e9915b6",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf30218-0a27-4d25-a375-16c56667183c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "881cd789-d41c-4041-9eaa-4117523a8591"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c791e30-3b72-4eab-b5b7-18d87efe1145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "39381b97-e30c-401b-a606-012a2c7d6c4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f1f2c31-b420-414a-82fb-3efb805ba2fb",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bc564e8-9527-4dcf-bfeb-c34c2041cb85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88e49649-eedb-4bd9-bbf7-15c3dd599ba8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ebbd7a8-d148-4218-8a04-d10bf8573a73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c25b57ba-73ca-4888-9cb3-7988838a72bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a84adc5f-595b-485e-baa8-8b0e7814d124",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "975212b9-d6a1-4f21-8433-7928a2af4638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "953ffb78-bf49-4ae0-872a-939e041b8f1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ea81e22-2ba8-4e25-b7ec-882dcc8d2090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "03a6d013-531e-4aa9-8c29-7f466bdce0a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cb68adf-fea8-4012-9ee5-04d554353ce3",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd7b48dd-4853-427d-85f6-171066d05db6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59d1d5bf-f742-4259-a0b8-347d2df601a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1932370d-9fa7-4103-9a0e-19f94be1eab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f066dad-1f96-4984-9a6a-5fd27493cdca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a65bb468-6e27-4362-99d1-5fa02104fbc8",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42b51ac8-a538-46fb-8978-9d7f0f4e3d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57f5c7e7-f003-43b2-bfc4-a3e1cef4d4c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4fc490d-4eac-452a-874c-79e3885cdf13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f347aa8a-edf3-422f-a1b7-483e74cda7ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c63cb52d-b434-457d-841f-ed1c94fa044a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81ee21b1-88ea-46cd-bc55-5019d07fcda4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c224581-4d16-4db4-9a9b-5124b929c38e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a845ceb5-4f25-4f29-ab33-09b155822892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ae442d6-3a7b-4206-9745-a0400289101c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1ddf0a1-00f2-42a4-a528-b7c292cb3583",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaba8ebe-5133-4d18-973e-57475e3e51b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3683099-7e83-43b9-9125-0f26592c93a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fdd9185-26e5-4cd8-9200-609630c8ba7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc7c1789-2eb4-419e-9209-7234ce317ea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "084058a4-f463-4c61-bfb2-bf0a5c024897",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5251f31f-304f-4d9e-a8de-2c781a3601b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41458ac0-9fc9-42a5-aa82-5ab1d3edb6d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "065f1d76-6a0c-458f-9328-e7201c74c503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55f256bb-8690-4eb3-a70a-057cdded3ee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2583a8af-76ff-4e29-92d1-2bfb7afe86d9",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d25608-9879-4494-98b5-1e61f54c7d00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9cbce1d-fef5-436a-8157-479a5ebff225"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9846da3-062b-41a5-80b4-7ec85989728c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1cc7a00-f401-4935-ba25-efdcca650a12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1bca077-82ea-47bd-8680-f091b1dfe0c2",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15cc37fb-2346-436a-a3f0-67e3aa4101e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fd86336-bb04-44d8-a25f-b9c408ec4c50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d526990-88ec-4954-a204-f79c3ed4250a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46cc6a18-e8ba-47d4-a212-aa8fc1da8d9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d525ff22-25d8-4f7d-a6d3-b5644c398582",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aac03f2b-f1b3-4ab9-a0e9-c814ec132b07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4caf05dd-da30-4ab8-8d67-75e5cd0832c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "351ddff9-9442-4a0a-86cf-cd2d0598c548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f052abcb-006e-4a76-b0be-e3963ad1cf5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c652989e-235d-4c51-bac4-941442d05172",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0789618-b82f-4d3a-8b1b-d8000eb16f75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39f0742d-3dfc-4c2d-9c6e-c95884efd0ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42cb3d8c-bc19-4816-a0d1-50501d75e11b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bcff67f-3e40-465d-bbad-cb6f12a10347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "648beb0b-2dbd-4776-9268-a22167304eac",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b183fc4d-cdeb-4375-830d-06e72e3c8c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aaa6652-0b0c-403f-8c7d-04d3d2477720"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c06618c9-d77f-46aa-b64f-ef084455f448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1298046-3eb3-4ebc-a9b9-5d5b60e8edba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "793d30b4-542f-4155-8fc2-5ab08760f3b4",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc8b82a8-dab1-47fd-a4bf-f838b301750b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "850eb853-c176-4c5a-985b-dd22560b7ab8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8efdaad-733d-469b-94d8-e57139256e55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "12cee905-938e-4e19-becb-c83e85cfb648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "139f5049-6a24-4104-a212-f28fa314906e",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa57ee50-f344-4f64-b885-6016919f59ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e20be62c-bfd6-4f9f-b4d2-1e70113a8d0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d9f1a76-b1aa-4181-b3aa-cea5be24bf42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c73b4ddf-9f0c-4be3-9959-df7f51f0325b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "de8825e5-9d5f-4535-b21d-abf7638ea921",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "52c5c457-a840-411c-ab6a-30ff8975fef6",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d28eee97-435a-4446-97ed-6a48cdc52b1b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "67a7e997-cc35-43d8-bf8b-aa6fe5c5d44e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a75017e-1d4a-4f78-afb8-03088b87e473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "30256549-e84b-4b10-9e6e-2b8b4ea2fa28"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "59c87720-e3df-4ee7-9cb9-5a8a63c9c4a3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "307d8799-ef86-41a5-9759-b3e59c91655f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8f6c4b56-308b-46a0-b24e-d4d7e7926823",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9507737a-a33b-41f9-a725-5ff442bb3b81"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d46030fd-33b1-4f45-8bbe-795d8efd286d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d227633b-8e1a-46e2-a267-bd3ec9ea6d34"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9abddcf7-0ce5-4bfd-9c7a-758ff860da09",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e398061a-3fa2-4285-9dc6-7b7bb6631381"
            }
          }
        ]
      },
      {
        "id": "cd7eef30-895d-4106-a0f1-0690f52f73bc",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "1f7c8790-04d7-4b62-92bd-a83882a5e6e8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "52a78e65-1123-456a-90e7-d2c505aca19f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1e07f438-6c46-4637-81cb-bcc57c027f86",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6af26055-476e-4c8f-91ec-459939520ba4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e3cf5a4-2afb-4973-a8a5-a0225a164f7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe783729-3cc4-492d-9d1c-c827f9756522",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb5a8f7c-0193-46c7-82e6-51b436d36e70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53822261-1128-4888-a153-2ca882985eb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d514694-18f1-494d-afa6-ff4f1782f26f",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d4d67b4-889e-4a28-bba3-8e52cedc34db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a889e03-ce34-41dd-9a68-06348f5e1eab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "def67472-9913-4812-8500-fd1f910f6f4e",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a84b926-7694-48cc-9276-7fe647b33ab2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8b0e70b-f736-4c76-99fb-985dfe7f1923"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72408f1c-46ae-4cf1-b2d7-6ccaec54f8c5",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15497192-8cb1-4781-8fd2-762ab3c25874",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8b0eec8-93a7-4e85-8075-e5da86c2eaf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7612ab94-320a-46f1-a0a8-c043022b42c3",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be4a0bae-c68e-48bd-90d1-7dba0d5fc600",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a225efa2-a8b3-4412-8561-34128954dc43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfc8f03c-689d-4d18-b641-57ae97dd9751",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47553d86-61d3-439d-8856-5d51ff0546f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1585710b-6d85-4e15-b02d-395fbc83239b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a8504b6-5aff-4f2c-9612-0c676c283569",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5f4ee84-eaea-4d2c-bec1-ea8c9359484c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31cc7aa5-6e45-4052-be2a-84407f6c006d",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6778906-9191-4835-bafb-aebd1a54fc1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21753551-1d6a-4075-b6d2-6e4699ffef20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "615bca9d-06e9-431a-aa87-22eaf20a7274",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "751f68e6-11a7-4020-805f-3412feae0cc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73ee9dac-ba28-449b-bd4c-a8e8bf31a04b",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fdd7866-940f-412e-b755-e12b3fd4b8d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fff5edd1-94dd-461e-b9c6-1b1dedd2e854"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a2cb7c3-1223-4aeb-9309-c9413217a609",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1776691-a0b8-42ed-801a-984a202d328f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff520214-d596-42d9-9aa8-08f624082b32",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9daeb79-668f-42f5-b90e-e0ca17851432",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddcf46b8-ee99-4cfc-b231-656d85d0c477"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0169f32-32f2-403a-9782-5478c0a7ffe0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eda5abc-4ef4-494c-b67a-5d0a778bba30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ad264a2-941c-4593-a7c0-49fb7f355522",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75b86c8e-212a-45b6-8c66-906efe0dd5db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eff2f96e-3aab-4829-acd8-e9ebc0433d98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "580f552e-a62b-49b8-98cb-19e6fe3b2f68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c3f0604-f8ef-4fef-9ef4-e61b60af9e9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1676beb0-cbd5-4a4d-a950-92b96244b206",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "180b9cdc-4b26-4060-9acd-3b403d3ceb7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46656bc4-d402-44fd-885c-06d8e2622505"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17bc283c-3c3c-4dfa-a1b7-9de72643c226",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03eab6a8-2441-4429-be83-14f3d33f1459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7460d01f-7aae-4112-9b32-1936e5a03ccf",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5c62290-5b2f-482a-b0b8-65520d254c9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4240d6d-0391-496a-9cc3-e4b5ff537a93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "280151b3-e483-4122-9660-0bceebd97815",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f51478f4-22b3-439e-a186-954704572163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a758be45-a941-405a-b562-46a2b58a72ac",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "001c23c0-7a26-4d5b-8aaa-99aba134e409",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d245c13-5f84-4c3d-8b6f-5e30f8841400"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b461121-f134-4e84-92b8-f530b89f73f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad6429a5-2978-41a2-8b89-776a0663aef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "268a8449-79a0-43fc-ae59-49d405ab2d9e",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c76099b5-df37-4f16-9ad5-a2fafba80fb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c72e220b-2dde-4c2b-b63e-c75235821af0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9b4b0c8-0b4c-46aa-9f11-1e74978d4b76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c9628ef-8e18-4858-8054-7ac92d351bcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98bef696-c025-4456-b295-09b535e96113",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fb49a09-460f-4c7c-a924-aae5d496f3c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "091e11ed-4068-40f0-837d-469404cf46eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14449619-b253-4d77-bcdb-7643a9a26d73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31cd0cb2-ad56-4e6c-980f-2b8d0337d40f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6501dc15-3d00-4e01-aff8-10b7c392ecca",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f4a6952-0747-4928-b8d4-7c3e59c28e4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1ef3c90-415c-4faf-a092-14c6d9a512ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "349a5cda-6dea-4a8f-9941-3177080dfa61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49899b02-8262-4e72-84d3-65a11a58dbbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0d9d0a7-41fe-4c73-a3f8-6ae7d86d417c",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2efb3f6-3f2f-4dcf-b359-21d26199bc59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2455f7c-d33f-4e8f-a59e-0c9c7fa80c9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2138b6e6-6739-4ea3-9d24-a4313e8bba64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efcf99c8-f119-43d3-a220-284096c1fb95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e36cd2f6-be30-461f-b421-acced281c101",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31180d09-6e59-4a7b-85cb-4b6ab931da76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51ec8b69-274c-44cc-b2ab-04c9f354f576"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "feb7f12c-123d-4498-b350-34f2b00fe774",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfffb9de-1d4f-4289-bd3f-46728b3e5364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc63ba17-ab5d-4dd3-9066-feabfd555806",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac5ffd99-db3a-4caa-a9da-9dc0eac83270",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ddcc8f6-6d2b-4e92-9661-5417e1c6230b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47747361-e8c8-4e95-85dc-0ac6906fa0e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f385eb2e-3e9c-46c9-9c12-f50e8669dcf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3d4ed71-7516-4d2a-8145-041fd1793f15",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "598b9de4-e9cd-449b-b7e7-b0c5f6c49b2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dca7978c-c9a6-4df3-a882-28654f39c853"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25cace6f-bd34-44d4-afc7-f54c4a64ef49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12962920-3dbf-4d98-93fb-2fe3077fe890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d17a55fe-4989-4375-8a7f-9d36e730543f",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29586402-8682-4538-a846-4aaff59a24a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "543ea1c0-f334-4a49-8af3-6a1523fdce3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "371d9ab5-7e5c-4664-98b1-4175b2e68379",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d7c723b-f940-421b-bd74-3fedf37dfb5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed09d142-4fa5-473c-927d-a04a342a1102",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05f7dcf5-ce5e-4885-a869-18a52ba252b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7dd7560-d094-4b79-8d22-e6aa1cc20b84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9333cf2-c9aa-4ac0-8ec4-3a5650915f66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96e82bae-c300-4c19-876b-65849954a30e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc5f071-62d7-4ed5-8dc0-e9a191caf3bb",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c386c5-0172-45b1-aabb-6679ad1a9b88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f838de9-f7ef-43a5-bd34-06c262d61864"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dd7e44d-64e6-42f9-a33e-c74361d11330",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97ee3741-9ff0-4929-9bfe-c44b08dd0c72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfa73d2b-00a4-40de-b6f0-18ba0e854e13",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a963bc81-5083-40ef-8cdc-1a888776d02e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4fbb89c-8d42-435d-a3cf-91ff37ea7324"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6675a769-6a11-4f2c-bfa4-3e942d9e09c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bf98c95-0258-4416-8d14-4502843bcd90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00876fcb-f7f4-4781-81a5-8a072832d878",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64fa2ba5-f68a-4bdd-8f8e-5f0a53ccb513",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "250d3bb2-7564-47cd-a4c2-91cc2edbef10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad7b93cb-0ae7-4410-873e-1db123cac49e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c291402-75f4-40a5-8786-a471d4d65f17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b064f142-10b4-46de-95c0-abb6b5c9cb00",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5858812b-5b5f-4802-8682-98066c3d59ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85d9a5d1-0525-440b-a4bf-409d58db5e4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a2db71f-e52d-42c2-99c5-5160c868de34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c19c6b1c-ad91-4949-af3e-72e6ffa66294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52c61e92-74f9-4705-9253-3a8f3ca81fb5",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f640f46a-d880-4811-b4fd-75a192a70279",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85d20aa0-65ae-4d2d-aa4b-2dce61048127"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd69e7f0-902d-4740-8ec2-e3137168e94e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67abbf6b-9c62-4ca9-a93d-3c60850fe2ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b73ac85-1b25-4f1a-a193-f8274073aaea",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b7e4f10-6863-4637-ab15-429bf6e9d2b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "706f554c-c84f-40f0-b4c9-450bc9d83ba4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f08a941-672f-4725-ba83-82506ec5dba7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c74bc972-eb31-4a4b-aba9-e109eddc20f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3b4e970-6ccc-432d-a763-f3e0bfaf4697",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfbe82cd-d0cb-434d-9715-e18fa62ede0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb0e37a8-a9e5-4e5a-ab23-eea0e010108f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c641af34-5f3d-41a5-8e07-71c2edaa52f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a968c44c-bf29-423c-8e11-8de12653de84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a70a1228-67b7-4d27-8240-fa38429de54a",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0b01611-9d0e-48e9-adf5-3709d8cf75ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "535a9adf-2b16-4246-8d94-94e65df4a7f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbc9b311-2128-4e57-8b63-6436e9103f39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5add308c-ba43-4030-bc0b-b3dd86936a0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59ef3b9a-6cc7-4d16-85a6-2fa9567bbe5d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8d39e19-82f3-4b3f-9559-983a06f145ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ad6d843-4f37-4118-8afd-71786ae821d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65d30366-e7e5-4df3-8ebb-9e1ba14aa243",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "706ce220-ccf4-4c34-8a3c-c5d56d5f7d8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b14fb5f-93ce-4aa4-82b3-ee39c8b04039",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6154570e-c11f-4626-9da8-688b83e8b537",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90319d9f-e82c-4225-9d7a-d052b69e7ec6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27e0493f-4e6f-4996-b4df-442514aaae29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b84a87e-1bb2-4124-80f6-d3c5bb48062c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b3cbb3d-e508-497d-b2cb-86d559296384",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f54b89fa-3d2e-4b7b-8b32-a2e592a0572f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c56dd16a-1bb7-44a2-984d-64a3f42ef8a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9a3695f-8938-4ca9-b8fc-80347425fa8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "279734b3-42e8-4d5b-9881-e24fe72e8b4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2562635-9878-4620-9f09-fc1c0d9b605c",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d67ae3a-b62e-4352-ad19-43fa57def98d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60e4ea01-6976-4152-9c8d-ac0bd67b3b25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73dfd08d-b469-4ae3-afb9-0f47a6d9496a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e33e601-d0fe-4254-b815-34ecd417be1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "286bba79-39f0-409e-a962-0fc7fb799b37",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06f38135-5230-4ac7-a461-8cd2ae96da2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfe347e9-8d0b-4d49-8bd7-5ca6ed2e4e57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fef8ffbf-2e6e-43a1-8609-fb99e68461d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7264d9d-a7b2-42e3-8528-c1e04263133f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea398dde-34f2-4772-b394-511b86b84535",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4eaa01e-f2f1-41e0-a56a-1c1ae25af24c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3538b92f-3d2e-4e0d-84d8-c77f0758ed7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e558e86-ed6f-4d8e-bd3a-1e13a2aa1c97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d24829c5-ba3e-46f7-b955-2144756bd9df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9b86afd-7ec1-47fa-a16d-86927f741c3f",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26b46c9f-8f28-4526-a034-357bde26e561",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00139236-0169-4216-9475-58a6b4e03ce3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed72a1f1-ea4f-4a5f-ac81-c37482d13089",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df6097c7-e7db-41eb-bb5d-5c8828e9db8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b8e1fe7-9228-4937-8069-9f355989db6a",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64678284-6090-4ed1-af54-7c01cff10623",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb5f0cec-9233-4c98-92ac-be0a5ce9fcf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5414bef3-186a-4d6a-a05a-4cef12ce94d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4714f6be-6b88-41b6-85a7-0bb64ad83b14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "453ef589-f25a-442f-8cf3-738503c9f4ce",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c78998b2-8279-4687-9592-ce98d8dde35a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab168207-d611-43ba-8b6a-b23d8eb37eb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e6e5c96-7d0b-40aa-adb1-05536f0aa153",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "873ba7a9-add6-49ef-a748-57239583f80a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e12d5a3c-a3ec-482f-b914-1533f94063d7",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68b69b8c-c820-407d-a196-b330408169ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c98ec9cb-583f-4297-87c5-42a3841269ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f855de17-80e2-4526-aa8d-96dcb3ec351b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29eb060a-c9ca-4f31-972f-724e644583e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "029d5904-2834-4fe8-b742-753414f09b5e",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b8f710c-c11c-497c-9d72-2c6b779711fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a5037de-2274-4f8d-8f56-db5995e580d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c5f5d13-5562-443a-977c-48a113f388a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28166f97-bad6-4592-8b8a-2233c5f9f37b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29dba1de-6327-482f-9571-4b92d1d6f0dd",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06119f22-bd95-43c5-9173-18518d6ea5b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f14a1e58-06aa-4be3-8a3a-fd4aab72eaf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60fb526d-2d75-4d91-a324-876cab877f9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17d5580e-d2b6-46f4-8c45-c0012ad4bb20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4896af3-b3e2-4b7d-b226-f20240d173ba",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "884eef01-29f4-4378-a6e3-b7444a98333b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53d8557d-a5c3-4ce7-921f-622469548fa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5612e41-a17c-481d-9d65-01165af09436",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c53084c-2a45-471e-aed0-b45b8e63203c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "601d90e8-2cda-4268-916a-675a2707cb4f",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fee32349-da21-4b07-b85b-2497342b8f71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c3e3577-e2fd-470c-b514-bf48f2738050"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0d82849-291f-46d7-beb8-8454de134d84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd481441-9ae9-4b96-b086-9eda1ffd7eef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "170829cb-24e9-4579-9dcd-3497c219fba4",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7803ba87-1641-4acf-bd7e-a20675c0d7db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ae28c58-36c6-443d-8fda-31146d82dfb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2b4bff3-a97a-401c-9578-05631159300b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2485b7c1-5708-41a4-9a04-db14f26721c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "499c46f2-0d79-4a78-8da9-6865b6b48e6a",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03c2e8b1-2d69-4342-a79d-f8434b0eff73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4dee7d0-3c3a-4985-96a5-b3dd5d02b48f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0f7da56-3f29-42c2-8594-932225d5bfef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baa5c621-6ee3-4fdb-8e73-3bc65af0d599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff504173-3c4b-47e2-8b75-92b24c2be491",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "335664d4-7508-44c7-9f5d-933d4e0c0941",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ab37cec-35d0-4b13-bedf-b0b12621e87f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1d0951e-ce32-4171-9e1c-53f24a6f02bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9a4d48c-8e1f-419e-b85a-b1594c14f338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbb153c0-a20b-4e7a-869c-483ec41dd624",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e25dc19-35d1-4afa-b9b5-e364f4eac846",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e60a316f-9b24-4113-8bed-d7a8c2e6a8d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a463d6fe-e5a1-48dc-8ab5-7e41ce5a2efb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ebea136-3392-4d9b-9fea-5d6da0ded9e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "652e4afa-ea8c-489a-bc2a-3db67e2d5696",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a85d0562-67a2-4c69-8e87-c1649c9c4e2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf3e3e28-9675-4e7f-a179-b913eca65a43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e38de146-c775-4685-a0ab-f58dde03e3d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe976be2-eb7a-4de6-9c31-28881dedf4e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a4ddc40-6ca0-4599-9110-f859b01b2994",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24ae4271-877a-4d04-8d99-90c13ae6883d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f71b838-8357-4c56-85cd-7004bfacee70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b3587a-2959-4ca7-a481-205fc0df7dfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02a8507e-c7b0-4f50-94de-5f6c1d065052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca19d29-e457-48d2-b26f-84b5c4f48b64",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a07647b8-7a32-4786-acbb-f42b14b788f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0955cf61-6fbb-4b49-8e91-fa0734886e0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4689aad6-3e33-4f34-ab87-b6946c8f1294",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca21fe05-4afa-4bc0-9cdb-f93b8a59cfb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a67eb320-6345-4a95-8990-770f9a0f24b3",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c58e4070-3add-4a12-8fa4-7e4836ddea56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cb73e1f-4c93-4f54-bf8c-7152e6dec88e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "675a2c65-698b-4d2c-870f-711846d7716f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "702c6a2d-0109-4a92-a128-c830a5b9ed90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64512e13-3b00-44da-a7c3-21ad74e9e95a",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e93f128a-deff-4b8a-81f2-7a04fcf4573b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6d48457-2429-4b6b-9ecc-4551d75d2769"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "661fb55c-510e-412c-822b-cd52bf919fc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f10f488-5ad5-4751-8534-b9759d31f017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b52230f2-14ed-4e3d-bf0b-694b0b724623",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b00a5261-9dc5-4a02-af42-d0cb02361034",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c98bcf8a-2a7f-4953-b948-91f2d3fd8f78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98d5de5a-2ec3-4fe2-830e-11cee6f23ef8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "215f67fa-2887-4898-8aa0-750a73379f5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c27e8da-85cf-4ef1-98e6-cb14ebb261cf",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a82a8567-1430-4a5b-aafc-73730c05590c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "765829bd-3ca4-4164-9c27-97bd35ce1383"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ea36f54-d4d9-42f2-9af3-9be2b6d59d1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6082efa-d2b4-4f46-914d-8262c78bcd4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea3c17b5-e2dc-46f0-b410-c175a8db7765",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67ba2c11-712b-4437-9dbc-79c07a0450e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f147a04a-3c45-48e0-8ebf-d36d60c49e8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdccf5f6-ffb9-4101-9541-0a2e03282e78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83a0408a-c300-4fd9-b5fa-e9c8a0bf186d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76341892-c600-463e-9357-a92c0f674e04",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "373bb501-0d8d-44ef-ad92-9f952c11fdf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee0e2e44-2ad8-4e70-b85b-82c85b9d921a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "657beb99-57c0-4f6e-85a0-6c6d9847de30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "371acf87-17ca-4d99-aa07-58759e254fce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce3182fa-87f3-44d0-a240-27cce52755bc",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dd896b0-01e7-4bb0-a999-8c97ed2d800a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "331d5deb-c8e1-4902-8059-0d216f5e81a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82429e84-5e43-40c2-8d35-0c101971540c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dc4da3a-fe2e-4f53-a949-b3c383affaab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38dda4c1-8961-47fc-bf36-2db0b9365ba7",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fd678e6-e199-45b2-ae3f-95087ea3bb11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c412bc9-91bd-4aea-874b-48bf048b59ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cd63240-301c-4611-aa7f-ede9d9343c8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6354bec5-17a7-4dd7-b118-2b220b0a8f9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a59e60c3-2d26-4119-9108-c8f6df3b486f",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c62dccc-b929-4ffe-a0c0-8328b304ca33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c3d9114-f495-4365-9011-af6a5aa1dfaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32d6e2b8-df1c-4856-9fd4-459a310305b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caebeb05-b258-4bd9-98a8-87c2d303ea7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "903e8bee-ba01-485d-a65a-e54462c7a847",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b34730c4-66a0-4d9b-9ec3-289815b53a22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a825581-70f2-4683-bf66-cb50bf8e980f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce80f280-3dd1-494e-b8d2-1a346f56bc1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c694c67f-528f-4d72-938a-072590cc8754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1bffc49-0dd8-4ebf-b8d5-2329d3bd40c6",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "511de5e1-9985-494e-a527-8fe34f16800d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "765bb289-ab0d-40fe-98eb-f69568fa8d47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19aeaf74-706f-46a8-9db3-b41f2c6838c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51c5b50e-b74c-4e6d-b49f-ddcdac81415f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7535c817-0882-40ee-8832-2fd47be9a875",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c78f58dd-914b-4722-ad07-21c0cb41cf6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93bcbb26-9a29-4392-99e9-53bb049f5137"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b643365a-0b10-49fa-87dc-0db765843ae2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53593036-a076-484c-96b4-caf79c5b304d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1467bb2-f575-4e6d-9ca0-963d9b88d154",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3b60225-48b0-495b-b902-ba95da4b0a6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "029859c0-8688-4d46-8ab3-668cd4ab248d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "528f5ed0-9190-41cb-8f31-5bfda31301d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca6662cb-33cd-4247-bef2-6535d919a6cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ed73cf6-b41a-4562-a19a-5c7d50754a24",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "239580c7-cdf2-4a7b-b6a7-bb16aedf070c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5adf5796-00e7-4a96-a433-375ef8faa89b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "089bdd9f-c1fa-406f-ae25-c352aad0a0ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f418b12a-71ad-4248-82ac-753fbe27942c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d6a451e-661b-44ae-a059-3d084a991fe1",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7468491-d558-49e7-a5da-a37deee0a1ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1bef70a-b980-42a5-a9bd-100383d329ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67291b31-a0f6-4738-9e42-f69c2bb54aeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71e8886b-73a3-47a2-81ec-6204252907b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7cab1c9-fe23-41ee-b09c-4ad182a0e254",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d814afb-8f70-4feb-8ce7-6f334bf46bb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5da54397-2148-4341-be9e-b57ffa466eca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cc40303-1356-4b9c-8264-70b31a5f9bde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "925916b8-3218-4efa-96b2-6aa76537e20c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9deb738e-e8de-481e-926d-d4122a254445",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3396541e-8449-4d02-b2b1-847b1b7d3050",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7bea145-0e60-4388-b972-c7a8b830b9a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20886661-5ce3-44c0-91a0-50dbd6528cc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f217fad-4b68-4845-8405-e6810de835ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58b43f55-9afb-4bf0-81ea-c741e53fd4dc",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0720b751-a55f-4337-9c77-56d7691398c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8778c276-74a0-4c18-a8fc-edcbf17d178d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "472b445a-193c-4bc2-9027-9dd7682403b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d408646-05ff-41b7-81cd-b86da533494d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b2d1364-ffd9-466b-98f7-328f40ebc6d5",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ad35a75-8602-4ec8-a0c3-f4f54b15086d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d7ddb07-83a8-4a51-9fd6-51c7aeefe3c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d451244b-3e77-4118-8d66-ca34e466f803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "652b74ff-d8bc-46bf-9adc-a4e736446b51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a61a5170-3d13-49aa-be04-4ca1794e9ec7",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18e5fc2f-0abb-4b93-b30c-bd269b71aebf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bb9a8b6-f1a8-450f-8af0-20154929c718"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43aa3756-da70-4328-bfea-0a138c28097a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a77a5fa-cdd2-4807-9d6c-e191f0d40691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21628ec0-e664-4f48-b83b-9e781b584635",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a72732d1-68d5-4fc4-8425-09ff2438bfe3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "337faa09-b3fa-4d01-9c10-3c189fbbede9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2c2b2f7-3209-4ae6-91c3-c7ffab061c25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe1dd876-0d60-4501-b1e1-4cef285b24db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "775ded17-4855-4b48-8318-8809193046eb",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fc1b923-be58-4ccf-8270-27178c5d67f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11766ecc-ca62-40d2-b2c9-0e360d512fe2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a431138-9a9e-4b95-b039-add25612f045",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaa68938-c646-423d-b44c-6b390d7f07f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5824e870-93ac-4319-aff5-305773a35d5b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16f11ada-268d-429d-9b8d-52a416b64cb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e250803c-fa35-449c-aa15-ec81c30c892d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5e087d2-50a9-4ff1-a6c6-d690f1e1a002",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a788b07-c46d-44e5-b2e7-b5f58d5c556f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5092f21-0a13-4c1c-a669-40737b8fdf4c",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbcf5c7f-6897-4e85-9d72-b6bad10c8edb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b0df23f-1ac4-48c1-b96c-ade9e4fd4c4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fadf43b-af4e-4927-85c3-8288848864db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e044885-ae76-4b7f-9b2a-d1cb3cf1d47b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "145582ac-0e92-49be-83f2-9ad4cfe802db",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43c0bbb7-004e-438c-b355-c6467fb6d97d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "491ce1e5-24f4-4e52-896c-bd6bce7adf1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3668e8f-351a-44c0-a18d-d1021551a076",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18413197-5a29-4228-a9ed-7e561a9533e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33a1f9bd-6716-439f-8505-5f507a7c5e80",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79088a44-1f9c-490c-bd47-0ef4a7d9d0f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4356e4c0-0d7c-4454-9310-a86378d58fd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "807138c3-3743-4536-b22d-3ad583b485ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e846e82-ae67-4887-a22c-95a5e0c84417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e607bd67-d5ed-4703-9864-f4f22c99fe84",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b42d2bac-3cd9-451f-a4e7-b5afc816bfd5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9609f8f1-2d07-4b06-8008-89f8e6664dda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fa3fe39-26e3-4993-9267-be17303a43ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0729c788-c472-40fd-95a2-cfb0672bc1fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e84896f-a2c7-4e7d-86fa-d1fb4bc9e376",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92784f9b-f1eb-4bb3-bd92-8db51d461faa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93d7dd37-73de-4903-9279-48764fb6e3d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6751e688-e869-4d38-98be-d9e19374ada3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83fc302a-e467-467a-a2f0-f04366d047a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "587f82d2-0225-4f75-8878-fa45500688cb",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b087282b-af27-4dff-9c0b-ef716a86674a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12efccde-4d84-462f-8e9b-1d1c1e7f0077"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05f8b43b-7d46-4853-9ed9-8da1e8578709",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2c14aa7-3442-4f92-b312-efe5eefed637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83b05e38-2a57-4d94-946d-a2fff026c959",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75c9769d-2e29-4d6c-8d3d-80877631b184",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e19211d1-8de5-48b7-bddb-ed73abca2228"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11d43a7c-a1b5-4e6a-8223-137d9a43d642",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b8145ae-b47a-4784-8917-e3abd983a8e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1160b266-69f0-4bdc-9f4e-f70d0b7aa889",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff43fdbc-910e-40cb-a162-10970ac23ff6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38766f92-c0c5-49e0-bb4e-125e455d8f60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6295e84-56dd-40f6-a335-850345975ddb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed752307-0b4f-47f7-99a9-15b02e4535ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efd3e7bf-031a-43c7-a9ff-3b0c11c2a6de",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0a819ec-68c8-4822-b58e-e9dbaef88aee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7d2962a-5d99-4ec0-b2c9-265ccc86e2c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e318f29c-489f-42e4-aca7-f0e299328e55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0178d7a8-3fe6-4c07-b72f-332ae4e9eafd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b0f085f-c3b9-4709-bb4d-1bc39025b428",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "802d348c-8a8c-466b-8571-dcf1178867c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ae82509-a122-4c3a-b72d-f1e52a4e8607"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38bf968a-19fc-4267-a652-0094a30fa592",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4513f61-4881-40c4-bfa9-aa6aa3e3c415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5b6de48-e465-4b8a-87bf-ec41e0c4e3f1",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad1b3ec0-675a-4021-a14e-c73a4df49c4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91a97a65-2e83-4311-ad72-8880df325a13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bf32db7-feee-4bbb-bf2c-31e90b7c3555",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2aecd295-af61-4b4b-b606-133c6a8d11b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3341b97-bf54-4f1d-ae14-1a488e1d07a0",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a90055b-8392-43ea-9bce-f4be92538300",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edde6635-ce98-4c6c-9c91-fc27d88fcbfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "538fc5a7-67d4-4889-87ae-30bcfb8f6b58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d73481c0-7698-4b57-be69-edbd281dfc2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df35b21b-1329-46e6-9507-64acb63a74d1",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58cbd4a0-fbd6-4846-90ce-1cbddb696700",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa007e7b-7a03-479c-8a6a-89498405875e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "571b2bf0-952a-4ab5-a386-72f3ab98a4d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6ca3a13-9870-457e-a723-22fc70511095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb0ea604-2447-4941-9c3e-3d087d554e6f",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13b08cc7-d622-4b91-8d15-50bfac9fa9c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "994efdf5-e276-4d68-82a8-7e1c1af5d61f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1dcb6e7-812a-480a-84ef-77db7d2f662d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41eefab5-a09b-4c9d-a081-7af4de555720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a93c0e5b-bfb3-4801-8155-adc7c1e1e36b",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d042fe4-21a6-46ee-87a5-e31dc99c955d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f6c9aec-9823-4efe-a689-3ebcad388ab3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4906c44-034a-4de3-a45a-9a1fb23ec395",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bcde799-ce53-4672-bee2-85d156843a22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a27c94d2-faf2-4d6b-8cc4-f1522facd973",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bee12fe-a56b-4299-ba0e-ac9de4cfa90f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6109ae81-12ad-4c1f-aecb-ee5e44a04edd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d2ec61-158d-4bf6-b2cf-2a641141841e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8c9c040-f18d-4d53-ad99-702273b655f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b679a99a-3f37-4c1a-aa15-85d425154e26",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77e71e2b-991b-4614-97b2-1527ea834f15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06483d78-bf1a-4a5b-b6a6-c830ed606f29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c8d22f6-6447-4b65-b0a5-fc2b73fa3b84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10cd895f-fafc-4850-8b39-8619dc5c78a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7f785cd-7798-4bf5-ab30-7874ca2ba8ba",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e5fdddc-daf5-4446-8708-d5364b13b1f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa6de1be-65bc-44b5-ab2f-fdce38f74f17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b28bb36c-15e3-4563-9cd5-bf84efbc515f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "314798e9-0b41-4342-8a1b-3559007a36e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aed3d32-6b20-4432-8878-82835eecad6d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "799abcd6-4c35-438d-94b1-66b15113209c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d82184f7-c0cd-488d-baba-aec7bdbab466"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78f25b0c-5047-438e-89ec-c84ea5b9d8e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bbae467-1480-4d3a-a410-044713b26796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e1bcd01-a7e9-4ba5-9781-650bab240ae3",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67680873-2487-400f-912b-9d54f304c569",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee8a092c-5761-46f0-afe1-38dd9298e45e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4c199a1-1087-4e73-9448-5b1a9591d079",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cac3efa-6798-4c69-869b-3c76b37c692b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5c52b94-b5a0-4938-a246-b7f69320bfa7",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aac79ac-1049-42f1-86d4-dacf7b9a173c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1671bf90-e7c9-45df-a683-b8545edd47c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebb7cbb2-8328-4000-89a7-51bc168bec87",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86702596-a9f8-45d2-b810-2b7138c38f84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cc41415-7a4f-414c-97e5-63355d4fc28d",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bbea491-5f8a-498a-9c18-7e5955352ef4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57b2e9c7-9feb-4877-860e-d84c4eda08e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec2f7b14-3020-43fd-9801-814f0db5d558",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afb6b264-3425-4347-bb51-64b4c1997b56"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5eb0bf85-306c-4f7d-96ad-13c3bddca577",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0e381e7a-2b30-48f6-900a-ca64d79d850b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b72c49c-4008-4205-9788-1a65f2780cd1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b58f26b0-090e-4b6e-91ac-603fdd04a257"
                    }
                  }
                ]
              },
              {
                "id": "3770133b-ad5b-45f6-ae93-cb0d185817b7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "258fa7a7-83f2-46cd-9daf-237fb5df89ac",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ac5fcf4-8b27-4cbd-b60d-c2728d868a06",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "35e84e01-c77e-4587-9615-d0b35084add2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10ba9a09-1380-4599-b035-0f25c8100607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b300acca-ff34-4d91-ac49-3177224559bd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "48b5dde0-1087-4e68-91cd-cb3263ec0ce8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d930468-9e1a-4a61-93f6-468f7a2d864f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "274c258a-2558-4060-8d25-64fb0b2ab945",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7ccf0ae3-bd72-4f59-b0fa-4955cf7a6b85"
                    }
                  }
                ]
              },
              {
                "id": "45c9b137-6ea3-4c11-a41d-8b037c509c6e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "b5361a26-4203-4373-a3a9-72d238fd080f",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cecd584-31c8-4bff-a8ad-c17e07d716be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "c63cd491-a654-4768-943c-84c71da198c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3189b6b3-dcda-4f97-9127-5b735b28a023",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec3c2e75-9a2a-49bb-be92-c53116640c3f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "478c67be-2848-4564-9c13-74b4a084999e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0efee118-d2d6-4747-994f-eeb967b1b58c",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "832d0181-513d-4348-bd9f-bda86fbd0ea5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3878c947-c0c4-4c1d-9ca8-0de3b8af0a66"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "509f5a9b-5a3b-4d76-9458-9a734cc7ff3a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1435120b-9c4f-439f-9d4e-df630bc4bb87"
                    }
                  }
                ]
              },
              {
                "id": "79b4a814-7f6e-4205-b0b8-8f1f1481276e",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "afaba989-0019-4172-ab06-0a85f79883a9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c41f1a5a-33ca-45bc-a9a3-b9d5b2ab6960"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "45d3f4e8-aae2-474e-b1b8-e85cb71b3b6f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8337e646-53e1-4a66-bae7-7b85186b25a1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e5e4d379-0808-4132-b134-1ecccdbccb39",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "71839596-85d1-4248-ae88-209a001696bb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9337190b-f70a-4e4c-9a9f-54fea2c3b48c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f04750c8-95de-42fe-b2a1-15294571d648"
            }
          }
        ]
      },
      {
        "id": "106874fe-5011-4c73-83d7-4ee0e6454c39",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "88e65fc6-60d2-46f4-81ac-730a715a7c60",
            "name": "Negative Testing",
            "item": [
              {
                "id": "84e91135-a334-4cb6-a8d7-62fe42891225",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f4d805f7-ae8d-41ae-824b-32d4779e965b",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc3a5960-24f3-4139-bbfd-cabf31f5ec4f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "113538e2-1ab2-41ca-be2b-df7944560840"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efeaa189-7c62-40ff-8545-fc3ce559f1cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6bbd4373-252b-4d65-aa88-b80ae1bee2ca"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "af7b6a99-f7a5-48da-a679-03d47d88079e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7b8d63bb-de3e-4da2-842e-fda14c89dea9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b8e108d-d380-4779-af59-4bf8edb37a09",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2f40f38f-c112-458d-a3be-e301ab6d11ad"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b72cfe6a-0ce7-4bbd-9607-3c52d90aef04",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "91f7bb14-d129-4a56-a425-6ddaa9a1c211"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "63fbd726-8bfa-4f59-bef2-470be12da0d9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "90c729a6-34b7-4add-af7f-645acddced33"
            }
          }
        ]
      },
      {
        "id": "ea3b5d5a-ed36-4e1a-84f1-ff0881fc4169",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "ca6a8fb7-564a-4343-8d22-08a10920dc97",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8089adb9-babf-43b7-83ca-077e8180a9ce",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "581ac10e-7565-4222-967f-1611283318c3",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05d4786c-690b-4b40-a666-c8b0039c169d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cf79cd43-f06a-487e-a724-5b9208ceeef7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "329f7820-2767-4346-88a7-3698a0acaba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "001e4614-d5af-4548-9fcb-7af99db1269a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c163913-ca1f-4731-a3dd-27b865287bed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e892f608-f295-4ca1-a6f2-078f65baed79"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bd889ccb-12fb-4ce1-be18-be60e41d9c79",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e5d98f82-6513-46c4-af13-9a0a030ac0b2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "608a86d2-4f40-4f8f-bfe5-6b3f4373be43",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9ac99ead-bf3b-4d75-9b01-1669635de97e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ff0fe652-a13f-4d8a-9e9b-12c4e7760482",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b09437df-2087-4466-822d-05dc890c38e8"
            }
          }
        ]
      },
      {
        "id": "355e3175-dd36-400e-aae8-6e4792671bd7",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "058a1a61-2c79-4015-bc4e-cd9e52ea5dae",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fda9ff5d-ddae-4f2a-b418-ac94c2106578",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a7fcfcf9-e784-4f79-9f0a-7a04b6b37a8c",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b80f568-fe8c-48db-95b8-94772a71ab02",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "48c304c8-46f3-499a-b5e8-e28d294de794"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1fdf390-9527-4b42-b5bb-ff2cf108b4ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "75e6e556-b17e-4304-9f1e-ed9629189d79"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c4ace9da-5779-4f87-912a-28fb1d35ac97",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d0edf3e3-ccf4-4013-b70a-2b235a8b9b22"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "77cf045c-f322-423b-98b8-25cacc95312e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fcfd132c-c911-421f-9c85-224808401880"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "21003290-84c1-44ed-98aa-e9d8032acb4f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "eb7197e8-e85e-4d6f-ad26-deb760ac5f09"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "03e269e0-227f-4639-b5a4-33891d5b3637",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2afd2a6a-7191-4410-9a1c-441a4087c2e7"
            }
          }
        ]
      },
      {
        "id": "dcc413ca-9c3e-4c6a-8f6a-da55b83b8e70",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "18af2fc7-13c2-4b9c-b9f6-16af36d838c7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9d24b0fd-f08e-4373-8f6b-1d867ebb238b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "4b720ae0-ebeb-42ae-9575-c128c756dd58",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "16261c09-1f76-4c1d-8cf9-fd2c11b7ec06",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4bb5f556-49c8-4112-9b30-2cf8c4f624ea",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 104.82539682539685,
      "responseMin": 20,
      "responseMax": 734,
      "responseSd": 89.42861650634732,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1713400481574,
      "completed": 1713400516646
    },
    "executions": [
      {
        "id": "c348447e-e293-4947-9acd-8283bb9ff423",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c2cef90e-f02f-42c7-8f74-7d510e9366af",
          "httpRequestId": "48b15174-3925-43b8-b0b6-bb4b494333eb"
        },
        "item": {
          "id": "c348447e-e293-4947-9acd-8283bb9ff423",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "286b6719-3428-43f9-a0ce-341a04fc5ebc",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 0
        }
      },
      {
        "id": "7143f388-83b0-475f-a219-5d952a0f29fc",
        "cursor": {
          "ref": "62d1702e-8dab-40e9-affd-9ed013fb219b",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5bfea85e-989c-428c-a9cb-e1643da03177"
        },
        "item": {
          "id": "7143f388-83b0-475f-a219-5d952a0f29fc",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "1d75f9e1-a826-4a9e-a938-746e6fc314b3",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 0
        }
      },
      {
        "id": "dd8976e6-e583-47dd-80de-93315bf44862",
        "cursor": {
          "ref": "afe17784-365f-4dcc-91db-7f0e47428d8c",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "fb59bff5-c81e-4751-998a-e3188362c12b"
        },
        "item": {
          "id": "dd8976e6-e583-47dd-80de-93315bf44862",
          "name": "did_json"
        },
        "response": {
          "id": "757ec21a-c4ca-4b17-a3bf-69d76d07c1e0",
          "status": "OK",
          "code": 200,
          "responseTime": 250,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ce10cd4-b985-4bca-8a69-def0cdda04e7",
        "cursor": {
          "ref": "c1637f17-8427-4e68-9081-96465e743961",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8e29153f-39c4-4347-983f-8450938e273a"
        },
        "item": {
          "id": "1ce10cd4-b985-4bca-8a69-def0cdda04e7",
          "name": "did:invalid"
        },
        "response": {
          "id": "3b03b93a-e65a-46e4-9db0-d5ae7242c789",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 160,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ce10cd4-b985-4bca-8a69-def0cdda04e7",
        "cursor": {
          "ref": "c1637f17-8427-4e68-9081-96465e743961",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8e29153f-39c4-4347-983f-8450938e273a"
        },
        "item": {
          "id": "1ce10cd4-b985-4bca-8a69-def0cdda04e7",
          "name": "did:invalid"
        },
        "response": {
          "id": "3b03b93a-e65a-46e4-9db0-d5ae7242c789",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 160,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "665db111-7a5a-45be-9f49-c056f807a4d4",
        "cursor": {
          "ref": "a8a239a7-f5ad-4787-9acb-1d1d2b460d69",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "04b2a8c0-5a1c-49f2-949a-ddce51a60471"
        },
        "item": {
          "id": "665db111-7a5a-45be-9f49-c056f807a4d4",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "23b7358a-7514-41b0-ad76-c375a513f832",
          "status": "Not Found",
          "code": 404,
          "responseTime": 188,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "645a989f-04fd-414c-b185-43e25ceaa6b4",
        "cursor": {
          "ref": "df948dfe-6f56-41a1-9638-0de816f24d6c",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "7ba50c33-25bb-4d20-bd60-ef89af4d0e16"
        },
        "item": {
          "id": "645a989f-04fd-414c-b185-43e25ceaa6b4",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "8746ca50-93b0-42ec-8864-0b5697b1de4f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 75,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1708c864-c3c3-4ce7-a5ff-2fa7ebae133e",
        "cursor": {
          "ref": "054e7426-d61e-443b-b857-24886739e383",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "84946a5b-aa25-4ae0-a1af-523a38b07d6b"
        },
        "item": {
          "id": "1708c864-c3c3-4ce7-a5ff-2fa7ebae133e",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "c9e04d85-b40e-4b39-8397-637335765f68",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 70,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29eae1dd-f573-41bb-a370-e66af47cd299",
        "cursor": {
          "ref": "c694fd86-c9c2-4c35-870e-0e056dcfacdc",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "aeb6059b-4bd3-4a27-b85e-58147121b0af"
        },
        "item": {
          "id": "29eae1dd-f573-41bb-a370-e66af47cd299",
          "name": "identifiers"
        },
        "response": {
          "id": "712d8291-6433-4966-9a21-5dbaa687117e",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "251f0681-5994-40f6-a833-7d7d56c707c4",
        "cursor": {
          "ref": "891deca8-6354-40d0-8dcf-ce2436142f7a",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c1f97302-db19-44f0-9e34-4a4f2d863c9f"
        },
        "item": {
          "id": "251f0681-5994-40f6-a833-7d7d56c707c4",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "922c46d5-69a4-404c-af23-d3f596c7653e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e09bcf5d-0d85-4f72-b093-76fbf370a7fb",
        "cursor": {
          "ref": "82386847-c3fe-41b7-bbed-0c33b9a4b562",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "fa92eb61-d074-4761-a0ff-04557819160a"
        },
        "item": {
          "id": "e09bcf5d-0d85-4f72-b093-76fbf370a7fb",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "132af3b3-bf20-42d2-81ab-2801ab93c7a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "360b7867-39b4-4e0a-a761-dc0bd4087739",
        "cursor": {
          "ref": "d488d6b1-efa9-4d79-9aae-bbe801ed06e7",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "31d4aa35-8a66-451a-aad5-5132677c274d"
        },
        "item": {
          "id": "360b7867-39b4-4e0a-a761-dc0bd4087739",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "5d8979c5-7c14-48b9-b207-9680ad637c98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24f025df-59b5-4775-a4a6-124e00f4b362",
        "cursor": {
          "ref": "d73654c4-0287-462a-98e2-5cf1ac994c4f",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "3c728958-739f-4259-b647-0c714b74bbeb"
        },
        "item": {
          "id": "24f025df-59b5-4775-a4a6-124e00f4b362",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "0ce979f5-5bd4-40f1-afd9-fb20f26bd51b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36213a8b-532c-4c52-a1e7-cc5a183dc6d0",
        "cursor": {
          "ref": "6d4505b2-becb-425d-876a-e05818794ab1",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "74531f13-c85d-49ff-ae8b-33ff23fbe3bf"
        },
        "item": {
          "id": "36213a8b-532c-4c52-a1e7-cc5a183dc6d0",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "c6a1703c-343e-4399-80c6-4fb8b36cb008",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5206e441-584c-4a9d-b403-cbec73a1cf50",
        "cursor": {
          "ref": "45e3bc5c-7a1c-4239-b2a0-28fda75e86c5",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "7ee0c3f4-658f-4157-be79-12f8d898fe71"
        },
        "item": {
          "id": "5206e441-584c-4a9d-b403-cbec73a1cf50",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "d0fcbacc-6c5e-4ede-b07e-3e0dd7e4e18c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0101b8a-0b7e-4abe-b05f-2c778918874b",
        "cursor": {
          "ref": "8257f160-6a2c-4183-ba10-fab1eb2b74d9",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "64a7e2d2-e287-42c1-83fe-6a5ad7b9d101"
        },
        "item": {
          "id": "b0101b8a-0b7e-4abe-b05f-2c778918874b",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "62698b4e-e2ed-481a-bb4a-00675da82775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "181add80-f33c-4d16-b033-5421b5f4486c",
        "cursor": {
          "ref": "308eb85a-16d8-4f76-8f98-0d6eb3b9c9ef",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "02046a94-d727-43dc-bc7d-b14a5c880811"
        },
        "item": {
          "id": "181add80-f33c-4d16-b033-5421b5f4486c",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "75f3a81c-dc0c-4acd-918f-ad819ea82330",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "359a4832-eae2-42e9-b30d-105e5ca87ff8",
        "cursor": {
          "ref": "52aa0bf7-d0eb-45aa-b12e-9fee9f81f727",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "7f0b59ce-1fa1-43a8-94af-5691ab98c161"
        },
        "item": {
          "id": "359a4832-eae2-42e9-b30d-105e5ca87ff8",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "d3fe7015-6379-438a-be1d-644555854223",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05a17418-f1b2-4c06-a75c-bee4732b0b9f",
        "cursor": {
          "ref": "a25a3fb5-de93-4f31-9121-dfe0143190f3",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "50521067-41f4-434e-9e19-cde8686d422c"
        },
        "item": {
          "id": "05a17418-f1b2-4c06-a75c-bee4732b0b9f",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "4f8595ea-0bd8-4aa9-91e8-6ad03d94795a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62c29c9b-f0ab-4d59-afa6-200191b50939",
        "cursor": {
          "ref": "f09e3e41-83c5-4ce9-b1a2-542436f2456b",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "f838ccfa-6c1c-43f6-80b5-f5ef3c0e2f1d"
        },
        "item": {
          "id": "62c29c9b-f0ab-4d59-afa6-200191b50939",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "4ee12ec1-e6ee-48ec-9150-d5e32bc89bdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9921fb4b-d428-42b9-9d9b-73da543c973d",
        "cursor": {
          "ref": "e54c0282-0ce4-4334-a2e2-ac0936d763f1",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "037c6973-ff31-4642-91e7-3d64a763362a"
        },
        "item": {
          "id": "9921fb4b-d428-42b9-9d9b-73da543c973d",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "b6ca968e-9e54-4f2c-bb79-9f7648feee7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ee9a9f8-ae33-4cb6-ac85-cc315f692a44",
        "cursor": {
          "ref": "b2725782-1b91-4b43-a0b4-a5d82daae91d",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "4be8f71a-85d9-483a-83a6-d598571a1e50"
        },
        "item": {
          "id": "4ee9a9f8-ae33-4cb6-ac85-cc315f692a44",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "054a9410-facf-4cd3-bd4d-5d5bf4bfd8fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bca322d-f7fa-4402-a35e-a2a111a23f6c",
        "cursor": {
          "ref": "645d0a15-68fb-40fa-ba7a-b6df3fbd769b",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "e23d0d59-5744-4fbc-b4bb-a4c6d9d80e05"
        },
        "item": {
          "id": "8bca322d-f7fa-4402-a35e-a2a111a23f6c",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "2453d2cb-c708-4b83-81cd-78b9609550df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3631f61d-a079-4796-b0fa-e72270b7a949",
        "cursor": {
          "ref": "dc48bf24-0418-4d7c-bdca-26ea95e69a41",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0e344010-ed16-43b6-b3bf-763b59601941"
        },
        "item": {
          "id": "3631f61d-a079-4796-b0fa-e72270b7a949",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "3519e2ed-1803-4959-9c6b-f008dff68c23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fac16c17-02cc-4224-b2b5-818b3cc172fb",
        "cursor": {
          "ref": "ae260d70-fba5-4f50-8c40-903261e85c98",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "5e09b307-dd5e-4553-a4b6-e88434a90c7c"
        },
        "item": {
          "id": "fac16c17-02cc-4224-b2b5-818b3cc172fb",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f55d2409-4e6d-4653-9fde-94a67abba1dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aea197d1-c18e-4565-a260-4cd16d03c6da",
        "cursor": {
          "ref": "c247f422-4a3c-4bd5-8e98-927f4b3ca976",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "51d7b58c-2e5a-426e-b328-06e97e302dc5"
        },
        "item": {
          "id": "aea197d1-c18e-4565-a260-4cd16d03c6da",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "04558380-6b64-43f8-a8d5-130b77965883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4125fc14-1bcf-483c-97ab-d9e96b6ce80d",
        "cursor": {
          "ref": "61abadde-bf1c-4808-9c3e-92449e9bf853",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "cec21d69-5e58-4ff9-88ae-91ffdc5d2715"
        },
        "item": {
          "id": "4125fc14-1bcf-483c-97ab-d9e96b6ce80d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "0636f216-54ec-42a9-85a4-47477b782c62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ced4c33-15fa-4f40-973e-7f52a9a70db5",
        "cursor": {
          "ref": "18889dae-fef5-4896-9d3e-c45540ee3416",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "9e4ebf34-3e95-40a4-9d39-471c0cb31a3e"
        },
        "item": {
          "id": "8ced4c33-15fa-4f40-973e-7f52a9a70db5",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "cb6a4379-7131-4ed4-8e10-c1d5bb39d41c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18e93a8d-7fd0-4c0c-aa63-0b4c89d1752b",
        "cursor": {
          "ref": "539e43d3-caa5-4415-8214-fa3da81dfac9",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "85d4dd60-39d4-48c7-a0d3-321b9d370b6b"
        },
        "item": {
          "id": "18e93a8d-7fd0-4c0c-aa63-0b4c89d1752b",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "0d9cda84-3762-488c-8cc2-8a0a00b7b714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6175062-02a2-4830-b7b2-c11eeaf9892f",
        "cursor": {
          "ref": "9a4f4c3b-6c25-4053-967d-a7e6fe1debfd",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "b0d30c10-ea71-438f-b7b8-a97b124c23ac"
        },
        "item": {
          "id": "c6175062-02a2-4830-b7b2-c11eeaf9892f",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "b45a07be-8f2e-4356-93e3-ec5788d0d583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f46ddfad-806f-48b8-a393-3f157cb59487",
        "cursor": {
          "ref": "09225e8c-0136-4c8c-ac88-3b820f9f69af",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "67188686-198d-41af-b539-cbb6652714e6"
        },
        "item": {
          "id": "f46ddfad-806f-48b8-a393-3f157cb59487",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "6a44de7f-78fa-49b4-a039-42fd086ddba8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51add920-a28d-49fd-9e33-933d387e6c89",
        "cursor": {
          "ref": "58907d1c-7b8b-42e4-b6d5-b4578daeacca",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "3b680e33-8588-4f3e-9ccb-6d61180ef039"
        },
        "item": {
          "id": "51add920-a28d-49fd-9e33-933d387e6c89",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "33f170a3-e7b4-4157-b253-6a06dd600473",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18848bb5-d274-4ee4-942e-fb04e7e6da8b",
        "cursor": {
          "ref": "a9e5b22f-38cf-4757-b692-b54d9271d492",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "dccb2772-7c1c-409e-8cb2-f8c23f4e6460"
        },
        "item": {
          "id": "18848bb5-d274-4ee4-942e-fb04e7e6da8b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "27c89bd4-2cbd-4737-a2ff-7894d475a6f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1667a950-154c-43cf-b82f-0a4be1c29d7f",
        "cursor": {
          "ref": "9a3cb3be-54b0-4ab5-9f4f-0c61db946731",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "e736637c-6cb0-4091-a950-9ce732ef5f33"
        },
        "item": {
          "id": "1667a950-154c-43cf-b82f-0a4be1c29d7f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "4a21878e-ee4d-4334-a0c2-a9a1c5d6995c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d99b5d65-16ef-4ed6-be44-14d5e7f0b7ba",
        "cursor": {
          "ref": "39fcf143-fbaf-4a10-a78f-3d69b649f059",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d327e0f6-6873-46ee-9bd2-46df56ddda60"
        },
        "item": {
          "id": "d99b5d65-16ef-4ed6-be44-14d5e7f0b7ba",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "309d7026-34b8-47b2-bfee-8264857e454e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "524a32a7-66ee-4852-8bd8-ecad0d733861",
        "cursor": {
          "ref": "32ebe82f-c261-4c1d-ab9a-6b7a59157264",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "e1cc944b-e5d2-43c9-aa0f-3a7b637c6acc"
        },
        "item": {
          "id": "524a32a7-66ee-4852-8bd8-ecad0d733861",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "ffb3619a-82c1-404d-8c5d-75ed37980014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29558874-2347-4ae3-aec2-00dcf9f83557",
        "cursor": {
          "ref": "58ad1f4e-e82b-467d-be31-d4826d6fba2f",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "2dcf4da4-0da6-41dd-9d3b-1cbe7d52e1e6"
        },
        "item": {
          "id": "29558874-2347-4ae3-aec2-00dcf9f83557",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "55d8795e-e2f5-4b06-b73b-2b7ab5000c9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cd96a1e-2d67-499c-9272-2a54d105097c",
        "cursor": {
          "ref": "8bd59894-9c91-4592-8858-01f1db81cc9a",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "58614d24-cf7e-4373-9042-f82933cd2a46"
        },
        "item": {
          "id": "4cd96a1e-2d67-499c-9272-2a54d105097c",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "186ab887-793b-4d5d-afe8-59217b42e281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a0d39d7-53ee-472a-84dd-5cf9cc8ee3fe",
        "cursor": {
          "ref": "3c942c7b-c8fe-43ff-854b-f414f46e65c5",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "0663d5b8-d34c-487e-a912-4e4208372bf0"
        },
        "item": {
          "id": "9a0d39d7-53ee-472a-84dd-5cf9cc8ee3fe",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "bf391511-9147-45de-8338-337f91376c4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7146ac4-bb25-44db-9801-2e102061b637",
        "cursor": {
          "ref": "6ac4c1c5-3808-4c50-abd8-743536ac891c",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f9dcb15a-dfe5-41d1-8d3a-39eb1562101b"
        },
        "item": {
          "id": "d7146ac4-bb25-44db-9801-2e102061b637",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "f652ad77-8468-4019-b0ea-b9408d12d8f2",
          "status": "Created",
          "code": 201,
          "responseTime": 734,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "398e56eb-dfdc-496c-8a6b-149f600d7f12",
        "cursor": {
          "ref": "a2159ac6-69d8-45d8-88b4-5099fba143ba",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "2cec6450-dc57-4f87-a847-3c8472725a55"
        },
        "item": {
          "id": "398e56eb-dfdc-496c-8a6b-149f600d7f12",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "62c434fa-eee0-4b92-aeaf-7de98c2b414d",
          "status": "Created",
          "code": 201,
          "responseTime": 345,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "99441e0f-b89c-4657-9590-2ea287489493",
        "cursor": {
          "ref": "7e003318-ce01-44c3-8a67-ed940f7a130c",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "94dda3ee-619b-427e-8e9a-9e0b00efce5d"
        },
        "item": {
          "id": "99441e0f-b89c-4657-9590-2ea287489493",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "edad698c-7d71-4bd3-b2f2-c6936c4f6860",
          "status": "Created",
          "code": 201,
          "responseTime": 334,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "fec41ac8-2c44-4ac5-a6d8-5bc2ca6c97eb",
        "cursor": {
          "ref": "59450e8c-face-4279-bdf4-4b0398c01a97",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f65a4c97-25ca-4a03-9ea3-d6c13e118b27"
        },
        "item": {
          "id": "fec41ac8-2c44-4ac5-a6d8-5bc2ca6c97eb",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "f34bc8ca-6d74-428e-a01f-11a7f6214d2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d8d7b84-3b47-4145-9ad1-481152fa157c",
        "cursor": {
          "ref": "57020461-5f00-4f9d-9cab-4c63aeec1826",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "fc1d2e54-06ca-4016-9fe5-19af3b119243"
        },
        "item": {
          "id": "5d8d7b84-3b47-4145-9ad1-481152fa157c",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "94a64b78-6261-4128-ad26-076fdea7612c",
          "status": "Created",
          "code": 201,
          "responseTime": 341,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "2b379f44-0f97-46f3-8397-11b6ca981f19",
        "cursor": {
          "ref": "05f617be-0e92-4ed4-b74a-380f2023bbb3",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "2dc7aad7-6ed0-4b35-b0ad-3146571a9b86"
        },
        "item": {
          "id": "2b379f44-0f97-46f3-8397-11b6ca981f19",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "e1f04b00-77a7-49de-95bb-fb2c324cb9a7",
          "status": "Created",
          "code": 201,
          "responseTime": 335,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "745e9e9a-83a1-4e56-98da-5f074827813f",
        "cursor": {
          "ref": "30a6fe45-3f99-4230-ab39-7d970c2f81fc",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "6f5912d7-e1e7-4525-aafb-c6e84179d5fe"
        },
        "item": {
          "id": "745e9e9a-83a1-4e56-98da-5f074827813f",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "59a9b43d-d773-443d-b737-3ba4602f8f8d",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "096b3065-a26c-4ea7-a839-4296997ae4b7",
        "cursor": {
          "ref": "1adca0d7-1553-4f62-937a-0ede7c31363d",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "e65cd9fd-9a32-47af-b036-e14494e5a8f5"
        },
        "item": {
          "id": "096b3065-a26c-4ea7-a839-4296997ae4b7",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "03579817-537d-4991-83d7-6e4f58db2652",
          "status": "Created",
          "code": 201,
          "responseTime": 317,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "0ff40a40-7a81-44b0-906b-984a5dc8e618",
        "cursor": {
          "ref": "eff28691-d9d7-4dfd-813d-43cd982cf0e2",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "4bdfa6cd-1b02-4db6-9061-549920857a3f"
        },
        "item": {
          "id": "0ff40a40-7a81-44b0-906b-984a5dc8e618",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "46abb957-6b2e-4830-b668-cc621c659196",
          "status": "Created",
          "code": 201,
          "responseTime": 355,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "951c852a-408b-4cb9-9675-2f5b8f69d6d6",
        "cursor": {
          "ref": "12a93b7d-afbb-4d32-b429-e69ffcba61ed",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "bf8bd2b7-7e9c-44b2-8494-027883a3631e"
        },
        "item": {
          "id": "951c852a-408b-4cb9-9675-2f5b8f69d6d6",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "7c426219-9de3-499e-b062-251c853ac408",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "042c06c1-70c5-4f45-9304-426fdc227d0b",
        "cursor": {
          "ref": "020f8099-06d8-4ec5-86b1-47ff964d405b",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "0d23dd32-4904-4e18-82cb-07b95426588b"
        },
        "item": {
          "id": "042c06c1-70c5-4f45-9304-426fdc227d0b",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "36c32866-fec5-41a8-9513-6f62f259a9ac",
          "status": "Created",
          "code": 201,
          "responseTime": 421,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "854b159d-9127-4bc9-bc3c-cd1961ab670f",
        "cursor": {
          "ref": "39d64cc9-5cf5-40b6-9cd2-c7393638322b",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "24c4bb04-6cee-4f91-af2b-8c7e2114f8cb"
        },
        "item": {
          "id": "854b159d-9127-4bc9-bc3c-cd1961ab670f",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "8d39ba2d-1fb9-482c-a47b-6e0eb09dde3c",
          "status": "Created",
          "code": 201,
          "responseTime": 380,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "e1c2bded-f854-4e5b-83fb-05ff27d1f01d",
        "cursor": {
          "ref": "2ed0dd57-18a2-46b4-aaf2-2cba280e066f",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "03e57a37-88fd-4746-bb42-be3ae0c1dc45"
        },
        "item": {
          "id": "e1c2bded-f854-4e5b-83fb-05ff27d1f01d",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f6e52ce3-4e61-4e83-afbb-c6a18f845dfe",
          "status": "Created",
          "code": 201,
          "responseTime": 337,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "20addc98-70ea-4cc7-9866-ec81f99049c6",
        "cursor": {
          "ref": "4a697acc-4f36-4474-a4dd-b9b16f2d20fd",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "8da59a6c-1e8c-4ba2-9748-ca1e7e7e083b"
        },
        "item": {
          "id": "20addc98-70ea-4cc7-9866-ec81f99049c6",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "fc8a1317-550a-46f8-bfa4-3d6f0244a0e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f85b7604-ce1c-4a7b-8937-70f33297c68e",
        "cursor": {
          "ref": "c83c84a7-49b4-4907-adbc-364bcc144900",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "1f09eb7e-569a-4953-9017-47fa828a0682"
        },
        "item": {
          "id": "f85b7604-ce1c-4a7b-8937-70f33297c68e",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "8570ac68-2104-4f14-bf1a-0e17d92cde2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6932c2d-1766-4103-9880-5388b1379fe1",
        "cursor": {
          "ref": "696babca-970a-42e8-b38c-56caa3765194",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c6247a77-7a12-4eda-b9ab-6ea82b23547f"
        },
        "item": {
          "id": "f6932c2d-1766-4103-9880-5388b1379fe1",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "7d23f1f9-0c94-4bb6-903c-be59092a2390",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d53b3ea2-2318-4c2d-ae6f-75fc7320849f",
        "cursor": {
          "ref": "349ca4c0-dc59-4eea-93fb-5eff459773cc",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "78715434-604a-45de-b928-64501f5c1073"
        },
        "item": {
          "id": "d53b3ea2-2318-4c2d-ae6f-75fc7320849f",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "a6df32b2-0f0f-4bfe-b432-ccbbfaddede5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cb23bd4-dfeb-412e-bc84-39ae8688b8b6",
        "cursor": {
          "ref": "398d8913-61bc-46bc-9ad0-dc52dab1f1b2",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "0c1db0f3-0294-4283-ac5e-0e21fecc09a3"
        },
        "item": {
          "id": "6cb23bd4-dfeb-412e-bc84-39ae8688b8b6",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "e9fb8c4e-3946-4e1f-9036-1e4416681f37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "973efe97-c1be-4483-af65-2524f2635eac",
        "cursor": {
          "ref": "1e5ccb6c-1834-47a9-b9c1-556666f2e6fc",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "660b321b-389b-40c1-819e-33ecf9f90344"
        },
        "item": {
          "id": "973efe97-c1be-4483-af65-2524f2635eac",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "506e4eb4-8ac8-4989-9257-3a6c9ed1f018",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3181747-0cb4-4991-8450-65868624496f",
        "cursor": {
          "ref": "84a45954-875a-417e-b263-686d3ab86faa",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "9b92c96f-6d65-40e1-b4a2-d26cb91bf446"
        },
        "item": {
          "id": "e3181747-0cb4-4991-8450-65868624496f",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "64f60f0f-bb46-4c65-ba55-9b95941c36bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed72f1fd-89a8-4f3c-9d39-ccfa3b7c2039",
        "cursor": {
          "ref": "32b6459e-8258-418d-a32a-4e4c35c66cf7",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "bb10104d-e395-48ce-9813-fcee53307fa0"
        },
        "item": {
          "id": "ed72f1fd-89a8-4f3c-9d39-ccfa3b7c2039",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "d02a8aeb-7c1b-4665-98ad-0fa4d974f96d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0b4c646-942c-4b3c-bda3-bc8339c54dae",
        "cursor": {
          "ref": "172ca64e-c8cc-4776-b3a4-c1ea09f629d8",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "4c60188a-df4b-4b18-b4af-cd695c15e460"
        },
        "item": {
          "id": "c0b4c646-942c-4b3c-bda3-bc8339c54dae",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "50ef4ebe-f761-43b6-9cfe-20eb122c721e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b5b6f7e-00fe-48d9-8b0b-7e3f8c34174f",
        "cursor": {
          "ref": "a2da29a1-e8cf-414e-b45d-55159aa2b30c",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "397dc381-d5e1-4b9c-81b1-9d0e02b7a215"
        },
        "item": {
          "id": "5b5b6f7e-00fe-48d9-8b0b-7e3f8c34174f",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "0d21e476-6681-42a9-af33-d947644aad56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53e9a3a6-4495-410b-baf0-262595a3131f",
        "cursor": {
          "ref": "0bac81bc-ea32-47df-bb9e-7b13753016e1",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "f3bffb06-988d-414c-88b2-2f95d978f394"
        },
        "item": {
          "id": "53e9a3a6-4495-410b-baf0-262595a3131f",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "da8d0748-7f41-4c97-837f-34b0902abd45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff9a74b5-ffe3-495f-8401-6fa63c70d39e",
        "cursor": {
          "ref": "a38fa4a3-7486-4332-9947-ac0b70032967",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "ee7c8088-a98c-4efa-bf13-54af707de681"
        },
        "item": {
          "id": "ff9a74b5-ffe3-495f-8401-6fa63c70d39e",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "96a114df-35dd-4f51-aa23-3747bfba34e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d04f82ee-62e8-47cf-addd-d6bd785e96af",
        "cursor": {
          "ref": "702bbc5b-7fab-4708-89cc-efd889ae0285",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "1f8fbe4f-38ee-40cc-9885-c69ad1abd154"
        },
        "item": {
          "id": "d04f82ee-62e8-47cf-addd-d6bd785e96af",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "653d77df-6e35-4412-a13b-6253ef6fd4eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e797350-c76f-4717-beac-c196ef16989a",
        "cursor": {
          "ref": "059327da-1750-47d8-a752-664e0d839489",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "0f9034d1-e3a1-4a89-a716-bf745ee05296"
        },
        "item": {
          "id": "2e797350-c76f-4717-beac-c196ef16989a",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "9c138801-4350-4f40-bf2b-bcfd57d2e0f6",
          "status": "Created",
          "code": 201,
          "responseTime": 347,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "e50ed97c-569a-413c-93bb-14afb9a49713",
        "cursor": {
          "ref": "73632432-632f-43f5-bd29-7468b7db71ea",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "ab7a4cd3-7616-4079-b8e3-f654d48ecc76"
        },
        "item": {
          "id": "e50ed97c-569a-413c-93bb-14afb9a49713",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "51fb21ad-1888-42fa-96eb-114ca59d2745",
          "status": "Created",
          "code": 201,
          "responseTime": 355,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "f63d5536-62d0-474d-a8bb-cfa774c7a815",
        "cursor": {
          "ref": "7f79617b-548b-45c2-8a2e-06ed5c377cdb",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "fec2b014-c8ec-41cf-8bbc-1fd96d898d3a"
        },
        "item": {
          "id": "f63d5536-62d0-474d-a8bb-cfa774c7a815",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "5d8a108c-9a1f-4852-8d5a-42e1fd28829c",
          "status": "Created",
          "code": 201,
          "responseTime": 329,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "5163f36b-85a4-42d7-9d60-d7762b09da56",
        "cursor": {
          "ref": "c18a68a7-a6ec-4494-9696-2671f0007da3",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "e1150daa-cf16-4dca-9842-14634446f69e"
        },
        "item": {
          "id": "5163f36b-85a4-42d7-9d60-d7762b09da56",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "d97c8d1f-cd7c-484e-b554-a8165c960f00",
          "status": "Created",
          "code": 201,
          "responseTime": 340,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "9a7db631-d12b-4c0a-b65a-ea24f1900120",
        "cursor": {
          "ref": "c971c18b-7ba3-4a12-992a-53afa623c98f",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "2db75bf3-03ec-49d3-a670-109d0c59e403"
        },
        "item": {
          "id": "9a7db631-d12b-4c0a-b65a-ea24f1900120",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "89e46cf0-9bf2-44b5-ba65-a05282d382a8",
          "status": "Created",
          "code": 201,
          "responseTime": 357,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "1edfe034-adfb-43cf-aae1-740db642e272",
        "cursor": {
          "ref": "69c5e78d-816d-4077-9a64-a674252844c6",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "1c8aa02b-0e3e-42ef-a22a-eec5d2be7816"
        },
        "item": {
          "id": "1edfe034-adfb-43cf-aae1-740db642e272",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "1cc7cf7c-0b6f-4171-a204-f77a498f6c1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d1c6e99-7df9-4584-b004-82e1513aaeb4",
        "cursor": {
          "ref": "5984ee7e-ae63-4a69-a329-7addcaefc791",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "0e3861c2-9c17-416d-b282-020095ca3999"
        },
        "item": {
          "id": "1d1c6e99-7df9-4584-b004-82e1513aaeb4",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "12495310-aa08-4d8c-8bd9-b22807ecad11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2035904e-d97c-4640-90c4-94baa6a1de1c",
        "cursor": {
          "ref": "c625a4cc-a2cd-40b4-bcd2-c30512e53ba8",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "4226c37e-13cd-4618-8473-155ead666b34"
        },
        "item": {
          "id": "2035904e-d97c-4640-90c4-94baa6a1de1c",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "907f88d4-c89c-491c-8fd8-93f20e722e7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9541d6f0-ddf6-428a-a509-4d079bcef5da",
        "cursor": {
          "ref": "3d966dac-60b4-4951-8507-043a530dda10",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "10cde33e-90cb-45b4-b40f-d59972e3a78c"
        },
        "item": {
          "id": "9541d6f0-ddf6-428a-a509-4d079bcef5da",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "4eccdcf2-ebb9-4b13-8007-e88c86ca4a89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddd67567-38ba-451d-b651-a461a70be1fd",
        "cursor": {
          "ref": "7924d862-a9ef-47fa-ad1f-ad82f8a5aa76",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "0000bf83-494e-4f7f-896e-feda48f0b7f3"
        },
        "item": {
          "id": "ddd67567-38ba-451d-b651-a461a70be1fd",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "9a0e0baa-89a1-4a38-b432-7d4d7c73ab16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea22b007-f5da-4017-bfeb-8ff5e2e896ba",
        "cursor": {
          "ref": "37c63412-fe39-4672-9ba1-b6163ce25652",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "dbcada8a-f211-46de-a3ca-4a3069cbc235"
        },
        "item": {
          "id": "ea22b007-f5da-4017-bfeb-8ff5e2e896ba",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "7e911ce7-6a6c-465f-993e-38434bc21bc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32adf2c9-28b9-4c65-9f19-d850c91e216b",
        "cursor": {
          "ref": "b3272b92-984d-4dde-bf37-0ee9c14d3d13",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "105769a2-600f-40b0-9c7a-09de1a988ea1"
        },
        "item": {
          "id": "32adf2c9-28b9-4c65-9f19-d850c91e216b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "d53bc077-d019-4772-94c7-9d23520192ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccca425b-899c-40f2-8b1d-6d193f36da6f",
        "cursor": {
          "ref": "0ab63ada-846a-4921-b2da-d2f6692a2d67",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "76945527-96ed-4cde-8ffe-f4e6f5688790"
        },
        "item": {
          "id": "ccca425b-899c-40f2-8b1d-6d193f36da6f",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "aa53270f-cfa3-409d-ae0d-16e9a6c3d949",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a11f57ab-9f1f-4434-9cd3-e3c52338e16c",
        "cursor": {
          "ref": "c551af5c-8f7d-40e8-9f0f-d0fea376ff35",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "f5732140-477e-4f90-8160-f1ae3e908607"
        },
        "item": {
          "id": "a11f57ab-9f1f-4434-9cd3-e3c52338e16c",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "c62c6354-8043-4b8e-b2d5-3fe67f7bc834",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5e5f0b7-75e5-4756-b5c3-2c8d0757ae1e",
        "cursor": {
          "ref": "32be57f0-013d-4fa7-bd72-8ebbb62f7123",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "c8eaf0a6-3105-4c64-8584-4ad6d249a6a3"
        },
        "item": {
          "id": "f5e5f0b7-75e5-4756-b5c3-2c8d0757ae1e",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "f4b18625-ed8a-473d-bf0e-a25c1e57fec9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c298032c-95ea-4f77-ae45-6b4573629881",
        "cursor": {
          "ref": "802c7fad-ebdb-4031-862e-f813454a9eae",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "c51f0fbe-6a34-423a-ab8f-1aa494f90b6e"
        },
        "item": {
          "id": "c298032c-95ea-4f77-ae45-6b4573629881",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "fac5ce10-4bd1-41c5-b272-673b0ccd2598",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b5b161a-5758-4bbf-b0d1-7b5d5493c117",
        "cursor": {
          "ref": "cc55b74b-b5ba-4343-9f04-9f887544f056",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "80cdc79c-5ba6-4504-818d-5b710d28ec4e"
        },
        "item": {
          "id": "8b5b161a-5758-4bbf-b0d1-7b5d5493c117",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "99717ed0-d918-495b-8ddf-10b7c094993e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e85f212a-bde8-44ee-bf19-17a14063f2b8",
        "cursor": {
          "ref": "2abe7e8c-2d16-4f32-82de-f6a9c44d002b",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "54ef5807-5ef1-46de-a785-4c79f67ae1f8"
        },
        "item": {
          "id": "e85f212a-bde8-44ee-bf19-17a14063f2b8",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "5d21d342-e249-4657-884f-a67557d434c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1830bad-2e86-4076-bc37-dc561a0ebe01",
        "cursor": {
          "ref": "edb68f60-554d-40ee-b0b6-83f9e43fa4dd",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "162bc11a-ad04-4890-ab09-3c1603fbef4e"
        },
        "item": {
          "id": "b1830bad-2e86-4076-bc37-dc561a0ebe01",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "5591224b-338d-40e5-8392-65d4b19f538d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acfd737a-63e8-45c6-8547-f380c6ddc8f6",
        "cursor": {
          "ref": "9ccdb71e-b256-419f-8041-48a1385f56de",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "d4a7ab84-007b-4b9d-9abd-2d8f9d2bfcc5"
        },
        "item": {
          "id": "acfd737a-63e8-45c6-8547-f380c6ddc8f6",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "a1a88f74-f321-46a7-b500-bc214d818a7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51c5e80e-aa97-4395-a1a9-add124738093",
        "cursor": {
          "ref": "0d5a118f-6946-4202-9053-ef023bd0e666",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "22a66953-2dbf-422b-a647-9cf7ab9ba6fb"
        },
        "item": {
          "id": "51c5e80e-aa97-4395-a1a9-add124738093",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "71e8cbf9-0f11-4ae9-9f24-267cfe811866",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29025b73-862f-4b2f-89d6-bf4c535b8fe8",
        "cursor": {
          "ref": "af536bdb-ee32-41d6-81ab-762c32581eea",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "fd1e8433-486b-4182-8e80-cbe82b0a7da4"
        },
        "item": {
          "id": "29025b73-862f-4b2f-89d6-bf4c535b8fe8",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "1031f724-2ff5-4a95-85ba-27b28e26edea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c6ac69e-8a4c-4eb4-bee5-b3726768b5e6",
        "cursor": {
          "ref": "b0b0d1c7-78d2-4d47-9930-4a46f8493453",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "38f0e596-ec63-4747-9a8c-33155b819945"
        },
        "item": {
          "id": "3c6ac69e-8a4c-4eb4-bee5-b3726768b5e6",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "1cdc05f0-f13a-4692-9ce7-d4a53f33b2ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac63c089-cc5b-40b2-a9a9-432f377762c5",
        "cursor": {
          "ref": "1af2327a-352f-44b3-832f-16a4eaabc71c",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "1ef76c56-0beb-4c2a-976b-66dcb9f4fe45"
        },
        "item": {
          "id": "ac63c089-cc5b-40b2-a9a9-432f377762c5",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "0ec56e26-9172-4474-9f00-4f2074726559",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f149c3af-5317-402d-bfd3-ffa38fe2de5b",
        "cursor": {
          "ref": "a3ed769e-9daa-4c7e-bd55-30b1bdc16019",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "9ee1eb96-f805-4e11-97e7-8ae8a756bd44"
        },
        "item": {
          "id": "f149c3af-5317-402d-bfd3-ffa38fe2de5b",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "a4304f26-ce02-49a9-a9ba-a7437a4784c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f22e1ba-a093-4fa0-b48f-0c0eec663779",
        "cursor": {
          "ref": "114e3498-08c6-4285-8c98-3b7b6bfc8e80",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "3eba91fc-a7a8-4334-a74e-1489623e7e07"
        },
        "item": {
          "id": "6f22e1ba-a093-4fa0-b48f-0c0eec663779",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "66eb0a46-8154-4552-aee0-65e73f56904d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01fa9b63-7844-4f97-8cc1-f8dc78fd51ba",
        "cursor": {
          "ref": "50546534-8739-4e77-9fe8-3bfb7a004fb2",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2d993873-21d9-402d-a92d-91c3d57da07c"
        },
        "item": {
          "id": "01fa9b63-7844-4f97-8cc1-f8dc78fd51ba",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "79cd8439-21e2-4eb6-ad86-46c14cf0dfd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10edf307-ad9a-483f-876f-bbba108c3fc7",
        "cursor": {
          "ref": "55c2af3a-2f7d-49bf-85d0-66c8a70d20d2",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "0d1e5a83-b0ae-4810-bf87-7d9828251550"
        },
        "item": {
          "id": "10edf307-ad9a-483f-876f-bbba108c3fc7",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "209ce9a1-aa31-4b34-94cb-5dee2b735b90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e2a41a5-66af-4fef-80b0-1b9f57c5d202",
        "cursor": {
          "ref": "15f30f57-6323-472e-8b1d-4e029414df21",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "c5a81cc3-5e02-45ee-ab63-0ec41e509c25"
        },
        "item": {
          "id": "6e2a41a5-66af-4fef-80b0-1b9f57c5d202",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "82102a09-952b-4ad1-882e-277a88546d9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9953a83a-9628-49f4-a5c0-c5298e5f2ed5",
        "cursor": {
          "ref": "5d5452a7-502d-4d15-8a2d-40437b9f3e9b",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "7c070681-b2bc-4de2-9212-a2fe0242aa9d"
        },
        "item": {
          "id": "9953a83a-9628-49f4-a5c0-c5298e5f2ed5",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "8a4142dd-6091-4aad-a9f0-dae42519e46c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbe7ed79-0026-4035-b846-c26ca1ba950c",
        "cursor": {
          "ref": "d8335947-ccf0-4d47-8cef-f50caf424047",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "5282f6f3-12bc-4930-955d-d354fa6d67a2"
        },
        "item": {
          "id": "cbe7ed79-0026-4035-b846-c26ca1ba950c",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "051376ea-14f1-4d3a-a267-137312562994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f07effd8-08ee-4ea9-acfb-9dfa26634811",
        "cursor": {
          "ref": "ee137733-634e-48ad-890b-eb5c8a16225b",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "627efe2d-25b4-42b0-b11f-80c538789db7"
        },
        "item": {
          "id": "f07effd8-08ee-4ea9-acfb-9dfa26634811",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "ca99199f-a14a-4d35-9b08-cbc0fcd6602a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26993ee6-badb-4942-9b77-fb507758966e",
        "cursor": {
          "ref": "3181dac1-355e-4fce-a4bf-e5275cbca31f",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "6d0c8794-f2f8-4435-a7b9-b1d08a51f0b2"
        },
        "item": {
          "id": "26993ee6-badb-4942-9b77-fb507758966e",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "258a45c3-8110-454b-9866-b3e75ff50a8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cc3121f-8c57-4563-8bc5-690b2768904f",
        "cursor": {
          "ref": "16d46c9c-3bd3-45b0-bd09-6ca42cfb544d",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "7f365ac3-ac5d-4993-ad5f-45ffdec8081f"
        },
        "item": {
          "id": "2cc3121f-8c57-4563-8bc5-690b2768904f",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "98f87558-7700-4e2a-bc11-a2c287da1d78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c383b6a-20b2-4b5a-9c42-05dd0b61da8b",
        "cursor": {
          "ref": "617b105d-60dc-45cf-81cc-92bd018f3b22",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "0e0fec00-d038-47a5-afaf-ee76b636d223"
        },
        "item": {
          "id": "2c383b6a-20b2-4b5a-9c42-05dd0b61da8b",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "2ab4ff73-8c1c-41a3-b9c9-5b038db8e6b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "207f1488-4c00-4396-bc37-e7237ccfa661",
        "cursor": {
          "ref": "b12f1ebe-a194-49fe-b53e-b4ca1bcb8c84",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "67ba6c36-43e1-44c2-86fe-1c68c43570fa"
        },
        "item": {
          "id": "207f1488-4c00-4396-bc37-e7237ccfa661",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "427c8f55-c7f8-4c39-b2aa-0fe5c2b07fcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "146e5e0d-7b0e-4707-bd1c-f3c2b24d2324",
        "cursor": {
          "ref": "27d992dd-7bf0-42c9-8d9c-e61950fc2b7a",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "25f44a4b-4987-4e90-a213-62b6bd37a8a2"
        },
        "item": {
          "id": "146e5e0d-7b0e-4707-bd1c-f3c2b24d2324",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "3c75d4bc-1298-470d-8b0f-ecfdd7abecd1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7f60a3b-d9a1-4c9b-bea4-ab9bec1885a1",
        "cursor": {
          "ref": "5a640edc-247b-4ebb-b209-588c5bbfefdf",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "8a52e502-dc2c-4dbe-af61-48a6d6e0546d"
        },
        "item": {
          "id": "d7f60a3b-d9a1-4c9b-bea4-ab9bec1885a1",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "9d16d9be-14ca-49d0-a9bc-2c5225002b06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "773394a7-2648-497f-9bb3-52140c92b452",
        "cursor": {
          "ref": "40e053ff-3400-49fc-9747-222606ca3c56",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "39508d24-42ba-44e2-8739-ce0acf1b53ab"
        },
        "item": {
          "id": "773394a7-2648-497f-9bb3-52140c92b452",
          "name": "credentials_issue"
        },
        "response": {
          "id": "5a984493-12a1-4d44-8424-e84db3d92a23",
          "status": "Created",
          "code": 201,
          "responseTime": 360,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "305e7543-87a8-4754-9301-89bf509711bd",
        "cursor": {
          "ref": "5d798f2c-efc7-44a1-a9b1-8ea51454a0ff",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "062e7560-67f6-427a-b0c0-eb5680b165ec"
        },
        "item": {
          "id": "305e7543-87a8-4754-9301-89bf509711bd",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "8546e4f9-f993-4a4c-8177-176773712998",
          "status": "Created",
          "code": 201,
          "responseTime": 358,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a221ee18-945e-4cf4-a805-f9c80a0c15ed",
        "cursor": {
          "ref": "e71f3cf9-e943-4e8f-8005-4e222e580d15",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "eafce894-1893-4233-b41e-83d72a2e71c7"
        },
        "item": {
          "id": "a221ee18-945e-4cf4-a805-f9c80a0c15ed",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "ccb35502-1489-4c0e-924a-e988c05b8008",
          "status": "Created",
          "code": 201,
          "responseTime": 336,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4666a03-3639-48d8-82d4-cc923534561e",
        "cursor": {
          "ref": "46c910b3-83f0-442d-adc4-3177108b739d",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "79a9d273-ac96-4a13-89d4-b9b3e8244b96"
        },
        "item": {
          "id": "a4666a03-3639-48d8-82d4-cc923534561e",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "c299a892-9cac-478f-8380-fa11f72f12c8",
          "status": "Created",
          "code": 201,
          "responseTime": 343,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "73dcfc66-79da-4755-a096-7ee81ce2ec2a",
        "cursor": {
          "ref": "7bbc292f-d2b1-4340-9afa-abca82a26318",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "f03d71ec-91f3-4dde-a115-e06b3d13a8c0"
        },
        "item": {
          "id": "73dcfc66-79da-4755-a096-7ee81ce2ec2a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "bf56397a-5a84-48af-a8ba-b90bd0abdcde",
          "status": "Created",
          "code": 201,
          "responseTime": 386,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-04-18T00:35:00.166Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-04-18T00:35:00.166Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "fec59db5-20e5-43f0-abe4-172f6b2fe221",
        "cursor": {
          "ref": "323a7c63-f91c-406e-a104-24efcfdabf21",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "09fc78bf-1673-4db8-b264-c5a8aa658e63"
        },
        "item": {
          "id": "fec59db5-20e5-43f0-abe4-172f6b2fe221",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "5daf259f-ea0c-42bb-b5c5-3f4e33b71782",
          "status": "Created",
          "code": 201,
          "responseTime": 371,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e367e1a-e850-4472-8871-33dd41240d83",
        "cursor": {
          "ref": "93962450-432f-4e32-aa8e-ee131f73ef67",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "6d94d0ff-282d-4153-86e8-7549a843baec"
        },
        "item": {
          "id": "2e367e1a-e850-4472-8871-33dd41240d83",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "5b709b4d-e0fa-4155-b851-dedeb4881aec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "100ea5b7-4d41-40e1-b1fe-51b60b06a616",
        "cursor": {
          "ref": "e8844eed-a9d4-4694-909f-55ee8d7a98db",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b258a33b-3514-41f5-9c52-8a8bdab299f0"
        },
        "item": {
          "id": "100ea5b7-4d41-40e1-b1fe-51b60b06a616",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "beceb2ae-9a49-4e27-8b9f-6d08281d2dc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dc3d2e8-58db-4a55-a5e6-c3c43f7318c3",
        "cursor": {
          "ref": "cfa1101f-d39b-4a21-bb99-dc294654e7a8",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "380535ea-2473-4d65-bb36-be1415a07d74"
        },
        "item": {
          "id": "7dc3d2e8-58db-4a55-a5e6-c3c43f7318c3",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "1ee10b55-f9d9-485e-ab3c-ff3e5db22009",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea5d97aa-0f88-48d4-be06-3278916ff9ee",
        "cursor": {
          "ref": "9bd4e6df-2718-4675-a9f4-99c339c5c3b9",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "e5521e6b-27f9-4a96-94d8-98a441f62afb"
        },
        "item": {
          "id": "ea5d97aa-0f88-48d4-be06-3278916ff9ee",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "177b8d10-824d-49e4-a27a-ecbc7de0c507",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cc01bda-835d-44bc-8ad3-8aa3bc3d62ce",
        "cursor": {
          "ref": "ca1dcaf1-400f-4c5c-b4e5-79858ed1f17a",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "f9195732-b0cf-4740-ac53-ca2466413ae3"
        },
        "item": {
          "id": "3cc01bda-835d-44bc-8ad3-8aa3bc3d62ce",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ef3dc10a-79fb-43a6-8f4d-a562f04f5fee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e507dd05-4a08-4bc0-b078-f2f5069f1233",
        "cursor": {
          "ref": "ef696926-31d8-4ceb-8324-bb9beadbf667",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "04100cd9-348f-4573-9860-531f747c51dc"
        },
        "item": {
          "id": "e507dd05-4a08-4bc0-b078-f2f5069f1233",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "5b1293ca-e72f-46af-a866-8d57db4465c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1bcff3b-7443-4b6b-910a-e74e0e9a0109",
        "cursor": {
          "ref": "187d00f5-ec53-4fa7-b827-d15acb016488",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "f87e880b-762b-45a0-9973-79890b2c75d5"
        },
        "item": {
          "id": "f1bcff3b-7443-4b6b-910a-e74e0e9a0109",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "4fb10399-3391-4de9-b3c3-dcd74fd834e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7775acd3-7bce-4f84-b7db-3775fc11dac9",
        "cursor": {
          "ref": "9f25ff6e-25d0-4f88-8eaa-212e12211362",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "082b6fca-f7e8-4060-b5ac-cae357fa1781"
        },
        "item": {
          "id": "7775acd3-7bce-4f84-b7db-3775fc11dac9",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "d7818798-97f3-4db2-87d2-526463e7a330",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "393d6b9b-eaf9-4a36-9a09-b83bc99f5e5c",
        "cursor": {
          "ref": "cdfcff55-b0fe-4fac-874a-8ecf3aa041ff",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "6c92389b-2fdb-4636-866b-972b22bffafa"
        },
        "item": {
          "id": "393d6b9b-eaf9-4a36-9a09-b83bc99f5e5c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "5401be57-3b00-4246-83de-f136456b37c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b011b926-10ce-43b9-b85e-3de187372272",
        "cursor": {
          "ref": "6e7ede9a-1dcf-44ad-ad39-7ac9717d4860",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "b0df43ea-f5d6-49e2-a36f-c88216b74ffe"
        },
        "item": {
          "id": "b011b926-10ce-43b9-b85e-3de187372272",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "a3ed0591-384e-417b-8da5-06a3f8a4d428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af7e8087-a78d-4ccc-b7f9-1c1c0512bc2e",
        "cursor": {
          "ref": "ba37cfcf-f47b-4fbc-b45e-d27e9f0ebabb",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "3a23b8b7-722a-4f64-8356-f96671420094"
        },
        "item": {
          "id": "af7e8087-a78d-4ccc-b7f9-1c1c0512bc2e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6a521d57-bc61-4962-83d3-55bb8cb182db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d00f308b-5b8e-41c3-8744-34d936cfac46",
        "cursor": {
          "ref": "8368e4bf-6a99-4eff-b22c-bba891c44cfe",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "e229dc87-a6b2-4dd2-a8af-dd18ae80db76"
        },
        "item": {
          "id": "d00f308b-5b8e-41c3-8744-34d936cfac46",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "0082b1f6-5d15-4063-9761-f4d31bc7b744",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9babd32a-4b92-48b0-aed2-e73fa000b12c",
        "cursor": {
          "ref": "7ff8faa0-b061-4a03-a61e-1c0e2a4f0b96",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "61307fbd-c886-4da6-a30a-a217fdc8b80e"
        },
        "item": {
          "id": "9babd32a-4b92-48b0-aed2-e73fa000b12c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ceb613fa-7c64-4162-adfd-3f6fb62276c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53bcdf6e-2970-4d2b-8e86-f92eeed418b5",
        "cursor": {
          "ref": "7ebfaebd-2a39-4806-b28a-8b806b0aebf0",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "4e444e1e-97b2-47cf-b9a5-a5d17913e14e"
        },
        "item": {
          "id": "53bcdf6e-2970-4d2b-8e86-f92eeed418b5",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "df0a508e-10b5-47da-9095-48e81750f5c6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 105,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "df674e7f-36a6-4b6b-988f-257132908645",
        "cursor": {
          "ref": "eea666cc-99c9-492c-b2d7-120e073d706e",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "69896975-f8db-4556-bca4-0e3866b0eacc"
        },
        "item": {
          "id": "df674e7f-36a6-4b6b-988f-257132908645",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "4a2e7f6b-e054-4f5e-8a5f-80b302325e1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6a4d47d-47ff-45a3-8418-ba1ec5a66364",
        "cursor": {
          "ref": "3175cafd-3cc9-4b58-8e39-da9ccb544c5e",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "181ced08-2237-431c-b889-339d66716dea"
        },
        "item": {
          "id": "b6a4d47d-47ff-45a3-8418-ba1ec5a66364",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "24e034f3-ba7f-4f1f-90ad-a260c3283362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "234913cb-50b6-45b6-a4a1-5fe03060ec2b",
        "cursor": {
          "ref": "d8efae4b-79d4-4b2f-9e68-fc22c830f059",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "a42663af-6921-4d12-8faa-c1ffc7d432cf"
        },
        "item": {
          "id": "234913cb-50b6-45b6-a4a1-5fe03060ec2b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "13da5acd-a1e6-4e67-9738-402cf7f636b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91456ee9-3acf-49e1-aaa5-e3e1c0c5acf1",
        "cursor": {
          "ref": "b979d897-47b3-409f-825a-99f4015feb71",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "61238ca2-b0d6-42df-b960-4665c978a291"
        },
        "item": {
          "id": "91456ee9-3acf-49e1-aaa5-e3e1c0c5acf1",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "60f33aa1-625c-4a7d-bc12-72c260e84906",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0635a3e8-0326-48b6-ad3c-031fd9660bfe",
        "cursor": {
          "ref": "da153f89-7f0d-4c46-b440-2f82112d171a",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "461e7bc5-e548-46b3-8b54-8f979185d27b"
        },
        "item": {
          "id": "0635a3e8-0326-48b6-ad3c-031fd9660bfe",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a8b9d5b8-653b-4097-9931-c312ff3eb8e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "246add9f-059f-4d75-8ca3-3d9fb5119e73",
        "cursor": {
          "ref": "f1fb86f7-f6a2-47b7-b14a-e96d62e785b9",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "918c252a-f0cc-4f85-9ee2-7e5dfcd1755a"
        },
        "item": {
          "id": "246add9f-059f-4d75-8ca3-3d9fb5119e73",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "45787d09-cc08-4617-92dc-c9fe411a8eee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c019a312-9d08-4a83-8295-4a4d69295756",
        "cursor": {
          "ref": "a033bbb8-f10c-4987-899e-36a7fcc8209a",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "ec12a19a-1f82-406d-ae09-7d22f0f8eee9"
        },
        "item": {
          "id": "c019a312-9d08-4a83-8295-4a4d69295756",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "281529c5-6a6b-437b-b3b5-c272c55706c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82c34a18-17f9-462e-8ff1-d894c443b323",
        "cursor": {
          "ref": "d03e558e-d6e0-48e7-be87-2eec99a67c1d",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "06a209fd-9c5f-422e-a898-228c0c17fde2"
        },
        "item": {
          "id": "82c34a18-17f9-462e-8ff1-d894c443b323",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "2dce2377-13d0-4137-b281-303fe5beba2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7881c65f-783b-4c80-baa9-fd6f6e9915b6",
        "cursor": {
          "ref": "877c2161-bef6-44fb-98fa-e12963766fff",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "a8056f91-62cd-4b2c-a038-ae99f9d819dd"
        },
        "item": {
          "id": "7881c65f-783b-4c80-baa9-fd6f6e9915b6",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "4bb35424-cb65-4c9a-a7f5-06b06d66b00a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f1f2c31-b420-414a-82fb-3efb805ba2fb",
        "cursor": {
          "ref": "336a6ef3-895a-4bfd-b712-58a5b8e07ec5",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "a9bd98d2-ba61-4696-9be9-b0afa1dbecd8"
        },
        "item": {
          "id": "6f1f2c31-b420-414a-82fb-3efb805ba2fb",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8d360184-2356-44a7-ae63-3e3a57970df1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a84adc5f-595b-485e-baa8-8b0e7814d124",
        "cursor": {
          "ref": "0fcdfa1c-69e1-4ef3-9858-2ab9321cc6ac",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "d7e9b78d-2f3b-4d90-beff-50ccc3cca6b4"
        },
        "item": {
          "id": "a84adc5f-595b-485e-baa8-8b0e7814d124",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "3972099e-6ba1-4764-9a32-8cd8ee5a4819",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cb68adf-fea8-4012-9ee5-04d554353ce3",
        "cursor": {
          "ref": "455d5623-d7b3-4e6f-a5e6-0b87478a7dbd",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "a9da8c92-b3c7-4695-b475-915c527f942a"
        },
        "item": {
          "id": "3cb68adf-fea8-4012-9ee5-04d554353ce3",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ad47ccde-7368-462e-b588-55e7a9ba98e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a65bb468-6e27-4362-99d1-5fa02104fbc8",
        "cursor": {
          "ref": "b606d5f8-9704-47b3-94ed-77c7771106b9",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "a28b46ec-bdd1-4ee3-8e32-7405d5a7e9af"
        },
        "item": {
          "id": "a65bb468-6e27-4362-99d1-5fa02104fbc8",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "6dd2ba17-a69a-4dae-91b2-fe36d716b4ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c63cb52d-b434-457d-841f-ed1c94fa044a",
        "cursor": {
          "ref": "881b2dd8-6068-4609-907d-6026140a198e",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "6dded3a5-4eea-4945-a35d-1c35c8e310b1"
        },
        "item": {
          "id": "c63cb52d-b434-457d-841f-ed1c94fa044a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0c558dd2-a350-451e-955f-d1e13fd94ac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1ddf0a1-00f2-42a4-a528-b7c292cb3583",
        "cursor": {
          "ref": "784ef64e-819c-40a1-9118-0045e37e153c",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "8f44a4c7-c3dc-4ff8-a00c-0b8e3125ea10"
        },
        "item": {
          "id": "e1ddf0a1-00f2-42a4-a528-b7c292cb3583",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "da58c06e-8b29-4ad3-9fa7-8faf0dd0d4b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "084058a4-f463-4c61-bfb2-bf0a5c024897",
        "cursor": {
          "ref": "baf47475-92e0-48de-9bd8-aa67ff36695e",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d56e1992-b5a2-43a6-8d69-87509d4641d9"
        },
        "item": {
          "id": "084058a4-f463-4c61-bfb2-bf0a5c024897",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e1f827d9-b354-4fbb-a1b8-80e0f89af49b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2583a8af-76ff-4e29-92d1-2bfb7afe86d9",
        "cursor": {
          "ref": "57155ece-fe64-4956-bdc9-8c743fd2860e",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "222ebc04-c99d-452a-bd40-967ff560bf54"
        },
        "item": {
          "id": "2583a8af-76ff-4e29-92d1-2bfb7afe86d9",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "61464d0d-73fc-4bb7-b45e-07597be32720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1bca077-82ea-47bd-8680-f091b1dfe0c2",
        "cursor": {
          "ref": "ae7c3a8d-9541-434e-a32d-07225e9ab835",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "cfd6a658-6e7f-4b52-be35-467fcd4fa3b7"
        },
        "item": {
          "id": "c1bca077-82ea-47bd-8680-f091b1dfe0c2",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "d9781cf9-727c-40dd-9f24-7095f2b49c4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d525ff22-25d8-4f7d-a6d3-b5644c398582",
        "cursor": {
          "ref": "1163e342-6306-499a-9d51-4cab6fad5653",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "0da26f33-6944-4676-bbc9-0802e2f217dd"
        },
        "item": {
          "id": "d525ff22-25d8-4f7d-a6d3-b5644c398582",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "b8db8aa1-9038-470b-82e6-89f3bf62feb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c652989e-235d-4c51-bac4-941442d05172",
        "cursor": {
          "ref": "0e801135-5115-49f3-b549-e539d54500dd",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "c354101b-eaef-4f0c-8150-299bfe24512f"
        },
        "item": {
          "id": "c652989e-235d-4c51-bac4-941442d05172",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "63de84ef-24d6-4e3c-b1d4-cd68cc2d8699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "648beb0b-2dbd-4776-9268-a22167304eac",
        "cursor": {
          "ref": "286ee96d-4cae-4875-a1d7-360d85094339",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "8c077803-bcad-49dd-a796-8158a28f1ce8"
        },
        "item": {
          "id": "648beb0b-2dbd-4776-9268-a22167304eac",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "a51f2800-a187-4d56-a58a-29a5571deb23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "793d30b4-542f-4155-8fc2-5ab08760f3b4",
        "cursor": {
          "ref": "10bdd3c0-4e56-4122-952f-20bae1cc5024",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "c68f8032-ae2b-4395-ab65-570e7181112a"
        },
        "item": {
          "id": "793d30b4-542f-4155-8fc2-5ab08760f3b4",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "d70c4a98-1353-4137-bafd-4b76ef1bb72a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "139f5049-6a24-4104-a212-f28fa314906e",
        "cursor": {
          "ref": "c20a679a-f3ff-43b3-9452-3616f3097734",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c7591aa0-a690-4b05-aa15-42771854ddc8"
        },
        "item": {
          "id": "139f5049-6a24-4104-a212-f28fa314906e",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "f26f4866-f2e7-4ebc-ad08-b46feeb8e4a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52c5c457-a840-411c-ab6a-30ff8975fef6",
        "cursor": {
          "ref": "28bfb90e-0268-467d-ad55-ecfef5169589",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "8205046b-674e-40b0-9a16-bae3db1e54cd"
        },
        "item": {
          "id": "52c5c457-a840-411c-ab6a-30ff8975fef6",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "566fdd1e-1c71-4375-b2be-107b806f2e19",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e07f438-6c46-4637-81cb-bcc57c027f86",
        "cursor": {
          "ref": "450577c6-151a-41fa-89ac-83bbc65454c0",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "74567792-2cdf-426c-99a1-3698f97de410"
        },
        "item": {
          "id": "1e07f438-6c46-4637-81cb-bcc57c027f86",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "60958cc0-4844-470f-94ba-ae056c70d1db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe783729-3cc4-492d-9d1c-c827f9756522",
        "cursor": {
          "ref": "0cc1d42a-bf06-4c0d-b938-006d0b7da5b1",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "ac8bdaa4-8e44-49d0-ac30-925b329d51ee"
        },
        "item": {
          "id": "fe783729-3cc4-492d-9d1c-c827f9756522",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "7dc9acf3-c033-4848-b41e-2c294031f7db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d514694-18f1-494d-afa6-ff4f1782f26f",
        "cursor": {
          "ref": "8df92382-2c75-464e-98b8-f658539a7d83",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "c73c2743-7de4-4b65-9db5-f3f142b0aa8d"
        },
        "item": {
          "id": "9d514694-18f1-494d-afa6-ff4f1782f26f",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "6cb479b3-62db-4eed-83ac-c253122f692b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "def67472-9913-4812-8500-fd1f910f6f4e",
        "cursor": {
          "ref": "d83b13bb-d021-445e-ad80-523c35269d92",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "8ccf0672-b001-4335-919d-06bc7cd69162"
        },
        "item": {
          "id": "def67472-9913-4812-8500-fd1f910f6f4e",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "002470b6-5662-4f46-be46-397a7a3c47f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72408f1c-46ae-4cf1-b2d7-6ccaec54f8c5",
        "cursor": {
          "ref": "3cc93587-ae83-42d5-8f0c-b4342ab3d7c1",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "933a0d1e-578d-4ee7-8104-ed08459bc9e7"
        },
        "item": {
          "id": "72408f1c-46ae-4cf1-b2d7-6ccaec54f8c5",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "111f544d-521f-43fc-9190-75816e026358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7612ab94-320a-46f1-a0a8-c043022b42c3",
        "cursor": {
          "ref": "92780068-3514-4202-94b9-d63fa08202fd",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "78d4b1c4-6733-43d0-b6f1-85fbca5b467a"
        },
        "item": {
          "id": "7612ab94-320a-46f1-a0a8-c043022b42c3",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "4f0b718c-7eb8-472a-bfa0-56b372c2898d",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "cfc8f03c-689d-4d18-b641-57ae97dd9751",
        "cursor": {
          "ref": "cdd37031-8c8d-4be9-8364-f1dfd6157190",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "cbb9332d-ae7e-4035-be8e-b1afef6610e0"
        },
        "item": {
          "id": "cfc8f03c-689d-4d18-b641-57ae97dd9751",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "f6884bcb-642b-4e2b-8136-180cb75afa54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31cc7aa5-6e45-4052-be2a-84407f6c006d",
        "cursor": {
          "ref": "87466761-3d3f-440e-9252-211fede64c56",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "bbe3a40d-1783-4fa1-9193-e08245c1c584"
        },
        "item": {
          "id": "31cc7aa5-6e45-4052-be2a-84407f6c006d",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "1d798a83-195d-4e39-82d2-372d4f696647",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73ee9dac-ba28-449b-bd4c-a8e8bf31a04b",
        "cursor": {
          "ref": "6176132d-5ec7-4306-9dd3-22afa2c5bfd0",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "c85d6ee8-62ca-4a81-94c4-09b0188ae32f"
        },
        "item": {
          "id": "73ee9dac-ba28-449b-bd4c-a8e8bf31a04b",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "6faceb09-443c-4e60-b3d5-93eef58f08c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff520214-d596-42d9-9aa8-08f624082b32",
        "cursor": {
          "ref": "67eac861-a2eb-499e-b7c2-d3ee6831f4fc",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "b04559cc-1904-4efa-8be7-edfe46bb80bc"
        },
        "item": {
          "id": "ff520214-d596-42d9-9aa8-08f624082b32",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "70cae620-e47f-40c6-a2bf-bbdbb70ba987",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ad264a2-941c-4593-a7c0-49fb7f355522",
        "cursor": {
          "ref": "cbff06cd-f9ee-48ae-8f08-59fb566cf1a1",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "5bb46586-18f0-4667-a29a-56c921d6f588"
        },
        "item": {
          "id": "0ad264a2-941c-4593-a7c0-49fb7f355522",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "87aecfc3-00f3-485a-8728-f911b8685a8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1676beb0-cbd5-4a4d-a950-92b96244b206",
        "cursor": {
          "ref": "940a9a1a-ca73-4427-9f35-f658f8443380",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "96c2afe9-ec6a-4af8-b8d0-c8aff3fd14f4"
        },
        "item": {
          "id": "1676beb0-cbd5-4a4d-a950-92b96244b206",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c663c324-1432-4c15-aaae-56aa14fb0e12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7460d01f-7aae-4112-9b32-1936e5a03ccf",
        "cursor": {
          "ref": "7384b5ca-96a2-4a4d-868b-0088eca6303e",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "39bff2ac-a312-49e9-aed0-46e702b819b8"
        },
        "item": {
          "id": "7460d01f-7aae-4112-9b32-1936e5a03ccf",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "a4870fd2-ae6d-4dd7-9198-6a256b0b686a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a758be45-a941-405a-b562-46a2b58a72ac",
        "cursor": {
          "ref": "24009f4f-8c8a-4a7c-9d98-c7b2757ca1df",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "30c0d1f8-e3a1-4fcd-ad38-89813abffb87"
        },
        "item": {
          "id": "a758be45-a941-405a-b562-46a2b58a72ac",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "732aeb48-0fba-4eb4-8073-93dde5c30d7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "268a8449-79a0-43fc-ae59-49d405ab2d9e",
        "cursor": {
          "ref": "46f4cd24-9f3c-4aa3-a7c5-b71c014c99db",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "54fc267f-00b6-4423-8039-727bb80291f6"
        },
        "item": {
          "id": "268a8449-79a0-43fc-ae59-49d405ab2d9e",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "8bdad0f6-99f1-4935-a084-9b49989bc430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98bef696-c025-4456-b295-09b535e96113",
        "cursor": {
          "ref": "f5f42dd0-0ece-48f4-9469-b4dbaf057c39",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "5c61a511-4581-4f23-961f-3579d75c7335"
        },
        "item": {
          "id": "98bef696-c025-4456-b295-09b535e96113",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "791aa37f-2d30-4232-b4c4-398e67da6c5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6501dc15-3d00-4e01-aff8-10b7c392ecca",
        "cursor": {
          "ref": "eb31fbc7-6e10-4608-b4c7-6e9d66db3735",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "29f95b49-ec71-4022-82fb-5c178e50e9ae"
        },
        "item": {
          "id": "6501dc15-3d00-4e01-aff8-10b7c392ecca",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "6f5c8898-aa60-4191-baf1-cf01193f46fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0d9d0a7-41fe-4c73-a3f8-6ae7d86d417c",
        "cursor": {
          "ref": "b2c7be56-7734-4c0c-adae-0355c646dd21",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "596930e0-7fa0-457a-9854-af2529e55bf0"
        },
        "item": {
          "id": "d0d9d0a7-41fe-4c73-a3f8-6ae7d86d417c",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "c0e707f2-50c4-4eae-83aa-963590efa35b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e36cd2f6-be30-461f-b421-acced281c101",
        "cursor": {
          "ref": "a5203cde-b671-4382-b370-171d00cf86d5",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "462c168d-52e6-4b92-ad4d-79831492c59c"
        },
        "item": {
          "id": "e36cd2f6-be30-461f-b421-acced281c101",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "b101c650-1ba7-4f90-a3ac-f804095782fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc63ba17-ab5d-4dd3-9066-feabfd555806",
        "cursor": {
          "ref": "b8e476af-8fde-420d-ab9e-f91785665259",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "b4c081b7-7598-483c-8b5e-ab1d3cae47d7"
        },
        "item": {
          "id": "bc63ba17-ab5d-4dd3-9066-feabfd555806",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "38748815-5c10-47c7-a935-f1587982647d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3d4ed71-7516-4d2a-8145-041fd1793f15",
        "cursor": {
          "ref": "f4020dec-9488-4237-a910-b71994794065",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "beb592be-3884-4a68-8a85-67003a4023a9"
        },
        "item": {
          "id": "c3d4ed71-7516-4d2a-8145-041fd1793f15",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "e62d1b2c-afaa-48bf-84d9-831177ce81f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d17a55fe-4989-4375-8a7f-9d36e730543f",
        "cursor": {
          "ref": "9b323612-72a4-4ae3-be3e-bfb7425a5819",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "1e7d9e78-dcdf-4195-bdfe-542b0df60d76"
        },
        "item": {
          "id": "d17a55fe-4989-4375-8a7f-9d36e730543f",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "58944a41-3920-4875-8c87-c8fb2d15d34f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed09d142-4fa5-473c-927d-a04a342a1102",
        "cursor": {
          "ref": "2afc9e23-49ae-4bd8-9d4c-e5eeb75e33d1",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "6865bae8-616d-496f-8e95-0e4143d7f52a"
        },
        "item": {
          "id": "ed09d142-4fa5-473c-927d-a04a342a1102",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "45f7e74e-cfab-4a15-8b7b-8f79e8bb981f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cc5f071-62d7-4ed5-8dc0-e9a191caf3bb",
        "cursor": {
          "ref": "c676976c-b4fc-4d2f-8fad-4682c59674e0",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "2848042e-b7f3-4f43-8a94-e41bab28c5d6"
        },
        "item": {
          "id": "0cc5f071-62d7-4ed5-8dc0-e9a191caf3bb",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "468e758b-057f-448c-b5ed-7fc950ff1b39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfa73d2b-00a4-40de-b6f0-18ba0e854e13",
        "cursor": {
          "ref": "d60ab160-0589-4d46-b6f6-b26bbc8864fd",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "25593f64-c9b5-4969-819f-a1e6d69eb83b"
        },
        "item": {
          "id": "dfa73d2b-00a4-40de-b6f0-18ba0e854e13",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "a147341c-c3e6-4b8d-b260-9b5c40429687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00876fcb-f7f4-4781-81a5-8a072832d878",
        "cursor": {
          "ref": "10445fe5-8284-4d4b-b5fa-992cf279e408",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "53999729-9a48-4c04-8201-3faa840f3205"
        },
        "item": {
          "id": "00876fcb-f7f4-4781-81a5-8a072832d878",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "eac46dd8-7bb9-42de-9036-9ad1ebae0be5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b064f142-10b4-46de-95c0-abb6b5c9cb00",
        "cursor": {
          "ref": "65bc5132-2491-48d3-bd6d-0d555c435494",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "a1216a8a-1641-4c1d-8449-0e4868f0efff"
        },
        "item": {
          "id": "b064f142-10b4-46de-95c0-abb6b5c9cb00",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "14c828e1-b923-463d-8e4b-16fbd8ac5ad2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52c61e92-74f9-4705-9253-3a8f3ca81fb5",
        "cursor": {
          "ref": "4cea6b03-f8aa-43ce-adda-e3ac51a91a4e",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "0232dc79-20ed-40ae-a1af-c55e9811091e"
        },
        "item": {
          "id": "52c61e92-74f9-4705-9253-3a8f3ca81fb5",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "7b0ffe21-29bf-4c54-a5eb-d6fa8f523789",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b73ac85-1b25-4f1a-a193-f8274073aaea",
        "cursor": {
          "ref": "02362b86-531b-47bd-9cf0-2bba923666f0",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "b47cde48-0d33-4e0f-9af1-de108f050d16"
        },
        "item": {
          "id": "8b73ac85-1b25-4f1a-a193-f8274073aaea",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "e8e84816-ef05-42e6-ae84-659a609ed35e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3b4e970-6ccc-432d-a763-f3e0bfaf4697",
        "cursor": {
          "ref": "7bf18f24-cc9c-478b-b345-28d687fe1930",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "29f86e78-38b8-49c4-890d-d4de92e84895"
        },
        "item": {
          "id": "d3b4e970-6ccc-432d-a763-f3e0bfaf4697",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "c1368d28-7a03-49ad-aa65-dd43318256ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a70a1228-67b7-4d27-8240-fa38429de54a",
        "cursor": {
          "ref": "e76bf510-39b4-402b-a1d4-165fe6901f0a",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "041165b8-df31-4820-90b4-5644b090ea24"
        },
        "item": {
          "id": "a70a1228-67b7-4d27-8240-fa38429de54a",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "c5c698e4-af73-46b4-8ff0-7b85e7dd8fce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59ef3b9a-6cc7-4d16-85a6-2fa9567bbe5d",
        "cursor": {
          "ref": "4bb0cbdd-d926-4704-b6e5-49faf99729eb",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "83e7f8d0-9314-4d95-9a23-636927af1484"
        },
        "item": {
          "id": "59ef3b9a-6cc7-4d16-85a6-2fa9567bbe5d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "ad736f9a-19a9-42e9-b2ab-01c945b267ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b14fb5f-93ce-4aa4-82b3-ee39c8b04039",
        "cursor": {
          "ref": "dee56025-6d83-4348-8549-1070303fcfc3",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "ae711583-e1a6-4c54-adca-12c9846a1b00"
        },
        "item": {
          "id": "2b14fb5f-93ce-4aa4-82b3-ee39c8b04039",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "c89da936-2970-4a78-9e5f-10010da0c8c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b3cbb3d-e508-497d-b2cb-86d559296384",
        "cursor": {
          "ref": "7afe73b3-f2ec-48d3-93ab-44480a6d71b8",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "d9b79f39-3f25-4d51-b622-5d6964e23b49"
        },
        "item": {
          "id": "2b3cbb3d-e508-497d-b2cb-86d559296384",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "f61d242d-3b12-4559-8a50-4b70b27a2a42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2562635-9878-4620-9f09-fc1c0d9b605c",
        "cursor": {
          "ref": "f02dc7b6-b518-4065-94f9-ef49eba0a765",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "acf01d8a-a915-4f8f-92f7-fedef38ad447"
        },
        "item": {
          "id": "a2562635-9878-4620-9f09-fc1c0d9b605c",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "7c5f513f-7283-41ca-b4e7-5b257f762807",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "286bba79-39f0-409e-a962-0fc7fb799b37",
        "cursor": {
          "ref": "34ce6282-dc1a-4483-b396-c3af411ccc18",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "0f2df049-52a1-4985-8f67-7fd10f25b27f"
        },
        "item": {
          "id": "286bba79-39f0-409e-a962-0fc7fb799b37",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "094397b5-68c4-466f-b46b-3121ea28d520",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "ea398dde-34f2-4772-b394-511b86b84535",
        "cursor": {
          "ref": "45de371e-db22-4f47-b9c5-e3dcd09ff8ee",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "9fbc0133-26f0-473c-8f64-17bf85273d50"
        },
        "item": {
          "id": "ea398dde-34f2-4772-b394-511b86b84535",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "07458f04-3642-4080-8e4c-2e6c9c95540c",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "b9b86afd-7ec1-47fa-a16d-86927f741c3f",
        "cursor": {
          "ref": "b0146b58-3fa0-4283-a00e-03fd70838c57",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "6c6cc3a9-fb6b-4226-a5c9-cc3795c00a7f"
        },
        "item": {
          "id": "b9b86afd-7ec1-47fa-a16d-86927f741c3f",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "50c1b7a4-f911-45e3-aeb5-98bb4f07f7aa",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "0b8e1fe7-9228-4937-8069-9f355989db6a",
        "cursor": {
          "ref": "807f6979-17c6-4c50-84f5-33dee46edc62",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "7ab7d330-38d0-4d36-92d2-5804dc39d943"
        },
        "item": {
          "id": "0b8e1fe7-9228-4937-8069-9f355989db6a",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "c527c86c-cc19-4ead-a539-5b7bad3712a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "453ef589-f25a-442f-8cf3-738503c9f4ce",
        "cursor": {
          "ref": "2584ec35-e83e-4212-a818-686243c9ad7c",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "5fb6046d-4702-49b7-be17-1ccb8bd2a690"
        },
        "item": {
          "id": "453ef589-f25a-442f-8cf3-738503c9f4ce",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "a87d9a60-8e06-4d8f-8be1-e8cdc17320bf",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "e12d5a3c-a3ec-482f-b914-1533f94063d7",
        "cursor": {
          "ref": "76a7a43b-9854-4918-bed4-a4040591a9ef",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "dd20d15c-1bbd-4ac5-86ac-490067f8b4dc"
        },
        "item": {
          "id": "e12d5a3c-a3ec-482f-b914-1533f94063d7",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "266fc09d-98da-4262-b566-4610b146a0c9",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "029d5904-2834-4fe8-b742-753414f09b5e",
        "cursor": {
          "ref": "a2c687b5-87ca-4595-8aef-5bd6df9c4fd5",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "74e9940d-4e2f-4fef-aa2c-e8b8b223154b"
        },
        "item": {
          "id": "029d5904-2834-4fe8-b742-753414f09b5e",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "e0028370-4956-4bec-9eb5-7d4d06c2db92",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "29dba1de-6327-482f-9571-4b92d1d6f0dd",
        "cursor": {
          "ref": "4b173aef-161e-4846-a998-bf748a70bf0b",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "51e080b8-c1ac-4f29-828f-306b7a952c13"
        },
        "item": {
          "id": "29dba1de-6327-482f-9571-4b92d1d6f0dd",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "5cbe05d1-925b-43c5-be50-744447e985f5",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "d4896af3-b3e2-4b7d-b226-f20240d173ba",
        "cursor": {
          "ref": "9fab553d-2fe3-4d58-9ec4-35a7f060c93f",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "0f992b8f-af4f-426a-96a3-de87c821fa24"
        },
        "item": {
          "id": "d4896af3-b3e2-4b7d-b226-f20240d173ba",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "2c2ec304-3511-4513-a620-2ec57848f5c7",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "601d90e8-2cda-4268-916a-675a2707cb4f",
        "cursor": {
          "ref": "1f0741f9-6db1-4d8b-b398-b91ef82fd68e",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "522264b6-58a7-4dc3-94a0-a9d6075a0256"
        },
        "item": {
          "id": "601d90e8-2cda-4268-916a-675a2707cb4f",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "3b4e185c-d794-44db-b614-9157800d14bd",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "170829cb-24e9-4579-9dcd-3497c219fba4",
        "cursor": {
          "ref": "633ce886-fa15-492a-9175-53b727532dca",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "4261bfd7-5b42-432a-80b1-cafdd1e2df3f"
        },
        "item": {
          "id": "170829cb-24e9-4579-9dcd-3497c219fba4",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "dbb297e5-8317-4e4d-83bd-36b5e3262cf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "499c46f2-0d79-4a78-8da9-6865b6b48e6a",
        "cursor": {
          "ref": "c6d0ea2b-7c09-4223-aa4b-cbbe2f66325e",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "81a53fa3-7dd9-4e91-b431-62947694320b"
        },
        "item": {
          "id": "499c46f2-0d79-4a78-8da9-6865b6b48e6a",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "05bd23e4-9055-465f-9a05-df3ba7fc8932",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff504173-3c4b-47e2-8b75-92b24c2be491",
        "cursor": {
          "ref": "6c7a305e-3de9-4cd2-9aa3-ea7411117d49",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "ffd0f10b-c6f5-4394-b5e9-c4518076d25d"
        },
        "item": {
          "id": "ff504173-3c4b-47e2-8b75-92b24c2be491",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "b5862480-cf94-4e77-a26c-47e3a03e9731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbb153c0-a20b-4e7a-869c-483ec41dd624",
        "cursor": {
          "ref": "8dd32c52-509c-4470-8684-eab519e00101",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "b182bfde-4d03-4d8c-ac4c-8dc8a7e2d4dc"
        },
        "item": {
          "id": "bbb153c0-a20b-4e7a-869c-483ec41dd624",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "3d0b104e-e41a-4388-be07-1418183f8d01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "652e4afa-ea8c-489a-bc2a-3db67e2d5696",
        "cursor": {
          "ref": "fa8a2058-4724-4a70-b66b-73884ea6ee50",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a2455966-15a1-48f1-a5e8-27412cce5f15"
        },
        "item": {
          "id": "652e4afa-ea8c-489a-bc2a-3db67e2d5696",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "e1cd32c1-1030-412d-a340-f6385b44b179",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a4ddc40-6ca0-4599-9110-f859b01b2994",
        "cursor": {
          "ref": "7ae5c43b-4e8a-49f5-8e8d-48c46313ef5d",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "77b21ac0-a700-4320-a17b-5e8807726589"
        },
        "item": {
          "id": "3a4ddc40-6ca0-4599-9110-f859b01b2994",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "da63f4d3-d620-4dd5-99d5-171ad4338b9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eca19d29-e457-48d2-b26f-84b5c4f48b64",
        "cursor": {
          "ref": "9289dbb1-e286-47c6-95ce-485681d6afa8",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "aa345477-fc62-4f21-b3f8-481ea17f8e8b"
        },
        "item": {
          "id": "eca19d29-e457-48d2-b26f-84b5c4f48b64",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "0c1d5653-22f8-47a3-98d1-b62eaee49e9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a67eb320-6345-4a95-8990-770f9a0f24b3",
        "cursor": {
          "ref": "576a5f76-dc13-4f90-b8d7-5b2c8d1f338b",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "fd265374-58af-471d-9738-4b781f05fa79"
        },
        "item": {
          "id": "a67eb320-6345-4a95-8990-770f9a0f24b3",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "b25d0161-b083-463a-956b-5490be349abd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64512e13-3b00-44da-a7c3-21ad74e9e95a",
        "cursor": {
          "ref": "e3d8b964-638d-4461-98a0-23ae42bbc618",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "08d58742-1fc8-4bf1-8950-b5c2f9b07b4a"
        },
        "item": {
          "id": "64512e13-3b00-44da-a7c3-21ad74e9e95a",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "eec918f4-d73a-4a67-b96d-5df010674a57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b52230f2-14ed-4e3d-bf0b-694b0b724623",
        "cursor": {
          "ref": "bba9ca48-1698-4e23-9438-1332937a1496",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "0aa154d4-12f9-4d98-bddd-72e9f52516ab"
        },
        "item": {
          "id": "b52230f2-14ed-4e3d-bf0b-694b0b724623",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "dc8f028c-0fe5-467c-bb12-ae8406ad0746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c27e8da-85cf-4ef1-98e6-cb14ebb261cf",
        "cursor": {
          "ref": "37900bef-278a-4f8a-bcb6-00aa9a25f179",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "082d59a9-c89e-4283-a8fa-d52dcd3ee6b8"
        },
        "item": {
          "id": "9c27e8da-85cf-4ef1-98e6-cb14ebb261cf",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "c63c997a-5f7a-48a8-9e2b-c44b072dd790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea3c17b5-e2dc-46f0-b410-c175a8db7765",
        "cursor": {
          "ref": "8a181170-6494-42a2-95dc-dcae574fe4aa",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "3a6565e4-f9e0-4980-a3db-8c5e92f4cf87"
        },
        "item": {
          "id": "ea3c17b5-e2dc-46f0-b410-c175a8db7765",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "91b788a9-2518-49b5-978e-fdb38ec57709",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76341892-c600-463e-9357-a92c0f674e04",
        "cursor": {
          "ref": "ab28e71a-7517-48eb-8c23-9eae2ea86ec1",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "1f83963a-6cf7-4f49-bb58-4e81ffcf9b4c"
        },
        "item": {
          "id": "76341892-c600-463e-9357-a92c0f674e04",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "f968d793-6526-4d69-9553-1f29b4db236d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce3182fa-87f3-44d0-a240-27cce52755bc",
        "cursor": {
          "ref": "5fe51278-1c1a-4ef1-b8c7-b91e29ef6a75",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "87036205-7554-4f93-85ed-8d227b991248"
        },
        "item": {
          "id": "ce3182fa-87f3-44d0-a240-27cce52755bc",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "be50a589-10a1-4979-b74e-8a9dcca49382",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "38dda4c1-8961-47fc-bf36-2db0b9365ba7",
        "cursor": {
          "ref": "75c60621-f646-425d-915a-53d6a995a66d",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "b5331213-4028-4b13-9fc7-3079b0d50a27"
        },
        "item": {
          "id": "38dda4c1-8961-47fc-bf36-2db0b9365ba7",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "73f56f81-6843-4ae4-b5d6-0731130153f9",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "a59e60c3-2d26-4119-9108-c8f6df3b486f",
        "cursor": {
          "ref": "62e25167-438a-42e4-a091-486606ae8edb",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "7a2e7d59-1d7f-4013-bc74-e70a9f7abe8a"
        },
        "item": {
          "id": "a59e60c3-2d26-4119-9108-c8f6df3b486f",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "08b3dbc9-a505-4fc8-86cd-d55eddac80b4",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "903e8bee-ba01-485d-a65a-e54462c7a847",
        "cursor": {
          "ref": "499ac8f9-5e2f-45c1-90b1-0072507e7060",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "2e5c7eaf-eab1-4115-b777-8e0f7d9050ce"
        },
        "item": {
          "id": "903e8bee-ba01-485d-a65a-e54462c7a847",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "fe4d32de-cf17-4efe-b280-4bcbffa5b154",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "c1bffc49-0dd8-4ebf-b8d5-2329d3bd40c6",
        "cursor": {
          "ref": "7d5ae52e-a395-4077-8af7-d9d59f2104ec",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "8218693c-802d-403a-893c-b775e1386585"
        },
        "item": {
          "id": "c1bffc49-0dd8-4ebf-b8d5-2329d3bd40c6",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "f0b1c8e4-7110-4bd2-b480-b4aef706bf2c",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "7535c817-0882-40ee-8832-2fd47be9a875",
        "cursor": {
          "ref": "2ffdb1d8-40bf-4464-9368-62b52c27339e",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "7526e54e-0233-4815-a653-b3f30a75909d"
        },
        "item": {
          "id": "7535c817-0882-40ee-8832-2fd47be9a875",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "13540917-1a4d-4f01-a1e4-822802908a68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1467bb2-f575-4e6d-9ca0-963d9b88d154",
        "cursor": {
          "ref": "5687b712-12e2-4def-9042-48c364aa71b7",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "5571a77a-81b9-4cda-a684-0b2ef5ff8a39"
        },
        "item": {
          "id": "e1467bb2-f575-4e6d-9ca0-963d9b88d154",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "874c5e65-1d53-49f5-b213-aa3724367228",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ed73cf6-b41a-4562-a19a-5c7d50754a24",
        "cursor": {
          "ref": "5ed0a769-d434-4990-b62e-1fca16b077b4",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "af34906f-35ef-4b26-9a5a-9116425dbfab"
        },
        "item": {
          "id": "6ed73cf6-b41a-4562-a19a-5c7d50754a24",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "86d251b4-eb6d-49f5-825d-4b414e7780af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d6a451e-661b-44ae-a059-3d084a991fe1",
        "cursor": {
          "ref": "30e12319-e09c-4e9b-a62c-ea929c47f70c",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "3fa4be8a-074b-4c8e-b711-8e9363745fff"
        },
        "item": {
          "id": "6d6a451e-661b-44ae-a059-3d084a991fe1",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "759583b3-c02b-4f8c-9839-22556430e5a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7cab1c9-fe23-41ee-b09c-4ad182a0e254",
        "cursor": {
          "ref": "133cd62c-a46d-4547-a120-2f087ec6a51c",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "56b278cc-8386-4a48-84e3-bc09d1c88dce"
        },
        "item": {
          "id": "d7cab1c9-fe23-41ee-b09c-4ad182a0e254",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "c20704ec-a5c2-4e59-898a-c98ee83d95de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9deb738e-e8de-481e-926d-d4122a254445",
        "cursor": {
          "ref": "5726b240-95a5-47a6-aa4d-7cce040352a5",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "ed242cae-d893-4510-ad3c-0d6042409da7"
        },
        "item": {
          "id": "9deb738e-e8de-481e-926d-d4122a254445",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "840c94fb-ac26-474a-be67-dc5f967cfa4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58b43f55-9afb-4bf0-81ea-c741e53fd4dc",
        "cursor": {
          "ref": "6366474d-0547-46d4-b4c5-7289f819d0fd",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "13d43994-873f-4db7-b222-9d4fab4a0da2"
        },
        "item": {
          "id": "58b43f55-9afb-4bf0-81ea-c741e53fd4dc",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "8bada557-b79e-4980-ab9d-7719f56427eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b2d1364-ffd9-466b-98f7-328f40ebc6d5",
        "cursor": {
          "ref": "32223b30-03f1-4a4b-9e2d-d4f36df54cc5",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "b033a9c0-e5a1-49b2-96e6-5faa8c7a7498"
        },
        "item": {
          "id": "3b2d1364-ffd9-466b-98f7-328f40ebc6d5",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "4a6caeca-97e6-433b-b45f-eaee0b61b3a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a61a5170-3d13-49aa-be04-4ca1794e9ec7",
        "cursor": {
          "ref": "0ab8f7db-0c46-4992-8d23-7cad0e5f1f86",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "5e99fd2e-2193-4f2d-84b8-d8d528159bad"
        },
        "item": {
          "id": "a61a5170-3d13-49aa-be04-4ca1794e9ec7",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "b7080ebe-3ff3-4e16-9808-e2cda0e6e052",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21628ec0-e664-4f48-b83b-9e781b584635",
        "cursor": {
          "ref": "5847265f-f04f-4b09-80dc-3db9031f02bf",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "48117293-e995-4225-91df-d93ceb1c2a3e"
        },
        "item": {
          "id": "21628ec0-e664-4f48-b83b-9e781b584635",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "9cbc2a6a-9ca3-41f9-9679-c4dd88491676",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "775ded17-4855-4b48-8318-8809193046eb",
        "cursor": {
          "ref": "b2eac97f-93dc-43bf-aa76-84dec99b7a3b",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "0a998f02-994b-4f09-aa7e-375724486f24"
        },
        "item": {
          "id": "775ded17-4855-4b48-8318-8809193046eb",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "c9155dfd-3a98-411d-9d61-2fda17b9765b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5824e870-93ac-4319-aff5-305773a35d5b",
        "cursor": {
          "ref": "867a2f81-6743-46e7-9378-6ea768dece30",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "0e2715f7-c66d-4035-adf9-c419cced6357"
        },
        "item": {
          "id": "5824e870-93ac-4319-aff5-305773a35d5b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "14f815e6-14ae-4d64-ae21-1d11aedd3b16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5092f21-0a13-4c1c-a669-40737b8fdf4c",
        "cursor": {
          "ref": "1daa0814-1380-4733-ae1b-3a55bb706afd",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6890fb30-613f-48e8-987f-d49c55746164"
        },
        "item": {
          "id": "a5092f21-0a13-4c1c-a669-40737b8fdf4c",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "1b40f2f5-f15e-4263-bd68-7318f236df07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "145582ac-0e92-49be-83f2-9ad4cfe802db",
        "cursor": {
          "ref": "655e04bc-073e-4c09-927f-d00da80eb5e5",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "b0be86ae-addf-4b67-bf69-67f406c6a20d"
        },
        "item": {
          "id": "145582ac-0e92-49be-83f2-9ad4cfe802db",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "5a84a253-ff2e-41f1-95c6-713eb960ac1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33a1f9bd-6716-439f-8505-5f507a7c5e80",
        "cursor": {
          "ref": "e3aa3329-0cee-4e6b-be25-2782ec37f9f4",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "42a482fa-eed1-46ab-a4a1-29b2e5308193"
        },
        "item": {
          "id": "33a1f9bd-6716-439f-8505-5f507a7c5e80",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "cdfe0207-873e-4bd1-87e1-80183e63f22c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e607bd67-d5ed-4703-9864-f4f22c99fe84",
        "cursor": {
          "ref": "cc1d3f3d-cc76-4d38-be6c-c3df6d9f4433",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "da7af8a5-07cc-493f-88b4-69625f9c26ff"
        },
        "item": {
          "id": "e607bd67-d5ed-4703-9864-f4f22c99fe84",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "23578e4f-e810-44fa-bad7-8573442a15bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e84896f-a2c7-4e7d-86fa-d1fb4bc9e376",
        "cursor": {
          "ref": "52c89ea4-0e0c-4c88-aa0f-d8e2ae9f6ad9",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "8043dd82-f4e6-42b5-878b-ccc6907ba1d1"
        },
        "item": {
          "id": "3e84896f-a2c7-4e7d-86fa-d1fb4bc9e376",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "4079ecfa-242f-484c-880e-3319f8640b3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "587f82d2-0225-4f75-8878-fa45500688cb",
        "cursor": {
          "ref": "c8302964-3c81-412b-8de0-483b952d6da2",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "86c81cba-3f43-4735-8032-751a3e7c98f9"
        },
        "item": {
          "id": "587f82d2-0225-4f75-8878-fa45500688cb",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "f0895806-168e-417b-9e16-fdf55319a807",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83b05e38-2a57-4d94-946d-a2fff026c959",
        "cursor": {
          "ref": "5fac31de-60a1-430e-bcaf-ab5f43acfb0a",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "1149bb55-3d62-4790-b7b3-c47603189913"
        },
        "item": {
          "id": "83b05e38-2a57-4d94-946d-a2fff026c959",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "47c607e3-29a0-41d1-987b-478839368028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1160b266-69f0-4bdc-9f4e-f70d0b7aa889",
        "cursor": {
          "ref": "816fe720-4128-4465-a4d3-49b0c0c522d5",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "35dd0ba5-9efc-4017-8c67-323773f9ebe6"
        },
        "item": {
          "id": "1160b266-69f0-4bdc-9f4e-f70d0b7aa889",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "a32c7de5-aad4-434c-a4e4-92436b0e7a6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efd3e7bf-031a-43c7-a9ff-3b0c11c2a6de",
        "cursor": {
          "ref": "b4ad1903-53bc-4fde-a870-bde791839c92",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "b2a299e9-258b-474b-b694-b3f35a894fb0"
        },
        "item": {
          "id": "efd3e7bf-031a-43c7-a9ff-3b0c11c2a6de",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "f18a7e6f-eda8-4b10-910e-e65abec337ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b0f085f-c3b9-4709-bb4d-1bc39025b428",
        "cursor": {
          "ref": "7fddc6cf-f5d5-4823-8f58-9bf62b1f8ba1",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "5938c15c-cc1e-4fc0-9331-f0211786efcd"
        },
        "item": {
          "id": "8b0f085f-c3b9-4709-bb4d-1bc39025b428",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "786d2b6b-8bfb-4728-9bc0-4d300b5c8ff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5b6de48-e465-4b8a-87bf-ec41e0c4e3f1",
        "cursor": {
          "ref": "2351b08b-8a3f-48d2-9d9a-e1b499104315",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "84aace97-f41c-443d-b5b8-72e02aec7a46"
        },
        "item": {
          "id": "d5b6de48-e465-4b8a-87bf-ec41e0c4e3f1",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "24c05402-5b96-4525-a125-c82c8c3424b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3341b97-bf54-4f1d-ae14-1a488e1d07a0",
        "cursor": {
          "ref": "548d011a-1d46-49a4-9379-b4120103797d",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "7a925503-68b8-4073-a8f4-82503c33d7ae"
        },
        "item": {
          "id": "d3341b97-bf54-4f1d-ae14-1a488e1d07a0",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "86a047a1-56fc-4e7f-801f-f505fb89cbfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df35b21b-1329-46e6-9507-64acb63a74d1",
        "cursor": {
          "ref": "5442d105-7808-4215-9640-fab0a89770c6",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "b5dd384b-d8bf-4c24-ac9f-bdfb0e6f6f0a"
        },
        "item": {
          "id": "df35b21b-1329-46e6-9507-64acb63a74d1",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "4178d6d7-a440-4c37-b54c-aca94ded8203",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb0ea604-2447-4941-9c3e-3d087d554e6f",
        "cursor": {
          "ref": "d72316fc-f85a-4b96-b41c-eabf04bb7d67",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e5586297-3fc5-4367-bb83-1bcfd20c1d9b"
        },
        "item": {
          "id": "cb0ea604-2447-4941-9c3e-3d087d554e6f",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "f8845cdc-5ceb-49c8-9754-bfdaa7fd533f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a93c0e5b-bfb3-4801-8155-adc7c1e1e36b",
        "cursor": {
          "ref": "43c9e92b-fb32-4c6f-a4cb-0fd978ba5780",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "8b5f7bcb-f324-46be-8185-ad970a1a1838"
        },
        "item": {
          "id": "a93c0e5b-bfb3-4801-8155-adc7c1e1e36b",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "c320c2fd-5fd5-4ca0-a8ea-2c8c2c3d6622",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a27c94d2-faf2-4d6b-8cc4-f1522facd973",
        "cursor": {
          "ref": "7a760966-f46c-4f4a-9b56-c21e325f60e8",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "856767a3-f544-4c2b-b40d-4647b9641da3"
        },
        "item": {
          "id": "a27c94d2-faf2-4d6b-8cc4-f1522facd973",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "002f099b-8a34-411b-bbd0-efb51ba90d05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b679a99a-3f37-4c1a-aa15-85d425154e26",
        "cursor": {
          "ref": "8223159f-17a7-48e8-9cb2-087eba2c8189",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "ce603a65-26b6-4680-a0bf-1442e090374f"
        },
        "item": {
          "id": "b679a99a-3f37-4c1a-aa15-85d425154e26",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "74a100cf-1560-4fc7-80e8-db207af02143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7f785cd-7798-4bf5-ab30-7874ca2ba8ba",
        "cursor": {
          "ref": "ae85dd16-04ad-4ab1-bda9-3e198c121b3a",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "0360f93e-fb90-4927-b9bf-e4b55e427dad"
        },
        "item": {
          "id": "c7f785cd-7798-4bf5-ab30-7874ca2ba8ba",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "a5449ea2-8a18-4c6b-86be-eea423881f32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aed3d32-6b20-4432-8878-82835eecad6d",
        "cursor": {
          "ref": "fd38eed5-3903-43dc-b368-7993b3d0ea88",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b83457eb-bb46-4863-9fbb-cdf87af7bd4b"
        },
        "item": {
          "id": "9aed3d32-6b20-4432-8878-82835eecad6d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "1ce723ef-c509-496a-95b2-88cec3742d7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e1bcd01-a7e9-4ba5-9781-650bab240ae3",
        "cursor": {
          "ref": "c4986cde-6a60-48aa-9b47-fa4900246bcc",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "6e3d1b34-0f7c-4870-b4ad-21b7b578dc72"
        },
        "item": {
          "id": "0e1bcd01-a7e9-4ba5-9781-650bab240ae3",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "b861404d-afc6-4d33-bb0c-f700829ce6c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5c52b94-b5a0-4938-a246-b7f69320bfa7",
        "cursor": {
          "ref": "a2372543-e4a9-4218-827d-003145a655b7",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "d5b2afa7-15f3-41a7-a2af-839c7419fb09"
        },
        "item": {
          "id": "a5c52b94-b5a0-4938-a246-b7f69320bfa7",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "b704b206-9ff3-477e-95e2-8d5ffe49a211",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cc41415-7a4f-414c-97e5-63355d4fc28d",
        "cursor": {
          "ref": "fd5d4953-4a9c-4df0-8be3-2508b8eccebb",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "c880319c-a380-4cd4-8d0b-10a6aa3b8a36"
        },
        "item": {
          "id": "7cc41415-7a4f-414c-97e5-63355d4fc28d",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "2ca2d9f8-3fd9-4b6d-9fb0-d759c061da9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "258fa7a7-83f2-46cd-9daf-237fb5df89ac",
        "cursor": {
          "ref": "e618e524-c14b-4a85-998a-16f8531917ad",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "a8401eaa-c651-4d34-8209-9bf8e7008a9b"
        },
        "item": {
          "id": "258fa7a7-83f2-46cd-9daf-237fb5df89ac",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "5922a116-5962-4637-a5a7-698e2a405928",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5361a26-4203-4373-a3a9-72d238fd080f",
        "cursor": {
          "ref": "707d9f4e-e2ac-414c-aeef-f770243d372a",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "20977d2f-d64a-4ad3-88a1-621892cea4d3"
        },
        "item": {
          "id": "b5361a26-4203-4373-a3a9-72d238fd080f",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "9485f531-875c-49ad-9e90-4d48cecb3df6",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "0efee118-d2d6-4747-994f-eeb967b1b58c",
        "cursor": {
          "ref": "0008c86d-8587-415e-a566-7d6810898e08",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "5dcb2521-62fc-4f07-8804-b9e909ea562f"
        },
        "item": {
          "id": "0efee118-d2d6-4747-994f-eeb967b1b58c",
          "name": "credentials_verify"
        },
        "response": {
          "id": "44651968-90f4-4adc-b008-d05db0776238",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "79b4a814-7f6e-4205-b0b8-8f1f1481276e",
        "cursor": {
          "ref": "e0496d92-e3fb-49b4-a15d-304aa153dfed",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ca92ef83-46b4-4585-8c1c-9edf1f660663"
        },
        "item": {
          "id": "79b4a814-7f6e-4205-b0b8-8f1f1481276e",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "46e37331-e649-4510-8ff2-06e97801132e",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4d805f7-ae8d-41ae-824b-32d4779e965b",
        "cursor": {
          "ref": "a02e35bc-d081-4e0a-93f9-8368846e4229",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "221309b9-3f34-4b43-81ec-60d9dc15cef5"
        },
        "item": {
          "id": "f4d805f7-ae8d-41ae-824b-32d4779e965b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0f6a177a-1fdf-414f-b97f-0ce6d9f9ab91",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4d805f7-ae8d-41ae-824b-32d4779e965b",
        "cursor": {
          "ref": "a02e35bc-d081-4e0a-93f9-8368846e4229",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "221309b9-3f34-4b43-81ec-60d9dc15cef5"
        },
        "item": {
          "id": "f4d805f7-ae8d-41ae-824b-32d4779e965b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0f6a177a-1fdf-414f-b97f-0ce6d9f9ab91",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "581ac10e-7565-4222-967f-1611283318c3",
        "cursor": {
          "ref": "68fbd655-6de4-43b8-9052-7be379c755c5",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "c783ce1e-c0c2-4723-b493-cc953cfcde2c"
        },
        "item": {
          "id": "581ac10e-7565-4222-967f-1611283318c3",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "8db9012d-97d8-4ac3-a040-a987795aaf24",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7fcfcf9-e784-4f79-9f0a-7a04b6b37a8c",
        "cursor": {
          "ref": "9a90c88f-5ba2-437c-8d25-f85e6bf490cf",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "af899ae7-a077-45ff-8257-8176371d3a69"
        },
        "item": {
          "id": "a7fcfcf9-e784-4f79-9f0a-7a04b6b37a8c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "115a1df6-24f3-44cb-bece-10ab363f382c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}