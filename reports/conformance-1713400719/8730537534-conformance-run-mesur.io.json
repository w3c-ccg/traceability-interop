{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e53d552a-8ad6-4945-82c5-d464e18f7b2d",
        "name": "Clear Cache",
        "item": [
          {
            "id": "db1acb66-c674-4759-885e-66d98e6e767c",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fa581e30-6d50-4204-bcf7-e7768c721351",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f6f06fca-ce11-42d0-9ad0-3062740ac20e"
                }
              }
            ]
          },
          {
            "id": "f7bca0b4-1ea9-4fa3-b338-5a27de730a7b",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b8d7e923-1e29-43fd-b483-e619626d3872",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "bdebdf45-dc7f-447d-a03d-1d3d3e4ed83c"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "1eed26c2-7f59-4275-a3cb-06c9a1e9c8b0",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "65b0ab77-1f98-4d6b-af69-2016185e5db2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e24cbc5c-cb0e-4e8b-bff6-981689c2c215",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b7982b2e-df4e-4ca8-8c40-1214454b65ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f840e989-8e49-435d-9804-1accd81c2755"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b5506f40-54d0-4491-acf6-3188c4e5bebd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a2e7d0cc-beb5-45a5-8fe4-70be8b1270f9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6141bf37-f19a-4129-baa6-13ac4edcddf2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e4da13cd-8804-48f0-a265-9a9f84e38755"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "039782d1-4927-4548-8aaf-febf09daff57",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "8972579c-bd5a-4a34-a3c8-50ba29c7b483"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a11b1c9a-8009-42a9-998b-9ca3f71b284a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fa7d61ca-797c-4ef0-a6b5-c440932c61fc"
            }
          }
        ]
      },
      {
        "id": "9931bf6c-929f-4458-a6ab-408ba7cda71d",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "e54e7547-8bb0-4639-a7da-36ca21d993b1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "74e6e647-ba75-45bf-bdd4-b5b409e302d6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4b648748-0ace-4275-b37a-d2ee085ee746",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ada73471-3f6d-4f28-9e2a-272abff7ed3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "014fa1b3-a606-47a0-8365-a380b7f2b6ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33414f04-fad4-4b58-81fb-a355ede5ee9d",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1c7eff3-5758-432f-bc32-8a7d48b9c3bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4bee6f76-14c6-4033-9e55-a80e7098576e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b2f2e9a-2837-493d-9135-56af8640c7a4",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "073c74ad-ffe6-460e-83f8-8adb0029bacb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3b7b3ed8-6bd0-4a64-8a5a-28bd50946418"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "29b2cf36-2375-4b79-9b48-e760e984bb46",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "56433407-5214-4cf9-8ebd-3cee6ab092bc",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8850f98e-75b0-43dc-8d79-fc544ad762ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aa9c5333-534f-4492-ad44-50d46762ba18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c1350eb-702a-48f6-a88a-c87e5d9c72d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bdee4a9-961a-46a4-80b9-bb10bee15381"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "04701eae-b272-48d7-9c64-b8ef0e381180",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d6c897d0-b8bf-4bbe-8567-7fbe4fe5cf63",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "28ab7bd1-ac54-4537-830a-16939e730816",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "7adeaaeb-1a5d-4ee8-b516-321fdfd9b219"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fbc8572f-a050-496d-9b2d-dc7d59c997a5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "9e2f62ed-0b09-47b8-ab2e-ae83081a064a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1e4075f7-e8dc-47d7-87a4-389f34f3cbcf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bd633a4c-b222-4f60-b971-78965af414d0"
            }
          }
        ]
      },
      {
        "id": "1cd8cc11-1282-4810-b39e-fa74bd73ddd6",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "e9b38259-00d9-4783-8b8e-69bf16cdc5df",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4e4fd772-92ff-49d5-91df-10f03568eeb8",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "c3c7734b-dfbb-4194-b50b-98228d81ed4a",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e8449cb-3637-4058-be10-b125ac772034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0a9c6b7-235e-4f40-82dd-7d43317bfff0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3035c0b6-ed94-418a-a225-a71e059dabfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "df3e3659-829d-4d5a-906f-c4776576ef64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7876b1e2-1b1b-46ff-a41c-21c97171116c",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33e08a75-35b5-419a-8b17-9cf53d8fecae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e4d5000-4971-45a7-be81-34a7d96cf2d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97ca98f5-8124-4321-9588-85fb6b2bdb00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "80b29ab4-e3b6-42d9-8ee6-4e7188355ca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b2637e5-ad05-40dc-96c9-5242a21b939d",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33d6e246-73bd-4b7a-bc58-fddad4ee2c70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55072311-33eb-4561-b1bb-bae697610e63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c6db211-27e2-478d-85eb-d86608de8d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "beac3007-e230-47fa-86d2-c68e0a19b80e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a50bc16c-dbc7-4cbe-bac2-d837f56d6cd1",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14a91241-8797-452f-869b-0438b05955c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64daf6b0-c398-4aff-940b-3de44288f10f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "915d126e-472e-47fc-b0d2-10f7bbf12d18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0452059c-8bb0-4536-899c-075e9eceafe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75d6c1e4-925a-4107-a21a-e65b58aaf5b9",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fa1c6b4-53cb-48b5-b49d-53abfebc6216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2b99671-d6db-4cc1-bc39-d8629c016590"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "819e464b-51d3-4526-8b67-e1c8fa840028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a84a6c88-05e3-49a1-a3b1-3f3484e9c8ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7457d46-26e2-48c0-bbb1-8e27eb5d9c94",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36b6e16e-e078-4778-8028-113a0932f180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f568fba-5ca1-4332-ac9c-d6f37f32574c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f14f582-e92f-472b-87e6-a2fbb784bb07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "66c4c0fa-e498-4967-acce-d486647749b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a3cace7-8dad-4f6b-87f5-1e263c6adf6e",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd27db1a-2e59-48a9-84b5-091f4050a323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65a7030d-a5c2-4a1d-b3b5-0b73f35c91a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "107c366a-1d42-4d9a-b0ab-afe3ce3ac19e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "76440515-807d-46e2-b5d1-8119a0798ff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1168bc42-67d9-4dcd-8d58-3638f2d3ad11",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85f4c018-b7a5-49f0-ada6-3e5a80c270f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1226319b-70a7-4511-848e-0938ebfb8b7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8077544-bd04-4a4b-8c86-ec7fd040f555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7a09fe81-59f2-4690-9d87-4affa7ad5a5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40eed51b-d99b-4e79-b768-bc90e076fe4c",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68baa645-a948-461f-8f2a-165719eb9979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2950de04-53b7-49b4-95ec-0d00555ae376"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "823c55a7-860d-4830-8d3b-d5b4ca498889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "46a42bb1-03e1-423b-82aa-7b79f832163e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "688bc973-181d-457c-8ff5-d3c5de392d1b",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc0f3bde-b249-48d1-b760-87be2d222743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1eaced7-59a8-4f03-ab4c-12acaeb34ca2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8e5f98d-2ea3-47fd-a7d0-06c744880f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "30f05fa9-85bc-4f01-9c43-141b3be10091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a1d53b2-6176-4f12-a6ff-a85cf1724941",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e83f3625-6a5e-4e3c-8ff9-68608a0718f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18d200e9-0e58-4695-b217-92350545e013"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2c3a8f2-f1fc-40bf-81f7-75fef9124fa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f072751a-7d86-440b-a9b2-a3dceb8adb94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d574fee-a641-40c6-b3ba-45f02a83a806",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2569d3dd-68d4-44ae-b2d9-d2eba6ebba87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33b5492e-2e5a-44e7-9780-b98323ec5d5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dbaf362-9a8f-4948-8629-38b07161e6b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b4b8a5c-2574-4173-85b6-6ec8dc73fda4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc05d17b-ffdb-4277-93e5-dc8d62f0b962",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "095cd2f7-c30d-43ab-8055-57106bc82c7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11ba84bc-48fe-4e31-809b-6183154f5530"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef1d0f2e-a8f6-4116-aea4-2cbcb85f4bff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "85efa450-2eed-43f2-9ba0-6b031661a500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d1c58a3-fd84-4282-99dc-b2db79629ff8",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccdab4d8-d03d-4b10-8cea-6f9ee5f72bd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8a32d2a-1fc5-446c-a399-8e069117ba2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdaf6b70-6109-44d1-9549-b202fa3d15cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "426fa5bc-3bf6-435d-a912-27f7e12bb145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa1ad22c-2c02-427c-837b-d7a0352037ac",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c193228-fc51-410b-9755-c0469aba64ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b70d963f-31c2-4a57-8d32-51f0b08e26a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08b0eb61-24e2-4f0f-b128-63b5c5adb9f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5abb89da-53f7-4f0e-82cc-79eef6983d8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfae9ee1-34a8-4aa7-b8e4-418200bde567",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dec936d5-15d4-4979-834a-7cc008e5759c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3842790f-335e-4237-a78e-b501a714c014"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07e86173-c53f-43d5-911c-5d6d6b485565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bcee2448-ddf4-4752-b234-bf3804e297dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89b123ef-f42f-46e3-91e4-7715dc8d345e",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32e1cf5d-f627-4829-a9f4-b322eb1ced79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a581b108-4d9b-4231-8539-0fd84928a12f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd8c5637-e642-4863-8282-f94c8662fb68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ad2b201-96a4-41cd-9b04-0a4127de24ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b30c308c-36d3-498b-b160-32780722f89c",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d42b02-2958-4be0-86f4-e448cb55a540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "494991e9-8a9a-4f1d-8962-9768c249d432"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2540e863-c838-4f42-b3df-aa56186d6a47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c80b68a-ffc0-4aab-815d-986f06e3634b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebcd33ce-be32-448f-bd31-ba6e2755adc3",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdddf914-6ba6-49e6-a36b-a288403a4a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0e0193d-9bbc-4335-9d38-3e897d8dcca7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e29da4b-ff2c-4949-802d-848750b80633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "caf5ed1d-286e-4abf-b313-3d849a7f1740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6ca4508-4e10-46d4-b98f-776f0afa11ff",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5975ea36-d395-46d2-87d8-30e83b3ed55d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9018fece-0a54-4d5c-8729-cf8b9a105887"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa9b74ab-571b-4aa9-bcad-8ef943ddbd91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f97ea25-cf16-45f4-b30b-559dd0675913"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b92767ca-d48c-46b0-9a07-fa17886a9d9b",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f5099de-5a05-47d5-8027-3e9cb71fcdad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e187978-c424-4675-8a1c-3e78afebe609"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60cb1780-af77-4e42-95ad-0fb619d3d7ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6aadf8aa-e611-4229-801a-f9911a8f40e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f742169-6e06-459e-b982-248ce4afe85a",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "609123f9-899c-446b-856d-5cfad31c746e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1897518-eba3-44e5-835b-d8fe81a99dbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2732344f-5bad-4a8d-90ff-51e3d369399a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "12d8fd0a-0141-4ad9-8655-247217d8af62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a809754c-829a-478c-b303-8721fa3a5467",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a725a918-f0c7-4265-8599-c981da18df61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8611a18d-6978-4509-be62-78bb1730f4f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d9ea708-a9c7-4663-a274-b01f4e2c684c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "37fdbfcc-6530-48a0-9bb6-d8a13064fd57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68180d58-0075-4f00-a555-7cddc9d092c1",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81e9eef5-199f-40b6-b480-20c7c1302cd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5432fe37-1a25-4365-b017-9571e853d787"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5beb3f1-8a67-442d-9e9c-c9d0f386bf0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b064e25-b103-443c-afdd-a3f75729f6a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94f22f3e-245e-4b0a-90a1-2f9bd8472518",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "841a9b33-073a-445f-9f72-462ab513d6e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5a6ea6d-1fbd-400a-ba6a-361ee8621423"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "659322f3-8c7d-4227-9357-dc5903f478eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e914b9a-083a-437c-8096-164ecd7c1f2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff48ccc5-46c9-4e1c-be08-f3dc03f3c329",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fd0b2b6-63e8-4c5c-a00f-83f87cf2fb8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0d224f3-0b54-435e-a509-394cc08d7e94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dce36fb3-3a7d-44d4-8d64-9379cef4859a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3078374-8166-405c-99f3-9245fbbabcb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b53710ca-83c6-4a41-8774-6af7cf5faa5a",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75237e61-4ee5-4856-802b-389d4a195f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0afb696-b0bd-4136-84ca-185eed759cf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18d9d91f-37db-42af-ab88-42a6e5cc8e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b83725eb-d376-4cff-bb76-a349a25a6d7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51792c05-e9ec-4a07-a62e-ce151bfbb848",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "379d4372-c355-4d37-b40f-89bedb7bf302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fe444fc-b93e-4f5e-a0a7-247f88a5129a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35f77329-f5fe-4db4-a561-a07e9a099a49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "60a0d848-398e-42e4-9460-baa918ab47bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7828e7ce-dfe3-456f-9f8f-a890fe6ecd13",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b879bd0d-32f7-482c-b98c-f13fb04b08bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abcc032e-d53e-4128-a1e4-0321549d25de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea11b4ce-aba2-4e0f-a358-645c4afeb32f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4aefc40-5bc4-40f1-81b3-1eef55632b33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99ffc89a-139f-4bb1-b844-a3478be8c955",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50384a41-156d-4485-92a3-b56d55cd023a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c2a6b47-13b5-4c77-855f-c3bb555cdcaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5c0ff4e-cf88-4401-b691-0276c7df1df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7016984-c5b9-49c0-b0e6-7b23673db582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1527de63-0d6e-4a21-bc7c-7f6374129cd6",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b02c885f-42fd-44b9-bae1-7f8ea4356c36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09957077-ac37-48c4-a871-ec37f79aca2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea64b580-1bae-4049-85b6-97c365c365d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7d1adb4-746a-448f-96c3-0a3f785e3697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ce1bb55-485b-4e31-8137-1f3dd7b469e6",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c803ec0-94d0-4f94-a53d-f8e7a122c84c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d31ef0c2-e992-4b27-a565-017c2b98cc0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c71a4334-396e-4533-a6f9-0b67e30c9fac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5bb9dcb-bc5a-4d91-9c98-5182ebf410b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07d00936-cd69-4122-b337-aae7b4e132bc",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abdd4704-c589-4234-a8f9-eefefc42bb1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2612756-53f8-4e0b-8898-03ebcc283f55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68592fe9-6982-4c5c-b543-8f00e1343787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2664ad1a-362f-4979-92b5-921f4840c99b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20c22fdd-6add-4a61-888c-496fa3ff55de",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c27eaec7-52db-4c86-a5ec-3889026da372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04c3a407-25e6-4b7a-add3-0a970183cd76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10424c5c-c2fe-4436-916d-ce04956e2fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "38200195-2ea4-4dbd-9303-ac4da3a05002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "101b3c87-368d-40b6-80d9-4ae73677cb25",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b4f3858-6f2b-49d5-bc6e-4d7eebb7b3fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8428699c-8539-40e1-86cc-a1ca8d946c60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f5c633c-f10c-46d7-929d-67b2d118d057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "bace11f4-70b6-4dfb-afbd-d5df9b9876f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a654d81-a50d-4ab4-8625-73cf28ae878d",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eb3e2e5-d2ce-4080-b074-3793e47ba8f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e52db96c-d209-448f-858e-2f3275b44808"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8ca6dfb-f25c-4403-a38b-9f5bf5e7370f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "69e27bbe-1847-4e7b-b936-800364c4384a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ed1fb3c-c7d6-4c39-bd12-a00233bc302d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29ed8d01-4d27-496f-91fc-f1bfdc50f85f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "999be889-f19a-41cf-9f68-2cdfcd456f88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0827a42d-299c-4739-a35d-6a6eea733a61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "228baafe-ea3e-4aa5-8517-302c4282e629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44f0f3c2-31ba-41a7-851a-76febf1d044d",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d6ac988-1c4e-4cf1-8d79-0742e730d90c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86d8345f-443b-42ac-8644-fb772514e17d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6127fc19-fcd7-47b0-91ea-982393d75b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "77d95833-8b24-4541-855d-33c333a9a508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de820611-55ff-404e-85fa-3b432dd7d255",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d38b0ea2-76bc-4bb7-8289-9db31a3d8ef1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d17bfcbe-dec9-4b16-b3e2-55a83b306f01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e924f72-ef28-44c4-bf5e-d7c27e30d7e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "02a0e264-9be9-439c-aedc-02c39349cc86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c70a9df5-500e-42e4-ae10-b0115515404a",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d7fdf36-10be-4316-a7c1-91ff77a2bb42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f36e9005-56c5-4a4a-a8f6-fe8e3000a8b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1755cca5-bf43-42e9-9813-5a66acdf35ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f336e5ad-aa10-4515-9b5f-71f9af639cee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dc92afa-f60e-4fb5-8449-d755b9a74636",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ce04ba2-dd48-441c-8a01-8810674dd783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20b2730b-6f07-4b99-9713-117950cde0ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49de9ac1-0a75-4213-bf90-6f82077c648a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "40a47e2a-14d1-4815-b8b1-e82c35932cea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6f50fed-f118-4585-9755-a4b24479d2b7",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3d92561-69d6-4e2e-9b38-16613c2d9759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3891dd71-fb04-4dd8-a14a-e7a18dc8d5a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67707eac-6d5d-4507-99e7-9db680a10856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "254d02b0-3abb-453d-aa07-448836397767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "045e2388-d3fa-4024-8ea1-88cd3ab1a92e",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7409cc91-7f2b-499a-8a95-7d7b6fbda560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04fccc9e-88e2-4e63-81e4-39fc2a8c1f1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11d7be27-65ce-47bf-935b-77bc8a8f1d63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e1782dcf-029e-45a9-82f9-043130b866a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfdf9cac-d02b-42a6-a5b2-cff00005a122",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2367efb2-75c4-4dcc-afa4-ccd6937d4d7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87d482c4-da45-4851-beaf-3874e59b5189"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cd37a2c-d49f-462a-8aa2-b72b1929519c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "348f1ae4-d21d-4fec-ac0c-d0ecd162adea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1b6ee73-5a2c-4fee-abc3-aae7cf7285b1",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "400a95d6-917c-4457-a615-8818a2eb42ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b01538fd-4214-4a98-93a7-d4ded67aec23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6403c5a4-251e-4587-af6d-66cf1378a5c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "041c5b5c-c3a3-4dc8-84b3-a090dda14dcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e71bcd2a-3467-4e3e-ae3c-112d15088b33",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38888adb-efb7-4957-9137-3dbd9857fd9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05ab6926-d18e-46dc-8dd6-22ac4858ddee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63a28d2b-344c-46f9-aa5d-3abad3958dbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc8fb02b-e895-4f44-baa4-afd85f5e1760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80e72324-121c-4cdd-90b6-68f502af7508",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87dabed9-78c0-47ea-9221-684479404016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e112a70-14b3-4989-aa5c-a41776df5fe0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69199b4c-78b5-4937-8543-6d0feb9be4ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "20471d6b-3af6-4b6f-b80a-285a131cddca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0b62c9a-40f3-4aff-b7f8-7e07e3e680e6",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1ea3a8c-4759-4f97-ab25-b232f24cd5cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe26e960-b568-4470-93ba-55920c3cbde8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad66b511-ff2d-4e98-b8ab-3c8d02503871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ce26293-a0fa-41f2-a699-875a27f796a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d235d20e-7ad7-4cee-8135-224d167b5962",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e76daaa5-4128-4cb8-9ef6-1914c7958667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36bc948b-3743-417c-9713-f6d14726ebf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "912ed443-08fb-45db-a142-31afdee35b9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4ff464d-adc7-4eb0-8dee-7db17798a9a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d71abd5-8239-4014-be03-116540eaa26f",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07d63623-e52f-4713-b1a4-daf360b319c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d39bab7b-60e6-4b9f-9fb6-871963cce55c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eb2bd90-7ca0-40d1-bbb3-b416c7ed8713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bc33a82a-496b-4300-86ae-6807af2ebc3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "636e9c9d-78bd-4d7a-9328-eb9f04addbeb",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b872feb9-cc38-4374-87b7-0c2ca0712f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "870003b5-81cc-490b-bfb3-98a8f978b821"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e386b1d-e4c8-461e-9572-a2abaa1d91d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb0475d8-d90f-4f9f-92b9-f85f7946bdcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f3a7f8c-ba9b-46f0-a493-960044e16aa8",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ed2bfbd-b528-4f99-b03f-d876dc0c4fc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b199c3b-8987-4455-a053-def9bd5c1b72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9ff8fad-0f00-4627-b22b-60b9a278fc80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "76bc3017-310c-4465-a1b8-eb3a8003350b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed9d9250-9192-41e3-99a1-459460c08055",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a94122a-3ba4-463c-af28-a034a2a8ef30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9928a82e-a9a4-4587-85df-3efd7f08263a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac06f3a6-c1e4-4668-929c-3c2ae2de11ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "da983c93-d7dc-4599-ade8-160926191fc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc5480b5-085f-4c96-b717-a77d58bffa44",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e903bcff-1826-4745-8f32-92e30b8adbb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62597b01-1290-4518-a12b-bb2b810d0834"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "022433fe-9d9b-430e-9b2a-30a514b07e8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ebcb26e2-df38-4bfc-87a9-e7906f0b539b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51a7c482-87ae-4ae9-a776-2fecf25a11c9",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2da2a7ba-093d-4dd2-b20d-0190cfc48028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b0b357a-4edb-4070-8f34-b2c0a0ed7d40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92829b69-b820-4192-aa6d-dafa148833de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c507c5d-533b-4cba-849c-32d5e9a4b091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa417d40-8171-4787-9f07-f5dae50a955c",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a16212a-1318-4547-a56e-7b9116e83d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce4f127c-8570-44bb-80d2-fa033be9b0e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e107cb1-9fe3-49ef-97eb-ca24007b8c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "aa5c92a5-097e-45a5-8861-34ab12adeee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8bdb4b5-c7c1-45f7-ada9-905ee1d4749d",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74959e56-b3c7-420d-99b2-dc0708f3d9a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58bc4e92-afb6-45f6-a27a-db9456b421a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f00e45eb-a1bd-496d-a1de-575172e223c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8edd1445-1cc4-4ddd-b290-0b9c86d9c750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "584308d1-3465-46e6-b2e3-0e4c7a896020",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29078911-bb2c-4aa7-9f7e-5527b735bffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4462b061-83c7-4c7e-8701-1b4b669927ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a2d120d-cc17-4072-be71-3c99f137e7f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c6a04a4-7897-4405-9696-d7930ae62f4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b4ae32e-312d-4511-b513-c70cb895edad",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db65fda7-c05e-48bd-9a96-b982c7dba8e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "187787d4-f45b-448d-a050-5e505150efe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ad576ea-dfb7-4cc4-9284-627edf41db6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4abc2513-551a-47ff-bbc4-a1a9cc6348f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dcd0b69-aeb5-408c-b88a-403684b260df",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a19740cd-5533-4ad2-b65a-d165d0cc0c39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0dfb1be-d925-4c2d-8c39-187d5a48fcc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31fa9a3c-4dc0-4a4c-a08d-f0bb10a0315e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f42d76d8-0860-45c1-abf4-932cf9f3a975"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7e2744e-ab4d-40c7-b295-43dc3f0b53f7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41b3c230-101a-42cd-b785-efad7ae58dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59826799-a4a5-48da-b6a3-e9fb549a31c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af73fb9-3ef7-4c22-9fad-0c7138378055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2d0edfd-f4c2-4866-8fc9-220f6230acdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b42d4ab-f13c-442f-a614-7c6a6f558f6d",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b764143-3145-49e4-b6db-c9d5a0c2b36c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c95c262d-06c5-44bc-ae77-fed9a357e2db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1988a2cb-835a-405a-8e7a-1bf8e7f74b79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "500a76af-ac0e-462b-8c44-550467523851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b5c97ff-5bf7-4064-a720-9c97538ae464",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c84ca229-c86b-49d8-8877-66e56fcc6d28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c471e22c-2bed-4b18-a524-86ce60dbc814"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bd76b76-00f6-46b4-8dad-19aad604a17a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "07e6cb74-540e-4758-980b-41fbf60c5b35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4353bc9-33a9-422c-a46a-db0d0dc60d20",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a924ae16-7a0a-4570-9c8c-47e64ca7d057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6e1ecd1-784d-48fb-80bd-b00c6582263b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3734eb50-7b35-40d0-a0fc-38043558e635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b913f7fe-816a-46d0-a430-005fb8974670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6388d7bb-9a87-42d6-85a0-57e7b9d78f07",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c87d94f-5d80-4351-9c93-9f7a105b5db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c933183c-2b46-4cfd-9c79-71f1d994eafb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baaae9ba-d958-4b42-be83-86797e9722ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0c3986a-a6b6-4655-bcc4-0e0272052c38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "519d32cd-e520-4ff5-8964-85aec86dd6bd",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dae5da3-b745-41c9-b2c1-da2a6e14477f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb16ef26-dedb-4f72-84e9-a98585033ddf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a01f92ab-0f67-4e83-82f5-c6f5fb330375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca4a180c-287a-4c1c-ac77-16b0235b521c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68d3a154-c28e-47c8-b60d-bb287eba6009",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e16c1d-151b-494b-a8e9-593d914c8ac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0edd694f-a396-4823-b1a0-afcb12974838"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d8a6f66-4182-42a5-9ed3-42ab3c84327d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bc5cb3c4-ed7a-4bde-91b3-2fa1bad0b0e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04bf49f0-588b-4db2-9af1-dd7cde82cd5d",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76d1bedf-f4b2-4848-8d7b-a5123cbe14dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e208d6db-aa82-49ae-a8a8-0693228c496b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd474d52-e18a-47c0-b54f-efb63bd82fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b83d18f8-43c8-46aa-92f7-eb2e0779366d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3a64cf7-3bdd-4241-ac38-0c90384a7e1a",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f6abbd5-595f-471a-8032-bcd3228b30d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cda88f5-fa0d-49e5-b04f-b6a33522878a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d36a1ec4-90e3-4807-80c9-508413df22e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6d894d8-d363-441e-aabc-cb901cc83702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b17f86fe-4611-4010-b6ca-2ff28addf6a8",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aad11baa-7634-44c5-9b4b-c7f8a62e6667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e09e7b8-9903-48b1-9feb-55e5e118ac61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43b66dd3-e095-4f14-af6a-963cd271f72e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "423ea708-ba5a-4ec0-bc20-f3d6ad9ad418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee884ee6-1771-4cef-8b16-e1901f21e356",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "232b210e-70b0-4b93-af75-dca568d0c21c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9ec9c8d-b514-4c83-bd05-15052ffa5306"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7fb06b1-ccf4-414b-bc02-8713c172f997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "56a74e68-9dc5-4741-b419-54e734d3dd04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebc1512e-1fbf-4dba-89c5-95d09b60dfd1",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0874914b-9f4f-4474-8699-cb6a46e221d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4686441-cb16-4b73-ac21-3de465c2b722"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69e5f578-d3d4-4328-b1f9-f8b8ac6cd9e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "96e7beb2-f3cc-4890-91b2-1f0d2ef70e50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "552d1a22-2bfb-4633-813e-170ec30547db",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78fbb2cf-2731-4656-bdbf-8d50f00caf9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8ebbf0e-39e5-455f-9892-83dd2eb29e2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eeaa90d-3b5c-4120-9b66-b5d04f12ce0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "88d2ce1b-9252-4e9c-b77d-6205a82961cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c586fac-66a4-471c-a09f-0145c89e665d",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "778d6bef-8454-4a68-ae89-c664aa0aa067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ce4ef12-b7b6-404d-86e0-b2155f424baa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cfa84fc-2c75-47da-8656-f436de8eda89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "521c2365-4eaa-4160-a26f-8701750c0070"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b2e3bcc-a2e2-448a-967f-82022898d485",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "524f4be1-923d-434f-a007-e12413a0303c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0fe83cf-d029-48ce-bec1-6e3813e20ea0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dad7556-30df-4152-9d85-d6e8de4a926e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "58fa4e0c-60a6-414c-8f13-9875ff3fb0e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df47bd51-4b0a-4a7a-acbc-3eef7deabbea",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f91726fa-ad10-4a4c-a582-974618687c1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be2cb6dd-04cb-4754-b2fe-491aab481bc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7a1a236-60b4-4c1a-84d2-49c0c13a3c39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e970e03e-31ee-49bd-b47e-a5ccb63e594b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a674fe9-deea-40e4-a71c-55712c8da896",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14daf61a-42a4-46dc-aff5-a553f639c1ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61db95b3-4f0b-418e-a864-34f88f88c072"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a250b4f1-0564-4935-94ec-b9f68f3847c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "53d1cc1f-30e7-4fa3-8604-952ddbbe14bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6ad9db1-bd4a-45a3-b9ac-f2c5e6d34d38",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "989bba1a-b5c7-4ddf-8f94-5a1430e39f1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b077ef5d-8af7-49fc-bb75-2ed0228253c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89272bcb-c7f2-4e22-b9fc-a4f981849444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "76c1bbd2-d7ea-4aed-b7b9-c3e124671d0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "422b7ab9-12bc-4424-bb34-b709b181150e",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81afb76b-e1df-4e55-8abd-b36d7785cf07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a0404b6-a462-4733-9c33-619ad92fab38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02b40af3-5dae-4d49-89f7-9669861b1fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "03d10b1e-1360-4f07-97c3-969ae7e22928"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91c3d1c5-2cb1-4fcf-b02b-f62c2a605b09",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b32d516-e546-4af7-b7a9-b22438c770f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ff15246-b266-4812-abbc-3d5d3329b87e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b6bfc96-964d-407e-b666-d828afcbd4e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bdf8b196-e21e-4116-849c-ce57a82bda2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c0132d5-1969-4d86-b376-fd1a1cf9eac3",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ff5cc28-f519-4cb3-953e-1be54e603bec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d429f94-f38c-44b5-8ac7-ad76cd00aa42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0c85e9b-a7b4-4ea8-bdbb-5525c816056e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "01c8dc59-d9cf-455e-a5c0-5e7a84c6611e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7913ec9e-8a31-46fc-b784-add4ee6c922f",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "609a1443-0767-4aae-ac21-d2c3d26c84e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "060e0806-da92-4e6c-ab89-189c516e263d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b34b753-882c-4a0a-9f7c-8f1889fb8026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c55a8392-a8ed-44da-ae06-14dc8e02be0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a6968d8-fe34-4ec1-a13b-9febb18e2ca8",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba5ce7e9-5c29-46a9-8ee8-e6ba93b22ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13c403ab-baa6-4a43-90dc-783c29e20411"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2f342dd-7915-4b7a-bdea-f97c90ee70b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9522a608-37ba-4c1b-a81d-ba40105a8459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c1e4c5b-cff4-4190-980a-d17480e89db1",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b7b89c4-76c8-4a0f-89bc-c098f826b22f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e18fbac-ac41-4841-b91e-ba90ecc5facd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d95dab50-6304-43f1-9171-9d30599e9ae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d84436a1-7084-4e3d-b5c6-f3f12b06cab7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3e4c874-32fe-46b0-b5c8-118ba372836d",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64b6daf6-bbda-4ab6-a9ae-9ca1e1ce190f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cf5a0a3-d7b5-4490-b81c-a722c5804a37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce7ffcc2-f86f-4a10-ab7e-e08d2801e010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8cc9f75e-95cc-435a-a282-aeea9f61e075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c06b389-b1fb-4d3b-bedc-da263a5482ee",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7421fb25-4d79-4c8a-9cfd-e3ce299d4611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c13aebf-00e9-4f72-8dfa-91ffb772f342"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba3d7dcb-ec39-490d-913d-32af5b3a6baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1836c7aa-66ad-42ca-814e-574fa1613315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f91e0da-4153-459e-9942-ba9cdf9dbd9a",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77057223-c46e-4419-b5f9-df8cfd4f1762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "172288f3-b6ef-4a23-a342-e68aba10b845"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4631d3a-fe20-453d-8f9c-4a8a75e93a9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "239c9842-27c2-445f-b77b-d7e2b4b5f9f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b89c71ab-6c7c-4a9a-b3ff-66429d490717",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42cfd5df-59e7-4d2a-8cfe-3d84ef8132f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "871d6c92-1599-4946-84bf-5069ab308045"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dca05eb1-f04c-4f4f-81ca-9ed985815092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "edac15e1-c089-46d6-9496-9cc862952a87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edd31331-f191-4046-910f-f2a4bab2960c",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44e750c4-9f96-42a5-b259-6339837cf6e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf2c698f-f2e0-43e2-b169-cd8f6a296b2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ec13366-4e38-46f6-824f-c8feffd53108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "316ec653-baa5-4115-acaa-430f5b09809b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdb8a8e7-6adf-4e47-b255-433c4b0c0fd7",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9de21799-96e3-498d-a693-3e5804fb7804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c8a2682-a63e-40e4-8c44-9fc715c9c2bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "845b0894-a6a3-419a-acbf-825df6b113f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb284a85-27a8-4eff-a832-41582b459e56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e02a16f8-d84e-447a-9940-9bae1373978b",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "451ce9cc-bfd3-451a-ac79-d4e3cf89687c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cecb12e-32c2-413e-801e-9895488d1cb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc793888-3eb0-45c6-9db2-ebe8c29f7d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d14a52d5-2d1f-405c-83ae-79a0b3783d56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e93296b-872d-47e4-a5f4-a7082760ba4b",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aefd43c4-36b0-4bf9-a847-030de17da1b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "792f077e-68e3-4a21-a799-da7a34d69914"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4d242c8-cecb-4ec2-b9bc-31b0e755a5cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a9dc0e75-99ea-4263-a411-a47a8949f4ba"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a304d877-236f-4ffa-acfb-d2d3a69724db",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "df6022f2-4685-48bd-81a1-48d1a3594f53",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6da9c726-d8df-4b1a-8265-7da0b48fb631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "846c6ec8-e2f6-4945-abf6-ef237f0a4434"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20e6bbbc-2a52-433e-8b24-bfba6ff80f24",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "39dfedf4-8f26-45ea-9858-5fb90a613c2d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8b414d98-12f8-4318-a0a6-e5c1b7947dac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8f6fc46b-0785-4fcf-8a24-d465f017cddd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "695c2f4f-73c0-4152-b74e-679cf4306170",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dbe71f88-709e-4421-bbc8-c58d7c323eb7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "90bbfa7a-59cd-4a3a-bcf9-b04e436682d5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6143579a-365c-4eca-b74d-69b831fb7f4d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "67536430-895f-42e6-b799-3164dc9e02a6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "34b37873-ce5b-408e-af66-bee5126cebe8"
                }
              }
            ]
          },
          {
            "id": "c99f71b3-9149-49c2-80a1-871fcb00e194",
            "name": "Positive Testing",
            "item": [
              {
                "id": "dc730c3f-6b58-4239-be60-e7937fe736b0",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "e208df7c-cba8-484c-bd3e-9ba4a122537a",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae667eea-5758-4033-9a14-5220a4c6cc0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "30dc0b40-50f8-42e3-8009-50e285df29bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc2c31c9-25b8-47bb-bb0b-bcb349aa3090",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f912ef25-ea5a-445a-b99f-6f6c93d7bf3b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f053f228-466d-4e04-aad9-b864afad3133",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "91696185-60c9-4305-8f85-fa43ea685f11",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7483d69c-c5c6-43f5-a2a8-0ac76266d291"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f2b392f4-98b5-4db2-83e8-5af043390c3e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0ecb4a25-828e-4cdf-aa33-2bd8d49a7528"
                    }
                  }
                ]
              },
              {
                "id": "5908f368-03d0-4f81-b885-24eee138e291",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2c2fe18b-4625-471b-a5cf-94d13a1b520a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "84a65ed1-e861-4aac-bab5-fd2dc347bbf8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f7f799ba-ef66-4411-a0bc-9d572f294d44",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "43d7f231-481e-4123-b36f-16acac65f36c"
                    }
                  }
                ]
              },
              {
                "id": "3331a45e-db1c-49d1-9fd8-2f26bd4240f8",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "33aa1ed0-477d-4d85-9641-dc2436c7c7e8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5ed2d488-ae64-4374-8c5e-bdfe6f3b1fb1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "77032a96-5746-43c4-9732-2634b40954e4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6c6910c4-7c51-4205-9c43-0c00c50cf255"
                    }
                  }
                ]
              },
              {
                "id": "c929a45e-2800-463f-a8c2-40d7e49d5bf6",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "27f01eae-0872-4ab9-9a79-b80871da4aed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "569cb86d-7d69-41e6-9ee3-f954d3202721"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "015fe9e8-c264-4fd9-b6f9-e3c9e7ce3d1f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "3815a1e8-4443-4448-a97b-efd3c560d94e"
                    }
                  }
                ]
              },
              {
                "id": "3771828b-6ee4-404f-9cb2-8958fc506575",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f3ac313-5e1d-4290-80c6-d3085d6f622b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "40a70dcc-714c-43aa-896c-9220ec523797"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dde770ae-3caa-4e80-b1fc-f15f0fbe8001",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "e9158a8c-e6c6-4e26-bc7b-2c49b3521118"
                    }
                  }
                ]
              },
              {
                "id": "9b69bf10-ed49-4ea3-a2a2-d7d233ff168f",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "95d1d045-589f-4eba-aab9-1dc51e83bbc4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f524c40f-2431-4798-8516-9fa1f5df4232"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21344503-0373-4b7b-bae0-30026e1b8086",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7276717c-611f-4c7d-8db4-3fa01b1f151f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "307cd6bd-ba00-4157-8510-6da83f633f34",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "616ae780-e9e8-4c46-9e9c-5ef6dc858a5c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7269cb56-3074-4aac-bf09-e1e6398f3ddc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "80527b02-9716-4c8e-b175-acf36ef8c681"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4f91436e-54f2-4c38-942d-7ec368aee7a0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "3c9ee8e7-5335-4a05-b958-ffdf2dec97fc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "11b5c1fd-bb4b-4458-80f9-439c8196f5c3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1960fbec-b2cf-4c18-b361-f16035612ce9"
            }
          }
        ]
      },
      {
        "id": "ad656661-13b7-49c5-ae06-da0b60972fbf",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "e813ab14-ff22-44da-8d43-f353d1076825",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e60f9e45-0192-4e90-9002-6601acb3d518",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1cdec7f2-b69c-46f5-8655-ac6d4f9e46bc",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34154530-b349-4cb3-90dc-260a7d148d51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9328c0ed-cea2-4378-b44d-9219e0faa5eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0d2ba46-fdbf-4274-be11-87ffec555034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "acdcc500-84b9-45e6-aae4-28da9f4633cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a39b24c1-333c-4c30-b7d5-f94d58df2959",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6fc9800-0040-42de-8628-05091068bda9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a95685f7-0539-4b5f-afe2-1ea149924f1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "247319a7-a996-4aa5-bb24-18d1aaa267d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd42f240-44c4-4064-a7a3-985c294b34cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80626ed7-166b-40b8-b12b-8ab6d27f25d1",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad0cbbfe-f839-4cbd-90fd-b97b943b8d1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "436c38cd-9a7a-4d46-8ef2-5df4fc17c8ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "782a4470-2994-4c40-8a26-1897bf2281b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "567e5728-571d-44e1-91e2-e5c715618c57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2207d75-fbac-4ec5-8fb9-69010320611c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2eaa8d8-7ddd-498a-bdfd-e5464dac3802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4679e43-2aa4-4906-b4dd-cc8b89ebf914"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ae49f39-54bf-4fad-991c-e8da6c1baca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ee353f4-c41f-4860-864f-609fb7469440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d9e0450-7a6b-4993-944d-662a98faab7e",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "798d6d6d-aae4-4e3c-abeb-a46a689851bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75f3c827-5d6a-45c1-a6e6-6935c9e4481a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1af14750-7495-4f88-a5ff-e915ef020afc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ada348a5-6dae-43de-9bb7-d075f0bede3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "741287a6-640d-4df8-b21e-42f47d24d5c5",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d3aad8e-1812-4ce1-aa3e-1aacac791ea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b2cd465-8767-4b05-806d-c80d0fbaacb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ade085-24d8-4e42-808b-16c91e853313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e9993126-f6a2-49dd-9f6f-a3f51075959e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f0d1dc2-35d4-4f90-88de-ce0dfd4582eb",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1cdc0c9-0322-4e37-ae27-a559ac720d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc592897-66a4-467d-aae0-477ddb0b90ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64b3b447-26eb-42d9-88c9-89d7a8eb646d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "e393a3b0-a29b-48ad-925f-af671c6f74ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7e5c7ae-e9e8-400d-9e43-00c4550b533d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "805ac877-d7f2-4ec9-b6f9-bd50ec33e293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2d6ca4a-2236-4516-b617-7cff9874952c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ebbe898-b19d-4261-bc75-85d6877ace61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "604665cb-00ba-4b35-9b56-57796821e3da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12d1bca4-c9df-4af1-9a8c-29ad5f9475ed",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53a901f3-6419-4815-a0a9-4c417426edcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "358417c7-e7ea-418b-bb74-fecaef3994aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f635fd8-0a42-4cb6-b756-b24f28cfc0c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "20e1519c-989a-4d9a-8bb7-00c4165e2fbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cdbc76a-b333-4385-8c29-ce9b000ddb1c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e681a95-95cc-44df-a536-c0735df7bf3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "953db301-6ec1-4227-8c37-274b7ff45928"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfdc4e1e-1e4d-441f-bc1e-0d28db0e4af4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a846ae7-2af6-4302-82c0-7e6e4c69c9f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "541ca973-48a6-4470-a75e-852d637204d3",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd2128d8-38ef-4e8d-a684-3af13a680a49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd959a01-f4bf-481a-bd91-d49121d31dec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2599117-4914-4cda-8ab3-4d0541d1eaec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4a01fdd2-e748-4f02-8781-fda8a44d9cb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10123ca6-21c8-4904-93c2-345532de1982",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5efe0520-ff6a-4a99-87f3-0670b00201ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f054d6ec-0a94-4780-b476-e1e1e0794628"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cf359ba-9aab-49e5-aaf5-f15fbb56b4ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f5b9698b-bb98-4674-830a-f42b19da9f20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3117103-202e-4356-a2d8-0d195c89659c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d3b6e38-5b23-4583-ada8-2864991b8038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8380a0c-0865-4b1f-9cdc-dbedc6c5f83e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b029eb24-a003-4fa0-a704-4da52c130a25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "92ba0e9a-d2b7-40aa-9710-aa961a3f3f32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4331e591-d4c1-44c6-89b8-f80692cd751c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "323c206d-362f-45df-ac93-40dd87a46e8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d11b745-dea3-4c30-bfc0-edc6fdce4d92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4876f85-463e-4cac-93a4-be87a4d6d110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5697366f-56a0-4bdd-b973-6d0c1e3d68a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f689fec-0272-4df0-b79a-ab20804ab3c8",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "975a8cd0-8b63-48a6-84ac-aef5c8c3e579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "467b4aa7-855c-4d98-8229-579439ba4d29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56cfe490-4b1f-4444-9f37-a9d3122837ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ecbecd3-d381-4175-bf85-c0106770e9c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff9feb81-1efe-4ddd-b2b5-8ab5a7d5de3a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33125555-aa05-4bb0-ad5d-bc948ab7baf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7405d68-7a24-45c6-a4ec-5d2cd2af1974"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d913babf-c6de-4bfd-b7aa-63ed1811d4f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "5edbbe53-72c8-47b7-a8d4-1b678d6120dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3d8a6fc-663a-437e-ba45-58d2b2e9bcf8",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a2992f8-3c48-4096-b006-0e3940719297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69dd6dc3-1cc0-4c12-9c94-ee750599ff76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a3eab1f-ed5f-46f8-8023-421ee32b4b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1fc4e6b-8e21-4148-9082-0ce1358c56c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5d8d138-497f-43c1-9419-4bc5a6f02591",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d7b3aa3-aa55-426d-b499-29d146acb6cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f5be709-50a5-439d-b3fc-7dd4cc01bd04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b604612-2190-4717-904a-1f9b75e44cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2da1b1f4-aacd-4ff1-a9d9-4c37caffdccf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cee81d3-afcd-4a51-bbe6-304a20772ac4",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "632d5d7f-b3f7-462a-a5e9-b9f329f17de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50932160-c73d-4f39-9283-01d46ff643eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "066433d4-54f4-443f-98ad-908a6fca9caf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "681df295-d5d6-4199-933d-c9c0d72700d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae3c62fe-1bcf-4757-9f64-2a05afabe0fc",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f070c66-6c3f-4ae3-a80d-1add15a76272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96507c9f-726a-4234-acfc-f38da1883cfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bad753e-6389-459e-8ec4-5549e78fc37c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f518fa3-604f-4124-bcae-21f4227fb3f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3110f9ba-f59f-4979-a84b-b5f2f1d84452",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4ccffe0-05b0-4d1a-81bb-b4a1338a57e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81e119bb-1a9a-4f02-b8af-e1014ebd5150"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "056bd10b-ad15-4332-85bd-b9f31d22967a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "747cfb29-a309-4c10-969a-f362caf2c556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6faa90c3-d9b7-4336-a27f-2e27cc3acee4",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f0182fc-c5c6-403d-ad20-c3a32c15eb4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0956b05-18fe-4136-9232-2320a99141e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fe6ccbe-6b64-472a-beb1-abb473b74d23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e9ad85a-d2ee-4b36-8f03-07ba9dc933a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cac61a5-7aab-48c4-9dd3-7cf99261f6d8",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af1f688e-2cb0-43f4-80bd-7bf3ad35c6f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97261173-f0f9-4cf4-a29d-c4913d59bd0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da269fe0-f39f-426b-b685-d07ef50ecb90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a21b58f1-6d94-4fb7-a34b-e925ba40bb1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f9899d2-96a7-4873-adfb-11ff4372bc53",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f2abfa8-503a-4671-a695-c11a5fcf4420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a20069af-d757-4c89-a093-789d3a0d2395"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3046b09-285e-4452-9206-4e5968fe1afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "84071a6f-80e7-46ef-a68d-ce5fd45e5a9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3efa614-d4d5-4642-b945-fe78a111cc14",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88892b96-e076-4224-a105-a5f995f8c168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85cab1eb-8d70-48e3-ba53-0b68dccb6083"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f96ba638-f966-489d-ac2c-6d4ca6b90a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d07d1095-5f92-4a7c-a21c-3837f1149f91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b4959df-1240-47c8-9758-9371d58f1eaf",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "138bf775-b578-4a3e-82d1-3f7f1935b9aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fe609c6-fc6f-4071-bfe5-5ac08af59726"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "765f1bb1-bfe2-4af7-8aa1-e9ad69a5c1b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd5b88aa-f148-4039-a180-c045abf0a464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db5c2491-b526-4292-8b60-075c24b215b4",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e548286-b166-4bfa-9b51-e1fa4bb04067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97a97594-e53d-4e7e-b59e-5615986b6651"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39597966-437c-403e-b40a-ea3c75bb2960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "648fdbe7-d331-4456-bc4e-799e12ab8722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "596da744-e23f-4cde-9e4a-302c8e46fdcd",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ca815a5-c4ce-4bcb-bda9-49e30dfaeba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acdbfe57-92e7-4379-b7ac-7ba3cfecd9da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25721841-deb3-4cb7-9e74-1431489baf4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da275308-6593-420b-8a04-cc62eeeb6dd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc38e1d-a25b-4d62-95aa-fe3cdeef18e3",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd42b4a4-2373-4d7d-955a-c5e202cf06fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a46d0ec-1042-448a-a14e-4241a803d79e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a2de304-8915-4689-a2de-f073609cd63e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e1a8824-ab1f-4215-9d7f-ea8be4d2a7bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbdadbe9-5ac0-4466-87b6-fb0c1c187c46",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85f3124b-aa65-46c2-9f2e-3557ea09592f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52bf9c1a-d3d8-4ab6-ac7b-07705007ea76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30da7c49-0e2f-4ad0-8010-caa7819038c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6536c723-e135-4bfa-9bed-ae0f3bbe33de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d96322b8-53e5-4cb5-a28c-d2e2be6ce413",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecfd8017-dca3-44d4-9960-38dd5dfd2781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce114466-d8f1-410a-8bd9-f94a303dc2ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38109468-fb9b-40a7-a30f-1920a7f0f30e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8eb12a07-b07a-44db-b38c-dfebfbd5f8ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "058b44f9-6256-4a57-bfcb-e3955b618364",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b2f9ef5-563f-4b51-a68a-4afb02d21b4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bff6275a-c33e-4a5f-818b-e782cf7146d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b07557-7ac5-4981-9153-419eec67dcd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55cd259d-12c9-4174-adee-487069e69468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21b79d4e-f64a-4ef4-9f25-c0b23067239a",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e76f3942-fc96-4969-afc9-361959dc818d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c5f9d78-cb49-4f7d-9d27-5c80a1fbc622"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b31b6e8e-e9db-45ed-bb2f-2e6e51743170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "813f3ccf-e0d0-450f-8918-635a65e8e131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "490983ca-aa61-41ef-ad97-830c15d5ac87",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e01cda7-52ce-4086-9f99-134598dfdf8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dff7768-15b1-42d5-ae8f-9d98882bc6e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c2889e-667b-49a2-bf52-9c1547ee82ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c1e3ecd-f171-4d9d-8cc2-93c89df1a605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2db0ab6a-1906-41bc-a8e2-da82754a748b",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1667fa53-59a9-43d1-b957-a8b9107ad8d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37e53b37-27f1-423f-bbde-0e91cb508c9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98c015a0-4e6a-4fbb-aab3-ffcff5fb7fbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d0096bc-1b59-4cd0-bbe0-b80367aa4b08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a2d56b9-1ad0-47fb-aa70-e4bae12d6cce",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9d06965-b7cf-4ef7-b8fa-174c3f4e5575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6963420c-3333-4f77-801a-db593549e034"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "646e1070-6216-41ab-b615-04e25f006b4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "339d9ea1-005c-471d-b1b5-62d5702cb90b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "211a9a0b-f383-4b52-8070-155a9f61d8f4",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bdefdbf-1e86-49c1-af4b-4866ade5e877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5f491ad-4954-47e8-a744-5c0ad403f308"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9573288a-99b8-441c-b644-5a26559aba0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e28235d-cac0-42af-a200-3f779bd79d79"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "03163495-d603-4771-bff6-34606b071271",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0d09d809-c496-4d0a-96c3-fb07196db419",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f8d197b-0ce5-420f-acf1-4babca2781c0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d8c57644-ef10-49f6-95c3-c992f3f7d8af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84f80005-d32f-40dc-969e-761c83df619e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "979c5f8e-c08f-4bae-a8e9-304f4542dc64"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "04af5d05-e32c-48e9-9fd1-eedc2dc38ec0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "95db7c66-31bf-4ce4-aa9b-0cc84c36cb17"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5589576f-b081-4b49-a209-9a02bfd2cb7f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a3a8b875-7497-40f2-b76f-5a2089fb401e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9bef1faa-5996-45e7-8a30-54227aed2dfc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a20e7644-55d5-4105-8e58-67a352e5a781"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0e0c3356-abe4-4587-8bb8-17ba342eccf5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a0324589-623d-4f72-86a1-e2fd8ec873b9"
            }
          }
        ]
      },
      {
        "id": "e6baa54b-a96d-4aff-9905-432c7d7ad381",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "bc673a27-13dc-4f59-95fc-ad7190adc71e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0e793b97-76ce-4758-a4cd-9af1fb57049c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "032b9e6f-cbd1-4add-a70a-9c0166709670",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e802fe6-7756-4fed-b71d-9d8d319283c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b773310-3d8e-49f1-af54-439057fee0de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ab21a60-d5b0-4645-9d26-9b58b50631b5",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12b19971-d74b-4a5c-8558-1c68d8ee60a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c6ad5d8-6c96-4504-ba9c-99ca15be37d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8784989-38d9-48a7-b6c6-d2e090573e29",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80168e1a-3d39-42be-8cd0-76a179eef1ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28edf90e-4ad6-4c08-9cc9-63070aa84e3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0d2315f-3652-4ed9-bdc0-f15c66e91e4d",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bca5b1da-01a2-48e2-8f93-9281fe117de1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9aaaca1-23d7-49ce-aa7f-82f8c3823c75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e99a7e63-95f1-49df-9a77-a071a004e0bc",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9173c474-38c0-4256-a53e-0dbf6522aaa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e48b765-c171-469c-ae28-9f599680f4fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4f33862-a13a-442b-8c4d-b1e9ec79d598",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf2936f-ed0e-47ac-a2b0-149bdbbab11a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7701e04f-25e7-42a1-8043-ed2e2b4f80a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4630a818-a758-4274-a989-202cd587261c",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "677b040d-34e9-4cd7-b006-9249f8f1bb28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a71955a-fceb-4b1a-a2bf-5c0bf46bd735"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccb57b54-d43b-4466-a196-52c133e03116",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "429e43f2-3379-4804-84c7-1b3fc021ec3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "721f0913-9efd-4cab-b902-38c136f6932b",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f564739c-3567-4383-b1b5-14d40aee710d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ce13c06-dc99-48ac-bb11-858bf4f8ebf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27f1e4d7-db86-4d63-a65d-e3158f7ad147",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4af98436-c597-4ad8-96af-8b39cb065751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "558d6894-99dc-455f-b5d9-771fe0811198",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87f85a8d-94c5-4ed9-b85f-cf02a83bc82d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07384183-e826-4eb2-a608-9fddc5a873cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2265da86-26f0-4d03-a5fd-f1b11d659903",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66773fbd-76fc-41f0-be52-8ab379b57b2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eda0e100-8843-4c72-9d7d-413b9013baab",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d65d150-b379-4036-8e98-26488147959e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61a01700-f668-46b1-8ea6-d354a7b31905"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ce2e10f-084f-444f-a852-8647d8e550be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ddaff43-ccb3-4032-ab63-60824a0fd8ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dcb32bd-8eb9-493e-a5bc-369a14533cd7",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "980868e6-e8db-4f5e-ac16-1bb534bf678e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b763e080-e403-4668-9238-be621a537808"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "033e8157-1c5a-4886-860c-7bc8698d4d36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "269cc134-23b9-4959-8526-0c9430e7c159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d11a3209-20b0-4ba2-8756-26baac4908f4",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56d7038d-d941-468e-a8f1-845a3a344ed9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c2a22dc-f213-4afb-b8d1-4d25d42be0b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91fb3134-2e8e-49cd-b423-1a86280f29b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6decf357-5c96-4f94-869c-029c1b0dd6f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29783059-fb99-42ed-aaab-def1a80770c1",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7372045f-79f1-41f2-9ac4-04e79599a2e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2be2acf-8d3d-4412-b0a6-466cd12d2ff2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3676b8b5-7ff7-491a-b560-7c77a7bad110",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ad23e8c-eea1-480f-97c1-140ab0bbca6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70f10810-a6d3-470c-8ca4-2fc8ce6ddf5b",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85714569-8f96-4034-9578-1b25f3f11886",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fd96c9e-9238-4b33-a91f-b5a68903f2f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ae9af9f-468e-4352-954d-a2d190d47eb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e297c63-6b63-4039-80a7-f22f9532690d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54024d5c-abca-4080-9295-f11945efba84",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bce62036-39c9-4df3-8016-5f5c6afcda98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64d10a74-5a78-417a-9a8f-dbfbb0513e6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e40e9b2-aaed-4422-81af-845d22e7b71f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5f73920-4411-461e-84dc-382c4d447491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbc748b7-9a4c-40bf-a852-e424261eec91",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4bb4eef-62b4-482d-9eca-2c0e45fb5c4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16fca495-f598-4852-b58b-eb7cec0d0a6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3e90b06-cfce-4165-aca0-db1fe3288c97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28ceb4f5-1f51-4eb1-89df-f86133e04e0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c00e3e8d-6383-4c8d-9ea3-814e188a8fee",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3d0335e-687c-4640-99c9-6007cab0ba47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ab9a916-de58-433a-95db-bda88abd0e54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fc7de97-90be-47ae-b3f7-7737dfdd5728",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c856aa0f-dc44-42d7-bb6e-5ac47f685fdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "601439cc-f6a2-47af-a291-ed2bafb3ab06",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd4b43fb-2bae-43ee-b7b6-686f5b4fee0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4fb6de1-9ed4-4c40-aff0-2b84d8aa0c17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f83b4ef-7abd-48fa-8c2a-ee24f50e2a3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c6afb5c-407c-4fa5-a074-8a1bd589e290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6ced1bf-5148-477d-ab81-43344808b68d",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d17ebf0-7fa0-4613-bfa5-b76a70f59433",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4edc735-2148-4d80-ba64-e54da18eb151"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd7698ff-a3ae-4ac9-9cd8-ccc091128dd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e3ab269-319d-40fd-be10-9820701c0a05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dae7b9d-f161-46ff-814f-faa0db66cbbf",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6a4e2e3-22d4-4f4f-95e5-4771d30349d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98d7d12a-893b-4cf6-abb9-bf1285510d94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "decc331d-7cc0-4401-92a9-f4cb3d54f8d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49ffe69b-35db-49f7-9b24-7de26bc6c519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f8cb28a-aa76-418f-94ea-a41f83b7efd2",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd45d5d1-8369-48d7-8161-a096b4bb6064",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3143dbd4-2f99-4a32-8bbb-4e7f6aabd3e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3d33a56-23ec-4573-a058-e04dd0b7293b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "726ca14f-376d-4258-a6bd-6600d2f05879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d5cb88a-9640-4a8e-ad62-cfb1e78d6667",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d537a9-5ede-4b85-ba5d-43b6c8ec07c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "523c4a8d-8a85-44d3-b5da-7141504f190d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6661aced-f4f4-4d02-86ef-1af0c22b97e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2633a4c7-a82f-46a1-bf63-619facf495d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0a98c08-4f1e-464f-b64c-a0a0d3dd5320",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f96e38a-faa1-4731-b774-2d05d6fb8386",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77631f8c-d5b1-414c-b9c2-5a83525deec8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57737290-3e0c-42b7-bdf5-a0340cbcd2c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "244bc880-a0ff-49b4-9159-b72ec415d027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a5861ff-5697-4e8c-9729-9d294cd65f98",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f88bd2eb-8408-4235-a0d3-efce127a1780",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8c5294a-bf36-438c-92a8-c5d73d510167"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "624ee25f-b545-4a26-ba55-2be47cca2b91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0fb3d97-ce0b-45fc-b2ba-2ddac496866d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6268e39-13d9-4d54-b002-510abfe33072",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89d384bf-18c3-4089-a1c9-3117f900df2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "115de2c6-4181-4623-9198-74ca16216343"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd5e2d60-f8a0-48af-8778-61fc56e785f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81efc58a-f458-4f60-9e21-ea201c0dc6b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "678ea594-c1dc-480d-a56c-331b21e774de",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c988f01-8970-4d19-927e-19ef5224d99a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fece987-8b44-4404-986b-e9893a4ce46e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92dce548-dfe8-4fe0-9550-db78d8e17a48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5946d153-7b87-4d30-9ce6-ed121b54b70c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c87ed796-4b0f-4a40-9f26-110aca660e21",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cad48ea-15dd-4947-a5ae-8eb97303f4e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce289e62-0058-4558-8920-d4af5aa9581f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4fce781-d31b-43bc-aabe-cb573f52520d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0f5f6e3-58be-4334-a6f1-62b967291cb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d83aa02d-2fdc-4bdb-8f68-dcf196ca6141",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83015f9d-a7c7-4748-9136-96f12ca4dc4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5a51161-0002-49f6-a80a-d779ca4a7f2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb00957e-4d39-4569-9cf8-71dae5ca3ed8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2dd958b-9fb2-4981-892c-156f8d6b7095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39174548-37d2-476e-be68-d0877efa9b87",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cb3dae5-3e5c-4e2a-9999-85a2676dff8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8abe6b66-c849-4d17-abe7-156d3012bbc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da81a5a4-3700-424c-9a34-d8a9cc8caad1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75f64bc3-8714-454a-ba4e-251a4d2db2a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75376f44-d9b8-4d5a-a23b-f422f0d582be",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2d25971-d869-47c1-b356-02ada3efadc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "742b13c1-28c6-4929-8857-9fc9f88fd4e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74f15896-22d9-4e9e-9c4a-a755fd399053",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51340098-0e18-47a4-851c-e8cdf2817a09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5a74981-0c94-42e1-9181-c4d0d1e35885",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "488f4c4a-bf06-4e40-9c57-bd944d619fb5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7c1b12d-8b9f-4a87-8f01-8895afe43dcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0d44fed-4ee1-4816-96f8-109707a6341e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19711609-9dde-44e1-8fa4-f110ddf34452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43b1de59-aab0-4f3c-932e-f1f06a3d8439",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "950284f7-145b-4fa4-b46d-294e53c21407",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb9d79c3-60d9-4252-948c-924f72729f80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5613ca48-dca4-4c76-8e50-7720774ec970",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b029456-dcee-4f55-9f4f-9ef106c01acb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fcb6d73-020c-48a4-b77d-bdeb2039432b",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f00f3d2-0658-4abb-b880-84f30db91856",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7128fed0-5b28-41d1-8e80-df1b064ceb77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb80ad7f-f225-43c3-9ac9-a7d9f164a764",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dd32337-a266-4503-bbe7-52c56c2af9f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d710d0c-641b-408c-a5f2-91f83cf0b285",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5769f571-25a4-4c19-9c4e-f59e82b6d780",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eaa1fac7-af54-4868-af6c-1498cc48b209"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d67f769d-d04d-44d9-bea5-55dbc7d3bdb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b9f0e08-1989-4842-be0a-264b4c613510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1baba522-f873-4848-ba6c-3645770bc5bc",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5de97279-447d-4a4f-9492-dfed7c0b9d5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2426522-8a18-4eca-9dcb-a6ccb9f9bac4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64f5c9a2-e946-4a09-8e30-03ba3b10d1ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d47b9bfb-283c-40b2-a7cf-2e7929850bc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f8397c8-9b37-4392-aa88-73328479ca80",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16778346-aa5a-4ada-979f-85669789692d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "699158bb-c0c5-49d1-9dbe-904abab4f2f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6d1d811-8e23-4da5-8c37-a63256107977",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2ed3217-7312-4858-ad38-c4a242eed531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b4796bf-1e34-47df-a452-79b429c9cd77",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8463f544-b97e-4302-b6be-2ecca1164b46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d1944d3-0d20-471b-b1ad-4a6d1c33247a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d6a3a5f-482d-4fc2-8d4c-81db0e1955a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09b46c6d-6a66-4015-ac8a-eeb690e0aa20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28858e1f-f400-451a-b802-53e881dbc5f2",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e437b3c6-1c7c-4d30-ae03-ee24135841c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f4d6ac7-052d-4dce-8252-5b1248b2736d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93bee165-d20e-4d09-a293-06d61839eaa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69c5a356-13ff-4f59-b1a2-671942b18cea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cceb28b8-8bdc-42ff-9878-c424491411e8",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d55e470-6bf2-4809-b244-0e7b86a9b319",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1d447b7-682d-4e2d-b82a-3c341ee66028"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05e3f167-b7f9-4544-8f8a-ae216fc605a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e0a29d3-4bfd-427f-863d-8e9c499ed373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bd017c5-5729-4754-a56c-b234a2e8b771",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f2951f1-5d7f-43b7-83f3-12993763bcba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bc01055-af85-4f68-9f81-f9ef3955b02a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f02aca-5315-4ff1-baf9-0f89d30fac0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7877b569-751f-4c88-85e1-d717874e408c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e42e1b9f-6c36-4147-9606-89ef95224a97",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "753366bf-561d-4128-9c39-e1f2d4ca6643",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7c973a3-4e88-4f7c-bc48-5710b33bbdfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "012179a3-f667-4c82-90ad-9f60ee0de139",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dcc61c8-a2c4-4fb8-bf2e-b386f5d97752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "895e3a51-a0e6-4c89-9ea9-a27633c52c85",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00b30d62-3869-45ea-8f7e-90a17bb2d57e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ea904ce-729e-4acf-b5aa-94dcd696c749"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "064bf36e-f5fb-472c-814f-9d4718ec1c84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "626a4ae5-249f-43a2-b4ed-8eb255827db8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84e8e21f-3353-47f8-91ab-8adf0e31f177",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e03dc3b7-a1d1-4a25-94e9-8786fd45bde4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8538edcd-62df-48c8-9ca7-8e8a862bc6c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f7b9cb0-5485-4350-8d71-bb913f55a74d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e1a1424-a472-4921-a4a1-b731943668af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccdce6c5-9207-40b4-927b-4257e04497c5",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1df1e394-5254-42fe-bb6d-ba0b6fbc0aca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22314238-8025-4b28-bc16-3aea44794067"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d5dd2c5-da68-4186-864c-b2cd3f6ace1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7da4b93e-e1a4-4a2b-a4cf-6012449d41c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a320c2d-9430-47e1-ad84-deb5ef4cf731",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afee5992-fcf8-47cb-a1c4-bc332c28db95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df124db4-ced2-4d62-918f-8cd963f71382"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ddf10cc-7cdd-44ab-a878-aeca3ac18386",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5340c617-7850-415b-8af6-73daaae1dbbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffd7f845-b6f4-4936-8494-800c6979435f",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "651b8518-29ba-4b27-b735-a7723daa7eb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47ad3bf3-ce7f-4c31-9b66-ed765367b129"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70079c70-cb26-4040-bc90-96d8b11f8094",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37d57099-4a6d-4996-8a03-de00d349cc9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31b6dd92-30e8-4245-bd2c-205f976af240",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc9f3fd8-d85b-41a1-b2b6-c29a30590544",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "619007dc-c12a-4f9f-a345-055a5a45dd08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "068c46b7-9f22-4e3f-8b09-f80a65751524",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72a726fe-53be-4beb-8283-40f104696fe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb69ec82-a09b-46aa-8584-c0f31c49d07d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa0b911-9e18-45b0-9516-581335c6d2cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54387b83-34bd-4cb2-b3ff-07c271e3a5de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c9dc34-8a18-4d59-9af6-a2fa49aadc44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7272bb6a-01c9-42af-909f-289f47cd742b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbd84233-5eec-4fcb-b240-a24e93052d92",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "520d7898-be74-434b-8e87-24f547fbf5a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "856c573e-4d09-4bea-9289-602a3fa24383"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a9cbe1c-2002-49f1-bd26-8cb4712aff08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "436ea57b-7cba-4092-9e46-6ae63fe2495f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd2d8497-7713-49d0-aa3c-1e19f4a8e545",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4197719-6d34-4f6f-8083-70eb676c655d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ed8726f-b575-40b7-bcd7-c962bda2f4d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34dc5108-47c2-4840-8dcb-5cae9698a087",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5be86c2f-f4c4-4d14-9bf4-2f8570e3721f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5acf97f-b228-468e-b879-78916dea80e2",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aab6d04d-189d-4848-9a58-b2c05bdf9f23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "768d1a06-48dd-4f75-b6f5-d9ea6e407e25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f58e37b5-ea0a-4a95-a34d-8d49da565924",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0b36f10-5eee-4552-98c9-e5ee8850d6b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8f4414a-8d8a-4a22-b4be-424204c4ae1e",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8cc0c62-fa59-45f6-b610-152884e36d2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2055e91-8996-49c6-be7f-925e13a656c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce9eeded-8c40-4202-bd8f-e0bff11e58b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9147c997-90eb-4212-b9dd-48965f2978fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0245f803-b949-4190-920f-0ee7e7d0c586",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8600145-7fe4-4b27-9cf9-93babcdbb6a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c760356-2494-4123-87d3-06783dabb9f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b8807f0-d949-442b-8ab0-f53a3061d56e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0832bd8-5948-4e54-8855-35722c6cdda0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81d9f1aa-1d49-41a0-adcc-708513575275",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9b75f06-9504-49aa-a7f2-f830dd153c98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4afde46-1e61-4e45-bd66-4fbff4d5207d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8755a0b9-10a8-4505-be46-b1d63c6739e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29c1694f-60e2-4874-b4b7-4de2ba0e8d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ebcfce5-1495-4df7-b352-8b4c20237c78",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a656b66-26f6-47d2-a84e-a79943fb4146",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35f55855-268a-4e20-9842-89432748159f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc6f540-54c8-4bd3-8dc9-a8c4ce366c04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dab27f8b-413b-48b1-8aec-be7361cc6e24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e9f2092-407e-470a-b4da-28e3aa168acd",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91985ff1-41e1-49cd-ae23-2fde074324a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a919a66-f748-4ba6-98a7-7d41712f55f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8766c111-5feb-45d2-b0fe-0ae18d8406d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60656283-c990-4a4c-8b72-c338fcd81c55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a588e526-30e9-477d-b400-9c1075fa1473",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "005f98ef-bb2b-401c-a411-ed1420f78d6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f01d665-6047-40f2-b105-ad9847f53ad4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d10336d7-2ea1-4173-98cd-db93be801d74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35c5a779-8dc5-4f3f-9a0b-cb88f7e4ee1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b38ab63-1045-4cb0-9746-c01832c09973",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce94a338-0872-483d-b6b6-5bc630777284",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64f54946-fdbd-492a-bc43-ec1b8771ec56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d13ba04-1dcc-4da8-8252-b60d7adf04ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f53ca1e5-c5fe-482e-a191-52327e352b78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a20a19ee-541e-4ba6-bab3-581a901087a8",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91848541-7984-44ca-aa91-0652c762a98b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfd28430-f2d8-4979-8a95-ed7b455a8fe4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "122b83e1-e5b1-40d8-984a-3c99a7f9f827",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7188f48b-9ba0-4d3b-b18b-7cf8d2297578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2852c764-08f2-4f62-a4ee-eb8308fcd698",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8879901-3162-494e-b3b0-c63c21d16491",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85e5de93-b3af-4390-9abf-c21c2b5abde3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3de4909-986e-4397-ba56-63d9afbd7df3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9a2ab9d-dc33-4cfa-8b9f-a5c2208ecbc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7e392f1-5b0f-4cfd-acc3-061700804667",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a63d54e-4ea6-4991-a770-0d5c5860f913",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f5e16c5-8cfe-4c59-83a2-a9c3a8f078d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f715c0a-275b-4e69-936c-266aab0585b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b04c65ac-6a7d-48ac-a673-271abd709897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f0ddbde-471f-41cc-8ea9-a02a8491077a",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a677c5da-3e52-4402-b7bc-63023a1dcf96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3889e9c5-ad66-4b3b-857d-7bda35b89372"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02e5be4b-10e3-4c57-bfa1-42ee33fa6790",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30d0fe7a-5e6e-47c2-83e0-3c73e5750346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd0f5255-fb40-4afc-ba1c-50e096814b77",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d1ee824-ff08-4e2a-a800-4c351b00a702",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba96909a-8082-4db3-95e0-1e9098933437"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05f446ce-d37a-43ba-8cb2-4a489911f1e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0c95e6f-06b4-4819-9c67-d88afedcfa41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19c21897-cc13-4df4-afb8-8d8aaacfd6e0",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c2eb4b0-4534-413d-9369-903b25478f32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "144d5977-a9e8-444b-9a7b-e555a06aedc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43191029-7a02-4ce5-bb9a-9d838d638569",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3c6e7a7-704b-452b-b52d-c9734bb3aab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1681dbb-592f-4c41-8d6f-a922375eda2d",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eedcc8a1-62c0-4104-8753-2eb61ba9051b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5004d44-7f5e-45f2-bfe1-fffa7063c2a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "669e0bd3-4779-42ff-b0bb-a695dee4455d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5c2eaf1-9c9d-4c27-bfa8-9a20cb0d2144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7089cfe-30cc-4541-bc7a-3d3d3497d8f8",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52e2aeb5-3527-4977-a6ed-363e23895e2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfa13fc0-eeff-4264-be30-ef136c56c105"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9df94be9-b9fb-43af-b097-43e528d320bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19d8496c-b59a-4e19-bfb1-d4dd74d39fd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a64d2143-768c-4bc6-b0e6-5ca94ec70115",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f84e947-ddb1-4eba-99d9-8d4e0890f876",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee8cb87c-e008-469f-ab6b-2cc11435eca6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fe7e4fb-0011-451c-84c5-60ba3cbe3fb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "771c1adc-7745-4b1c-ad10-63ee0f74d513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ba078a0-3dc8-4f8e-b289-74dd830aa2af",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ff34dc0-f5cc-4ec4-a12d-0a3ee3228cd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8236e871-51d9-45a4-9906-c2cead3966e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ebc9575-4cdb-4f6c-8700-43f604425272",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c760470b-b6dc-40f2-b9f2-363b6aee48aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16d42a5f-e36d-4b1a-a12f-6cc7a088de64",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9b1b808-677a-464a-aa60-07c3e193ca3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82116f95-98f1-4fab-b4ba-f4d16e4b82a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b1072d-67b1-4842-b129-b3657075fdaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e6443f9-e358-4103-975f-db516921e7bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eb05df1-534a-47c5-8f86-28dd1e7b4f8e",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dede10ff-57e7-4dfb-8625-7db2936dd2ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "197ec24a-0578-49ab-98c3-dd94a3735af8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f241c9-5490-48f8-bdd8-139701ed68ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24dfb42f-1aea-4368-8a81-37823907baf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a882fbb-47f7-45f6-b4e3-a1e649174331",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5ba9f7b-4b9c-4bf0-b27b-2188724aaf40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96b2677a-eef6-4761-ba1c-6e910f860c42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ee76604-e819-4d29-a3b0-967d5fffb596",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff9524cf-d9dc-4b51-84d0-aa7e622aad37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7229a65-537c-4da7-b84d-97c3d71c930d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d39c841-1707-4ff3-8a45-1f4036449fe4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3a44f4b-6ac1-42c0-9f41-224707de949f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73f54e75-8560-4d9e-b446-8706ab8020ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efef9438-3153-4569-84c9-353e5fdb2749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e670c68-8f4d-4609-956e-fc5fc98b272f",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c85b66-7341-4abb-844d-3cc7f897222f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2a388d6-f7ad-4e44-8067-8d722a6ed821"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7b16825-8505-47aa-adb6-11d214d6ec52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "253d7105-1a75-49ff-a59b-fd4a285a998f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "094b7c90-4b5b-4eb0-9513-825929eab81a",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "731742e5-ca9c-4818-b57f-41cabc9fad82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8c8655d-c031-44c2-9157-5fb397f2d98e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3be7c2a7-3095-4326-8015-e5a2b05e501e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72374eea-c3a2-4251-b203-27c9199864f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8941543d-e093-4d73-8e8c-b11b63c143b8",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edc7dcb9-aaf5-49ef-beb0-00a6704a984e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1852150-25e8-4348-8ae7-4428a0429922"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5a79671-9fa4-48cd-b843-3d12ce17f810",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b23274f5-4134-441c-91b6-73b1e97e1831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "158bf5f0-19d7-4ea2-b6bf-cb1376d622ee",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3ecce8c-b4b6-4112-9859-b237f1aadd7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f201a94-d971-4ddc-b772-7d6fa8a435f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09218362-5641-4241-b0cd-5026fa42f824",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1b58a04-382d-40ed-9d92-eb71886b6d4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbaf4212-33bc-4305-af7a-d3904e69efa2",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af983f71-4934-492f-b553-d97e5b452bef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "261640bd-5755-4515-863a-67320a43d948"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76a90b15-ccfe-4815-814c-443eedf6a00c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e24a83a8-e52f-4d89-9c68-e728fafb58be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d13dbc22-d454-4c06-b994-2d0804bbfd8c",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c22c4cf-76ec-4446-b02f-6d6a78bd0d93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4da14fc8-77a0-458c-a939-b30381014712"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb7b0983-c917-4e2b-aacb-a32a481fa450",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d129e0b3-739c-4497-9342-3df15b1db364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5285381-14e0-4807-b5ed-641d64d1fd43",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f9668d9-17d9-4421-9185-50fd49b45606",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7dc1ac9d-1fa0-4e1e-aa32-482c9c328da0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "099fc97f-5549-47b1-884e-0a96fc7eb637",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efd50276-5c33-4d94-bb2f-65e5c82d1aaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14ec2eda-9348-465b-9c82-f82469847887",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18e27692-cf2c-459a-b1b0-a83a4c9e90cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12e246d1-cdbc-46d6-8153-0b624daf927e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f664fc99-997c-4fab-b96a-b65badfb69a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3020c9f4-183c-4a93-93d7-07180146c3d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0164199a-ce3f-4aee-8f66-34b0a76023b7",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86b205ea-2180-45a4-8855-39dad9e634a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d3a3348-f6e7-47c4-95fd-4021fb6ccb8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5fc660c-3801-4121-b6d3-5be761173f4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22b15431-7e96-41f5-8e1b-a2085c24b4a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e4e3fbf-3716-4fee-91f5-b6cb7325d3e9",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93ac3600-4e01-4bcb-ba9d-401bd6ad69f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "106ce0aa-9ae7-417b-bdaf-fc9153d5c6b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9624de89-3a81-4eb9-b745-202d9833eaed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd75b2ba-b772-4825-953b-15e3d720221c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d74047d-6e05-49f3-85c6-2beda6f5d788",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a17f469e-2090-458c-936c-d188e594fa78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1dd34b92-eb95-423b-a441-5d2717f32dd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b2ea6fd-2871-4ce6-babc-91bc15d0686a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b777fd94-b67c-4106-9558-bb379c8f15f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "461a9add-f218-4300-ae2e-529296e6ac45",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6596c9f4-b44d-4c1e-bafb-0acca3151d07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "256828d2-6cad-420c-ad2b-3b76f5893fd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "002f72d7-cc80-4ab9-8e43-e104b9b18f3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bef52272-6d0b-4b3f-90e1-948a15279013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "012f8ffe-520f-4f85-bf1c-210930241fbe",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02fbe227-f7a6-4ece-8979-fda33b653e1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "596fed75-291c-4f9f-b4a5-431315db57a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "666be16a-05e5-4ec1-8f51-8b3b3ad41a0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28b71c26-b329-492b-ba8e-a65af011c5e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "525fb4bd-6ae5-481d-be53-c419825d4695",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea2c99f6-00b7-42f4-9a47-19f220a3392b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2517d4e1-da1f-4068-8e4f-53b7f39e0594"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55acfb74-d286-444f-be13-f334ca80fd5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6db79e23-456f-4309-a5d5-c5673569fb7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ca1b64c-30c5-44c8-8d68-ed1e3867b1f4",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e839e3c7-8878-4824-b0dc-0360a2536a43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99bb32e6-4966-47e4-8185-3ac804e41e00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c021f681-a301-41a4-ac27-632989c8305e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54815710-b768-4b2b-9d37-465737588aab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc53f4c4-e8ae-4843-9582-0b2cda5ee304",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b144d7ac-a825-4e9b-b082-bf8f5cb373dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ee1d10c-805e-4196-ae2e-bbd85efbd4ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb896dd4-e751-45bf-b72f-00601eb2c287",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be99c08c-b07d-4355-9851-c9b700793a7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a79fe3c-94ab-427e-a5b8-dc2459a715ab",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52e8136b-3cd3-413f-b78e-cacd60895cb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6c5e79c-8ed2-4a8d-a158-99fc0996123c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d729cc5-9072-4359-a387-80d96e65cf50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63c7cfaa-12b5-4d9b-8a90-6b12afe2a778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87213e20-4919-4105-915e-e36a530724b6",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0870990a-6cd4-40c2-94d7-bc6b5ede4477",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a723e2bb-c347-477d-84f5-cdd7a8e4a4d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb468061-a4da-43f2-8e73-034749c0b6f1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79b1890c-5c9f-4ba8-b850-8e9ea8925367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d24fbba5-425b-44b5-af91-bd3aa9a3a0c6",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a0a2988-b146-45e5-b514-19ab680ea524",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "358d33d5-9013-4e85-a495-9f87d7b20745"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d90e9183-2b1e-44c4-ba6b-b65a30c62269",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68ecfd4a-3407-4fb2-8ce1-f3198d868693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56537fea-3c77-40a4-8443-5fd6af6887b1",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df00b35c-9dce-48b3-b171-79a6528a3dc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "acf36f4f-6616-4baa-8bb4-719163e2b462"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "107915bd-ec8f-44e1-8a00-fe3473897f09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95c9f38d-300a-4ce7-bb1f-cc6d96801def"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73fbf9cb-9db2-424b-89b1-7902fbd534e1",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b89444-0c44-4c1c-9cf7-8bcb1c478141",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62e1bff2-8d7d-45eb-8063-278f249ebbb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c867b52e-d1b2-4dd1-816a-b29a0ab3c4ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a6dfd83-c5bf-49ad-82c3-f137ebbe6d00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d729b6c6-863e-48a4-88df-c0f44d9e7118",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec363378-bdbf-49d4-a17a-e8e9d5e03969",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "518f890c-253a-4cb1-b41a-60aa35ba2fe8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19bbd182-b4be-4767-a592-b4501be19efa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27e3dcf5-668c-4046-a160-a1567c27adb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c5f3c5e-4889-4184-8c56-2705d2f4dbc2",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b94d7b49-543d-4210-9fbf-c2bd6756e7b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2135d530-df5a-4e14-84b4-a2486fdc56ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e65b6f23-4aa2-448a-9573-f2e979c36d50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fd1dbe8-a7d2-4546-a1b6-be0441fcdf10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87b751ca-93e7-4273-aa01-7f7b72af978e",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f3e7bbd-8ddc-4443-ac4c-38100d8d8935",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cec113b6-e856-4b4b-b8c6-81ba0adc60b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dd540ed-2ef6-4b1c-b36a-f5a0bc191cbc",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "546c7873-e923-4766-9df0-a514a7d32cc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b07fc691-7d06-49d9-97b4-1a203b705ebc",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c40071-2df6-4586-a07f-438e2842a3e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77f98d36-600a-4afd-addc-1934c461c2b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96bb5a8e-6af6-42aa-b361-2b759a9511a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43f03efd-9542-4f0d-a220-19a44a3c9597"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1e3fdc0e-bfd9-4c45-a6c2-e10648c6e0b2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "66a1d75a-6246-4b1a-85d1-bead7d864cd8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "924996a3-030f-4569-b70b-1e83894817cd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d00baf5c-00ec-4812-aece-7e197731d360"
                    }
                  }
                ]
              },
              {
                "id": "ce0c54e6-9791-4380-a663-2d7a82c8ce02",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dbb6a504-e6bd-473b-b664-3d01937a8136",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb9bddeb-4cc5-4af4-bb3c-3427fcdc4ea6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "183063e1-da3a-4fe6-91f7-e1fb84f763f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dfa690a-d135-45b8-a7cf-986b8162f696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2862282a-babe-45b0-9ab5-4fcc3baebdd7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bf3caa50-7ebe-4220-b88b-6c816de4622a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "08a94f21-f9d5-41bc-98a5-eebbca794525"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "749c2afb-1dc3-4801-9f7e-e561ff57733f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c2cc8b48-c62d-41b8-8d6c-ad1f7166d22b"
                    }
                  }
                ]
              },
              {
                "id": "c9dc0401-8962-44fd-a8b8-49be8467135f",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "dc105ff6-241b-44e9-a81b-06c40ceb5018",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef06be4-9133-4e2c-bac3-c2b553c3c3eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "456c3421-ac92-4785-8482-990118f1995a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e200620c-fae3-436f-9bb7-3f89d88e8f22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "854f1af2-f313-4f50-9cb1-1cfb955e818a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "65fba61c-84cf-4e32-8378-4350fb128a60",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0412ce05-fda5-4e20-8311-00c96f6518b6",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "afb31b75-2856-4570-9daf-d7dc5a557565",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "5aee3742-d132-4e9b-834e-0e7170ac1167"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1b9ae266-3cfa-4187-b578-7f251a270f7e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d1cd15cc-e072-4928-ae76-33f0d5306f2d"
                    }
                  }
                ]
              },
              {
                "id": "738a7bdb-d629-4acc-a52d-0761d59a27b3",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "902f6f3d-a87f-48e9-98ae-ebfe4492d784",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0d016bbc-3d83-41b6-8755-585e8c062229"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2b930000-3c0f-4264-9cf0-aafe7eaeee65",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fbfddd09-287c-469a-9f0c-2a4f6e7afd95"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fc034aec-4ec3-4515-945f-369a812dbcd5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "c39e4c21-1d73-4688-9636-c88bfb406bb6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9f7e1569-c676-4924-9cb5-0f08d8931efa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "572092ae-9cfa-452e-8219-1d84aa3487c7"
            }
          }
        ]
      },
      {
        "id": "ac84c65c-847e-4439-9424-d95d7fef8911",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "80486e15-ab44-43ae-b82e-6edb8a638917",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1fac75f1-3173-429e-a15f-87893f75fdfe",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e10f71d4-a56e-4df8-8e4b-12c35360888b",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55a318b4-bf30-43e8-9b2f-18ce645d229c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0bc9396f-4270-4f99-96ed-929e9f238582"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db4960aa-8e6d-4fc3-a193-d9a3a859383b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c779ed31-41ac-4468-8982-78f7da1b91e9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c1f24a23-3690-4dfd-9f8f-6a5c7941d587",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2f2688da-4818-45db-89c9-a31526fb6b04"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8e90ef12-fadc-4f42-a7aa-e7281691ecfd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c9e4132a-617a-46c8-a5c0-e43e18f94eb7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3d6bdfbb-e141-40d3-acec-f561ef06784f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "a67a863a-0db1-4409-98a2-518fc52be1ff"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8787d434-eb0a-4765-a3c8-eb487d50a202",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "af118a60-2a4b-490e-85b1-e8e0f9e3aad7"
            }
          }
        ]
      },
      {
        "id": "455c5d1e-282d-484d-8236-e2021e8f59e4",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "71292929-1733-4de5-b6ec-5d6670e2f619",
            "name": "Negative Testing",
            "item": [
              {
                "id": "09665ee9-8213-40df-8c82-b773f116333f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "327e9e68-c60b-4ca9-be9d-de4079dccbce",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a7dce9c-51c5-4aef-8ad8-25da445653b2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "33d14eca-c443-4d64-a8e7-b2b7b53a9e99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a73e0b71-3000-4ff0-b4c1-a0de2c6329fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "896981c5-3b5d-477e-b4aa-e52ed6b7b675"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a22f7ff9-b386-401c-80e5-6d646545bb90",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5f1e5771-73f5-4529-92eb-36ee7b56421b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "15a2def7-03f4-4d99-be9b-fe35ad9cab91",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a25292d4-3b6d-4256-b760-eb350d880045"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "72c1db1f-88c2-4018-9b1f-c7b38e45a8d9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6a59cdd1-1e52-41f4-b503-d3519e8675d0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "815a308c-e1cf-436a-9f8d-e2ccd9cd6a6c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7df073cd-a0b8-45cc-93af-b99949c82f8c"
            }
          }
        ]
      },
      {
        "id": "2e4f478f-c6ed-4455-9bd4-99b64bb081b4",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "0f137425-f7f1-41ad-bde3-e39dd9c48224",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a4552d59-8a87-4d9d-9b62-d84bf88d3d32",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "152d0639-362b-4e11-9530-ae712c15e426",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74e9f859-08f8-436c-a682-9c016c86ab7a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c424c423-14eb-4449-9f79-d9bb6f5259bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df561a3d-a16d-49a7-968c-57d5c2ec33cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c3e9fa35-8a57-4f3d-a049-8ee72fd2b2d0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c8de73b0-2b94-411e-910e-2897d7faa866",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9d9c6a2a-f157-41fe-a7cb-29783d0678ef"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5969b298-102c-49ab-853f-f88a686f2cae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7fbc6783-0018-4c14-bb80-520d70457ff4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ab216a48-1a0c-4dba-8616-cf1227390092",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "13a047a4-d99b-4dc5-9b40-3b25d5371804"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9e455b87-9d49-4f5f-b95e-f03136c97454",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dce22a6a-46b5-469f-876d-ae8f0c634970"
            }
          }
        ]
      },
      {
        "id": "f98f3199-9d01-4f5b-bb01-5cb1cd45a384",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "07bf9d2c-5986-4a8c-85fc-c1de9939cc36",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "478f786f-f0a0-4cf3-b18d-e3a9dd5aae35",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "7a567b76-b9de-4246-950b-cc417dcb889d",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ab04e0c4-de37-4930-b6b4-9e10adf2fceb",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "93ed2c22-59f7-4446-98e7-da103b17facf",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 263
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 31.892857142857142,
      "responseMin": 6,
      "responseMax": 272,
      "responseSd": 26.72464731996319,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1713400478394,
      "completed": 1713400495004
    },
    "executions": [
      {
        "id": "db1acb66-c674-4759-885e-66d98e6e767c",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "fb5575e2-2d40-49d4-9983-064f11fc0851",
          "httpRequestId": "ac25dca4-5320-491e-bfaa-cce95d9a5280"
        },
        "item": {
          "id": "db1acb66-c674-4759-885e-66d98e6e767c",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "0ba9ab18-5625-4eae-9f61-3db851a1add1",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 0
        }
      },
      {
        "id": "f7bca0b4-1ea9-4fa3-b338-5a27de730a7b",
        "cursor": {
          "ref": "49a06511-3990-47a6-b7da-d8859db0996a",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5bdf4f23-e139-44c0-a41a-48afa0d7c5a5"
        },
        "item": {
          "id": "f7bca0b4-1ea9-4fa3-b338-5a27de730a7b",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "5b5c607a-51d6-44b6-940a-fc72a1869f29",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "e24cbc5c-cb0e-4e8b-bff6-981689c2c215",
        "cursor": {
          "ref": "2f3609a5-a310-4294-83c3-a969469caa0c",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "80f7b5fb-3c4e-450e-a9b3-bba6e0c6bbb1"
        },
        "item": {
          "id": "e24cbc5c-cb0e-4e8b-bff6-981689c2c215",
          "name": "did_json"
        },
        "response": {
          "id": "f7949bb3-a32f-4c6a-9c6d-a24901c10f17",
          "status": "OK",
          "code": 200,
          "responseTime": 233,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b648748-0ace-4275-b37a-d2ee085ee746",
        "cursor": {
          "ref": "5357b77f-2d70-452b-baca-7260e4c94e38",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "79dcb80b-a719-4666-b175-6a90c94bb3cc"
        },
        "item": {
          "id": "4b648748-0ace-4275-b37a-d2ee085ee746",
          "name": "did:invalid"
        },
        "response": {
          "id": "6263f415-0334-4c80-af68-9508d3d4b6cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b648748-0ace-4275-b37a-d2ee085ee746",
        "cursor": {
          "ref": "5357b77f-2d70-452b-baca-7260e4c94e38",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "79dcb80b-a719-4666-b175-6a90c94bb3cc"
        },
        "item": {
          "id": "4b648748-0ace-4275-b37a-d2ee085ee746",
          "name": "did:invalid"
        },
        "response": {
          "id": "6263f415-0334-4c80-af68-9508d3d4b6cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33414f04-fad4-4b58-81fb-a355ede5ee9d",
        "cursor": {
          "ref": "44a4b059-0440-4ebb-abed-2efa0ba66579",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "f7f80b70-03f6-4360-8e23-861388a90db4"
        },
        "item": {
          "id": "33414f04-fad4-4b58-81fb-a355ede5ee9d",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "12106c01-72b2-473f-adf5-57c7137dbe11",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 164,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b2f2e9a-2837-493d-9135-56af8640c7a4",
        "cursor": {
          "ref": "46bed985-610e-42a8-a279-965c516c8a64",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "aed9048d-b089-47b1-b913-015b69d9859b"
        },
        "item": {
          "id": "4b2f2e9a-2837-493d-9135-56af8640c7a4",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a627db83-edf6-47b3-ab9d-17530d163e65",
          "status": "Not Found",
          "code": 404,
          "responseTime": 31,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56433407-5214-4cf9-8ebd-3cee6ab092bc",
        "cursor": {
          "ref": "cf8943c2-e2ed-408f-b13d-37f4466b5e73",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b8f4f15f-07b7-425c-90ef-5a5ce685aea9"
        },
        "item": {
          "id": "56433407-5214-4cf9-8ebd-3cee6ab092bc",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "beb4c7ff-386c-40fd-a485-ab97c701016f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6c897d0-b8bf-4bbe-8567-7fbe4fe5cf63",
        "cursor": {
          "ref": "03b399be-1b30-411f-bbc2-cf279fb9a093",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c8f9734f-3d47-4bf2-a720-4412dceadb38"
        },
        "item": {
          "id": "d6c897d0-b8bf-4bbe-8567-7fbe4fe5cf63",
          "name": "identifiers"
        },
        "response": {
          "id": "618c5351-664a-4300-ac39-f03a912ec5c4",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3c7734b-dfbb-4194-b50b-98228d81ed4a",
        "cursor": {
          "ref": "787bede9-ddce-43a8-ad00-33880a056d2f",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "2b951963-1568-4f19-a872-b84b26fe7f89"
        },
        "item": {
          "id": "c3c7734b-dfbb-4194-b50b-98228d81ed4a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e5f42fcb-3946-4922-8a88-588f4c539b29",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7876b1e2-1b1b-46ff-a41c-21c97171116c",
        "cursor": {
          "ref": "f3afdb4a-1b13-4dc3-8b94-4166cf5f1d06",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "48170c89-d0d3-4286-bf31-e4c3bfa56b61"
        },
        "item": {
          "id": "7876b1e2-1b1b-46ff-a41c-21c97171116c",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "1e4e2cfc-ad51-4ece-949e-f43beaf5f981",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b2637e5-ad05-40dc-96c9-5242a21b939d",
        "cursor": {
          "ref": "eb00f128-e9a1-48be-9ac8-51694617f7c7",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b61650f0-304a-406b-b5c3-9638c0c3d6dd"
        },
        "item": {
          "id": "5b2637e5-ad05-40dc-96c9-5242a21b939d",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "4c91ab53-c3e3-4b38-87ca-8213d5dc480a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a50bc16c-dbc7-4cbe-bac2-d837f56d6cd1",
        "cursor": {
          "ref": "eea16df6-b9b7-4ea0-8cef-9e7777d65eef",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c9a957a3-bef8-4039-ae1d-3c67943a3c7a"
        },
        "item": {
          "id": "a50bc16c-dbc7-4cbe-bac2-d837f56d6cd1",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "f8b395b4-e7f8-4ee4-92ff-ad2d0be44136",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75d6c1e4-925a-4107-a21a-e65b58aaf5b9",
        "cursor": {
          "ref": "72664712-ddb6-4b67-9e21-7636e1d9576b",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "d9882c37-9e8b-4122-b49e-4a8373e898cc"
        },
        "item": {
          "id": "75d6c1e4-925a-4107-a21a-e65b58aaf5b9",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "9a12b947-44ef-445d-9b70-8c1d25a49c1b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7457d46-26e2-48c0-bbb1-8e27eb5d9c94",
        "cursor": {
          "ref": "50978a2b-1de5-4422-b7ff-d48cea75a15a",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "3699ce54-ba62-4354-b5a0-787163c58319"
        },
        "item": {
          "id": "d7457d46-26e2-48c0-bbb1-8e27eb5d9c94",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "8d6b3e5f-0c6a-491c-85b0-a9a13c5da661",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a3cace7-8dad-4f6b-87f5-1e263c6adf6e",
        "cursor": {
          "ref": "c5fadbd6-cf79-4aae-89e2-f065fa228644",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "34612c64-cfb3-4b33-a3ea-4f48ca4a5392"
        },
        "item": {
          "id": "5a3cace7-8dad-4f6b-87f5-1e263c6adf6e",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "46a6a65d-5cf3-4ba9-b598-71d6e16e5bc9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1168bc42-67d9-4dcd-8d58-3638f2d3ad11",
        "cursor": {
          "ref": "97fe0572-de5f-433f-ab7a-9ebc5a97f679",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "5b0e65e3-4831-4ccc-89b2-fd08ca31b47e"
        },
        "item": {
          "id": "1168bc42-67d9-4dcd-8d58-3638f2d3ad11",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "21c5c5af-9e80-4163-aa82-d86d50223393",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40eed51b-d99b-4e79-b768-bc90e076fe4c",
        "cursor": {
          "ref": "ba0d4442-8976-408e-8e78-14a8edfcdbf7",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "4dac3401-cd99-43ce-aa3f-034b559d9e1c"
        },
        "item": {
          "id": "40eed51b-d99b-4e79-b768-bc90e076fe4c",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "e7bd4725-df96-486f-b641-b1f8fc09894a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "688bc973-181d-457c-8ff5-d3c5de392d1b",
        "cursor": {
          "ref": "d638e80c-8991-421e-89d3-78e71e9d4ba2",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "cf9e98d6-19be-4371-9145-8b3666ccae8c"
        },
        "item": {
          "id": "688bc973-181d-457c-8ff5-d3c5de392d1b",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "f1652dff-1717-4bb1-a011-f39d17a45c55",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a1d53b2-6176-4f12-a6ff-a85cf1724941",
        "cursor": {
          "ref": "f2ea0ef4-5d9e-4379-b4bd-915e35ff702c",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "57ec6797-8799-4def-abe9-4aa4f909692b"
        },
        "item": {
          "id": "4a1d53b2-6176-4f12-a6ff-a85cf1724941",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "c123ca8f-e9f9-4ed0-972f-5eaf9ce9f86b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d574fee-a641-40c6-b3ba-45f02a83a806",
        "cursor": {
          "ref": "2cd23508-07f8-477a-ac2a-82114955ca3e",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "6129e8fc-2e6a-47d6-b590-9bf1bf511661"
        },
        "item": {
          "id": "7d574fee-a641-40c6-b3ba-45f02a83a806",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "7e3d8088-5507-4e1d-9a40-761ac1a96dc3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc05d17b-ffdb-4277-93e5-dc8d62f0b962",
        "cursor": {
          "ref": "24ead59d-0328-4767-8367-c5378f3f0ce2",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ebf6d5a0-eaa3-4f7e-9d70-f967c60b1222"
        },
        "item": {
          "id": "dc05d17b-ffdb-4277-93e5-dc8d62f0b962",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "1d3d68d7-eb1a-4ebe-a9bf-cfd461ecbbf7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d1c58a3-fd84-4282-99dc-b2db79629ff8",
        "cursor": {
          "ref": "a43fd6f5-2081-4c16-a74d-531b9599fabf",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d3a868f0-0a2c-4ba8-a2ca-18008f2df135"
        },
        "item": {
          "id": "1d1c58a3-fd84-4282-99dc-b2db79629ff8",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "f14cc103-63c2-43f0-9002-4a6aaef56d8f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa1ad22c-2c02-427c-837b-d7a0352037ac",
        "cursor": {
          "ref": "67768340-a66f-4a66-8af0-b5e9f687cd76",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "12a36827-5bbf-437f-80fb-619e6bedd44c"
        },
        "item": {
          "id": "fa1ad22c-2c02-427c-837b-d7a0352037ac",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "efdc169e-a4bc-4d99-aade-f187a3139b39",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfae9ee1-34a8-4aa7-b8e4-418200bde567",
        "cursor": {
          "ref": "b2715873-7263-4ee9-9abe-a807bf90ef1a",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "0228712c-96de-47a6-8ff3-fc047edd026b"
        },
        "item": {
          "id": "bfae9ee1-34a8-4aa7-b8e4-418200bde567",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "659d4751-6539-4f6a-919b-454881bb163c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89b123ef-f42f-46e3-91e4-7715dc8d345e",
        "cursor": {
          "ref": "e6fae4b9-7f77-4f78-bf7f-ea0ccbb74b16",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "4e0a179a-94c0-4446-9a9b-177034ff8ef6"
        },
        "item": {
          "id": "89b123ef-f42f-46e3-91e4-7715dc8d345e",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "628c9678-595d-40b5-9e41-0349aa3bb97a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b30c308c-36d3-498b-b160-32780722f89c",
        "cursor": {
          "ref": "5b2ec82b-e436-4787-ba2e-5142db29ce8f",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "5a7d6bfb-621c-4b8d-9ecb-8f31147d5f30"
        },
        "item": {
          "id": "b30c308c-36d3-498b-b160-32780722f89c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "4f91bb73-23a3-492b-a925-fc03bbea8cdb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebcd33ce-be32-448f-bd31-ba6e2755adc3",
        "cursor": {
          "ref": "05fb437a-8581-4df0-9305-a42b5e675240",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "3fbcdbbb-59f4-40e1-ada0-40648db28eec"
        },
        "item": {
          "id": "ebcd33ce-be32-448f-bd31-ba6e2755adc3",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "935e978e-0dfd-4fb0-b0c1-445f5cb6f221",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6ca4508-4e10-46d4-b98f-776f0afa11ff",
        "cursor": {
          "ref": "4edd0ad5-ca22-42ff-b9f2-8a71417baa45",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "fc47dc52-5639-4cfd-8c93-d69726b27c09"
        },
        "item": {
          "id": "d6ca4508-4e10-46d4-b98f-776f0afa11ff",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "afc3097a-02cc-4270-97ba-425b21a5ada4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b92767ca-d48c-46b0-9a07-fa17886a9d9b",
        "cursor": {
          "ref": "eb3d6d51-e149-4730-aa73-dff09ec2791b",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "3f28da3e-9dfe-483b-90f7-0e41cba01be3"
        },
        "item": {
          "id": "b92767ca-d48c-46b0-9a07-fa17886a9d9b",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "69dcc387-67f8-4c34-959a-bbe7e2932bf6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f742169-6e06-459e-b982-248ce4afe85a",
        "cursor": {
          "ref": "3684ecd0-e8ae-46d3-9615-2add69122c8a",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "860e1ab3-8fd1-40c8-9862-b58cab78c8a7"
        },
        "item": {
          "id": "3f742169-6e06-459e-b982-248ce4afe85a",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "b6b4d4fc-0dfb-415f-9be5-55ff2f8c5a04",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a809754c-829a-478c-b303-8721fa3a5467",
        "cursor": {
          "ref": "091efb3a-81a8-425e-a5e1-e5583ec859db",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "b45606dd-e75d-4118-9a03-d6e809f423b4"
        },
        "item": {
          "id": "a809754c-829a-478c-b303-8721fa3a5467",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "4d1234d2-4564-4fe4-9c62-eefacaa49862",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68180d58-0075-4f00-a555-7cddc9d092c1",
        "cursor": {
          "ref": "deef5ea7-cd0f-4ae1-b1f2-5e342a37c696",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "cd0f38b3-be6b-483d-a188-47f3d20a0438"
        },
        "item": {
          "id": "68180d58-0075-4f00-a555-7cddc9d092c1",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "a502ff39-cf60-4fa7-ab4b-9cc07abe020d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94f22f3e-245e-4b0a-90a1-2f9bd8472518",
        "cursor": {
          "ref": "adad1709-4728-49aa-b50b-17db6c38a4ae",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "3057ce6f-5c3f-49e5-a993-e4972d46a527"
        },
        "item": {
          "id": "94f22f3e-245e-4b0a-90a1-2f9bd8472518",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "53e0755b-396d-45c8-85fb-4908c9411cbc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff48ccc5-46c9-4e1c-be08-f3dc03f3c329",
        "cursor": {
          "ref": "13b87a61-20be-4769-96d8-e31028f1eed2",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5ef3c78a-f5c6-4426-a790-d36531b5160f"
        },
        "item": {
          "id": "ff48ccc5-46c9-4e1c-be08-f3dc03f3c329",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "56ae3741-6125-4efa-a975-8934b7f00318",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b53710ca-83c6-4a41-8774-6af7cf5faa5a",
        "cursor": {
          "ref": "56eb8762-5389-4977-a0bb-a2564c9c6099",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "8bbcd67d-1ded-486f-a9d4-e343d5909f0f"
        },
        "item": {
          "id": "b53710ca-83c6-4a41-8774-6af7cf5faa5a",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "81d0a32e-8033-40d2-a7d6-a4c4b7e62645",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51792c05-e9ec-4a07-a62e-ce151bfbb848",
        "cursor": {
          "ref": "798e7250-dd53-4c63-af92-9ba3160dd526",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "b339074b-2f56-4ac4-87f6-7242c419b9a7"
        },
        "item": {
          "id": "51792c05-e9ec-4a07-a62e-ce151bfbb848",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "bb22ccb1-c494-4a58-8a9f-0f1fb8c67269",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7828e7ce-dfe3-456f-9f8f-a890fe6ecd13",
        "cursor": {
          "ref": "d60f9874-a617-433b-8fb0-aa7c32b63c62",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "52bffba3-bae4-47f6-8141-ddff64386692"
        },
        "item": {
          "id": "7828e7ce-dfe3-456f-9f8f-a890fe6ecd13",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "80a2c4a4-206c-4542-a709-0ff54646d036",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99ffc89a-139f-4bb1-b844-a3478be8c955",
        "cursor": {
          "ref": "9fc97f75-c345-46ee-9182-603e6b508e37",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "f0e0cff1-69e7-488d-a221-daa42885635f"
        },
        "item": {
          "id": "99ffc89a-139f-4bb1-b844-a3478be8c955",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "214a08e0-522e-4713-af2c-a1700d656aed",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1527de63-0d6e-4a21-bc7c-7f6374129cd6",
        "cursor": {
          "ref": "d01da221-a599-4b50-94aa-30f6f34bd616",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "4c54601b-360e-4d68-bcac-2c5f481dda2d"
        },
        "item": {
          "id": "1527de63-0d6e-4a21-bc7c-7f6374129cd6",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "8e67d6fc-9bb2-46a9-8505-ca2f3028c861",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ce1bb55-485b-4e31-8137-1f3dd7b469e6",
        "cursor": {
          "ref": "5d6380db-7e7e-4b2d-9a0c-fc4f21b1b29a",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "0c0b1bce-af6d-42ec-b0d2-325e2f2bea7d"
        },
        "item": {
          "id": "4ce1bb55-485b-4e31-8137-1f3dd7b469e6",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "5de0c087-059c-4ec3-bad0-b3476c239f56",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07d00936-cd69-4122-b337-aae7b4e132bc",
        "cursor": {
          "ref": "69140ef6-9544-4176-820d-80d856558668",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "93dfbf9c-4bf3-4d4c-822e-be5ecb202c00"
        },
        "item": {
          "id": "07d00936-cd69-4122-b337-aae7b4e132bc",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "2fb58c9c-6be1-415d-a492-a8da9741b2f3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20c22fdd-6add-4a61-888c-496fa3ff55de",
        "cursor": {
          "ref": "d351992d-f07a-49f0-8f97-d8c7a1841238",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "4a51d92d-7abe-4b8d-9caf-ad197ea9fa88"
        },
        "item": {
          "id": "20c22fdd-6add-4a61-888c-496fa3ff55de",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "a4bc409a-f47f-4811-9c58-14d876b22ab7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "101b3c87-368d-40b6-80d9-4ae73677cb25",
        "cursor": {
          "ref": "0b7377e6-8503-47ef-8534-7cd87995a5c4",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "824001b3-9a46-4dc9-a50b-5575f2b10252"
        },
        "item": {
          "id": "101b3c87-368d-40b6-80d9-4ae73677cb25",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "767076f6-1fc0-4732-b1b4-35daba29add5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a654d81-a50d-4ab4-8625-73cf28ae878d",
        "cursor": {
          "ref": "f60550df-f944-4654-be51-581ae063c5fc",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "07f5aa96-22de-4ffa-a3c3-93bc6759225a"
        },
        "item": {
          "id": "2a654d81-a50d-4ab4-8625-73cf28ae878d",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "82436744-a301-4f15-88d1-3a61d67d9ab8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ed1fb3c-c7d6-4c39-bd12-a00233bc302d",
        "cursor": {
          "ref": "2bd0060a-9da2-4d1e-b8fc-d0309cce9e17",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "976bffa2-a391-4ec7-8d1f-b214bdad97e7"
        },
        "item": {
          "id": "4ed1fb3c-c7d6-4c39-bd12-a00233bc302d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "6e66e607-bea9-4192-8b2d-2423e7bb764f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44f0f3c2-31ba-41a7-851a-76febf1d044d",
        "cursor": {
          "ref": "f6f3fd7d-6ef3-4c48-ac18-ff1f867df9a7",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b3709cce-ccf6-4502-a3e7-a23f633dac8b"
        },
        "item": {
          "id": "44f0f3c2-31ba-41a7-851a-76febf1d044d",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "9a7ea032-385a-42a8-aaef-e67b9ea13ed3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de820611-55ff-404e-85fa-3b432dd7d255",
        "cursor": {
          "ref": "6fccdf2c-5976-4cd8-a9c4-aa781c409fcc",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "2ead2ca3-dd88-4faa-af38-00d23dc65b80"
        },
        "item": {
          "id": "de820611-55ff-404e-85fa-3b432dd7d255",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a01fb430-1080-437f-beb4-67408b92a1dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c70a9df5-500e-42e4-ae10-b0115515404a",
        "cursor": {
          "ref": "86dd98b9-8410-49a5-ad3e-a1cad9160818",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "cfa410d1-afff-4a8c-93b7-08dec0b51b18"
        },
        "item": {
          "id": "c70a9df5-500e-42e4-ae10-b0115515404a",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "9e006ad7-d049-4692-9b81-427a3d00f9c2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dc92afa-f60e-4fb5-8449-d755b9a74636",
        "cursor": {
          "ref": "0e8341f1-f9dc-4192-9f4e-3908ac65ca84",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "d4233e21-178b-4d99-a17b-b08ac34256c5"
        },
        "item": {
          "id": "0dc92afa-f60e-4fb5-8449-d755b9a74636",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "94692632-740d-4358-b96e-44e5bc14ebf3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6f50fed-f118-4585-9755-a4b24479d2b7",
        "cursor": {
          "ref": "3ac5984d-36e5-45ac-a212-d069bf3f16cf",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "1a070442-33e9-4b89-92e0-cdc940d80810"
        },
        "item": {
          "id": "d6f50fed-f118-4585-9755-a4b24479d2b7",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "6cc580bc-378d-4d54-872b-2abf1e4242ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "045e2388-d3fa-4024-8ea1-88cd3ab1a92e",
        "cursor": {
          "ref": "b2167e56-cdcd-4465-b284-76d90b0b23c1",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "0a02fd19-cc6a-4549-9426-1ac20725cb5d"
        },
        "item": {
          "id": "045e2388-d3fa-4024-8ea1-88cd3ab1a92e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "02fe4e0d-1ca0-4a25-ad42-0f2ecc0cb4c5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfdf9cac-d02b-42a6-a5b2-cff00005a122",
        "cursor": {
          "ref": "08cf4298-c251-44df-97d0-33ddd9851475",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "4b3b49ad-324f-48c0-b968-0d8ac47eda9e"
        },
        "item": {
          "id": "bfdf9cac-d02b-42a6-a5b2-cff00005a122",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "22c79b97-3860-46ad-b735-136b43adec4e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1b6ee73-5a2c-4fee-abc3-aae7cf7285b1",
        "cursor": {
          "ref": "3a3b0932-0ced-4e7a-92f0-65944a35c85c",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "7d14299f-141a-4ace-9aac-d8a374a3ac3c"
        },
        "item": {
          "id": "c1b6ee73-5a2c-4fee-abc3-aae7cf7285b1",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "1800ee8b-37fb-443d-9c82-9abf4d78f2c3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e71bcd2a-3467-4e3e-ae3c-112d15088b33",
        "cursor": {
          "ref": "f453d830-09cd-45fc-9934-d691e9fbecf6",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a93ab0c8-c367-43b9-9bf3-a8f038313cb9"
        },
        "item": {
          "id": "e71bcd2a-3467-4e3e-ae3c-112d15088b33",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "0c30eb6a-7c34-492b-84a2-cc9a4072269c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80e72324-121c-4cdd-90b6-68f502af7508",
        "cursor": {
          "ref": "a9eb5931-7ceb-468a-92cc-b0e40bb07d6d",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "63e09cce-b73b-4ba5-8d7e-310244f75d20"
        },
        "item": {
          "id": "80e72324-121c-4cdd-90b6-68f502af7508",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "d580fafc-6016-4592-ac0b-4abbfebc51fb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0b62c9a-40f3-4aff-b7f8-7e07e3e680e6",
        "cursor": {
          "ref": "e1cc3539-1392-4656-a44e-549bed276b21",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7374e3d7-f41a-479a-a119-c0774d571432"
        },
        "item": {
          "id": "d0b62c9a-40f3-4aff-b7f8-7e07e3e680e6",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "4c57a52d-a228-4328-9612-f653e2763338",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d235d20e-7ad7-4cee-8135-224d167b5962",
        "cursor": {
          "ref": "ff02029f-f2c8-4e9f-ac5f-896b0ccabd6b",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "c4d126a6-cad2-4bb2-862e-289d38c7a25e"
        },
        "item": {
          "id": "d235d20e-7ad7-4cee-8135-224d167b5962",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "5728391f-7360-46ed-82a4-9abe2161f4e0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d71abd5-8239-4014-be03-116540eaa26f",
        "cursor": {
          "ref": "49ba7176-53c2-4147-a644-2d9344124658",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "5ecaa6d9-e210-42e7-a4b6-398b2801f228"
        },
        "item": {
          "id": "2d71abd5-8239-4014-be03-116540eaa26f",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "4bc422e8-4f88-49a9-90e3-0318a8b9849f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "636e9c9d-78bd-4d7a-9328-eb9f04addbeb",
        "cursor": {
          "ref": "38b9cd16-3e48-4d38-8d45-463729ee74b8",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d563a9f6-7508-443b-8403-c6eb0e07083f"
        },
        "item": {
          "id": "636e9c9d-78bd-4d7a-9328-eb9f04addbeb",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "bfa60cd2-39c0-4b24-96f2-ac845f0068c6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f3a7f8c-ba9b-46f0-a493-960044e16aa8",
        "cursor": {
          "ref": "c2040de2-9541-46f7-bae5-d6872b9a5c20",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "de168f36-9851-465a-b682-7688014d84d9"
        },
        "item": {
          "id": "5f3a7f8c-ba9b-46f0-a493-960044e16aa8",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "f77bd90d-a4fa-481f-9316-58efe888fed7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed9d9250-9192-41e3-99a1-459460c08055",
        "cursor": {
          "ref": "03715603-d21c-4076-8c95-205614e31dbb",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "5bc368dd-cec6-43b7-a5e5-296f4c62aba4"
        },
        "item": {
          "id": "ed9d9250-9192-41e3-99a1-459460c08055",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "16367d26-cafd-42d6-970e-6c16c0a8ce53",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc5480b5-085f-4c96-b717-a77d58bffa44",
        "cursor": {
          "ref": "7f5ea930-7df5-4e25-9f02-7ad504dd0a6d",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "3d3d4e03-acdd-4a8c-8c1d-b7dd00b67425"
        },
        "item": {
          "id": "bc5480b5-085f-4c96-b717-a77d58bffa44",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "164d487d-4fb2-426c-b1fe-91783d204674",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51a7c482-87ae-4ae9-a776-2fecf25a11c9",
        "cursor": {
          "ref": "be239925-2423-4f90-8ea9-12ddcfff0b97",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "edae123f-a53b-4e0c-9fc1-b1eeec21b68b"
        },
        "item": {
          "id": "51a7c482-87ae-4ae9-a776-2fecf25a11c9",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "79aef468-1e57-41d9-8f86-3f63cc968eba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa417d40-8171-4787-9f07-f5dae50a955c",
        "cursor": {
          "ref": "5e9f2776-4037-4409-8bde-28d6850cac89",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "f95f864b-315d-4f09-a59a-6bbc32b86d26"
        },
        "item": {
          "id": "aa417d40-8171-4787-9f07-f5dae50a955c",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "10c939f7-4b82-47e3-8f1c-0f8e04cb7792",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8bdb4b5-c7c1-45f7-ada9-905ee1d4749d",
        "cursor": {
          "ref": "8efc0461-2f52-4f5f-abdf-3380cddaf302",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "1721eac3-5d98-408d-afdb-05b3301c7212"
        },
        "item": {
          "id": "e8bdb4b5-c7c1-45f7-ada9-905ee1d4749d",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "8e11e1bc-f54c-418b-a6f1-6d037e3d5d6d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "584308d1-3465-46e6-b2e3-0e4c7a896020",
        "cursor": {
          "ref": "66ebbb11-25c0-4286-a8fe-cb318570889d",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "d1ab9ba0-2952-4cf2-9595-7243b45854a0"
        },
        "item": {
          "id": "584308d1-3465-46e6-b2e3-0e4c7a896020",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "b113ef1b-3448-413f-a84e-2adf211ce032",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b4ae32e-312d-4511-b513-c70cb895edad",
        "cursor": {
          "ref": "0f699501-54ef-421e-918b-f55012bdf0d8",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "2631cf4f-17b7-497c-8d86-fbb8a603bdb6"
        },
        "item": {
          "id": "0b4ae32e-312d-4511-b513-c70cb895edad",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "7b109b4a-16fa-4cbb-9b0f-261b1e3e5760",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dcd0b69-aeb5-408c-b88a-403684b260df",
        "cursor": {
          "ref": "0576dd64-027e-4e5f-a862-faa61ae5e47d",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "c8836c09-5c4a-439e-b104-fe75643a1f95"
        },
        "item": {
          "id": "7dcd0b69-aeb5-408c-b88a-403684b260df",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "759e7d07-6b71-437c-b925-b83a78bcaa6a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7e2744e-ab4d-40c7-b295-43dc3f0b53f7",
        "cursor": {
          "ref": "ba570c6e-edeb-4dac-bef8-5fe26281e36a",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "e60c9c6f-58d8-4ee4-b1e8-185d0b53aed0"
        },
        "item": {
          "id": "d7e2744e-ab4d-40c7-b295-43dc3f0b53f7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "3ca083d7-df05-497d-b650-60d33bf756bc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b42d4ab-f13c-442f-a614-7c6a6f558f6d",
        "cursor": {
          "ref": "faa67a00-8325-4f87-8d7c-bf2b8f976df6",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "16f87568-4833-46fb-8fa6-000abcb9b2e9"
        },
        "item": {
          "id": "2b42d4ab-f13c-442f-a614-7c6a6f558f6d",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e0759796-2609-45a5-b21f-9f85f7a23fc2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b5c97ff-5bf7-4064-a720-9c97538ae464",
        "cursor": {
          "ref": "682ace8d-5a0f-4acb-b04c-b1638831d835",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "9d271f6f-cd0f-4bc8-a5c9-d3df8d9b2c75"
        },
        "item": {
          "id": "1b5c97ff-5bf7-4064-a720-9c97538ae464",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "4876027f-ff98-45f2-a956-a7a8a5597601",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4353bc9-33a9-422c-a46a-db0d0dc60d20",
        "cursor": {
          "ref": "e3c71eec-5fa7-4667-862b-001ab07bcc4b",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "8e7aeeee-45ab-419a-a843-177e41f84311"
        },
        "item": {
          "id": "f4353bc9-33a9-422c-a46a-db0d0dc60d20",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "30dc9b13-2475-42cf-b046-fa07aa6bd93e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6388d7bb-9a87-42d6-85a0-57e7b9d78f07",
        "cursor": {
          "ref": "933a451d-0f87-4c71-b30c-c8b3091c6384",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "dca58fb7-e5ae-428e-9834-146ac5459cd4"
        },
        "item": {
          "id": "6388d7bb-9a87-42d6-85a0-57e7b9d78f07",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "2479abb7-8542-4474-9f2b-04948565bebf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "519d32cd-e520-4ff5-8964-85aec86dd6bd",
        "cursor": {
          "ref": "a85757ad-74a7-4144-b3d4-9ea781b82714",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "18a7f9ec-c785-4725-881e-a9b55422bce3"
        },
        "item": {
          "id": "519d32cd-e520-4ff5-8964-85aec86dd6bd",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "befafe75-3366-4395-938b-0a7ec1fff5ca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68d3a154-c28e-47c8-b60d-bb287eba6009",
        "cursor": {
          "ref": "67d067a1-f8df-48b5-a6ce-c57c7d0d610f",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "1b636965-44b2-4e9c-8fd7-a0421f08b2f3"
        },
        "item": {
          "id": "68d3a154-c28e-47c8-b60d-bb287eba6009",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "a5d1b706-14e2-41c5-9886-58c7ee6e687f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04bf49f0-588b-4db2-9af1-dd7cde82cd5d",
        "cursor": {
          "ref": "e89d663f-cf28-4a02-8b48-bed5e59b0de8",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "0ad6ae75-2360-4570-ba31-0b6f0a45025e"
        },
        "item": {
          "id": "04bf49f0-588b-4db2-9af1-dd7cde82cd5d",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "03c8c14e-7070-4ce1-8c32-5b1a417842e4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3a64cf7-3bdd-4241-ac38-0c90384a7e1a",
        "cursor": {
          "ref": "ea2acba3-20df-4e0e-86a1-d8b040e1a116",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "cbe90ee9-d291-410c-8745-b7861c19b156"
        },
        "item": {
          "id": "e3a64cf7-3bdd-4241-ac38-0c90384a7e1a",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "faf4b68d-7b2f-4577-864f-ed3665e7ffc5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b17f86fe-4611-4010-b6ca-2ff28addf6a8",
        "cursor": {
          "ref": "5ab48ce5-99e8-4eb1-9d16-e98a7a417a1f",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "5f2c23d0-b949-47e7-8092-913933a7ac08"
        },
        "item": {
          "id": "b17f86fe-4611-4010-b6ca-2ff28addf6a8",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "2a63617c-536f-41bd-8f3a-b57e49b54ccf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee884ee6-1771-4cef-8b16-e1901f21e356",
        "cursor": {
          "ref": "d291f922-ad47-464c-a95c-6e5c65142b98",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "cdeb3d79-11fc-4b03-b6b2-8a2861a19266"
        },
        "item": {
          "id": "ee884ee6-1771-4cef-8b16-e1901f21e356",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "480caf75-69be-48cc-a3b0-0d03a36e684f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebc1512e-1fbf-4dba-89c5-95d09b60dfd1",
        "cursor": {
          "ref": "5e2bf7e0-a9e7-40bc-93fa-eb88a6ea0306",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "57039f5e-bc1d-43d2-9a7f-3368deff0c40"
        },
        "item": {
          "id": "ebc1512e-1fbf-4dba-89c5-95d09b60dfd1",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "43fcdcd6-6025-4e24-b1fd-66f50132d5fc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "552d1a22-2bfb-4633-813e-170ec30547db",
        "cursor": {
          "ref": "f3873fc7-6bce-40a6-9016-1f80f3cc8745",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "abe8c396-b231-4599-8287-c320612c70a5"
        },
        "item": {
          "id": "552d1a22-2bfb-4633-813e-170ec30547db",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "d79f271f-52f4-4d8a-9f9e-0d7e5907cdff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c586fac-66a4-471c-a09f-0145c89e665d",
        "cursor": {
          "ref": "e6c22e58-4adb-4e1e-8ef1-d80217c866ff",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "d07e4dd7-2433-40be-8d80-54e9a016ce0a"
        },
        "item": {
          "id": "2c586fac-66a4-471c-a09f-0145c89e665d",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "d93d043c-4033-4053-b942-4bae3787ab84",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b2e3bcc-a2e2-448a-967f-82022898d485",
        "cursor": {
          "ref": "2da24908-7f9f-4626-ae53-83e273cf10b3",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "896749ac-ecc3-44d6-b245-60f412dd1848"
        },
        "item": {
          "id": "0b2e3bcc-a2e2-448a-967f-82022898d485",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "29597c41-9513-4eac-a4f8-130ab7fe7e1c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df47bd51-4b0a-4a7a-acbc-3eef7deabbea",
        "cursor": {
          "ref": "dd67ba1c-d228-416f-b4b1-eb85794f3a20",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "9175db2b-195d-41e0-8590-567b21a34a63"
        },
        "item": {
          "id": "df47bd51-4b0a-4a7a-acbc-3eef7deabbea",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "666cedff-4bf1-4e24-ac6f-93a7e582584a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a674fe9-deea-40e4-a71c-55712c8da896",
        "cursor": {
          "ref": "fa121b05-d3ab-42a9-92ae-1a0403b3ac6e",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "5abcc151-bc19-4ca3-a581-871c406e5a04"
        },
        "item": {
          "id": "5a674fe9-deea-40e4-a71c-55712c8da896",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "77029d2d-ffc1-4dc9-939f-2fa00502826c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6ad9db1-bd4a-45a3-b9ac-f2c5e6d34d38",
        "cursor": {
          "ref": "16b90105-f65f-4fb0-a468-70f9e0fcb9c6",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "d13fa867-e39e-41eb-ac03-9863dafade75"
        },
        "item": {
          "id": "f6ad9db1-bd4a-45a3-b9ac-f2c5e6d34d38",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "af5871b4-caeb-4605-97df-066662246fb4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "422b7ab9-12bc-4424-bb34-b709b181150e",
        "cursor": {
          "ref": "8b4dc59e-a68f-4e3b-890b-898d130d8b7e",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "5e746e91-f51e-463b-b747-6cb3d739bdbc"
        },
        "item": {
          "id": "422b7ab9-12bc-4424-bb34-b709b181150e",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "28a4e5de-aa37-4505-aa4d-12db4ccf3f97",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91c3d1c5-2cb1-4fcf-b02b-f62c2a605b09",
        "cursor": {
          "ref": "484a1b4c-4250-46c4-bbc4-e4897b1a1be1",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "19bad7ac-b07d-4f27-9e14-f8c75b5c147a"
        },
        "item": {
          "id": "91c3d1c5-2cb1-4fcf-b02b-f62c2a605b09",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "6c7dfe37-8ca2-41fa-a650-7faea8f00c74",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c0132d5-1969-4d86-b376-fd1a1cf9eac3",
        "cursor": {
          "ref": "12ad15ce-30fa-4737-b5d6-22200de1875c",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "27b98eda-5cf2-4622-9aea-ebd4b254430f"
        },
        "item": {
          "id": "3c0132d5-1969-4d86-b376-fd1a1cf9eac3",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "3bedc85e-ad65-4014-ad96-124390a68621",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7913ec9e-8a31-46fc-b784-add4ee6c922f",
        "cursor": {
          "ref": "da5d3ab4-fe27-4092-9772-d404f6b2f4ca",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "6e0ca093-6cae-449a-8199-20384c8df761"
        },
        "item": {
          "id": "7913ec9e-8a31-46fc-b784-add4ee6c922f",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "7780e771-e129-459e-b9be-b9a8f7e5974a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a6968d8-fe34-4ec1-a13b-9febb18e2ca8",
        "cursor": {
          "ref": "41b15ccf-48b5-4f0f-bac2-de9d1f064faa",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "32324eb3-8ab3-43c2-8907-bedfd4325640"
        },
        "item": {
          "id": "1a6968d8-fe34-4ec1-a13b-9febb18e2ca8",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "1fe59ee9-46ca-44cf-a8a3-31beaa4fe81f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c1e4c5b-cff4-4190-980a-d17480e89db1",
        "cursor": {
          "ref": "db4428f8-2fde-44ea-91d9-8f7b5be49466",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "c6c73ce8-17b2-4a7c-887c-8373eaadc364"
        },
        "item": {
          "id": "0c1e4c5b-cff4-4190-980a-d17480e89db1",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "0ba9ba0a-e2e8-416d-8a5d-39ff14327c1c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3e4c874-32fe-46b0-b5c8-118ba372836d",
        "cursor": {
          "ref": "6bcdfa8b-8900-4eae-954e-4142960ddc92",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "97a2f43c-cbc3-416f-85e4-ca62be32d311"
        },
        "item": {
          "id": "b3e4c874-32fe-46b0-b5c8-118ba372836d",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "a9a69ba8-9576-461a-aff1-6c3b00632a59",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c06b389-b1fb-4d3b-bedc-da263a5482ee",
        "cursor": {
          "ref": "a3917c8e-ed73-4385-adba-b858b5aadcca",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "41deff5c-7c18-4e17-8050-a0a7a52f83d0"
        },
        "item": {
          "id": "3c06b389-b1fb-4d3b-bedc-da263a5482ee",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e213e308-be55-4a5c-ab86-4460aacf75b5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f91e0da-4153-459e-9942-ba9cdf9dbd9a",
        "cursor": {
          "ref": "71cb17d5-ddbe-4e83-ae46-35e00172c9c5",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "c950303a-db58-46a1-b666-b0ea47d12a4a"
        },
        "item": {
          "id": "3f91e0da-4153-459e-9942-ba9cdf9dbd9a",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "422fb542-f1d9-4489-8591-7f52de20d156",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b89c71ab-6c7c-4a9a-b3ff-66429d490717",
        "cursor": {
          "ref": "44ed30e5-9822-455e-a5be-671312263105",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "ee8902c6-8ce8-4bd3-9bde-4a522377b81b"
        },
        "item": {
          "id": "b89c71ab-6c7c-4a9a-b3ff-66429d490717",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "64aa5be6-1f5d-4e68-80ee-cfd9d6c8dd6a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edd31331-f191-4046-910f-f2a4bab2960c",
        "cursor": {
          "ref": "838f52f5-0e4e-4b8e-b02d-92ad7d2f6109",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "89cda8b4-c29a-45fa-b691-4bbd6df61457"
        },
        "item": {
          "id": "edd31331-f191-4046-910f-f2a4bab2960c",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "35809340-d0f5-4174-99bc-67ee9614556d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdb8a8e7-6adf-4e47-b255-433c4b0c0fd7",
        "cursor": {
          "ref": "ff353b74-f2ba-4392-ae88-e74b517593d0",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "b5226090-aba8-4917-a37f-847363df03b6"
        },
        "item": {
          "id": "fdb8a8e7-6adf-4e47-b255-433c4b0c0fd7",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "f7e28a8e-2b58-4787-b2e3-5adb8ae91d82",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e02a16f8-d84e-447a-9940-9bae1373978b",
        "cursor": {
          "ref": "41d65c5d-8d58-4fe3-8959-92b847debb46",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "2a654697-ea7b-445b-b774-da1d23a96d03"
        },
        "item": {
          "id": "e02a16f8-d84e-447a-9940-9bae1373978b",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "a7068fef-92d8-45a0-af16-97b593281078",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e93296b-872d-47e4-a5f4-a7082760ba4b",
        "cursor": {
          "ref": "227e18dc-f6d2-4fd4-bfea-76af4e4c0853",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "0d79de69-cff5-4a36-93a3-b2312f6c3493"
        },
        "item": {
          "id": "9e93296b-872d-47e4-a5f4-a7082760ba4b",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "cdaf3fff-aeab-414d-b057-4c15e97c96f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df6022f2-4685-48bd-81a1-48d1a3594f53",
        "cursor": {
          "ref": "d3b6ec6c-668f-467e-8c79-b042d868484f",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "0eefb87d-0d82-498a-8497-0d9cd72ffbef"
        },
        "item": {
          "id": "df6022f2-4685-48bd-81a1-48d1a3594f53",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "2f7054f7-d517-4d0b-ba4b-63eb763e35b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e208df7c-cba8-484c-bd3e-9ba4a122537a",
        "cursor": {
          "ref": "809b761a-d130-4581-b48f-03ee7bdbe116",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "48f1d7c5-8138-4123-b717-e2cea5153f2a"
        },
        "item": {
          "id": "e208df7c-cba8-484c-bd3e-9ba4a122537a",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "18157114-05fd-4416-8fc4-88df06fb199a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "f053f228-466d-4e04-aad9-b864afad3133",
        "cursor": {
          "ref": "318dc3ab-852f-48e5-bf96-8d1beb44f7ff",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "5e3886dd-a854-4956-a6f4-ed81ceae6005"
        },
        "item": {
          "id": "f053f228-466d-4e04-aad9-b864afad3133",
          "name": "credentials_issue"
        },
        "response": {
          "id": "893e8240-7be2-42e7-9543-8f377db720e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 111,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "5908f368-03d0-4f81-b885-24eee138e291",
        "cursor": {
          "ref": "0c81eaee-5849-427a-a2e3-7b844f7ffd31",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "ebd57fea-9755-4e5b-a7c2-eed39a691d61"
        },
        "item": {
          "id": "5908f368-03d0-4f81-b885-24eee138e291",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "d77af4be-0b62-4f5d-a372-0a5669c948a2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "3331a45e-db1c-49d1-9fd8-2f26bd4240f8",
        "cursor": {
          "ref": "55b2b7f1-18cd-426e-8d5e-1b16b9312482",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "adebc59b-9f55-4895-bb1b-477630d066b8"
        },
        "item": {
          "id": "3331a45e-db1c-49d1-9fd8-2f26bd4240f8",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "a7bd5125-ebe9-48f5-84c9-b1be0fecbe07",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "c929a45e-2800-463f-a8c2-40d7e49d5bf6",
        "cursor": {
          "ref": "8f5b00e9-f44b-4cfa-a7fe-a4eba21f9271",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "1b40c31f-8258-4e98-8ad5-d595856b03da"
        },
        "item": {
          "id": "c929a45e-2800-463f-a8c2-40d7e49d5bf6",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "5041bd7a-b48e-455d-b50b-e1832f825a5a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "3771828b-6ee4-404f-9cb2-8958fc506575",
        "cursor": {
          "ref": "526ad797-b9b2-4cde-b6f4-d212f1cbd84e",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "f054560d-ec5f-42ca-94a7-3139ce713989"
        },
        "item": {
          "id": "3771828b-6ee4-404f-9cb2-8958fc506575",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "edd84eaf-9383-40bf-bc6c-bf3011c3de57",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "9b69bf10-ed49-4ea3-a2a2-d7d233ff168f",
        "cursor": {
          "ref": "72018e5d-ae13-4314-8efe-4b26cf98368e",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "3104ecad-83c4-4474-8e04-331e6802a38d"
        },
        "item": {
          "id": "9b69bf10-ed49-4ea3-a2a2-d7d233ff168f",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "0e683c8e-e6ee-44df-ba9e-99b0f8af8ea9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "1cdec7f2-b69c-46f5-8655-ac6d4f9e46bc",
        "cursor": {
          "ref": "8bed1f17-5223-4e90-ad2b-3b3fff77e615",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c93ce541-bf4c-43be-9783-88be9bf98848"
        },
        "item": {
          "id": "1cdec7f2-b69c-46f5-8655-ac6d4f9e46bc",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "fcd05ca0-cecc-4eec-98d7-a0e48e6a5f80",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a39b24c1-333c-4c30-b7d5-f94d58df2959",
        "cursor": {
          "ref": "f6b70fb6-b91e-424c-b38c-c27fa1f20116",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c81fb4c3-c9b3-4c94-9496-e577d422d929"
        },
        "item": {
          "id": "a39b24c1-333c-4c30-b7d5-f94d58df2959",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "6d1f2ec2-11b1-4707-ab85-d88b6a22a488",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80626ed7-166b-40b8-b12b-8ab6d27f25d1",
        "cursor": {
          "ref": "f2a5bb95-e57e-4a51-b1c0-e3d39b3d44a9",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "14d97107-b1f8-4589-940c-971b40568c7f"
        },
        "item": {
          "id": "80626ed7-166b-40b8-b12b-8ab6d27f25d1",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "0b693365-8a74-49d1-8d33-80603d2ee7af",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2207d75-fbac-4ec5-8fb9-69010320611c",
        "cursor": {
          "ref": "cbed24fb-cdf7-4444-9cd2-7bcf58835d85",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "fae14dbd-febb-4cda-a846-ae5667b7c0db"
        },
        "item": {
          "id": "b2207d75-fbac-4ec5-8fb9-69010320611c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "16025303-88d1-445b-8566-5169244c4034",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d9e0450-7a6b-4993-944d-662a98faab7e",
        "cursor": {
          "ref": "9d5ed77f-85a1-4189-8aec-d99a6327db03",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "bccaa35c-752a-4f3b-80da-62058e369e8a"
        },
        "item": {
          "id": "0d9e0450-7a6b-4993-944d-662a98faab7e",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "124b7f42-3306-4f27-a856-45e67560c48f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "741287a6-640d-4df8-b21e-42f47d24d5c5",
        "cursor": {
          "ref": "e350c25d-837f-4bc9-8465-b8f6f7b7c849",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "8cd4b592-850a-4ab6-8bba-2537b73591a3"
        },
        "item": {
          "id": "741287a6-640d-4df8-b21e-42f47d24d5c5",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "4b78973e-6794-4738-a52f-84f21ade1173",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f0d1dc2-35d4-4f90-88de-ce0dfd4582eb",
        "cursor": {
          "ref": "a4c5da4a-2e01-4d0f-9210-7e90f68a3907",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "50930ddf-ce81-4582-9edd-d1ca3332cfed"
        },
        "item": {
          "id": "4f0d1dc2-35d4-4f90-88de-ce0dfd4582eb",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1ddbcf37-7304-493a-94ee-eb0299022c87",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7e5c7ae-e9e8-400d-9e43-00c4550b533d",
        "cursor": {
          "ref": "805c8240-8be7-4a68-bfa2-806245ae93c5",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "2d097ad9-63b4-4086-970c-ca04bd1b0b37"
        },
        "item": {
          "id": "e7e5c7ae-e9e8-400d-9e43-00c4550b533d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "3b88d4dd-83ad-457d-9e75-e72120440e85",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12d1bca4-c9df-4af1-9a8c-29ad5f9475ed",
        "cursor": {
          "ref": "68aff91f-9d44-42ad-ab6f-e31e03227028",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "88408530-9c72-47b5-86d3-045038073b19"
        },
        "item": {
          "id": "12d1bca4-c9df-4af1-9a8c-29ad5f9475ed",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "5d80aa14-aff9-4424-b405-315e6fc97b0d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cdbc76a-b333-4385-8c29-ce9b000ddb1c",
        "cursor": {
          "ref": "aaa296ec-6b2d-43ed-9829-f0577d5f8498",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "2a68a222-79ee-4006-9028-797996889cf5"
        },
        "item": {
          "id": "5cdbc76a-b333-4385-8c29-ce9b000ddb1c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "da56e029-b46d-413f-9723-0ee42271725b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "541ca973-48a6-4470-a75e-852d637204d3",
        "cursor": {
          "ref": "c29453e7-6c4e-4c9c-b364-cd32fd25de42",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "bfbbbf19-75d4-484f-9d99-4db8d08edb0b"
        },
        "item": {
          "id": "541ca973-48a6-4470-a75e-852d637204d3",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "cc4d903f-e0fc-4393-bfc9-2690c8d80562",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10123ca6-21c8-4904-93c2-345532de1982",
        "cursor": {
          "ref": "254db655-8920-4512-9ea1-034e1e392c9d",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "816f4c9a-a7ba-4699-8d9b-e9366bef4cbf"
        },
        "item": {
          "id": "10123ca6-21c8-4904-93c2-345532de1982",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "444d1aff-16b9-4acb-a965-cb9b88aa575f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3117103-202e-4356-a2d8-0d195c89659c",
        "cursor": {
          "ref": "10ac07a7-fe60-4ab0-86fa-f59e6d159bee",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "2556eab0-c23b-4d69-9ba3-c37ea7c8649d"
        },
        "item": {
          "id": "b3117103-202e-4356-a2d8-0d195c89659c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "41c8d56e-14f0-4495-9521-f5ed6ef4d0aa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4331e591-d4c1-44c6-89b8-f80692cd751c",
        "cursor": {
          "ref": "82b831a4-9af8-4137-b051-9adcfe0b9899",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "47aa0350-5450-44a6-b64f-ec724ee884e4"
        },
        "item": {
          "id": "4331e591-d4c1-44c6-89b8-f80692cd751c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f3a08573-40e0-46b5-a7ed-bb7c361ed3ff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f689fec-0272-4df0-b79a-ab20804ab3c8",
        "cursor": {
          "ref": "4e78a0a4-2f43-4632-b549-bad1befea1e1",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "d364102b-230c-4194-b9cc-3af7b9e21503"
        },
        "item": {
          "id": "6f689fec-0272-4df0-b79a-ab20804ab3c8",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "b49d156a-2cd9-4ac8-895f-c84ea8de5d3f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff9feb81-1efe-4ddd-b2b5-8ab5a7d5de3a",
        "cursor": {
          "ref": "06937aa8-2a88-437d-a88f-e61cb9fe1ec8",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "5202d622-0648-4dac-842d-f4a9458156cd"
        },
        "item": {
          "id": "ff9feb81-1efe-4ddd-b2b5-8ab5a7d5de3a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e3608c0f-a577-4ea4-9eaa-fadf7e6f4986",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3d8a6fc-663a-437e-ba45-58d2b2e9bcf8",
        "cursor": {
          "ref": "cb846bd5-7737-47ee-a378-6cc01a839b82",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "7a30f6fd-7b72-4677-b9af-5efd775c5385"
        },
        "item": {
          "id": "f3d8a6fc-663a-437e-ba45-58d2b2e9bcf8",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "636d808f-38ac-4442-b6c9-4f45bbfe2704",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5d8d138-497f-43c1-9419-4bc5a6f02591",
        "cursor": {
          "ref": "cb780044-204c-49db-b53d-46c3cc204ccd",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "995cf970-91eb-4d8e-bcf0-e90680f210d0"
        },
        "item": {
          "id": "b5d8d138-497f-43c1-9419-4bc5a6f02591",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "a988e5b2-a411-4438-9f4f-e1d1ba847311",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cee81d3-afcd-4a51-bbe6-304a20772ac4",
        "cursor": {
          "ref": "ba709e92-0025-4cab-8fe4-868e3a8a9fb9",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "a01cc1de-4403-4626-bf4f-bf03128d5dce"
        },
        "item": {
          "id": "4cee81d3-afcd-4a51-bbe6-304a20772ac4",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "65488821-9ad9-40ad-a9e5-0519d0ab8853",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae3c62fe-1bcf-4757-9f64-2a05afabe0fc",
        "cursor": {
          "ref": "153637fa-4f6b-4761-b760-0855d9bf9f39",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "54ffd714-1f53-4740-9541-49af63807bdf"
        },
        "item": {
          "id": "ae3c62fe-1bcf-4757-9f64-2a05afabe0fc",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "2037b421-db39-48ef-ad46-7ed3d92fb96e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3110f9ba-f59f-4979-a84b-b5f2f1d84452",
        "cursor": {
          "ref": "e69a20b0-8707-4edd-9b92-926da63495cf",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "56f40ebf-8c38-4f90-bf17-e5971ed0a452"
        },
        "item": {
          "id": "3110f9ba-f59f-4979-a84b-b5f2f1d84452",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "7cf2b70c-3502-4c12-9b41-aa38d31da13b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6faa90c3-d9b7-4336-a27f-2e27cc3acee4",
        "cursor": {
          "ref": "6ee24e09-a172-4c52-9f0c-df3a912587a3",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "0cc15d0b-6973-441c-9b56-bd6d1d3f2a96"
        },
        "item": {
          "id": "6faa90c3-d9b7-4336-a27f-2e27cc3acee4",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "bcee6c17-e7ff-4d23-842f-650074e715f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cac61a5-7aab-48c4-9dd3-7cf99261f6d8",
        "cursor": {
          "ref": "f79a4d35-c56d-476c-8aad-36698d3d65f1",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "b2f0ec07-e9e6-4b65-beb5-4355b2604f5c"
        },
        "item": {
          "id": "4cac61a5-7aab-48c4-9dd3-7cf99261f6d8",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "83b3ce67-b954-4a5a-8776-29fafe5e5201",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f9899d2-96a7-4873-adfb-11ff4372bc53",
        "cursor": {
          "ref": "72e7ce6c-a4d1-4988-b868-72d915e4d7a5",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "f6dd6e78-f70c-4047-9a74-7d1b68176897"
        },
        "item": {
          "id": "9f9899d2-96a7-4873-adfb-11ff4372bc53",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "1bee33f2-5c40-4ea9-ac3e-63ba2ffa8933",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3efa614-d4d5-4642-b945-fe78a111cc14",
        "cursor": {
          "ref": "cf043938-b628-42d9-a25f-b76be6283d58",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "43bd9daa-4230-471c-a9ec-78cd679e1eed"
        },
        "item": {
          "id": "f3efa614-d4d5-4642-b945-fe78a111cc14",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "2a4c5cc2-a455-456f-94d5-ac166e975bb3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b4959df-1240-47c8-9758-9371d58f1eaf",
        "cursor": {
          "ref": "0d76216f-fb9d-4976-8804-c16e867d81b9",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "6100379f-27bf-48ea-89b3-2ba12fa262d9"
        },
        "item": {
          "id": "8b4959df-1240-47c8-9758-9371d58f1eaf",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b85f3638-2eb8-4734-8104-5658c54d43bf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db5c2491-b526-4292-8b60-075c24b215b4",
        "cursor": {
          "ref": "99ff1ac0-14ab-4836-a64c-0c035a1d5f32",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "5df84af5-cb96-4154-9107-ed6477f9b27d"
        },
        "item": {
          "id": "db5c2491-b526-4292-8b60-075c24b215b4",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "90dfe1f0-f647-498f-b966-af073b52d153",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "596da744-e23f-4cde-9e4a-302c8e46fdcd",
        "cursor": {
          "ref": "dc99ddff-ff7c-4d3b-89d4-5bdb41be739f",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "ae5115a1-bdfa-4adb-8ad9-c03595fefb3e"
        },
        "item": {
          "id": "596da744-e23f-4cde-9e4a-302c8e46fdcd",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "8c005563-0eea-448e-92a6-c89a1588518a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bc38e1d-a25b-4d62-95aa-fe3cdeef18e3",
        "cursor": {
          "ref": "4d9633be-b10b-4a33-9822-a1fd6299881c",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "1e460bac-ed36-4c82-aa0f-aed76cf3e829"
        },
        "item": {
          "id": "3bc38e1d-a25b-4d62-95aa-fe3cdeef18e3",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c62f4abe-07ea-403a-bb04-65b648b690f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbdadbe9-5ac0-4466-87b6-fb0c1c187c46",
        "cursor": {
          "ref": "a2c13271-200e-477a-8c03-412dc430a41b",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "556a3d9b-bacd-4c3f-b481-6de9e8c93129"
        },
        "item": {
          "id": "cbdadbe9-5ac0-4466-87b6-fb0c1c187c46",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1aa2bb71-7083-4861-aef4-5c2b20d58c73",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d96322b8-53e5-4cb5-a28c-d2e2be6ce413",
        "cursor": {
          "ref": "aca5f030-e056-4b17-bbc9-7ff8546e63cb",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "9e33f9a0-dfdd-4e8f-bcfe-2690632e2b2d"
        },
        "item": {
          "id": "d96322b8-53e5-4cb5-a28c-d2e2be6ce413",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "18cc5268-a02f-447b-b1d9-1ca024f60318",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "058b44f9-6256-4a57-bfcb-e3955b618364",
        "cursor": {
          "ref": "a81aec1b-9d88-45e0-af78-c6b31f53f0d9",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "177a021b-027d-4657-b5e5-77e720139756"
        },
        "item": {
          "id": "058b44f9-6256-4a57-bfcb-e3955b618364",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "e4ab5f3c-8a65-4119-a588-d6da3520cbd5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21b79d4e-f64a-4ef4-9f25-c0b23067239a",
        "cursor": {
          "ref": "ee872a52-661f-4831-af3e-3fd2fe015f93",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "1ade4dea-edfd-44c7-b044-3a0f20c32b3b"
        },
        "item": {
          "id": "21b79d4e-f64a-4ef4-9f25-c0b23067239a",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "581d9ff5-33df-4fee-9e8c-9b765b65bb92",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "490983ca-aa61-41ef-ad97-830c15d5ac87",
        "cursor": {
          "ref": "1a5592e5-a253-4887-960b-97916ecc55ee",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "7c529f8b-8b9f-4da5-a7ec-99a53fb1b52a"
        },
        "item": {
          "id": "490983ca-aa61-41ef-ad97-830c15d5ac87",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "bb7eedb5-b410-48ab-8d6f-cdd910b37912",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2db0ab6a-1906-41bc-a8e2-da82754a748b",
        "cursor": {
          "ref": "18b8a261-5831-4260-a6d6-d9ac27a96215",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "9534c18e-98bd-4ef4-8ebd-0a2373299226"
        },
        "item": {
          "id": "2db0ab6a-1906-41bc-a8e2-da82754a748b",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "629c18ab-2dfe-4460-98bd-3f05026e3436",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a2d56b9-1ad0-47fb-aa70-e4bae12d6cce",
        "cursor": {
          "ref": "36b6b214-bfc8-4a85-8da4-3754b98eec45",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "cdefa964-241b-4cd9-be3c-5e79257a498c"
        },
        "item": {
          "id": "1a2d56b9-1ad0-47fb-aa70-e4bae12d6cce",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "6175b696-d05e-4609-9050-9e11cec5af0f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "211a9a0b-f383-4b52-8070-155a9f61d8f4",
        "cursor": {
          "ref": "7de8edd7-77ee-4f2b-89d5-42144611687f",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "b53e62e3-9d4a-42f3-84f8-fcf8bab46bed"
        },
        "item": {
          "id": "211a9a0b-f383-4b52-8070-155a9f61d8f4",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "a2752655-16d1-4a9c-836f-e1479dc0b188",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d09d809-c496-4d0a-96c3-fb07196db419",
        "cursor": {
          "ref": "91b9f9b2-d664-464f-89ca-907e80f741c4",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "095383b6-7577-4220-99ad-39feab866f78"
        },
        "item": {
          "id": "0d09d809-c496-4d0a-96c3-fb07196db419",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "78fed8c8-3e97-42a5-a6e2-23a2318a5e34",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "032b9e6f-cbd1-4add-a70a-9c0166709670",
        "cursor": {
          "ref": "eaf6aa1f-d3d0-4c64-97f1-7df91d981799",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "64c0ac09-8220-416c-862a-7cbc87086cd4"
        },
        "item": {
          "id": "032b9e6f-cbd1-4add-a70a-9c0166709670",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "91167daa-80d9-4bd6-b4c6-dbb8ea429b1b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ab21a60-d5b0-4645-9d26-9b58b50631b5",
        "cursor": {
          "ref": "fa62d32b-6a58-4334-9838-60e5c5db881d",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "223fa510-d9a5-4c93-a6c4-ffd88d17ef9d"
        },
        "item": {
          "id": "0ab21a60-d5b0-4645-9d26-9b58b50631b5",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "457f4695-d1a3-40f5-b062-6caa4b496fc1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8784989-38d9-48a7-b6c6-d2e090573e29",
        "cursor": {
          "ref": "72732dd3-e934-45f5-a5dc-91f5796ed0ba",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "00593ba0-8a04-439f-9791-0b4e381a488a"
        },
        "item": {
          "id": "a8784989-38d9-48a7-b6c6-d2e090573e29",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "74186d60-16fa-4e56-9e2f-9e8ce7c9d11d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0d2315f-3652-4ed9-bdc0-f15c66e91e4d",
        "cursor": {
          "ref": "47311c94-bd89-4c44-8fd5-6be5f9416032",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "f1d5e005-4aba-46f0-a632-f851a38c2992"
        },
        "item": {
          "id": "a0d2315f-3652-4ed9-bdc0-f15c66e91e4d",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "988910f1-3088-456e-b1f8-df578e8cabba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e99a7e63-95f1-49df-9a77-a071a004e0bc",
        "cursor": {
          "ref": "d2ac88df-3f9e-4b58-9a13-cf20cb36d6ec",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "0555583f-a1be-4e09-9e2c-688df3458ebb"
        },
        "item": {
          "id": "e99a7e63-95f1-49df-9a77-a071a004e0bc",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "3f397046-cb28-45ce-8667-2c13568762b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4f33862-a13a-442b-8c4d-b1e9ec79d598",
        "cursor": {
          "ref": "69a43930-9432-4b3f-a056-d9c98ce15c4a",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "aafafc6a-d40b-4da8-a1ec-45c62eb9250c"
        },
        "item": {
          "id": "a4f33862-a13a-442b-8c4d-b1e9ec79d598",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "a0f3bd5a-1aab-481d-ab0a-b1d9b46420ea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4630a818-a758-4274-a989-202cd587261c",
        "cursor": {
          "ref": "41f2042d-18d9-4c1c-a82a-deed4ce2b5b0",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "717e6415-9edf-4400-bfa6-58db6e53f210"
        },
        "item": {
          "id": "4630a818-a758-4274-a989-202cd587261c",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "9d154fe8-595d-41e9-ada2-1e3ac1b8b246",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "721f0913-9efd-4cab-b902-38c136f6932b",
        "cursor": {
          "ref": "44ebaa8f-10e9-4e20-a483-119afae98a98",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "acdd4241-ed0e-4884-ae5b-4e7abf8ec7b8"
        },
        "item": {
          "id": "721f0913-9efd-4cab-b902-38c136f6932b",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "32390eef-7677-4fea-b85c-7ea81b22c8c6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "558d6894-99dc-455f-b5d9-771fe0811198",
        "cursor": {
          "ref": "708dd928-8ced-4a10-bfc1-fc2ad77b7baa",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "ac45f95a-35a6-4bb6-8529-920dd012ebc2"
        },
        "item": {
          "id": "558d6894-99dc-455f-b5d9-771fe0811198",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "028de4d9-96f6-43f5-a2d8-fd6f79ea3698",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eda0e100-8843-4c72-9d7d-413b9013baab",
        "cursor": {
          "ref": "bffc37a9-9283-4829-a75d-3e311250925d",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "de796e96-a77f-41b2-be83-be341eae5658"
        },
        "item": {
          "id": "eda0e100-8843-4c72-9d7d-413b9013baab",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "91fcebb7-20f2-4fff-a43d-4ac2964f0f8d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dcb32bd-8eb9-493e-a5bc-369a14533cd7",
        "cursor": {
          "ref": "39e83234-a794-43db-8e43-87f19d6b0a35",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "2530d866-fa00-4288-9cb6-2546da1ed409"
        },
        "item": {
          "id": "7dcb32bd-8eb9-493e-a5bc-369a14533cd7",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "90cfb6cf-7256-44bc-84aa-7b564a00f8a6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d11a3209-20b0-4ba2-8756-26baac4908f4",
        "cursor": {
          "ref": "05bfc36a-c2e0-4f23-92c9-ef21c0ecf6e1",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "96b27f16-971d-41af-9901-9e8958898c23"
        },
        "item": {
          "id": "d11a3209-20b0-4ba2-8756-26baac4908f4",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "bdfae716-b544-4e70-8fca-9ce93aa355ee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29783059-fb99-42ed-aaab-def1a80770c1",
        "cursor": {
          "ref": "b529b0d0-d8b2-45cb-a030-4116c22b1731",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "95a73790-97dd-4756-a3f0-d463b8dc4458"
        },
        "item": {
          "id": "29783059-fb99-42ed-aaab-def1a80770c1",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "15a72766-d2ac-447a-9da9-b7217cce2748",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70f10810-a6d3-470c-8ca4-2fc8ce6ddf5b",
        "cursor": {
          "ref": "a129cb85-54a5-4725-879c-098112dc4aab",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f665cc09-0b0a-4adc-afd5-f785fe6a9f8d"
        },
        "item": {
          "id": "70f10810-a6d3-470c-8ca4-2fc8ce6ddf5b",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "ea253fed-d694-445a-aa61-722aa24e2f76",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54024d5c-abca-4080-9295-f11945efba84",
        "cursor": {
          "ref": "5c9814a8-1784-4c60-bd39-1657529c1d8b",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "2ad8174b-56cd-4c9b-875b-cc63c3331959"
        },
        "item": {
          "id": "54024d5c-abca-4080-9295-f11945efba84",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "f2f03791-3a64-4359-829d-f93a4e96bf63",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbc748b7-9a4c-40bf-a852-e424261eec91",
        "cursor": {
          "ref": "fdb053d6-58a3-4d9e-a4c6-787d505d09d2",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "b88d6759-e241-4014-bc5d-7148a88bea19"
        },
        "item": {
          "id": "dbc748b7-9a4c-40bf-a852-e424261eec91",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "2cde216e-e5f6-4bf7-a16b-49a1416594ee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c00e3e8d-6383-4c8d-9ea3-814e188a8fee",
        "cursor": {
          "ref": "d35746d1-e844-4f7a-a23e-e0713d9275af",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "16d31e71-e155-432d-8bf6-7dad64a4757e"
        },
        "item": {
          "id": "c00e3e8d-6383-4c8d-9ea3-814e188a8fee",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "a9050577-a263-4c14-884e-f0272cad71d0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "601439cc-f6a2-47af-a291-ed2bafb3ab06",
        "cursor": {
          "ref": "4762808d-fe45-48c5-b954-f3ed5f05161c",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "11d38f6f-eb70-4b22-84dd-e2a2afb5da1a"
        },
        "item": {
          "id": "601439cc-f6a2-47af-a291-ed2bafb3ab06",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "738b7b26-b794-4048-8e08-1e229abbe103",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6ced1bf-5148-477d-ab81-43344808b68d",
        "cursor": {
          "ref": "3e3e8b40-1d5d-485e-99aa-f7acb17c73ce",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "8c2fa232-3f23-49b7-889e-36e0359d367e"
        },
        "item": {
          "id": "b6ced1bf-5148-477d-ab81-43344808b68d",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "309a4da8-5e06-458a-8da7-325aead3fb3a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dae7b9d-f161-46ff-814f-faa0db66cbbf",
        "cursor": {
          "ref": "40e8e615-65c8-4715-a910-b570e40355eb",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "eb8e1a31-6451-4463-a9cf-fa440c3fb203"
        },
        "item": {
          "id": "0dae7b9d-f161-46ff-814f-faa0db66cbbf",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "780438ab-e754-4761-9cf3-ceb465f75fda",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f8cb28a-aa76-418f-94ea-a41f83b7efd2",
        "cursor": {
          "ref": "cf965d62-3df2-4660-ad24-8d66ffb571b0",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e6da67a4-1bd6-4ec7-ac8b-8d6cee604fac"
        },
        "item": {
          "id": "3f8cb28a-aa76-418f-94ea-a41f83b7efd2",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "c4ec6450-8a50-4ec6-a569-703f3f59a743",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d5cb88a-9640-4a8e-ad62-cfb1e78d6667",
        "cursor": {
          "ref": "511362fe-daab-475c-9133-272478dadc3e",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "3eaed856-84f3-478b-8a0f-38b1147069d7"
        },
        "item": {
          "id": "3d5cb88a-9640-4a8e-ad62-cfb1e78d6667",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "19da60d7-8bfd-49fd-86cb-6572dfb03a58",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0a98c08-4f1e-464f-b64c-a0a0d3dd5320",
        "cursor": {
          "ref": "7d4932dd-8d53-48fb-8061-1000474a312e",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "4449d971-172e-4bd9-a319-1df6a4009c85"
        },
        "item": {
          "id": "a0a98c08-4f1e-464f-b64c-a0a0d3dd5320",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "0fddaf57-326a-4ab6-a432-7b281a36ce36",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a5861ff-5697-4e8c-9729-9d294cd65f98",
        "cursor": {
          "ref": "6323cdf7-04e9-4176-b00c-2cbf4571dc02",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f574c2f8-ccf9-42bd-ab3f-46ca74a5bb06"
        },
        "item": {
          "id": "0a5861ff-5697-4e8c-9729-9d294cd65f98",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "477e4747-292d-425d-829f-5c046e24c33a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6268e39-13d9-4d54-b002-510abfe33072",
        "cursor": {
          "ref": "ccc9ce96-d4ea-4a5c-a8b3-e12edae9ed9f",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "880be3e8-0db4-458b-9cbe-28ab4255080c"
        },
        "item": {
          "id": "a6268e39-13d9-4d54-b002-510abfe33072",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "29a542a2-f792-4c6e-867a-4e7fc0fe090b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "678ea594-c1dc-480d-a56c-331b21e774de",
        "cursor": {
          "ref": "34363a0b-5ba9-4a36-a4c7-f1c4ca3f6595",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "5a920d6e-4d49-4385-b411-f94109f6d537"
        },
        "item": {
          "id": "678ea594-c1dc-480d-a56c-331b21e774de",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "5e75554d-90d7-4fd5-bbfb-9bb39f6a2964",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c87ed796-4b0f-4a40-9f26-110aca660e21",
        "cursor": {
          "ref": "40a837b9-14cb-40b7-863e-b8efbbcb0e79",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "01912ea8-fb54-4d22-b1da-a39741244615"
        },
        "item": {
          "id": "c87ed796-4b0f-4a40-9f26-110aca660e21",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "2a6e7fa7-ed6e-4921-a41c-10744f4763d0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d83aa02d-2fdc-4bdb-8f68-dcf196ca6141",
        "cursor": {
          "ref": "346ba2ab-1d38-4adb-a480-5b21f002f4f5",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "c225fbad-6c0c-4a0f-934f-2a09f8506d22"
        },
        "item": {
          "id": "d83aa02d-2fdc-4bdb-8f68-dcf196ca6141",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "a38f3c96-303e-4ca0-a1a2-435242824866",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39174548-37d2-476e-be68-d0877efa9b87",
        "cursor": {
          "ref": "aa07d9cf-7668-4541-b261-370b5375dff1",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "cef1515b-e81c-452b-a4da-01bd0dd62848"
        },
        "item": {
          "id": "39174548-37d2-476e-be68-d0877efa9b87",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "c9c500da-f017-4a49-9137-64f5be819f5b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75376f44-d9b8-4d5a-a23b-f422f0d582be",
        "cursor": {
          "ref": "0c34fa60-99a1-424d-90fb-98d654fc13e0",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "e2eca325-722d-49a1-b176-8f99b38a1ab5"
        },
        "item": {
          "id": "75376f44-d9b8-4d5a-a23b-f422f0d582be",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "993357ac-1999-4ab0-92d4-e52e20c6519e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5a74981-0c94-42e1-9181-c4d0d1e35885",
        "cursor": {
          "ref": "8bb93b5c-d4e0-4f83-add9-30b8f232eaba",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "db8f1e13-db9f-443d-b9fb-1bcb2bbc7c04"
        },
        "item": {
          "id": "e5a74981-0c94-42e1-9181-c4d0d1e35885",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "2dabbf41-f0b0-4488-b5f3-a510014dcee5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43b1de59-aab0-4f3c-932e-f1f06a3d8439",
        "cursor": {
          "ref": "4a72f866-bbae-4459-907e-e5db220f71f0",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "24941e75-3d00-4813-8be8-757ed71561c2"
        },
        "item": {
          "id": "43b1de59-aab0-4f3c-932e-f1f06a3d8439",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "2b9309fa-ea22-4ae1-b484-e9904d8f14f4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fcb6d73-020c-48a4-b77d-bdeb2039432b",
        "cursor": {
          "ref": "49511ed5-ed23-49c8-9f13-1a85477da93a",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "9ba13ba6-e06f-4eee-90b5-d73dd0569521"
        },
        "item": {
          "id": "6fcb6d73-020c-48a4-b77d-bdeb2039432b",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "0c1fa76a-25e3-4488-a861-cd0902f11abf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d710d0c-641b-408c-a5f2-91f83cf0b285",
        "cursor": {
          "ref": "8c968b35-344e-44ef-9a69-772b8485fa43",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "318ee41f-c89d-4a02-bd71-5fb77a8f3fda"
        },
        "item": {
          "id": "1d710d0c-641b-408c-a5f2-91f83cf0b285",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "7855b028-1e83-44f4-ae68-5aa3b4925cca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1baba522-f873-4848-ba6c-3645770bc5bc",
        "cursor": {
          "ref": "6a417c2c-aab1-4e11-a210-a09102147b83",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "a76b6c28-cff0-4752-be80-336e62c838ed"
        },
        "item": {
          "id": "1baba522-f873-4848-ba6c-3645770bc5bc",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "65d3ad73-647a-4257-aa65-ba5fa773f77e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f8397c8-9b37-4392-aa88-73328479ca80",
        "cursor": {
          "ref": "fa7a086f-2a65-4525-a557-d6f2193e74d5",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "0ba8b2d9-ea4a-4eaa-a1d0-10d8e2352bae"
        },
        "item": {
          "id": "2f8397c8-9b37-4392-aa88-73328479ca80",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "64c64cbd-5e65-4be1-9142-3961395a0a6f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b4796bf-1e34-47df-a452-79b429c9cd77",
        "cursor": {
          "ref": "d52b769d-9645-415b-95ba-6a6f8c3cedb2",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "8d05106c-edd0-40c5-89f0-1eba6c8efe5a"
        },
        "item": {
          "id": "9b4796bf-1e34-47df-a452-79b429c9cd77",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "4993a328-602f-44dd-8321-d189b53295e6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28858e1f-f400-451a-b802-53e881dbc5f2",
        "cursor": {
          "ref": "c25e6b1c-2003-4cea-9857-cfbb708a188a",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "92deb72a-9a6c-4ab5-893a-3ea25105e588"
        },
        "item": {
          "id": "28858e1f-f400-451a-b802-53e881dbc5f2",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "a228c948-53eb-4512-8daa-447f638a8fb8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cceb28b8-8bdc-42ff-9878-c424491411e8",
        "cursor": {
          "ref": "fe1e94ea-07f5-4095-9651-a34ab56382c8",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "6ca22398-f89c-4384-9207-bb6ef5239a5f"
        },
        "item": {
          "id": "cceb28b8-8bdc-42ff-9878-c424491411e8",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "2da244d0-1d7e-4265-8012-107d500bcfa7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bd017c5-5729-4754-a56c-b234a2e8b771",
        "cursor": {
          "ref": "e6cdeefa-88cf-426a-8105-051a69025c87",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "bea3ef71-c3a4-4dbd-bfb5-af84c328f25d"
        },
        "item": {
          "id": "2bd017c5-5729-4754-a56c-b234a2e8b771",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "0fa59539-f509-4075-985a-a98765414a78",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e42e1b9f-6c36-4147-9606-89ef95224a97",
        "cursor": {
          "ref": "83f700b2-814e-4218-9abd-2d3c8c2f190c",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "005229af-0c97-40b5-842b-f3388c56ad9b"
        },
        "item": {
          "id": "e42e1b9f-6c36-4147-9606-89ef95224a97",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "911b8195-7547-4c11-b4f9-05527e99737f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "895e3a51-a0e6-4c89-9ea9-a27633c52c85",
        "cursor": {
          "ref": "8c481362-26b2-4435-b252-5e5cb0f28d58",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "3b981ba3-1fa9-4650-a61c-46a334551c16"
        },
        "item": {
          "id": "895e3a51-a0e6-4c89-9ea9-a27633c52c85",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "9cd24492-5065-49fe-96e2-c943d48bd1bc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84e8e21f-3353-47f8-91ab-8adf0e31f177",
        "cursor": {
          "ref": "34114871-abcf-4e5a-a745-113e4d800f77",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "908799bd-cc88-4e6a-9633-69f691ef94a2"
        },
        "item": {
          "id": "84e8e21f-3353-47f8-91ab-8adf0e31f177",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "208e2063-947f-4836-a517-611568bc5b30",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccdce6c5-9207-40b4-927b-4257e04497c5",
        "cursor": {
          "ref": "0c84c9fb-2689-4abd-8aa4-b0a58cc5cf37",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "f598e066-d88f-4167-a8ee-065aba0e6b0e"
        },
        "item": {
          "id": "ccdce6c5-9207-40b4-927b-4257e04497c5",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "47f4761a-59fd-48e3-ad37-35a72e064f4a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a320c2d-9430-47e1-ad84-deb5ef4cf731",
        "cursor": {
          "ref": "044b872f-fc7c-4705-93c3-9fbad262ad38",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "ccbaac8a-4d7f-4437-99bb-dcc528f988e6"
        },
        "item": {
          "id": "4a320c2d-9430-47e1-ad84-deb5ef4cf731",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "b21e283a-981a-4f76-9a66-cf2f9dad125a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffd7f845-b6f4-4936-8494-800c6979435f",
        "cursor": {
          "ref": "eecc8bab-acbc-4a6c-93b8-55bef76e5d15",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "e37b94b4-1d8d-4dee-89bb-5217c9ba6f94"
        },
        "item": {
          "id": "ffd7f845-b6f4-4936-8494-800c6979435f",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "2d497822-65f5-42d8-ad3a-c9806d04e700",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31b6dd92-30e8-4245-bd2c-205f976af240",
        "cursor": {
          "ref": "2fb37a15-2334-4bda-a317-f17bc20aa8b8",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "108983ce-a2be-4384-ba40-2fe9f10f49f7"
        },
        "item": {
          "id": "31b6dd92-30e8-4245-bd2c-205f976af240",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "39eaf0ae-6954-4ab5-97f8-44dc7d14ca63",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb69ec82-a09b-46aa-8584-c0f31c49d07d",
        "cursor": {
          "ref": "7c078cf7-644c-4679-91c1-9249a7ad60d3",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "4fb6ba68-d331-4bd9-8217-280ccc379130"
        },
        "item": {
          "id": "bb69ec82-a09b-46aa-8584-c0f31c49d07d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "46a52191-7b54-469d-bba4-d085268f7cf0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbd84233-5eec-4fcb-b240-a24e93052d92",
        "cursor": {
          "ref": "b53d05e0-151d-472a-aa23-83472dff5a6d",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "595cd756-8390-4bb7-a432-92c2e7d61cd8"
        },
        "item": {
          "id": "bbd84233-5eec-4fcb-b240-a24e93052d92",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "0ea87100-e10c-4ff1-bb9c-66aabc79e854",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd2d8497-7713-49d0-aa3c-1e19f4a8e545",
        "cursor": {
          "ref": "1d56d533-2243-4a3c-bfba-5a51a503f43a",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "c39da0b2-75c5-483a-9c8e-66198f6da09c"
        },
        "item": {
          "id": "fd2d8497-7713-49d0-aa3c-1e19f4a8e545",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "424d9d4b-59c8-42b5-a61f-c515d7a0c3ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5acf97f-b228-468e-b879-78916dea80e2",
        "cursor": {
          "ref": "ee86b120-ef27-43a7-b0c2-92ea093eaa2a",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "fcf12fcc-7936-4536-bd58-fc2a80b13277"
        },
        "item": {
          "id": "b5acf97f-b228-468e-b879-78916dea80e2",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "a2cd6223-2fa8-47a9-bbf2-78d4e6a76606",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8f4414a-8d8a-4a22-b4be-424204c4ae1e",
        "cursor": {
          "ref": "68052bea-72b0-462a-96c6-fd4671fab27c",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "5d26b16c-206d-4a39-9519-0e91110abbd9"
        },
        "item": {
          "id": "a8f4414a-8d8a-4a22-b4be-424204c4ae1e",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "de412d77-a878-4338-be4a-83c45d9d57f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0245f803-b949-4190-920f-0ee7e7d0c586",
        "cursor": {
          "ref": "6ca22578-7b04-4576-8615-8447c1e4e646",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "665d9860-c82b-461d-acd0-795e06341c1f"
        },
        "item": {
          "id": "0245f803-b949-4190-920f-0ee7e7d0c586",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "c4b97832-7e01-4e78-a8e7-f84d6628f8c1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81d9f1aa-1d49-41a0-adcc-708513575275",
        "cursor": {
          "ref": "650b0c91-0741-4b88-9c59-5de908de1e87",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "2a81df48-ddc8-47c3-8803-d05ae417272f"
        },
        "item": {
          "id": "81d9f1aa-1d49-41a0-adcc-708513575275",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "2b3d7024-72cb-4809-b0c6-02580b09c99d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ebcfce5-1495-4df7-b352-8b4c20237c78",
        "cursor": {
          "ref": "c3821a4f-663f-4acd-9496-b9953acd713f",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "3d507b54-a8c0-4d57-a041-57286a691b72"
        },
        "item": {
          "id": "7ebcfce5-1495-4df7-b352-8b4c20237c78",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "a29df143-e936-4137-b087-babd2ee0b683",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e9f2092-407e-470a-b4da-28e3aa168acd",
        "cursor": {
          "ref": "4880ff92-6908-473d-935c-c042870068e0",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "659cb6c0-85ab-43d3-9858-a52769b77abb"
        },
        "item": {
          "id": "4e9f2092-407e-470a-b4da-28e3aa168acd",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "e6b4cca4-0dd8-4baa-8128-1ab5a5330448",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a588e526-30e9-477d-b400-9c1075fa1473",
        "cursor": {
          "ref": "60803ac0-d076-4999-a4a2-37781fd2455c",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "739b39db-b8ea-41ef-883c-166b783c430b"
        },
        "item": {
          "id": "a588e526-30e9-477d-b400-9c1075fa1473",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "fbb893f0-0717-4724-bbf7-3957dd026191",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 272,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b38ab63-1045-4cb0-9746-c01832c09973",
        "cursor": {
          "ref": "e3de1a41-da4c-4a14-bd66-d79ac0c706b2",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "a3612282-eb4a-45a4-9650-f79ccdb4b323"
        },
        "item": {
          "id": "4b38ab63-1045-4cb0-9746-c01832c09973",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "56f353df-0416-4d5c-9427-acd94be6e87a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a20a19ee-541e-4ba6-bab3-581a901087a8",
        "cursor": {
          "ref": "9b5112dd-23b9-40b4-bfad-849f39dac6ed",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "21152524-f9b4-444c-8537-bf66a84f90aa"
        },
        "item": {
          "id": "a20a19ee-541e-4ba6-bab3-581a901087a8",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "538fde11-9a5a-49a8-9b5f-daf4a6551173",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2852c764-08f2-4f62-a4ee-eb8308fcd698",
        "cursor": {
          "ref": "d13cf11a-6bbe-4f94-b564-20efecbff1d5",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "d42458cd-09c9-4e58-8a2a-3015130f978e"
        },
        "item": {
          "id": "2852c764-08f2-4f62-a4ee-eb8308fcd698",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "d9f04d16-9f88-4bd5-ba4d-94e46cf008ce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7e392f1-5b0f-4cfd-acc3-061700804667",
        "cursor": {
          "ref": "c4538126-3166-48de-ad86-b1c55ae2fac1",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "2b39c0f1-4573-4a8f-82ff-fb5eb3071409"
        },
        "item": {
          "id": "a7e392f1-5b0f-4cfd-acc3-061700804667",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "89939537-8e0c-4e57-9dd6-cb6e752fa6e3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f0ddbde-471f-41cc-8ea9-a02a8491077a",
        "cursor": {
          "ref": "5b9abe26-cfce-417c-82b7-b8deacc57360",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "4421c1d1-7e81-4104-a214-f0398ce28e5b"
        },
        "item": {
          "id": "1f0ddbde-471f-41cc-8ea9-a02a8491077a",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "5d8254d2-9347-42d5-bf2a-a147c8afc2a6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd0f5255-fb40-4afc-ba1c-50e096814b77",
        "cursor": {
          "ref": "04f6afbd-b5ef-409a-b1f8-cc8429e6ae01",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "ebf763e5-6472-4bfe-9d60-4616fe3a5d87"
        },
        "item": {
          "id": "fd0f5255-fb40-4afc-ba1c-50e096814b77",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "ca1f11b5-e968-4337-a152-08f5d0ff2f8e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19c21897-cc13-4df4-afb8-8d8aaacfd6e0",
        "cursor": {
          "ref": "88acbf8f-0b1e-4fbd-bf81-ebf4bdfc76e6",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "fa405b04-7c10-4acd-981c-d2bc766c95ba"
        },
        "item": {
          "id": "19c21897-cc13-4df4-afb8-8d8aaacfd6e0",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "9e44d031-e97d-4bb1-a593-5cfeeb719e31",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1681dbb-592f-4c41-8d6f-a922375eda2d",
        "cursor": {
          "ref": "6e225233-2fa7-4b79-9ddc-d1115695cd2e",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "044a8fcf-8ff9-4114-9794-91e5a1005b5f"
        },
        "item": {
          "id": "b1681dbb-592f-4c41-8d6f-a922375eda2d",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "0836cb8c-ae68-4ed5-a0e5-2a79ba7db928",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7089cfe-30cc-4541-bc7a-3d3d3497d8f8",
        "cursor": {
          "ref": "854f43db-4e2f-42ad-8a39-f4728ed644a1",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "456e2c67-24b9-4f21-9f03-8878b7529b29"
        },
        "item": {
          "id": "f7089cfe-30cc-4541-bc7a-3d3d3497d8f8",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "788402ef-a934-4093-8142-d626e84d10d9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a64d2143-768c-4bc6-b0e6-5ca94ec70115",
        "cursor": {
          "ref": "93435284-a795-4b2d-94af-6b1562e1bd85",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ec1f82e0-93a2-4bc2-a5fa-459c77b6af1c"
        },
        "item": {
          "id": "a64d2143-768c-4bc6-b0e6-5ca94ec70115",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "3d7542dc-8dd3-438a-91fe-1054e662d2d9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ba078a0-3dc8-4f8e-b289-74dd830aa2af",
        "cursor": {
          "ref": "2b81a1bc-9de9-4c30-95df-a319b921522e",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "b13d6ee5-0d1e-4df2-bb0d-28fd2f242cba"
        },
        "item": {
          "id": "4ba078a0-3dc8-4f8e-b289-74dd830aa2af",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "0626bb5e-2f41-46c5-9e6f-6e928c8afae2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16d42a5f-e36d-4b1a-a12f-6cc7a088de64",
        "cursor": {
          "ref": "713adb4f-e337-467c-b280-ff0610314df3",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "dd9bd396-4509-4578-8d50-0ca33acb2a49"
        },
        "item": {
          "id": "16d42a5f-e36d-4b1a-a12f-6cc7a088de64",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "bf6a8ff6-e59d-4dd7-9a96-b8bfaa7866a1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eb05df1-534a-47c5-8f86-28dd1e7b4f8e",
        "cursor": {
          "ref": "b81d28fc-595a-4816-93ee-6eddb63811f9",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "dee48174-1b78-468e-b493-081ed2772aae"
        },
        "item": {
          "id": "7eb05df1-534a-47c5-8f86-28dd1e7b4f8e",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "b981c37f-7c69-48ec-9ed4-07edf6d5673b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a882fbb-47f7-45f6-b4e3-a1e649174331",
        "cursor": {
          "ref": "01bb37c6-6968-4fe1-a5a2-609ef0399477",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "77dcf90d-620c-4e46-8a52-aff56df6ee3b"
        },
        "item": {
          "id": "9a882fbb-47f7-45f6-b4e3-a1e649174331",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "d0d037ea-3181-459a-b9f7-4315e821d631",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7229a65-537c-4da7-b84d-97c3d71c930d",
        "cursor": {
          "ref": "f81de32b-f57b-47bb-8df5-5230b3657e46",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "c44b0482-d82d-4196-b17c-790eda08ecd8"
        },
        "item": {
          "id": "c7229a65-537c-4da7-b84d-97c3d71c930d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "6a4610bf-e750-4c64-a667-0bee05c519f4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e670c68-8f4d-4609-956e-fc5fc98b272f",
        "cursor": {
          "ref": "b0a893ad-1460-407d-ad91-6c1a6ab8e7a9",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "e8316fe7-f17d-4222-9d4a-042f12d585fd"
        },
        "item": {
          "id": "9e670c68-8f4d-4609-956e-fc5fc98b272f",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "71e87eb1-97dc-486d-beab-31ee1e4b08ae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "094b7c90-4b5b-4eb0-9513-825929eab81a",
        "cursor": {
          "ref": "3efdf38c-0f9c-437a-a48e-2e411badcfac",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "98ca5ffb-4ae2-4890-9530-c7dd3e74a793"
        },
        "item": {
          "id": "094b7c90-4b5b-4eb0-9513-825929eab81a",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "538b0f2d-189a-4e4b-9e9a-9018ea3b1ca6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8941543d-e093-4d73-8e8c-b11b63c143b8",
        "cursor": {
          "ref": "029132cd-fe35-4406-ae9f-8e4fb818e6fb",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "a01adfb7-3f2b-4f4d-a806-64106204b60d"
        },
        "item": {
          "id": "8941543d-e093-4d73-8e8c-b11b63c143b8",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "c55b44b6-b3f4-4fda-9605-a26fefde4688",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "158bf5f0-19d7-4ea2-b6bf-cb1376d622ee",
        "cursor": {
          "ref": "8be41885-1582-41e1-b0e9-b2f325c6ee2f",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "a3825e56-60f3-470b-b763-728d4311d69b"
        },
        "item": {
          "id": "158bf5f0-19d7-4ea2-b6bf-cb1376d622ee",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "8de41b0f-9291-4bb5-a647-7a802fdda40a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbaf4212-33bc-4305-af7a-d3904e69efa2",
        "cursor": {
          "ref": "58f49ffc-485b-4f13-85e9-761406b5d689",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "1b91e1bc-2466-40df-9f17-54f59c0ff6c4"
        },
        "item": {
          "id": "dbaf4212-33bc-4305-af7a-d3904e69efa2",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "464dd3fb-5a6f-47da-bf6f-9bf55835f39a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d13dbc22-d454-4c06-b994-2d0804bbfd8c",
        "cursor": {
          "ref": "425209ac-db2d-4d27-9b2e-f4912a5c7d08",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "7fe9c4bc-5f4a-47ac-8c0f-fc1587848ec9"
        },
        "item": {
          "id": "d13dbc22-d454-4c06-b994-2d0804bbfd8c",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "974d4aec-2fc2-40af-8ad2-e0052db66fdd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5285381-14e0-4807-b5ed-641d64d1fd43",
        "cursor": {
          "ref": "886f1813-fdb9-4698-90cd-baaad74425a7",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "66f7e5ca-b503-4231-8028-5b949bffb272"
        },
        "item": {
          "id": "d5285381-14e0-4807-b5ed-641d64d1fd43",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "5f4b0596-37cc-482a-856e-4a67c766f58b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14ec2eda-9348-465b-9c82-f82469847887",
        "cursor": {
          "ref": "8a567581-6958-41b9-a619-d4cdb35fb21f",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "8387e59f-58ca-46c3-ba15-147b4f969f26"
        },
        "item": {
          "id": "14ec2eda-9348-465b-9c82-f82469847887",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "0d4913b7-9a82-42f6-8dd0-e1bfd1b9b942",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0164199a-ce3f-4aee-8f66-34b0a76023b7",
        "cursor": {
          "ref": "1a11e78c-2d89-4468-8f44-deaba1ff4dea",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "2beaa7a7-f1af-4b93-beae-2010a0004386"
        },
        "item": {
          "id": "0164199a-ce3f-4aee-8f66-34b0a76023b7",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "a0b1456c-839d-4109-a212-dcb41f44c898",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e4e3fbf-3716-4fee-91f5-b6cb7325d3e9",
        "cursor": {
          "ref": "71ee5dd5-85a1-4144-9dbe-ec209aa0fe92",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "beebcafc-1d70-4eb3-93ec-b07de37416fc"
        },
        "item": {
          "id": "4e4e3fbf-3716-4fee-91f5-b6cb7325d3e9",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c8fdd038-9837-4bee-b944-28af2061822f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d74047d-6e05-49f3-85c6-2beda6f5d788",
        "cursor": {
          "ref": "eaa16eb0-7da8-453c-b6e9-f769e022778c",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "9de92612-9f73-420a-b9c8-0b1d2de852c2"
        },
        "item": {
          "id": "0d74047d-6e05-49f3-85c6-2beda6f5d788",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "c33d5cd8-b78f-44a3-9a63-2197f1fb1fd6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "461a9add-f218-4300-ae2e-529296e6ac45",
        "cursor": {
          "ref": "6cc777b2-ffb5-4bf0-9d5c-d05846bb9863",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "307f961a-c0d6-47d3-af13-8aa5067a1f6d"
        },
        "item": {
          "id": "461a9add-f218-4300-ae2e-529296e6ac45",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "afdc8dec-1df8-4368-bf5f-c82f00ea758b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "012f8ffe-520f-4f85-bf1c-210930241fbe",
        "cursor": {
          "ref": "abbf5f12-b9af-44be-bc01-bf175e20a68f",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "459cc3bf-ca99-4851-9cbe-9dcd2e9e84b6"
        },
        "item": {
          "id": "012f8ffe-520f-4f85-bf1c-210930241fbe",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "30265443-1878-4785-bdb0-d9d8aa099302",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "525fb4bd-6ae5-481d-be53-c419825d4695",
        "cursor": {
          "ref": "e7d7e776-8688-46b8-bcc9-f328f8341db4",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b20a1d0d-c2c5-4e6d-a811-415bc7d8c562"
        },
        "item": {
          "id": "525fb4bd-6ae5-481d-be53-c419825d4695",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "a289af6e-b3fc-4c84-9f94-db7d501d9c4c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ca1b64c-30c5-44c8-8d68-ed1e3867b1f4",
        "cursor": {
          "ref": "2516ee9e-83ac-4e18-9e35-08c67d5acef6",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "17b24b66-b3c4-41b0-a290-9c184a390eaa"
        },
        "item": {
          "id": "4ca1b64c-30c5-44c8-8d68-ed1e3867b1f4",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "a7084927-a89f-4a3c-9018-c4febc4e2ba2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc53f4c4-e8ae-4843-9582-0b2cda5ee304",
        "cursor": {
          "ref": "c7dd36b7-6050-4671-b9d9-384c4e5eb12d",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "d8a35cf7-1e72-4cb2-bfa7-d54566d8a42d"
        },
        "item": {
          "id": "cc53f4c4-e8ae-4843-9582-0b2cda5ee304",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "48e5d194-cd9a-4ea9-9d21-f03e9999a902",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a79fe3c-94ab-427e-a5b8-dc2459a715ab",
        "cursor": {
          "ref": "16a1b95c-d736-4e85-a438-48908a4e7eae",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "3b6f5152-1bf0-48db-afcc-16bfdfb401e6"
        },
        "item": {
          "id": "3a79fe3c-94ab-427e-a5b8-dc2459a715ab",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a316aa07-597f-45e4-bec2-50b023a84c1b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87213e20-4919-4105-915e-e36a530724b6",
        "cursor": {
          "ref": "cff74152-1577-41ff-af30-cb77dccefee2",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "20579c90-bda7-415b-93b8-611cbbb1ad2e"
        },
        "item": {
          "id": "87213e20-4919-4105-915e-e36a530724b6",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "b54234e0-0104-49a2-94e0-e4d51708ebb8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d24fbba5-425b-44b5-af91-bd3aa9a3a0c6",
        "cursor": {
          "ref": "3979d455-7c09-4979-99cf-cd5fc5a73248",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "64eb2146-4d19-44b1-997c-ac6fca7ce6f7"
        },
        "item": {
          "id": "d24fbba5-425b-44b5-af91-bd3aa9a3a0c6",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "2b7b518e-2a49-4c1d-a1d6-f0498a26118a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56537fea-3c77-40a4-8443-5fd6af6887b1",
        "cursor": {
          "ref": "a99d8316-c61d-4cea-bc6a-dc2585604433",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "2808c591-7bdc-4ea5-a45c-5d7d8f0ee525"
        },
        "item": {
          "id": "56537fea-3c77-40a4-8443-5fd6af6887b1",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "41d043de-9653-4b17-a328-51dd919c8d9e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73fbf9cb-9db2-424b-89b1-7902fbd534e1",
        "cursor": {
          "ref": "810b1d3b-442c-4ede-a839-c418ededba5f",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "614c40d8-72ab-4d5d-8edc-224f4df8ebe1"
        },
        "item": {
          "id": "73fbf9cb-9db2-424b-89b1-7902fbd534e1",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d2642854-b665-4445-be09-1e046b4661ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d729b6c6-863e-48a4-88df-c0f44d9e7118",
        "cursor": {
          "ref": "e85b19aa-bd32-4bb8-99c5-a1296df1ab59",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b14af8fe-0d5f-478d-9a55-ec5a46369b2e"
        },
        "item": {
          "id": "d729b6c6-863e-48a4-88df-c0f44d9e7118",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "931d1ed5-e60e-42ff-b7a9-86729e727e52",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c5f3c5e-4889-4184-8c56-2705d2f4dbc2",
        "cursor": {
          "ref": "c7830682-5012-4f35-801f-c2668f938fee",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "56b33b81-bc1f-4d95-b436-a1db1a4443db"
        },
        "item": {
          "id": "3c5f3c5e-4889-4184-8c56-2705d2f4dbc2",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "edaf5ce3-113d-4ea2-9071-fd7135a8ef8f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87b751ca-93e7-4273-aa01-7f7b72af978e",
        "cursor": {
          "ref": "c94fdaf2-e0a3-46ff-afa1-af36e6ef2f66",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "7a39fbf6-7900-41d3-81d6-c7e59d7c5d29"
        },
        "item": {
          "id": "87b751ca-93e7-4273-aa01-7f7b72af978e",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "80f5ef34-1629-4c6f-b496-5881383518d0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b07fc691-7d06-49d9-97b4-1a203b705ebc",
        "cursor": {
          "ref": "bf59f934-3bb3-4a2c-9b66-fa381464a1cd",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "3aef11e1-8eda-4a64-850b-ee506a79fe68"
        },
        "item": {
          "id": "b07fc691-7d06-49d9-97b4-1a203b705ebc",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "09045bd3-3058-4183-8697-125d8c8c29dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbb6a504-e6bd-473b-b664-3d01937a8136",
        "cursor": {
          "ref": "0f63d1ac-0d25-4598-b22d-dabd119b1556",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "9877ba65-7fa3-4259-aee6-f62a5df6a34f"
        },
        "item": {
          "id": "dbb6a504-e6bd-473b-b664-3d01937a8136",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "d0be25fa-3be6-4e53-b96c-598af2f4cf72",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc105ff6-241b-44e9-a81b-06c40ceb5018",
        "cursor": {
          "ref": "92280710-6288-49cb-83f5-a5c00f0973b0",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "1e341bde-6e17-4db5-adcf-6d60181e7647"
        },
        "item": {
          "id": "dc105ff6-241b-44e9-a81b-06c40ceb5018",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "e55035fb-73fc-4494-b415-8b51f7a66797",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "0412ce05-fda5-4e20-8311-00c96f6518b6",
        "cursor": {
          "ref": "1e910666-9d01-47b1-8fda-dd56077a8321",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "9dc9a842-b01a-473b-b627-eb005279ef71"
        },
        "item": {
          "id": "0412ce05-fda5-4e20-8311-00c96f6518b6",
          "name": "credentials_verify"
        },
        "response": {
          "id": "900c5e47-11f3-4a41-b165-c82d0a3c5deb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "738a7bdb-d629-4acc-a52d-0761d59a27b3",
        "cursor": {
          "ref": "581270c9-e270-48c3-b90d-06f7c0c261f1",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "3cb775fc-a654-4860-b98f-1e92df0f9ea0"
        },
        "item": {
          "id": "738a7bdb-d629-4acc-a52d-0761d59a27b3",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "f3a8ed73-d08b-49ca-a0f2-5d57398669fc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "e10f71d4-a56e-4df8-8e4b-12c35360888b",
        "cursor": {
          "ref": "9848fd6d-54e8-4d05-b635-333772d54063",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "76288aa0-dd8d-4fd1-9f06-af7c319b94ae"
        },
        "item": {
          "id": "e10f71d4-a56e-4df8-8e4b-12c35360888b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "104972e1-26f5-436f-9f4c-66adfcf66d16",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e10f71d4-a56e-4df8-8e4b-12c35360888b",
        "cursor": {
          "ref": "9848fd6d-54e8-4d05-b635-333772d54063",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "76288aa0-dd8d-4fd1-9f06-af7c319b94ae"
        },
        "item": {
          "id": "e10f71d4-a56e-4df8-8e4b-12c35360888b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "104972e1-26f5-436f-9f4c-66adfcf66d16",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "327e9e68-c60b-4ca9-be9d-de4079dccbce",
        "cursor": {
          "ref": "9f7a60a5-5aba-4b83-926d-7c7ff3690e09",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "c14351a3-cc3a-4bd2-ba32-8ca0c6711d60"
        },
        "item": {
          "id": "327e9e68-c60b-4ca9-be9d-de4079dccbce",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "7700be8f-0ac2-4ab5-9295-5725e9213ba1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "152d0639-362b-4e11-9530-ae712c15e426",
        "cursor": {
          "ref": "2dee1bad-ac49-4fda-a07b-c572b1c9221f",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "2fb1746a-5a8a-4670-aab8-01198fc38ada"
        },
        "item": {
          "id": "152d0639-362b-4e11-9530-ae712c15e426",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ef167ad0-8a79-488e-97a8-78f563c1097f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}