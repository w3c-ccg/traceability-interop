{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "7e636920-b0b7-4ecd-a1ed-33cc2b7e4d1a",
        "name": "Clear Cache",
        "item": [
          {
            "id": "e96f021e-ffd2-4749-9617-a5614bfa3c70",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b12a14bf-bb93-4e2d-b965-de05b2119a89",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d1b01bae-6b6d-4a78-9d13-033252cb1335"
                }
              }
            ]
          },
          {
            "id": "b4f56f49-89ff-4bbc-aca4-753fb8e42fb5",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "85fe0521-9fb9-433d-9054-423ed216e62f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9efaf529-0b34-44fd-bf49-12a7f5194145"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "d2d59190-60d5-4de3-a635-4014569b4583",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d2fea230-0cfa-4aa3-9403-4ff95747f3ea",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b4f488b4-687f-4a00-bf84-87c09fd1414e",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ea32a5f8-2508-4ad3-979b-a89617bf0ce5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4604ea22-80d1-4772-b47d-7c302450eed6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c694525e-c5a6-419e-84c5-7521497b1a97",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1a082fe4-c14d-4dfa-a0c5-25e15d1b3273"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2d521b4b-9c4d-4411-a40e-cd7d3d8082b4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b1cc9097-e998-4032-80a9-a38e15b3f3ad"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "953d1f87-1dfb-4f94-aceb-90ed36726d91",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "bd2646c6-9d78-4492-b2f9-da0ea4eea35f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4f777f8b-ecce-451e-a3c8-caa7ae0e7f22",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "353131d9-f2c1-4d70-9ff3-9d95e6ac9973"
            }
          }
        ]
      },
      {
        "id": "1c735ce3-53cb-45f2-93b8-50001336e9e5",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "8bb94bd7-c975-4a59-acb4-788f686e8b30",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ee329734-05a7-44a7-837b-deeee9d4ced0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1b9a256b-7cad-4dc9-8477-c8acbef47fe1",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd9037f7-ce25-4246-9b80-9a18500e81e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "238325e5-e052-485f-aaa2-5f04cb0e145c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "156e269b-bf78-4b36-8c7e-29acfb7f788d",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f759aab-d48d-4a95-b50d-f78c10af7015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0504b260-4827-4af2-9d2d-91d0ed8e4ec9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d6c3c02-b26f-4fef-b0ad-a55353bf1cf1",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d686733-dea0-4ade-98e8-5d3efc116959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "63a8e324-5743-4eb6-81e5-9c75879395de"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0a61f57d-8977-4299-9494-8347f8f1bde8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2b7f751b-8851-48d1-930f-ac3e99f6e8ca",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a7e339-f1f4-4ea4-a74d-427b0f5a30fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0bfd150c-2e5e-4f8d-aedd-d2332335b60a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d0eec8a-5867-4902-8319-95f9bf6d350a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1882c0a9-bddc-4caa-baf2-60ea2ffd468f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "89df535b-fe54-4aab-8bec-d175bce4f3a9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8ce3630f-e730-4a6c-b668-54748a768106",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6cc38202-520a-4187-99cf-e5554e70c538",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "e63eec81-13a8-4228-b185-db33191759a7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fadef816-bdef-4d89-b926-1ac1970c49a3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "afc98a2a-a4e1-4208-9325-be9e5528bd7f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fec408c7-1e13-4d8d-a270-b6b6ceb14bbc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5094c5ab-410c-43a0-99b1-47a649fd9356"
            }
          }
        ]
      },
      {
        "id": "2ef17235-c63c-49ae-ac54-e5a59ed85d6c",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "5c388f67-80ba-46fb-89c6-bbf82b162560",
            "name": "Negative Testing",
            "item": [
              {
                "id": "27f3d39f-15bb-41e1-9143-326f918446d2",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "72ee4b88-e6cc-4b7d-9185-683a953ca422",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1d396e8-8974-4da7-93e8-a3b559bd2818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2aa820e-4d10-4c00-b0f2-aff42ed13759"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74ab5101-2749-4b39-8378-17192282b017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d33fa54-c7d3-4e5e-b216-2f39af1a645b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24c0c192-a85c-4333-ae93-efb49c590331",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19711ace-19af-4387-a35d-a5df8764305d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8287c96-cc8c-473b-8e05-09296a453fd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d1efad7-8886-4aad-b09a-d054017580ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d89bbc2a-6868-4c04-8021-35abdc9a9088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bf33359-be6b-4936-8730-bbb2d63afa3b",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56221532-0498-4c41-b52a-856db79fd52b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d025a3d-6c46-4138-8aef-efae3c82df58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90c07cd8-ea22-45fe-a9e6-46a4cbbbed14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8cc4922b-f798-455f-b5b0-f993c4061bf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1af91606-fe81-4813-a26b-15b666913d8d",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7bce91f-21b6-4368-909c-f0a33118fa61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49919e26-7cc0-4303-a22d-94bdb7558d71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc794d39-9f9f-456a-9648-0f8aedee02fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18314308-1fd9-4727-8ec6-93e6b45052eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb5183be-8c91-4fb4-8e04-c43387b73670",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a1bc6d6-44c2-4112-9b99-a34a8edc87e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48b96ebb-6279-4d8a-83b3-7806828adb38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3340b4b5-e9b1-4681-884f-e92865ab70ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "abaa4784-bbd5-49b3-b3b2-c86f0f589ef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9619533-e069-420f-96dc-1aa3b1a5228a",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "828b86b1-ca08-4a80-9ebe-e1c094111456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f64d535c-b7f1-4bd8-b741-3baa4700a251"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb140d1a-70e5-4e96-8110-7e196af7b51c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ece19cea-bc39-4e17-9b29-71c6d1cb37f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de0aad65-d866-4d25-8823-3fdb48eed0ea",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ca83d5e-2c7f-4cb1-8989-bc2c01b6d789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20fb84b9-5be7-4f2e-8ece-2f5f98d73c8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2d65e1b-3400-4f96-8610-28f6a5f4a4bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "abb24383-88f7-4680-add5-14014cc95d8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46380e2e-08fe-4d61-a354-206a002c64f8",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aed6c97e-49a7-428a-8d37-d2df12a8e087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "370e0f8b-a315-4c4b-97f1-fd8da513b56a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2658093a-08e7-43f7-a1a5-3dfebed488f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1687efca-9e3f-4de2-ad52-aef650eaff6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f864864-5d21-4268-93bf-becc86cd58a3",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0c0a746-4bd1-44c5-a8bc-b562e81b8f08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "646d7fb0-bc95-4aa2-8430-6ac4a834c199"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e92ec7e-bd42-450d-85f9-68b1a5f8e85b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fb2c4dac-6aee-44bf-9104-d9b2d7becbbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8f89916-aeea-41a2-a9bf-5cb263bbb084",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a738f07d-4d7b-4ceb-9872-2da443630b42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8456b4b-858e-4260-b16c-290cf1ce0f4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8897b4f-64af-45f8-82e8-56d52b526694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d773baeb-8dad-490f-8043-9e7bed62ceb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c110cfd-3214-4eb6-882b-cebde928723a",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b21a6fd-5b34-4866-a235-de6502545dd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9df60265-1116-4028-ad7f-70c7ab4d89c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a80c63b3-7247-42f0-ba2c-dc988b8f089f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7dc5e5c6-b890-45e9-a578-308504004435"
                        }
                      }
                    ]
                  },
                  {
                    "id": "361616d1-8d16-4618-9f6a-067a771abfe0",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15984b7e-577b-46b6-a097-f15acd4c6fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c11d2958-df4c-4768-a529-c0db001eb162"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "004912a8-e191-435f-a2d7-718b1b8e6dbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "df9eede7-994e-422c-a130-e977b05268b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a95fd98-7ff3-4c34-8173-742c4ae3a795",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "220a9728-dd29-404a-8a88-bfab8b262fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1566c5c6-e916-4e35-b164-86373e0ef997"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f5af873-73c0-42e3-8f0f-670a50ebaba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fffe2fdd-0cf1-43f4-abe1-8461510669a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f2769e4-c68b-401e-b64e-a0fabcf2fc5a",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84382529-d573-42f6-ac47-2ce9a70616ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e25d505d-e371-40f5-baba-857a82624eba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b5957bd-7f14-4cfe-a256-b3dbcd3ff4b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c69788c-d702-4774-bd2a-87af22408fd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "621429c0-1b00-4595-ab37-fc6531a98d18",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4a94f9b-bb2e-4099-859d-d2142c9e0199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e054b015-e2ef-4144-bf1b-c233ed05a6e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "951f169f-9bd5-437b-8034-aca010032cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dda8df22-aef7-4c8a-a504-262bf0d854bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27e1a1ba-ebb5-412b-b392-035b40633d7e",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a02fd1b-d075-4a83-ab2c-08a798645c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1838bf5e-1b7e-463f-a23c-2de20289f630"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "925133d7-f65b-48aa-a6c1-ca5605d14265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "03cedc61-641f-443c-9d1e-d61669955b1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52983eb0-f267-4db0-ab0d-b81aedd666ef",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e25cc95c-878d-4606-892a-95bd3bddd561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "168a7698-753b-4a0f-947e-cf2a1fb7b5f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02141aab-a6d8-4eb9-9104-4366feb468ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1372abcc-4ebf-476a-be56-c2833025bd4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc73eb2a-892e-4509-b364-e0b1c03dbedd",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "331eb69b-6140-4213-b522-d12a2ef67f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1820a4e3-9e6d-422f-b3d7-382572af7d50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "900dd33b-50cc-4480-9270-3370139898c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "25fae35e-133c-4cf2-8fb0-9b03002a5e81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "796c15cc-7f27-45d8-bc0c-a4015b86d470",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dc424c0-60ef-4a37-b1d7-eeeb5fa7e265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2a86312-308a-4d3d-b14e-5f0eff5d4f57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b5b77a4-a468-4580-8530-4749035d3f74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e0d4880-dab9-430f-b180-6d9636a4437e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf283050-14af-49be-946e-54d40b0c933c",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85cb96c9-6d59-4476-b803-d525619b8553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c05dd680-121c-4329-af67-2df098e83597"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d45d52aa-47dd-4d5c-8f46-41b93af7bc6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b27f4fa-fe02-49db-ab68-05f91902f8ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79f5e1a7-f58d-4d20-9aab-67ecda8af0b8",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f1e86d1-6293-464d-8dd2-1109f3010e40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2796ae2f-45bb-405f-97a9-a8b69c6501c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36cb11dc-cbb3-4beb-ab95-117579eec15f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e6c44e4-2bb4-446e-9af1-f7d0fd169dc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c25ab1d-d78c-4872-bf8e-ad1d9ab0dadc",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e813d55a-49dd-4ff0-bb70-50b18d624cdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85c581ae-75f7-4c70-86da-0f167c5030dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72990354-e269-48ee-a047-ab13c4454e91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3ad99420-dc94-49ef-b4ec-bdf99d8e25eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fd85d7e-389d-4bf9-8bf3-b9308cd035c9",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b4acd80-c629-49a9-93fb-3144f7500143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc4cd4b6-d278-4179-89c0-2aab40fbcadc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5270572-8e42-43da-b84a-ae0123fddeeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9bd91d88-f2c4-4c33-8c64-fba9fecceaf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e57d3b4-4e28-44c8-b47e-e1bf9fef8650",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b523990-aa87-408a-bd97-49916ebe7aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "771946c1-b1e4-4217-aa6a-8a5bf5cda5b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc51103e-8392-431f-94c4-cda3420b6006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a96d210-25ab-4477-ba70-a10ecad94c35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8948495-5fcc-4c96-adb2-1a4adc5256f6",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4403d258-2e72-4078-9403-f6e6d4a9455e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1873e42-3dc8-4206-ac27-ff61bb89e36e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc9d9ffc-d5a7-479e-8c86-b00938a83d46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd201499-00d4-4343-a841-7bb7f847ef15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d8e7a4d-80d6-412c-bb0c-fcf994c96d2c",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c646e02-d015-409d-89d7-307a73c9394a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "878c1d45-3447-4eaf-946f-27768f354436"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7a1e1d4-768c-44cc-af6a-3585ed19115d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "00334aca-4d2c-47f1-8c9f-6b3858d85967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69aa00fb-190b-43b8-bde3-804d2f7ba578",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78bf1d6a-c99e-4434-8cd4-87260343920f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7deb416c-68d0-459b-9b71-1464e0db7756"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ddf0e87-8617-4a4e-90d4-a10f402eb172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b646303-cd77-494a-b6be-74b9bfa91d77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08de9f44-5553-49a4-a760-310c9e3747a3",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f651d0b0-785d-4845-9514-5f6f52e654c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53d1124f-d56f-4266-ba49-c46d6e6a905a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d787015-a248-44a4-bc53-41f00cd5499d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cae891a-5bf5-4efc-9323-d01c006e28c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68880f72-e2cb-4ee8-b8e7-5e044965ef26",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3a28ce0-4b63-4803-afa9-31199935c988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10914a55-5801-46b9-a909-c5446f59056a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e06fb035-3a80-47cb-8c1b-de17fc255cb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "08c7cffc-3385-4aa0-8783-8ca3555494de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b1794b3-938f-45bd-b2a2-3deea6301071",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc60577a-7838-4ca9-8a7e-5ebfa66cede9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cd72c03-8495-484e-b0f9-04c22db8227c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcaf7ae2-860f-4cfd-9d24-c1808546c7bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "93820117-d4b0-4229-b3f7-a13a146d3e81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19af25c4-7af5-43dc-8244-5d517d386e5a",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a71a89e-595f-4513-9eed-eaa56995db9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6b2f48c-c286-48fb-9f26-aa525aa223c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25580474-c13d-4263-a987-5c304f7202b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0257a0e5-513c-4567-bab0-ead084fecc13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2c865f7-99a7-4ab5-82e8-f4af0a7d47b9",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75782457-2ffa-4a67-9843-72d36f1b1678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d379af25-4cd2-46c1-bd4a-2a946fa9d3af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bbf94f5-dc94-4ba0-9378-48d7e9fec412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "abf4eee1-dd29-4e1d-b3e9-af07ad0fe3fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ead48a2-92c3-43fc-bcd6-a683c5b51c09",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50435d42-fdef-4581-91e8-c87f8b1dbfa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa6a04ee-b1db-4a10-950e-95854079b866"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e4bc0aa-5be7-4901-9226-ed1e2abb1e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed12c0a2-e48a-4606-9875-3e650896706d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd38f0a6-c82b-4cc3-985e-66befb4b2d65",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24031e88-8f0e-4425-a426-1cc94393ad20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a05a33a-ab7c-4429-91da-77b862dde8d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "199ce018-1f2a-4c45-9625-f39bd6a4c26a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0e92cd4-6c02-491f-a729-4fb371320bab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6198aaf0-fc02-4658-a2f7-bb893391417f",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "728ee238-3067-493b-b3fa-4df52ba95012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61995812-9a04-444d-9b20-412ab4804ff3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d13b9a0-c702-42b8-826c-a711e6213a0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "75af6099-b7d2-40e1-bf01-7ba726fa0c09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1196524d-310e-4139-9493-0ee8ca15ec25",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54a101ec-56bc-49a0-b2ee-dc733805c2f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7fef760-59d3-41f6-9b32-bba95c11eca9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "919cc099-c980-4347-93bb-30f6daa7cc67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3750c74c-4527-40b5-88e6-665a0c5ae5bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9f43409-c1a8-46dd-be37-eb7bfb04ab77",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "509ca9ab-b52f-49ff-9e6d-259cbdec6dd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "907ba237-62e6-44f8-a1bb-843a3b4569d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "944d668c-206a-41c0-8db9-703731824224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "113fb2b3-743f-441d-b862-e55e575db00b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86c40b8f-2167-4a12-9a6c-4641fca06964",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd78718b-3b21-4767-91eb-23cca54e5604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0eeeb55-c4df-4549-a544-1dccf6b80d1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e9df680-441e-4fb9-a4eb-9e21bf8728dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "36b3d5c3-5c35-42ab-a995-15afbcf69cad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "773ad3fd-7d88-4f44-8f22-55e6a3ec2b21",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f5554c9-bdca-4f21-a804-480eeab54532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08abe119-e081-4d81-9c06-5783f3c298f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19c02ef6-5c1b-4fea-b526-6a6a55acd5cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "858fa5b9-b656-460b-a624-3c4e30cdd447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96ad175b-565b-4397-a61e-592869ca3d66",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8bfa692-d462-453a-9b42-9912b86d8cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bd9e933-86de-41a8-a663-3ad3576ac1ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66334f1c-9a26-4c90-99a3-ba38ffa65c8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "620941b6-17f4-4ea5-82e0-6fe138311a04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54c6e065-0b13-42fb-8c8a-8d93cfc5a607",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1c4df9a-5fc4-4dc9-8b1d-6dc78829709d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24049cba-883f-4a77-bc7c-bdc54eda05ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f18a9f6-1c05-41fa-83f9-bf36b0aec504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "01a82cb4-f6aa-4f22-a064-f2a0d6f66063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d506012-a820-45bd-a0bb-51d5898e139f",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c1207c1-ac53-4b19-b413-8024444a37d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d41ec88a-b642-4b11-a8ea-1251031c37b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f75f6ec7-0f09-4445-afbc-3bec847f3cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "5c5534af-a238-45cf-9e55-f7b3638c6b3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d42c9671-849e-4dbe-9d70-598cd22dd074",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d87d6dc1-1de6-449e-bf2c-827250dc5e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe2d66e0-19f3-4395-8aaf-1d9f889baa11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c120bee6-0ef1-4620-af4b-9b500dfba65d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "54e41e2b-7474-43d6-8f7a-637fc83d8303"
                        }
                      }
                    ]
                  },
                  {
                    "id": "693ae767-a79c-40f2-8dff-7ec1232c862d",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efdb4402-d60e-4e75-b8e6-ae54f5d86252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0db7eeb0-ae87-4830-92ff-23bff238fb74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20ed9cac-6cd4-4464-a80d-7e1eea971e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4a5d276-d1c8-4f53-bff8-a53ee592356c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27fec942-dd80-43ae-84de-f154be2726f4",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80a2886d-c734-42fd-9c2f-230ce1b75b95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5559cd74-c7e5-442f-8513-b29e4118cc7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cbe95a2-8350-4500-8db6-16ea3d0be3fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d026aaf-7151-4c1d-a1a9-675441188a71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97158226-ef4a-43e3-97b9-b0fc1c55e4ef",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3c6298e-8181-474d-88b2-980df4673a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4caa382-bfa2-4afc-959c-6466107cfc21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53e87268-bd2f-43df-8c73-7f10d0b293df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f5ab1dd-33a6-40fc-b5f3-72ed65483ffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25cb3ca3-cf2d-4a1b-93ef-a0476b21a410",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1825e27-59cf-410a-afe0-14cb212b664d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "724d9196-31f1-4bd0-a837-86fd0652a00f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2381baf1-b259-4e1f-b129-d3996b031698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9c9164f-effa-42d0-9be5-0a2395ff7490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "100bb161-f5ed-4c0f-b765-c7334cb4e0d0",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "342f48a8-211f-4009-98d8-1a5aab130c85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95b7e834-63bb-4659-980b-19d009be5c5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0355555-7caa-4050-932e-b51cf417e6e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9861a6d-3afc-47ce-8112-c20a57ef2792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42aab725-cea3-49d5-948c-a8244d802ce3",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e49c0f20-9ee2-4126-827d-3dec16938fb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e52ccb90-18b3-46c3-974e-f4ba9986886d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ca5bef5-1e5b-4d35-a278-d4af6b1c0ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "387d9561-d9d3-41cf-8d55-f777392ad7dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8186243a-86d3-4930-bfff-2b925adfbca9",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8616834-92a8-46a8-af6d-95bc99773165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c720629-45fd-4ee8-8c06-468f637a3c6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "560ad1ca-944f-4136-988b-066c3d0f1420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4f329537-1061-4b3b-a8a2-ef14ca79dc4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fbec42a-d5fc-44f4-979f-51cf6af0f479",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d55dbd9-0e04-4fe5-91ef-8a4a8106f6ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb99cf3e-bb0a-4315-8a5e-b0ef822d3e83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdd625b3-f90c-4b89-a308-e9ba3299365c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2bea852-ce97-4bfd-aee3-042fa8612775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ba331ce-0fbe-4dea-8b3c-a1572f00ecfb",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab226c8f-c8e9-4219-93da-e8317c0daf27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a99717df-5bfc-4dd2-b829-a47708926e36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43d3e8bc-11b2-4165-a0cd-fb495d003872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "235d2ba0-a52c-4c08-8d94-02ceb98b05bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90c894db-da4f-42fa-987b-413b5213ddd1",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28be9b64-2223-45ed-93ad-851af4bbf25c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39d78320-f2b8-41c1-b73d-2c1a1f8ed8ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cd9c90b-5f4b-46e3-9239-491c9fa99508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2bca969-f1c4-4f2c-8993-bef733a8b755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8899be14-5fa2-42ba-9f9a-241a0a8082b5",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eaf0a1d-769d-42c2-bb72-f8c4049c3f8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2014edd-e85a-4e75-95d0-0b52dc84a23b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3887efe-1e97-4026-baee-b779fbb61a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6cce73e2-043d-4204-960c-656455ccc9be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d27f6a6-0912-41a3-ae6c-596e592748b2",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "526dd23f-cf8d-4141-b8da-82decc96ceae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12d08480-3e9e-4449-8410-401f40673b60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef788f1d-eb6f-4adc-bc25-f21e3ed84b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "724c509b-4440-49ab-8892-5bb8d717d9af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ced6db5-ad1f-4c2d-8bd9-7f2aac460225",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92ee3dad-2f09-4c2e-be11-18353da8c107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22bc93dd-451b-4b76-9e7a-3d98040fcd7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe83ad93-b6c3-4e96-a263-929337148fbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d5497eb9-4b14-42b9-81fe-47e164c93008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c5d93a0-34c5-4c6e-8c8a-6ca7573c2a6c",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a53ebcdf-9500-4a2e-a358-6dba75049ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75fedc43-5e8e-4fc5-9604-db3a541d35bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b67ae0c-6f7e-4895-827d-0081d91c5f81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "84b27694-e10b-4f65-8da2-049c63bd8643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b366b31c-6daa-4e8c-afbd-ce3464890a25",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af7718d7-c32f-491b-b46e-c84d4d033729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f800f356-4903-4b19-857d-631e3a37c413"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b32da15-7d6d-48af-ab4e-92d3edc4adb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d366944e-cee8-4733-adf0-5cd7689fca4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "975336c8-3ca7-4892-a225-bc8ae721fb40",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd9b92ab-7cea-47cb-8f8d-bd1a74766ea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af7e81ad-aadd-4b0b-87a9-a418c985c79e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "475fe6ba-0d7d-4ed4-a656-664014bdec59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f18c4960-7562-4afa-af25-1ca32da07966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad4793a0-036c-4dbb-829b-3ad5f9fe0c0c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53f33754-e7c0-4b5e-a964-021c75a6cc96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2700fe13-8f8f-4893-8996-9a2b395be8d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3a0cf69-80a1-405e-bd87-410cb925ae64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bdbb304b-3694-4906-af90-8ae2c0ef1fc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72436be1-cb16-40a4-8222-a763a19e895e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbae7646-4adc-4ede-880b-4be93b95b120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "186ecf48-3bbe-48e8-bb48-37c4541b1710"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0ddd2cf-7c9c-4be9-a346-a8f269af232c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "699d898c-e08c-490a-ad94-278afee5f2a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a36c1160-9b18-4db0-8eca-7bb81b56ac56",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab513f0a-8813-4e17-b435-0935facddb71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd7b57f7-aeaf-4f0f-81f2-a374899bafba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d5b4649-e212-46a9-a60f-1750f5006b55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f4581d0-7ac0-4f8e-8a82-bad0e2598cfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba1e5980-7724-4317-9699-e2804908ee39",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45ad8e6e-293b-4763-83ca-c603fd71d0b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a07fa4f8-fd2e-45a1-8767-4711de89a8f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d097725-7aad-4519-a3e4-de262fbad601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5cb7a4d-d114-435d-a340-ad1f7e8561d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7a9d527-6851-4151-98e7-35f8e78bb4c2",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2831f9d9-8e9e-477b-9a26-e2d0b2d09890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25a9a80e-0614-4fc8-be7b-4e6d7f59c647"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f1c1f7-41a6-4140-a9e9-aabf35cf504e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "11081def-6ec0-4a75-a998-dbbf93bed1a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84613328-fca9-4b11-a4ab-0c9f20df5f00",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49af6be1-4d1c-4034-8274-a489b118128e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00f2f080-8228-49fc-86e7-9376d7b01a07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8c1fac4-502b-493a-90e3-1068af90de7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e522e412-ae58-4360-a308-d64c1d0efa52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf99fc6d-a5ef-491d-9a42-fbe37bf6548d",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a94316f3-3207-4e09-8ed3-f0607f3978c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f58139c-5f16-4b51-a2f6-470d0eb8d73e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd0beb4-f7c1-4e0e-a4ea-96a8d5d6d450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f212099-9f25-439e-a558-7aed49663fa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b444f22c-e0b2-45f1-9891-13184c28671e",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "096a0fd9-6e39-46a4-bbbd-3afecad710ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be8ada52-b984-43cf-addc-958b929f761b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aef0b996-6f06-433a-92d4-e61697306b4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9773acfb-f899-47ee-a278-11d15593abd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2ea96ff-7b9b-413c-bb01-86d3de590d8a",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c688ff2-d383-493a-9076-74c185b14bb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cf37c66-7d76-425e-b6d2-af89c5eef69a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10ce2ab4-6e2e-4a41-9702-9b53e40c00a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a94c309-f1ac-4d3f-9445-5cfbdaf98fb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "323c9216-7c3e-41de-93f0-d8757a072a5d",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dbfe6f9-0a05-40f3-8e5c-fd8d455701eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82b1cc67-dc2c-4783-aed1-a275d2f1655c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cd0b299-1c81-4d5d-8577-edc7a9a1fb5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6528f85-c945-4b6c-b815-34610ead721d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "969ec1ef-b134-40e0-96bf-4f6bdf4ed97a",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dc3f863-6575-41fe-afc7-1f22fdd55d9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7adcf096-7e1b-4f57-bcb9-98838ff634b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe94cf42-81c1-4731-8932-3b536af69bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9151cdb-b0ee-4d23-a839-7fa4205476fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cab818f9-0473-41c0-b861-f0a77a028cb7",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf6be3cf-5b38-4cca-a432-2bf57cb042cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ad190aa-974c-49a2-8b8b-aa594a7ff8ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d61c218-1a1f-4e9e-b282-a1bd455f1ae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fe03c10-902c-4d14-9884-16e8769cd758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c687c0e-e6cf-441d-93b7-2c80b5fe4295",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1153e81c-b559-4307-833a-12aed489a077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc75c6b9-8eab-46ef-8a38-7125bd45f6f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c47ee5a7-efaf-4677-a612-31f713818598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "37136c8a-dfb3-4b69-8533-58e56016f9ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e346a0f6-67fc-495c-bd33-6a91a2004078",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c5a8aa0-cda0-4d45-b7ec-fd7f6b785eaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2abbb8ca-c0bf-484f-8918-529947bf963a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de110f67-6c99-4123-b995-55b880ac584b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "616190c5-da8f-45ff-b9a6-41e05d256d6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d626114-44df-45a2-b6ec-0cc8d6921018",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81fc31f0-7175-4873-8fab-72403aee58e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "460045ff-e660-4994-9c79-482e4a288769"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cd5519b-75db-49b8-b948-9dc4e07d957c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ff89adbe-6723-4619-925d-c94a5b570e64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32a2b9ca-a392-498c-b768-ce1efc9fa29a",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ebd1ca8-8d75-4946-8093-334b20201698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49b656d4-6e98-4b5f-a881-a0fcfcc00655"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e888c5ad-c2fd-46a6-af59-392440d39b6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "84e7fcfa-0e10-43fe-85e2-bf82ba4b3b7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "357d18e0-8b12-427f-a381-0500be41b403",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87e9f16a-00e2-451f-a6bf-88ed653d0a89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66f83d02-adf1-47cd-ab74-9e3664d456c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bef5f397-4f80-4924-bf2c-f8f7f7781842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cc97b12-648b-41a2-9a76-0b34e51d2f61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e52700d2-0ef1-4a79-85ff-6f3ab2d9daac",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b7483b-cded-4d5e-8d2e-3ce223a2c103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ae39621-f37b-448b-90f0-f8787a1563bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d35345b-96ad-4f7a-9f21-827c3d8dd7c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1dcac7e-e63e-48b6-a57b-3000f641fc5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a2e7f1e-ae63-4b1f-a003-98c448bb2834",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ea952df-4fba-4a91-81ed-ed704ecddb4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba1a0c7f-38f2-4708-971e-f239f3970ac7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f9dd04a-37f9-44a7-b99d-dd23fea5d28d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3e66c1c-11b8-499c-9f30-c2a153ddf1ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16bd8d52-f8f5-45f6-9e23-f0d793e81a36",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47efce08-7ad2-4ed0-8714-461f8ab807a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4410fe49-1d52-469a-8afe-110c14c9f4d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a123818a-31a9-4ab5-ba11-d689afe848b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4eb8d6df-0c0a-4413-b5d9-42ca9c4e6749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "566cdce8-138c-4a3b-b356-cdd1bbaf02a7",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "724c2a6c-d831-4821-b376-de38139920d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64b4c1b1-13cd-472c-87fd-2b5a8ff3e356"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffa41e60-6148-4299-86c4-3d92769025be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f36cdaf1-d3a7-447d-a13d-d5e8c267bc93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffea9e3c-0eeb-485f-97c7-c26ca2466930",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c3e5043-2c4e-4d8a-8320-30f36ca0e643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87be5ec1-ddd0-4a2c-a691-0cc2d51d7125"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21177803-3c27-4cf6-90be-7d07f2d1711d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f33a28b7-0e1c-4a88-b2e8-38278a0a7dea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24818a52-a6c0-4be8-8412-5319ed676cc8",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "090d0afd-e140-413a-93f2-6f7080cb1ee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b637f07c-1b05-4bbb-9b91-8985949365b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5cf13dc-4b0f-4c90-8124-f94b22429198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed854d70-0490-402e-bd63-9112b050a495"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b92f2718-f5aa-42ed-8e77-40f60dc6cc85",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6bbe2c3-1d3d-4836-b135-1916b180c9ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60999048-8853-445d-8b02-bc7037cc760d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e39e68-f0bf-43ca-8480-01fa16459e9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb051baf-e971-40b8-ae6a-8961b691bb12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c49f4bce-6458-4bad-9209-d216ed05847a",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0697b11e-55e1-494b-817c-717ea0b62e00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "867f3c24-fea4-46d3-a496-9a5d337f40c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dbea18b-9475-4d13-9814-496f34a44d70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac3d7579-ba53-41b7-bbe5-97153f9f49ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5a84f8b-5eea-47f1-bebd-9492552b2993",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ba773a8-14c8-477b-8ce4-feaa48378f0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c9c7114-1df2-4aeb-a82e-25ef5c81279c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf4395d2-492e-4d16-8d9d-f1709811f9ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bf510a58-c38b-4511-9348-2762cde49bef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f7b752-cf8e-4c92-bac1-f31b73b57727",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c491c095-6b23-4102-a836-84567f5892ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb160b09-8ccf-4a38-b2a9-2529d166ba6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6edf19af-4fa4-452f-be8b-fe9edc247af7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0bcd1ad3-90c3-403c-9b69-c2b81a650f22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4826212b-630d-4426-b3d2-e131cd1f9718",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cf81b9f-3e2f-4ee0-8625-565ec09fd90d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97c55140-9833-4492-a26c-76f7d5dcb610"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3f33834-3794-4feb-a4e3-1b2e1bb62217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fdb723d3-604c-4047-848e-a04a6e7669c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ad46f10-e0eb-4ff6-bef0-081491da9e40",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30a53dd2-21ae-4925-9600-a0e9d745bc14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55689ecd-3ae6-4f9f-8217-eb3a275bbb1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "758c1a2b-c834-41fd-a586-2fdcbfdc989a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c38ce243-0ed3-412c-82ea-4a4a836ea5b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ffde70e-7b14-4aaa-8be0-6a350a75c67d",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29f8722a-8cf9-4597-819b-7c130d83dc1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bdc237b-66ea-431a-a406-f0a7b8f685b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5c19a4a-90e4-45f8-b470-82f9a08c4e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "15a13661-ca73-49c6-b7c1-8b49e1cafe8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40961242-4f13-46a5-9147-a9fb187d8b61",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a382b9ab-cdb2-4e79-8cdf-dbb1e6a48231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84ac8966-6d2f-4d3d-a354-5bb644667222"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94b2aaaf-2d2f-4411-9387-c214a6621931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae0b5f15-189f-4bd9-96a3-584125fb70c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0f3a247-3335-4e6c-b6b3-83a943199ce2",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e1cc5dc-852a-4746-8d6f-c4a12bba381f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43b2209b-5b51-4faf-bcd8-dad690e72f4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "725360b8-7833-4923-8a2a-b27006b3b5e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e49eac57-6df5-440c-be62-f36c986b2f71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9677b7e-f8a6-4ece-ac3f-b89ff092706b",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d945612-0f55-4160-9f4e-1720f170da0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "cce9eb4d-b670-4edf-9891-f6988b8ca76c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f96b0e49-61c2-480e-bcde-56df02025b15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c82a184-901e-4d6e-af16-14d674576011"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5abbd84f-d411-4e02-9657-2a72928f6493",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2f7344ff-30d1-428f-9c94-b6eb88e5c707",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2879e9c2-a27b-47d6-9d48-7d4d21eecfd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "21779271-9aee-4040-a7b1-7af4292e86d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f785a63-d0f7-46f1-a3c6-8c794dd77984",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dce17724-e579-40ca-8340-002a0e40ea8b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c44788cc-c805-4a86-8621-3a69a93dc5cb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "27a4a65a-6f6c-4e57-adc1-8cb8c62abd04"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2315166b-8c1e-4937-8368-6c05b51f6e43",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fe4a24ff-b4a0-4304-8a60-3e3a28201033"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d3a2cf9e-43cb-499d-b49a-f4439dd54e1c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5b1afbaa-eb27-4bf0-bc3f-61085b0f7061"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "020af48f-c044-444b-8835-16c85c67c360",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "50befa91-b237-4ef6-b0ff-a87bd3870cec"
                }
              }
            ]
          },
          {
            "id": "ab703a18-15a2-49ff-b4c3-f5293d023bb5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "29c55324-ef7f-4c41-8165-78d7a7ce2f41",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "1f33b085-69d3-4acf-a1c9-baaadae55759",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e57b9fe6-21a8-4f23-8e54-198449130c69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "5c3387e9-d779-40bb-90b0-acc04c4059cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c44da7f1-686b-4ebc-8abd-d0d3f5b2bae7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3069980d-dad1-4735-b75c-d24d886368de"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "18f29c7f-dc3a-41c3-a885-8c8a63867444",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ada05349-fc61-4f3f-83cf-ea6fbbb88338",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1077cd41-cd8e-4b7f-9d8c-4f770c2b2495"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eb012054-609e-41be-ac40-3494b62e922e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b0d954f7-2993-420f-b949-030fa7742908"
                    }
                  }
                ]
              },
              {
                "id": "57e2b442-a01c-4e55-820e-8756be28d428",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3618fbfa-58c9-42f2-92a7-dd32e93f0f2e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "08aa7147-6f00-4b94-8270-253b9b68a2d4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dd308562-f185-406b-9703-6a33ecde5936",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ba58302f-58c2-4e33-af82-ee1d5a79410b"
                    }
                  }
                ]
              },
              {
                "id": "cb02f4ce-2ce2-466e-bea6-165f547ce730",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "92e85369-09e8-49b4-b23b-710899ee439f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7e15064e-b529-43a2-a43d-19129711b986"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a5278bee-a793-431e-b4e0-d12d6b15e229",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "28ea1adf-4809-49ed-ba74-b0f7db8f2c59"
                    }
                  }
                ]
              },
              {
                "id": "7b8ed79e-578f-4674-8645-5c7b9e2a5977",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a531792-0667-417e-b8bf-5e4adfb2bc41",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d056b831-a83c-4c1f-b075-d9f14921aaa2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "27a558b0-7f65-4ebe-a689-01208d1a0d01",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "061d9f32-1020-4f2b-b573-9cc611683318"
                    }
                  }
                ]
              },
              {
                "id": "8b96d0f8-1b39-4bd1-a722-85d8980be14a",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d25fbaa7-0119-4a5a-a916-3ef376703364",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "473f0520-67e9-422d-aa79-5f2b85b7ace3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f05fdc91-7b8f-49fa-add5-eb2aba42790e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "22e1688e-c63f-4572-b63d-4fe79b5532c5"
                    }
                  }
                ]
              },
              {
                "id": "b2f283f4-b510-45f5-aebb-fb46aad10dbf",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c768ad8-11dd-4296-8d81-2b02bcd578c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "63d11d7b-ac34-4659-82c6-74f55635825a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "023f98b8-804b-462a-9a6c-ce9a8e211bd3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "380d4bf8-02ba-449b-be4d-1d738d6ee15c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "09697708-a705-4a8a-912c-4883e606111d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dfad6e81-0d5c-41bc-ac35-1998d98a4d2f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "53d1a07a-281f-427b-bc01-6d487c30eef9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b0029a71-0fa9-4f86-8d5c-c10734e80c6c"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8b62d4f9-bf04-4a72-bd7a-11a404685c95",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "9b6ff6d0-1fec-4576-90cc-0d5ab70df2e7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c5ec964d-4f13-4acf-b289-8682c3c26974",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3d065de6-918d-4f59-ba3b-9a7e1c6c2412"
            }
          }
        ]
      },
      {
        "id": "96d2917b-696c-47a7-86fa-060700b697ab",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "ce7d372e-b793-4411-8a69-9b0ba2aa2fd7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "533fe483-e94c-46cb-a09a-f84054d6a050",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5f740e1f-7c4e-44e2-96b1-e01a7048af83",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fef4ef4e-190c-4c66-92de-2e1ad604a7b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c142f10-ffd1-40a1-918d-42d776344d10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e233a2c1-b80d-4e04-9897-fb2542aad8e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e135452f-0393-455f-8355-74a5923b161f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72e8aeaa-d94c-4bf8-867b-9597e787ce82",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e200dd0-ac0a-4326-bf55-65a9a2ae8116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bec4b409-6ce2-4384-b41d-aa98d5b2f9bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e234a679-1f85-4a64-9f41-f6d3cc53727c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c8ce95f-7aff-4c22-9c8b-25b879ced81c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a49addec-f991-48ce-8091-ab83557d1571",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07386d37-5ba9-4000-8616-590605ac8873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a688a3b6-a04f-4f94-8f05-3350199f64dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8b6010f-0b75-4937-88b3-af7608f451a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ccece83-2bcd-4efe-b234-0da95e27d4f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2d4ed20-9436-4652-9fa4-661f52d4b04e",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ede1caf8-e242-449e-8894-96d58ba69d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "912e3635-ac16-49c4-a1c6-0efcd24aac9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75faa59c-b629-40a3-b86d-2ae537b57369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "22c88eef-bdbb-46b3-a7d7-5a783b42b727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3f85f8e-31a7-4a6c-9630-0eb37be35bde",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1df9a53-cbe6-439e-bb9b-f818e4b7dd17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53a91547-d68f-4980-a3eb-f1ba0ceb996d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89dca112-d56f-4041-b7bc-3c7b1ae38670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1f27c95-80fc-4b86-8e4b-788377c2ce7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c484b6da-e17f-4ae3-80d5-dfb7700be507",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ada44081-e07d-4996-b65a-53afbb8e704d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbf79e16-5f14-4381-bcbb-0d64e3ac6636"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3da1473f-6df5-4153-b3f0-2bb8b3cb77bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b20d7300-70ee-4d30-ba95-a579cd07e6c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6ce348b-1c65-406a-8788-03a958383d1f",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c685557f-2336-4908-910f-ff33da0c8e87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d3f8d6a-7d46-4e20-b394-c75122ed77b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "032ac38d-40c6-46e6-92a8-2ef7c030f78f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b72ad5ee-a1f2-441c-8318-9a47fe06a2a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3ca6d9a-56d4-4aca-8b67-e0eb695b7a05",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb841c8d-b7af-4445-ad47-642b28266d94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3ae5987-4c87-4db0-99a2-1e8e9038bd2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dda5aa90-b0d1-4b69-818d-815f2ef2f1f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd8dd5d2-0aa1-4af9-8ed8-780640b435ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35fd571e-fdec-4df1-baf9-1031377f4a92",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f107c6b5-14b4-491d-a92c-fc8f3304d876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ea3a26b-b6a3-468f-80c4-e300ff176a06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "141ab11a-f7f6-4f1f-88a8-2f3d9c9b4a7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3445eeb4-328d-4db1-b7d5-f8788a9cb90b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cdd7aaf-df03-4d84-b335-617c40aa3e17",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e646539-c271-4298-abd4-0d2601f527ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4be6460-ad96-4e67-8daf-c89e1a2ff703"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c24f8029-7e5a-4b4f-a8fa-c21a3fe19408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2b20c3e-bf84-4a65-8ae1-42eb5d4f222c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b217f84c-dde8-4a32-91d0-58b77ca46658",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a2709ac-bc79-47ad-8261-509e6a0900de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9f8a030-798d-435a-acd3-123825de06a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a77b33ea-6958-4315-a204-58426232c2a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "79d50385-ea48-4f2a-94c7-9254ff0fb115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05cd2686-05fb-4726-b95f-cd91f658363f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "248abae0-ee11-4524-a344-e252c35b4b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa4d9fe6-479d-4026-94b0-883e421f95ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "586a4744-791e-4741-acc2-59cf73cc549d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5a5e1ce8-ad02-417d-8458-0ee819993aa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "840da596-0cb5-459e-95b0-d748fee5f9e8",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5855291f-f30b-4aa2-86ab-9c1a183d2967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98fce474-500e-4ee2-a3a1-ea34d749b597"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ae60f54-2340-44e4-9af6-60a459867ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbf6107a-07f8-401a-8131-cfe5c263267f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27e91353-2473-461b-a3e1-a879eb314580",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7be8d3b-5ea5-4c71-9bc7-537c1442c36e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f65500f6-0d47-4fe0-b3ae-0bf84450e5f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0c72cb4-d432-4996-8a6f-077e37841367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ece38abb-3f2e-4685-8408-da043d074fdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "959a5fc5-32fb-4629-a8e1-7eaeab94dc54",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "819e5600-7c91-4909-8c6e-2455a7efb282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed52ad36-3b3f-422b-9bef-7b9775e0dc71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "609971da-8c09-42a7-bbc1-d9db4bb33b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "199782f5-26cb-4ae3-8e18-9aa9301d18ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "924db798-9398-4dc4-bed5-35ba67b01c42",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "265d0e48-c0a7-46ec-b4f9-397abb0ae4d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5ab7ad6-8c6a-4272-8ae5-91709a309fec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e77c56d0-159f-4810-8404-f01e9113f361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fb917a9-79d3-4462-97c8-47ff583ce8f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "681d69ac-4ec6-4e10-8575-8f14d7c288e2",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ed28ac4-61c4-4b8d-905c-57ea94461ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d518ca2b-fa85-41cf-a673-bdace6d7c9af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02904bb9-1a15-49cf-974d-c368141d31ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "39e198d9-2151-489d-82bd-de74bc9e0ff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a4cb939-7f5b-4e87-8274-d2f086d74f81",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c89a2b2-3f71-4998-9907-3bdf13503fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83db9ded-6e11-4cce-acb5-e4183093457f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba5894de-48e0-4bff-84b2-a693edcccae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "55b0f7da-e4ff-46cc-8603-6a5c50719b2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2740db35-0ca5-45c0-8f82-3a1a54c0c216",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19a6697b-1223-4916-8df0-9a0f6d4c0c53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17b4626c-a934-4177-99b2-48c198f86a6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe6fac0a-11fa-4d1c-a930-d7df8f28611b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "907c9ef1-b682-4dd6-bf85-f41ce746b7c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcf82563-e721-4c7d-855a-86d8ee214df3",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28f6e9b1-2e82-488a-b4fb-08701d4defd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "764afa0d-42fe-46d8-83a9-323edae8fa9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be393784-7da6-44ae-a36c-3c13d3da2164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "20ccdda5-e2c4-4d8a-85c9-dc11b38d81a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22e178fd-486d-4f2a-90b1-d300fbb1d1af",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1add61f3-6a03-44b9-aeb5-529560814ee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "934a2d7f-2ed8-4222-8ebf-8868e8038390"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4bd332d-ab95-43dd-81c2-6d33c9229df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "63490f0e-4ea8-4b66-b464-dc23a86ecc94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56deebca-0ec2-4a15-bb9e-426a443398d5",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cbe6ccb-34a8-4588-9c88-db63fc2c739a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36036a9e-cc78-4845-b0a7-36836200c1e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93a52753-0cea-4cbb-9279-335d426bbb6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "93efc2f9-128c-421a-b1fc-68ec01991a45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "100c6c2c-088f-4a73-a514-c780dc2f4511",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c41ebac4-2b9b-4541-a504-9f1c7c779c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf8d831b-9c08-4e28-8f91-433458700d99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81895761-76e9-4cc8-a141-72f1bae55a9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f080af3-39c4-49ed-8bb5-7f7dd7506b9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4adf90bf-d9ae-4dd1-a3df-d5858a363a38",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "747c836a-ce8d-4a04-8d99-29b65cead50e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4ef56d6-8d3d-45a6-a7c2-7503c1f5d3c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "954edf34-a9e8-474b-a115-06ea633aecae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "06af2df2-e183-470a-a858-7ed1264f0a62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef4571a2-8480-4711-ada1-5cac8242af27",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39522d86-f6ad-4c58-b6d0-5e4086fe1991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97886114-b593-495e-b381-08a5401b8b26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ab1f194-61ac-4072-9173-e9b518ca3bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "73c16f4b-cf98-42ff-aeb9-d08c4fb52fdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9b54756-6d9d-4737-a2e7-6eafbf3d0bba",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4fc6256-ef3f-442a-80ff-413325c20066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "940d34da-bbf6-4620-871b-523f47ac9371"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9a29192-b6c5-4dbb-bb82-356d75124092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36ae5c92-ed3e-4ba5-948c-14e071487eec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eed666b-a6de-44ef-a889-68be3ac4fd22",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dd00cdc-f7e2-4f96-bd5b-f6fb8fe622bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da889618-ee16-482e-91a2-3e843e80129b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a1c122e-4c9e-410c-b123-4bbe2b1d129c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "00b502f7-d445-4a99-bcfe-2167d9dc5681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d60507e-5567-474f-9682-07a15fcbc9f6",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe49313d-0346-4bd0-8b9f-246445ec3dab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "916284e7-7d03-42d6-a457-441226efc0dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a536d159-f336-4397-9c83-90f0982d9737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7df5a34b-8ae4-44db-8bd8-37007f2cd71b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4891dd55-0195-4234-9f12-16757a5f7172",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3c3a5fc-9126-4730-98ab-8428dd79af81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da377748-b047-4b62-9da9-e122ad18149a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a471090c-a22e-49d4-8ece-45186c676c40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0255a00-62aa-43e8-9a62-a0a7694f2651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f39e7c4e-9948-4565-b2b3-7d67bb7d15d9",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b3cdd97-c948-4e97-99c8-d3034eeb8e4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bde2e071-4fa4-4356-a8c2-11a74145fe72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "706562c0-dd0d-4a56-9942-4ac2bae42692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "83d8a6ed-699b-406e-8e1c-2d4a15033bea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac4d2c8e-7fbc-4fc1-844c-f0b1e696951f",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9014e5cf-e4a9-4f65-bb4f-a8f24ea28230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4287e6f6-d365-4e28-bc1c-5bfc7af7cb80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2615138e-ed71-40ed-9e51-e2452199ba0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f31a0f47-636a-4876-971d-14072928ecd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dc4ddf8-8c64-4029-8bed-f94f8368ae17",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b40562c0-ad1b-461a-96af-eed7826bdd3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0a78c0e-12ff-41f9-bddc-dffad19c632f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72a736ab-1ab4-4875-bdc8-0db91221fc51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4de961ac-8b47-4316-b074-5fcbcbd23d49"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "64331069-273e-4e41-a79c-0e22cc450ae0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3bdac08f-5fe8-4373-b35e-7f3a95db1049",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "655959dc-855a-4b61-a10b-3cb26a1c0516",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "3b3a559e-96ba-44b6-b0e6-eaa0dd5fab87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2413e6a6-6fa2-4ac7-91ae-4dae5c7440e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "25cdaef6-843f-4c69-96b4-fa75eac49b1a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5f0c93e4-a876-480f-9cc6-1de3def671e9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ac039728-8c16-40aa-a5c2-ae8cd9b2eaef"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "30a5e2a8-28d6-49e2-a05c-a4f338ccd5d2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0b746825-4f82-4e63-a47f-96d8837065c7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "94e0039c-c848-4a67-90bf-cbd637401482",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c63d32c7-191b-48d9-b623-887ae4f88cb4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fd3ae4ba-2c24-42c8-8ec6-d1c72d26e1dc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2e952ffe-4ca4-431a-be5f-dc44b7089945"
            }
          }
        ]
      },
      {
        "id": "64f74b1e-79c4-404c-ae55-179db5d431d8",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "8811fa8b-f919-41b9-bc80-387a37da9365",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1178d51e-f58a-4d1d-b5db-261691eaf463",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "da0205f4-0710-412f-a1ef-23996d4985cd",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "600bb154-d81c-4bb2-a533-cf9df8e1c125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "962a13d6-8a23-4c18-9020-5c300ca65e0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39ce5a11-facd-47a9-9fd8-32ca600f9495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed9e1953-4a31-41b2-8087-36006c1c60e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45ff574e-eff0-4111-8a1b-31ecbdb6a404",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17ae52d5-a85b-49d4-892b-6d3bcb5fbc18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afbed31f-6117-4d1a-96b2-eeb94f18d148"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "611ed71d-4064-4572-a356-b0cd8c6b5388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa260fd6-be82-41e4-8621-9faf409ed2ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "460b5927-07e2-4bf6-bb7f-216dba29642c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7ef8f11-0607-4748-a63f-8ed83c2d476b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "705f011a-7686-4c16-938b-178fb5b84176"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce8462cc-a13a-4fb3-9837-752d3e01f9fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba8f381c-6536-4fa5-ad11-97a90fcb87c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "938ad6f2-9324-447b-9d8d-e23e9f6b9163",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e638768-9a4a-4268-9083-3dd19371d308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70f1ed01-26c3-4466-8311-906a3ad22933"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13249d95-1474-46ac-8688-a2680968427a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "af014b8b-2a23-46f0-81dd-ed625ee66f57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc8e72ab-c13a-4fcc-a5d0-3314025280e8",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3f4e60d-e727-4e59-a941-426a19357d74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "694e6135-72c2-46fd-9453-35873cfacd6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e68199e-b9e0-433d-9807-ae9e4999a4cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ec3df7b-62b0-4c00-9560-745567760a5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a77538dc-af6f-49e7-834f-a34e98a8d405",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff624567-934c-4846-9e88-7e0c30a9d74e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2228355-4294-4a11-9ea9-16781067f0ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40bdbbe7-603c-41b7-80fa-4bf39e228e53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d21603a-c87b-4511-a4af-24dd137321e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe82d0e1-e036-4774-86c6-25f56913266b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3721d67f-d6f0-48b0-af8a-985a5423799f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d05e03c7-91f6-4038-b131-6a4f1dc02b6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "352fac13-a7e9-4116-b799-72ea59d4868a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "42c77799-03c8-42ca-bcc7-f9b2d3deb73a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61e0d601-dd76-4e6d-9f72-f811aeabce73",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "828ccea1-a230-4f0f-9048-37bd6355df4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e8855b7-3941-49cb-b1fd-c02192df8959"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8503293-b015-4736-b8b1-f90233b2e829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "35b562bd-3a75-4ea2-8ca4-81f08f296e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bddb68e-33d6-406d-a95e-1e9b251f6555",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbfa5a89-2cc3-45ec-a63b-2303d1fd9a25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fbe2b8f-1c66-4fad-9327-7ca8dbe20e6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ef709a1-a8e8-4ee0-a425-32b27e110e76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "67b104c7-29eb-4538-af59-84fce45584a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d6843c8-f682-4a81-8a4d-675c7f1f5841",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e75036db-29bf-4347-b65f-92ed44a27de1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95bb10d6-f8ef-41a7-9550-b2caf6bac0aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d019a46-f124-4bbe-9d9f-f9de90ee9f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d6e8ee8-cd0f-490b-bbe5-433353b13b49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75247cc3-eb7e-407d-962e-01257ca589ca",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5a61e4b-0b31-4d93-8710-b9d67018a03b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f39b9df9-9a89-4a6f-a7f0-7ab74762eea8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ebba434-19a9-49f3-83e7-3ee937a62545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "327d5439-b9bf-408e-8420-15e0515ce006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "508b7622-ac5d-487b-b6b8-40aee3f844c5",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d38c9e1-cc95-41a9-8dd9-9195ada94a3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff33854c-1a28-47d0-9ded-70570d746d94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e881789f-bd13-4167-869f-758c6fed6a73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c3ef7b91-39c0-4910-934e-c65d344b3175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23f12e85-37e3-4bdb-974e-794aff180095",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c77d5f-bea5-47c4-a7cd-990109bd242d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "337267ad-a9ce-4ab9-b092-c5bea4eee47e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6ee6293-711f-44ef-b719-ffed4e2d0521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab8fd8bb-082e-4eff-9368-1f6f61ecade1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21f660d0-a3dd-4453-9bfe-a484af69cb2a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbd78534-3f9b-4e15-99d7-533d68dc4727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8ca6ed9-a6e4-4d8a-8963-85bf956da359"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b22ad086-14bb-4f65-a084-35f3448394e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "dababadd-b031-4667-9607-34ed612ee6ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eea2c45-441f-4c1a-80ce-4b2aaf66fdc9",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86ad1a96-55af-4cfa-8561-a82f2e306d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdad274c-25b1-4263-bcc0-9abf409177a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7abc7dc-be73-4ba5-b348-4f655b003d73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "657cb269-c215-43ab-919e-f5088954c210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb30f174-4eb6-4821-9f70-76b001cd9735",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1965a21-bc2b-4fc6-a800-357c55f705d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9205e028-ac34-4f70-8c94-af43f26fe5f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e6cc381-e245-48ee-ba75-03a1519c3f2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a3f2de5-7798-4c34-ae7d-ff5af5f5cc35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "029136a6-04ac-40fe-a3bd-31d434917064",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5f3f272-787b-4016-ad8b-0b80b5d7b47f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "403f2095-7d50-4f82-923c-91e94a460b68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93c9f949-6808-4fc9-a4a1-e604a6be73ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "bad681d8-2d6e-4233-818e-1ead3ab2543f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d544361e-e82d-4992-923e-a5c92ee4f513",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2aeff04-06cf-42d8-a704-2879d66427d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44f43ff7-96c1-47ab-b7d4-188ee83c73d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26c45dbf-f7e9-479e-a3b8-7b37aef75040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "86ccc9b3-39e6-41dd-b506-d4ac7080223c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc08df9d-5c5a-4f6b-82e1-7ca0528b1f74",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "110bcf69-dc1e-472c-b085-08583c7e01cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e327dfb0-7f8e-443f-bdd4-45bd8c1f24b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "920cccdf-27d8-4e98-83a2-c01b5d88124f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aab45549-2d8a-4978-b4f7-2d84d9332802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97d22f8f-c23b-4369-b2ee-54dc69d61e44",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08086857-0c05-4492-b444-dc5f0ee883a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7f3d12a-c8aa-4d2c-b15b-1553e97a51e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed5d8cc7-b882-4b1b-b20c-1a4321cf3735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "66836648-60c3-45a7-8849-ea92fe6942fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a74f257b-2f7d-4f76-a7aa-72baadf3f396",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "896a6237-074e-42d6-9dd5-d4da774ff25b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eb6976e-023e-4507-86f6-73b2c9d0c980"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1c52a4f-7fe0-45cb-98a9-96bfa11369c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5b650bc-3341-40fa-9a9c-51b54f529f6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "871719e3-84b5-4920-9aa2-ffeae4732a4a",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9578632-dabf-49d1-a744-85b5de19236e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d58c90f-1b25-425c-893d-05297d0f70d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5976724d-a587-4112-a200-2fc533e4ffa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d178ed9b-a37a-4842-9a82-095732a7829f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0faf90bf-6841-4014-a431-39e59717ca23",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28489b7f-0fc7-45db-a81f-83193aca4aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a28d802-4c71-4aba-926c-bcf0b36aabc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2373fa2c-b5b0-46b5-9c8f-0ba92c748341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7320ea0b-242c-4bc1-aa43-e4ca1f9d7c56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75c0d708-b06e-4f61-8c55-e15a7d166a9a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a44dfa4-1e41-4b8b-b031-e65b5cb86ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91e359c5-a1ab-4d09-a579-e093f4d3e4f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "009aa509-228e-4bb5-afca-dd2900d10d43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c79f54e-3c13-4339-a5e5-4886dbc2e9f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aacd102-cf28-4b44-a4a4-f14f6a52c71d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3752e7e3-c139-4b7b-bcdc-6c60ca4e727e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4ec416e-75e7-4153-ad8a-d5919a275c49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eaaf429-3a7a-4311-96c7-b199c14a76c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cccf114a-95ae-4cd1-8a9e-ed0fb4515ed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65b8c94e-90c4-4e8c-a334-d2bdd0d0bea7",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b6d8dc9-9a65-4fb0-a747-58d3de2dc018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4870d4d-477d-4020-a24a-204e5ea0ab77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "096c3f51-0b83-4daf-bacb-42ca903575f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b94bcb51-cda2-4da6-955c-ae047c84b75e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "300c21a1-d807-41dd-880d-a7f1bdba2a3e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a79ad911-8f01-43e3-b4bc-9239ddcc224c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d40406af-ae9e-444b-977a-fecb73eed45b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffbb879b-4827-49c2-ada0-b906ea067114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e38371d7-9e1b-4a9a-84af-f7a23cd2d75d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2779521a-c584-4620-927c-3f889d132bed",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efc601ef-1819-4b97-96f2-f4f069ae7455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad733b34-ec8e-447e-b102-7331d6540f91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f5d255d-da7b-47ab-9844-af875bcf335a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "06d8238a-0d1e-415e-be52-30f354470316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4193da4a-41da-4c36-b7a1-e3654ca6e6cb",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66f6ee66-20b0-4175-87fd-9608418f6b32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5600dd70-713f-4e62-954b-ae8963478db5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c10d2569-6129-4c26-a65e-f3aafea5a7d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "44331a4c-7689-4fc0-816b-96e5a7e3f5ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "681b51d9-c466-446e-a0ce-df3ed8ed8b7e",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f659034f-a667-4b0e-96f5-421fee2ebff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f354c502-2b1b-4588-abcf-7ddaf1f4832a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5106bdcb-8e23-4d3d-abd1-6be20a41d7be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd847342-3acd-44b5-ace0-dd6341ce8eae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e61b905-b7d5-40a2-a00e-41c845900d81",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd168812-5dc1-4072-a1c0-bade700a19ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bb38da8-6560-4b87-bf0e-4c03ad8816e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c955146-3ff3-4e92-bf2c-30ecadc37149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "11aacd3c-3e2c-4649-b9e0-89ad05254805"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07697df3-4675-481c-8b52-273595729d20",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db046c29-4ef4-4979-910e-c42eb9c3372a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "105b15c8-1d51-4b4a-ab7c-c66193344282"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1de10a9-c3cf-4cdf-881f-8973df5478bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ac91231-b406-4c55-a61a-386871c923e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ef81426-97eb-4653-94ba-8043c5e368ba",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15c4bdf7-77f9-4484-94cb-979b151fdba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33630379-0c7b-4ea4-8def-a374494ed36f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2291360-f327-4c38-98cd-e95e3fc6c587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7b09416-8329-407e-9fce-4619d48e37b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2b3d7f6-d79b-4973-93e2-5e3c5c4215f4",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9b5de07-b3f0-408e-8e33-263468a9db19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b196c9fe-4a37-4c85-bd8f-c929c13d39ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "886f58f1-8a10-4451-a92f-aad0f384d934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8cc25fc2-0f7e-4b70-af79-3953db907946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f71bb86-9541-4a55-9bb2-bd9fa411631c",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a490f06-0efd-4792-87d0-d7f3460d5a18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ff28ce2-e55b-4824-a552-cf74548386f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de1c4f30-12e7-4d6c-9de3-d008fbc77afd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "58c476a8-e47a-4911-a896-1000202e7098"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ad176b0-e564-4161-84fe-8d158f6f66c6",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20d14c88-3060-464e-a41d-f5ebf7684326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57cc4a48-99dd-47b1-8810-abd123337af7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4163789e-a9d4-43bf-aa7d-a3adceca3fdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9df0db3d-2bc4-41a5-b27b-8b4be54ace48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6576a763-e0ad-4f88-9f97-db100a4ed3f8",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8951dfca-14ed-4724-b910-911be9b7be4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4634ddec-1837-4e9a-87a2-311c3b6c53aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e032dc5-a682-46ea-aa44-8adcbd440dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a599e3d9-bf75-4b7e-a622-b50766249c35"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "56bac675-8e7a-4cc5-8a81-f0867187af6c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ace6747b-29c2-4e92-8235-1767783d4c12",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4b125f7-cfb7-4b74-a74c-69440a07efea",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "93a8b9be-f236-462c-9cbe-d6a1ce4b086b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8110b8b-b53f-41e7-afad-e9e7aac3dac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "96f929ce-1257-4b0b-8e8b-8a9530debb37"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bb376d23-cd04-493a-8795-56a147d046f0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "03f5fd37-7704-462b-9be8-7cbbbfa21524"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b4d3b7f-39ba-4f62-8544-6a27dd219e13",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cb8ec69b-eed2-4289-aa9d-8e7936b31adc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e2d26c98-6cc5-4830-81b8-01319fab1142",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d57aae65-2601-49ad-a131-6b00f40c5fc6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "31d90d7d-2a7e-430a-8b8d-51863e708d7e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "09a1ab49-3cf2-40d1-ba12-45976b89601b"
            }
          }
        ]
      },
      {
        "id": "03841609-e22d-437c-a955-1eee40f8b573",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "0c2dcfe9-1c95-4579-b8be-b6679236d07d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3803f453-3c85-4b22-87cd-8aaa3db00d40",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b82d1bbb-63af-45e5-b7cc-10565e65c0cf",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "472bf8bd-9332-4597-911b-361f30ff3be1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a061c642-4d92-43cd-97cb-02996f045a49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91671222-33f0-4cae-881c-669dc79095b7",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb43ba6b-f240-4283-9384-5286ac934682",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "903d384b-0a92-4832-a2e3-2d202d2023f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95f5325b-8054-44b3-8834-b2b97003265f",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "257638a9-164b-4853-a26e-0654896dd23e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a70e934b-c633-4d0f-bfeb-96773442f041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6611e203-8153-474c-8595-e12894846d35",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae076ea1-65d9-4e12-8ec4-afb9fd863d9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b8a10b8-32a0-4f19-bf13-e4174096f63a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76d3e339-1658-4ea4-bc5f-127003cb4fe8",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ba3e47e-250e-488d-be25-acb65e5078a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4e1bda0-bbc2-4f48-b71c-467f2ed0907b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66479af9-adbf-4d94-a13b-b842f588acfb",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00011e93-edd4-4d59-a9cf-d2dc0f1e3c69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a203b415-4d72-4e4e-a64a-888b52874f8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17c54a10-40d4-4422-b98c-8e212a27f279",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f70571e-5576-48d0-9dde-ad208e87c2cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88649834-8b46-4ac5-9aa7-8a08933bddce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2675859a-959e-458e-83cc-4baa3e641596",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9786bcc5-2446-4d24-8ce4-bf897015d0f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4b9ea0f-1c3e-4593-8833-648b7b07b44a",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f11f804-d8e7-4c62-9611-a4b6631f45fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea7cc92a-7531-474a-b2c9-241547f235f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b42057-8e79-42ad-87d7-3bac582cfec2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e149d10-fb18-4f9e-9b44-533f3e822329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f98035f8-c685-46ae-9364-c67a42c15bea",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f34924-14e3-4162-8186-5e61609db973",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f2edbed-d98f-4be9-802e-be38ce36a80e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38823186-8739-4d66-b115-98ebfefd5cdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1c4b043-4fc1-4a6f-bf75-cdb09ce6499a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c2696bd-2f09-41bd-9138-0906069f0ea7",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a98dc684-b741-4fe4-a07a-d6a7b03f97f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99a80e55-df10-4535-804a-27caa40a3530"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97fa3720-0e54-408d-b036-bcb23436588b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07355d55-5055-4e33-8fbc-b9cad90c30c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0c3b6ee-3e83-4011-87c3-f1c5bcbcfcb7",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c93370e-d366-4b54-92b1-0c60e4afedfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "679e382c-2b71-432a-8c72-f915d442e816"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07500414-5787-4387-b390-fa66afb302f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f385c258-cf7c-4249-99bb-60459c90f012"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b57a51f-bfa6-4d8c-8e7a-cbec2fcf65fb",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4213fab6-abd0-4b56-b5b9-1214a400c773",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8da31006-22f2-4b39-9069-944c9466d145"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75405a45-bdad-4fb0-a8f5-87b5f860a5d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "391e2b2f-e780-4b38-9731-5ba9f0731907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e80edf1-0d4d-465e-a243-2cfd1d5a6c90",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baa64a3c-b381-4480-8069-657fe9a45d26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f50f4c0c-1b00-4b36-92a5-df3ef3c2a057"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "438b1e5c-cd88-4b2d-a34d-74baa9837e1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efc0e284-578e-4a93-8e8d-fae8ec5ff476"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16772aff-f237-4cd4-88e5-3f42ae95854e",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "516ed3b7-ffed-49d6-9f04-8ada9bb80a60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "246d7e0e-6a57-47c5-8ba3-e8572a0b579b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4ac1a3e-b5bc-45ec-b979-8437ee183249",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5a1895b-a946-4646-bf81-bf24ce561376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f608a2e-4c15-4e59-a7d8-d5f5957dee90",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b7e524b-017d-40c2-82ec-40cbda6eaaef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "269f9c99-97a3-4690-9477-65f23c9c373e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5a58845-1a6d-4972-ac44-297e7b6ef609",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "608c9ae2-c4a2-44b9-8c56-e6985835a731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9721f660-6bb2-468d-9538-b4850e7c99d5",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4030bb2-25c5-440d-8df7-ff7111a5bac2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49e6542b-fb79-411a-89ec-7308643cb9b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "263a60cb-e35b-4acd-b5f1-64fda72676b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a33c8a3d-e15f-457d-808f-6a6803872089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ef13816-7b39-4ddb-a65b-181906b9314e",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e9d455-c858-4702-9d44-a37bb785294f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "986b426d-0841-426e-a514-82eb842e48d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60b59e11-7599-4439-995f-1b84ecdd92eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea307ce4-bc60-4a5c-b9a5-ea8314041008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5621e802-9ca5-469e-bf65-3305996fa070",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be120e65-e94b-45ef-9a8f-04a0c84b2f1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df361fb9-2912-46b6-9bae-9ee02eb71fd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75269427-6919-46d6-8564-83192c142849",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e645f18-6b91-4420-b024-d0cc76c1deb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76613916-598a-41b6-8695-b889c065b998",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1509a2e2-45e7-4004-aafc-dd6e7c199744",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5da6a7e6-c646-4907-a830-f60f07317f05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d04a5d2-2791-49ac-89d5-f4cdf6ab6e21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbeafef6-9528-4efb-be23-faf0d35b6962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d60c371-5821-46d0-acca-5dad6df0eb06",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "412a1466-cf37-4d7f-a14d-0f5c8cd89040",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57016fad-cd28-4a54-94ea-3626c8998b48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c403a0e-7075-4487-89e5-1d0518f2aaa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "220b1c5c-38b2-41bb-a3cd-59f1d54a9758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2956152-90ba-4181-a046-033875c40c65",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "908908c5-5965-41a6-8545-e51e61b7ea82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3305c96-920c-4a10-9d12-7ab0c153febc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d84c5aa9-63c0-4f48-b217-06b3118da6f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ae53f0b-c13f-47ea-879c-a4403b73621c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b6476a8-d2bc-4446-b968-1fde6a9b85b9",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "846f3eb0-718a-47fe-897c-6fba7f87870b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7502ef6c-3699-40cb-8593-145fca084dda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "593c7963-d7ff-44cd-9609-f19985804540",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7c14706-69c2-4a22-bcf4-815f706607f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5dd9bb8-21f8-40ac-a718-6cdde16fd878",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d54d858c-b984-4efe-b782-961fbd970308",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62133c19-5432-4b6e-8d8d-41a677d9667c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d508062-6557-4d76-85aa-4c64cc68e91a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30cb3aec-1116-4921-aa6a-88446d2fa9e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec951d88-a841-40b4-b29c-fbc4ba72b5ba",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62387bd6-9030-45c3-9f5c-4464224c2813",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38904b45-3c3b-4fba-844c-aa6a3aa0e155"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63ee8069-d636-4c50-aec0-1b750a85c183",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49963c23-a6e8-4774-a086-719d81681e36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f2fb10c-758b-4f7d-8b93-d03ae4cde869",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50d42e30-408e-447f-9e8e-b5557f6b1719",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbd486a3-ca55-49ce-a512-4d69692bc003"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b4679dc-2c0d-4944-9cd4-f86f791cad8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e924fab1-8748-4281-9d76-d00424b74983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc682126-6424-4e24-bd7c-3e0a949dc1a1",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e07ec39-f300-4b47-9d20-cf92cdff3a17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff87fb55-17b2-416c-915c-4460d47ba19d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec65cdfd-2f5f-4129-8780-3c849e97727c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34faa63c-c0a8-4615-8703-b28f4cf6b661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84ecae80-7117-4118-a6ed-76c7b2874954",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b5655de-d13a-4617-97ba-16e3fe5b3169",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a38e848-ced9-4601-9569-cd752c727ab6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df916fc9-aa21-4972-8904-3cc6feffebc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61e6b929-0456-4ed7-8e2f-33481794cacf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3b0164d-d0be-4ad3-968b-b770d09cf743",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60db5229-0ba3-48d1-9aef-473a16ea58a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5087007-6479-40e4-8d28-b85cf241d2d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87eceefb-320a-4a8b-8f76-25fcaefc24de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f37cbd7b-d4eb-41ca-aaeb-3c546e9a0d63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "848e3aca-bb0b-4fab-bb14-0cfea6e77d3e",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9ddd37f-39bc-4523-af79-ad946f3009ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3dec6b5-e370-49d7-a9cf-4e7d06f2a1f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a61ca026-0a04-4c26-88bb-5657454059b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b257c1ff-f0ba-495a-90c1-9589bf877737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "963b4f11-4aa8-4cf8-9af1-df3ff5fb6edb",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d32185fc-3800-4f4d-ae6d-5f7fe9e057b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df71d2de-bce7-4f71-a72e-96b04cb4ce1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08a2a8cd-411b-4c64-afe6-45ab8f05b2e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "568b5d64-e970-4e92-8e13-93677005e20b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3512ef26-e6fe-4411-9dc5-4257272c68f5",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e62f899-72bb-4768-94cd-022d0b5d36d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cae4146-48b9-47ba-a813-e1f1489a2b63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "351631c5-45f6-4017-9157-0f9747b79659",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "036c17df-82a9-42fe-b61d-41d05cc4ebc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca5dd148-ff89-4621-b2b6-e7e01c964360",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "720dc4d4-b0a6-4255-bfd5-108c27d09984",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f109532-b2a3-4874-bfe2-67a67173cb79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa68c66c-7f4c-4435-9160-fee3685917dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55802304-4332-4169-a8ed-c3381e213963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66889a1e-53ac-4707-a0e4-afe5d78d8bad",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db3ccaf8-8303-4709-8930-6b5b88fa598e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "beb55605-0ba7-4b62-ad3e-513dd083dfa2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c34d1b66-3793-4288-9160-56f9bfd662c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31cb5a84-6a46-441f-8900-7b1cb3e56c61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f46881f-69ea-4fdb-8236-f2480e0494c6",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b071fa3c-c73c-4cd4-86ed-f50dd127b9f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fd07139-0068-4f0a-8c21-ffed7acc561e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5eb4c03-0798-4b58-9e5a-72041a5eb55a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b136b636-f5f0-4708-a908-eb1eccea0f78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de6a8390-f44d-46e3-970c-1f570b698b90",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97760bd9-25d4-4e71-9047-e7d51b5f4ab8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbcdfb23-57ee-4264-849e-db5fd88be279"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06b230be-c29b-4e7b-92a5-ed7bf120c80b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1a02188-14dd-4a32-abed-83e55722e463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0fd29f0-bda6-482c-9b1f-3f8d9bebce21",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef996893-7dab-4204-9b4a-e5ad277bdad8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73d9dba5-a444-489a-95e7-61ccf1056420"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6b1c625-236d-47ac-9d30-2748741ca5a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eff28cee-a545-4d2e-a1e4-40d7ae7283de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f8087f6-52fa-47c5-9354-0bb30af82f46",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c6950bb-9f97-471b-a809-bd42fd229078",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e300b0cc-830c-4a9f-b807-9b9f112eac12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "926b960a-0aa6-403a-b5c4-1e7bc821ecae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc83fdb5-33ec-4579-ae96-0e03fd6a96a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f63d150-7f22-4974-a576-36b355ec16cc",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "827646e9-73cb-4d5a-8438-c6c671250394",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "755d3cbc-aa72-4c2b-9def-a10c0b023a3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32e975a5-bf63-4300-82a7-526a1bd5132c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cb79eb4-919f-4e87-a4a9-b9866a715ff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd7724eb-800a-4e29-82c2-d213324e613c",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22b7e0a8-6c9a-444d-a123-46d924da8e91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3fcbb39-54a1-4d55-8cce-870a32a342c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c443ffb9-0aeb-42b9-86b3-a2de36d96122",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "649c83e2-802e-49f9-972d-39b00b2ef811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c72ea67-b172-4a5d-892f-c3872a86546d",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d36634b1-53f7-4599-8a31-edba7445518f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38e2be1f-0832-45c4-a3dd-0fc25b4f38fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04e52d9c-c8d7-4d90-9a61-5e980893ad46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecd3ac76-94ab-4e6f-beff-d55a2cadf8d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "976727c6-2919-4fa7-8cd9-e9a1ded94f7f",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e7f000e-33d7-4011-8024-53e0dee361ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74a51c02-ccff-47f1-bb9a-a1cd3cc8292f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4057eed-a711-4b76-96f3-1441d246ba86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4d6489f-ab3e-423e-b374-1a9ab02d9151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ff23e44-e5a9-42e6-bf1d-a5efa4145b01",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d756e64-46b6-4399-be1d-1a6fe46c9078",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fe982b5-881a-4629-b6f8-0259a934254b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c1c54ec-f77d-4562-97bb-5d9fe6f948b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2178dd04-0a1b-40ed-a95c-7f236cc7df98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7318c2ec-c31d-4586-9c7f-30b854b75274",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "527d2802-f53e-48f5-a49e-0cde163316de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "725807db-e1d6-4ffb-a020-c321ea71f3d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c7f8bce-1f24-4d38-b66a-cc781be37439",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0993a859-3a07-47ed-b266-8cb706ffcf38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "224f8d49-f2ca-46ec-95e9-b515d93c3979",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c7bf2f5-5382-47a3-b39a-9e32a01fef66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fc893bd-5a55-43fb-9d3d-eca115f40800"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93218d57-d70a-481f-b87f-2c22b0826bff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc13b8e4-87bb-4c45-a14b-147b433de2f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "278af0d2-353d-49ff-9943-a4332053e12d",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12981423-cffc-4830-b0fa-68984874a4ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb0930bd-0007-4976-b4d9-54f38817225e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d3e6882-cc0d-4002-be5c-61c0220fc478",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d7e4105-1512-4abb-8513-87f5568aa3c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be95ff29-c1d2-4d47-9c31-738d137d4e6c",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daca4b23-6899-404a-9537-a35bf417ed49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bfeb342-6033-4be4-85a7-45bfd48e366d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93e0fc3f-705f-42d6-b613-4dd19a057208",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04757ea9-ad3b-4e78-b888-6b3aec924b35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d00f59ea-76b2-4b17-97e4-5982509e0a38",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7dfbe18-4b8d-40e7-acaf-a33472e5f5ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f192edee-2545-4434-a09b-60499acc591f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe07cf5b-08b3-4af5-a068-79e78b2d3ef6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8d66301-0bf2-4e15-abcb-a0cfaa3cde0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17b73fdd-7587-418d-9cd2-178f7e9ac574",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7049b7d-d8a6-496d-9df6-4ad88feb1585",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fed7ebc9-fcff-4dd8-bf60-73fc65180e88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb617cdc-15a6-4c43-971b-c3569a41d903",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcfcef35-2bd4-44be-a3c4-8080ca8191a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63f3ddde-950c-4536-a56d-ebb28fe82d3e",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7535fe9-6dfa-4928-a1fb-bca61712a734",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9417f70-42d4-499b-96ec-e90f5470f243"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88a653c0-9165-4813-b5d9-43f6313301ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5345ba35-1f3c-46e9-a08f-db4fb0bb2d9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ef9d9ea-0979-47ae-b663-eb693a294c13",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e4db05a-9836-41d3-bc23-c6491c2da73e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f760d15-e81e-46d8-950c-f60cc69ae66c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e4ccd85-e8dd-419f-8cb5-1fead8217ff9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d53099e6-5959-4efa-863e-eb83e57b9a36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0053428-d1f5-43d5-bde5-99297233a965",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9aa02ec-83c0-4356-84bd-7f759fe2c01d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "913963d0-986c-4645-b763-e9ec74497eb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c9ec1be-24f2-4ba5-a0b8-a3bb20583377",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ff4ac61-be90-48f5-ba22-75003c04cb8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be368e79-8577-4fe3-b35f-448a958c305d",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab296ecb-3c89-48fd-b918-566f6e97e67c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23613ac5-0129-4d1d-a122-76bd95890aa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f37da17-4560-47eb-92da-c84780ee3d39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "882d00d4-cf3c-453d-96a0-0ded722d493a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "351caf57-997f-44bb-b7a0-6ebc922be913",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f855fd4e-1e6e-4c15-a215-17b8553a7bc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76994297-e1b4-482d-95e6-eb010bf2f0a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "849efa52-521c-4fbf-9607-fdafef97aa93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18b3b2a0-c586-4188-853e-2446e2e394a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06300266-36e4-4412-b22d-2c0f6985c3fa",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0a4f97f-d094-4fcd-a419-a0746c7808cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e07a1f50-ad7f-4031-8ae5-04b2464a8bb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63b9f53b-26c8-4167-add0-0bd3d58baa1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8d24d3e-6734-440b-9855-29b6dd1c8825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "634b29a8-9150-4f1e-b226-9c3786d28f0f",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcedfb22-efe7-4955-8cb3-949d0f5e8452",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58ecfc3c-f2f0-49be-be8a-1b29c3ce1e48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04d7a557-5958-416c-8477-402fe9b12877",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26cbe123-65bf-464d-b718-668adcd56de5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09bc2660-5153-4bf0-b84d-3af5970dd7e5",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b0822ad-8179-44ed-bdbe-1e65698fc5eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "beaff60d-3f75-421a-9504-9015ab453549"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d41f5ba-dee6-4b17-9fdd-19c51ea6350c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e44d2fb5-d8d0-45e7-ab58-4439d38f0f18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcecca47-8f2b-43d1-875f-218df432739b",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0537af8b-0a2d-43e0-8922-d6d56481eb1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39db1c7d-3e4d-4c8e-9847-2b959e758898"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af3b4664-355d-47c7-aa4c-d3fc7854204f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "345f11ef-1ea7-49ab-9f35-6634718e7c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e318fa7b-c8e5-4fcc-b6d1-3d6dcffee6a9",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9f2baea-cd64-428b-a403-0617d64b7aa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69af1967-6e15-47f8-886c-7a025c83add4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff023be3-9eca-452b-97ac-b95cbc75231f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5443b725-f0fa-40dc-981d-4f1c664bca84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2095240e-ba5d-4aec-ba23-288c2e3ec43b",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "def97794-36af-48b0-804e-7146efec197e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "563ce0a6-074f-4315-bfca-9e9c857008da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dcfed28-5db2-4eb4-88f7-c07b044279e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b10b863a-41b2-4199-91a0-0036ec9b9321"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68db462c-37cc-4314-b3e4-cbb9c920ea61",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88d582b7-9377-459d-b5c4-8abc1fa3a662",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f44193bd-a138-4613-80c3-799498b54cfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69d6ca7d-20fa-4b2d-b4a5-7ec41db6ee1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f585937c-5bb3-4d07-a463-d7cfbf64dd5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb2dd523-43d4-4b0e-9f9d-565b7faad445",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d769c1a3-6e3b-4f12-b0bc-81e91ab4e80a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34484d2b-fc48-42b5-982f-90a9e63c8e37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55a765c2-becc-4030-b768-cc294bb76658",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "848dcda0-2855-4aef-aa42-9f5c6d3a2a6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb6ef909-a573-4617-a9c8-0b023584fa08",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1746de1d-b822-4e88-93c2-c085164613b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "375620ec-3cee-4bcd-bf1f-7db388519feb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86864d9a-8900-4f81-8d83-b6d1c379cc46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df41b663-a0a3-421e-a74e-dab7e15c3991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a94c9029-0545-4ba3-ab73-9ecb042fa4ae",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06414d47-6dcb-4011-866a-3d94469c8e14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21b8dfea-6a88-49e2-90ab-1cc286756945"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "168c54f2-7752-44e4-a80b-8306ea5a3a76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae40a557-395f-4aee-908b-47d83be8900a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "852c3f07-f80f-4445-a773-bf69635a01b2",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5dd3b7e-1f12-423a-9220-e36d1d3f7fe7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f45b3c1-cd7d-4366-a134-a2456ef38fec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1658a4d6-539e-43e7-a46a-6dd225ba1f35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2a1e28a-6e03-44b1-a65b-4fd0c6f501a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9490271a-80e7-4f13-bcde-1c584c05ddb4",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7d1cd4f-84aa-44df-bfa9-517afaa1920c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd505899-e443-473c-a6e2-2b4ef94330f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63162d55-c84e-432e-a1e9-2e61dbe15530",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7825d0de-153d-423f-a861-ff3f17292733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f078ec38-8d10-45b0-9db9-34b2091a62ab",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9c8af72-65ea-4262-83a9-5f41f0b3a31f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a80566d-934f-4eed-8daa-aee95a975598"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ca0abc9-a89b-4b8e-8ef2-792884ea425f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd0f8b3f-b4e3-49b3-96ec-e3fa6a7065b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04e9ec27-def6-4e12-af64-03aab77b94fe",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d39d894-e469-4270-997c-1da5ed34e925",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e02a2c3d-ffbd-489f-b7bd-affd4afcbff3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dea53d63-a579-4ee1-b44a-7858cf6ff5f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5997fb8e-183e-4f0f-8bc5-7df7e07778f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "004dd041-9428-4c48-9c35-4d3e26c5d4fa",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06f1d1ea-7ce9-4157-8343-35fe67bd92da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "804d3203-30d1-4047-b888-4d27f0307f51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3a5613b-97c9-494b-93a2-bea82e54c6f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3fd2c46-92e5-4e22-b85e-94658eb389eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12ac6866-8a47-4e51-bcf4-60530e2fb85c",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cf6cb8f-4f53-46d7-9ec0-c1631b51a821",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ca823e7-4d23-4524-b94b-4f5d6511d5c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "298b9c89-3c3c-438f-97f5-a14083768196",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ff17ad4-07d6-4328-89c9-a5731c933e2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1aef453-a37e-4e03-b605-3cac0fe313e9",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4a90fd6-9c74-41b1-81a2-c5f4596f4992",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a30bbbc-7e52-4c18-baec-6d5a0b8cf1cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e90bc8ca-09ab-4f98-9993-8716cb409190",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2da1663e-a9fc-4fbf-afc7-e2f76f6f55d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfd0dd7a-ef44-4ffe-a78c-fd1523e4e7c8",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9952dbff-7852-4ef7-b5d8-eb79a4604989",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92585da4-1c65-46ac-b0ab-a7c1b0eae108"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4821ac62-9cb4-4d06-a738-64dbecaef768",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf517b9a-98cb-4da9-aad9-3c32000518ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03d54da7-e513-4447-95c6-c84cdcebb584",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a0e475-f8e0-40eb-81e8-f369c69c4107",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8422460f-1c5d-46e0-a66e-affd768db2e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "041318c9-cd4b-4f8d-baa4-7857eb860a78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49dad17e-c9fa-47ce-811a-6b999ed64ae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef3e0856-486a-44b6-801c-38a46aa32922",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8364017a-6aa6-44ad-82cc-3ceb9f8f2442",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f6dfbd1-2a68-47bb-950b-6cb296067ff9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a4cea4c-1fb0-4f1f-8cd3-0f036aa45fa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcaacb15-0c37-487c-ab51-c27869017507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0a38c5a-a71d-4d97-a912-6881755a49d9",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6434e02f-5d4b-4f22-9bd1-bc4d0518f319",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e62749e1-dc97-4d6f-be61-d685362b5c84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "087fe062-f858-4258-a580-21f40ca37bcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a54a5538-33e1-408f-a7de-8cd886e25a1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b7b41e1-cc2a-4c13-a1b8-1efdb69d333e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3039c92d-08a5-4d47-bd83-17c7946910ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03ecdce0-8c45-4528-ab93-d0be06f14a67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82c0eaaf-c911-4ea2-9e1d-dfb969d05aa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25527426-ffc6-4b51-a424-2c498d923b01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd7ddfd0-bb01-49a6-a1e0-71b839d3ff7b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c8de985-9346-49ea-8000-58a30fb41d63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a8346ce-2d67-4ff3-ad92-22b1cb8be0cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7b4b8f0-f0d1-4d86-afae-64aa19d69ca9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22097836-4d52-4d7d-8554-b843a8883e8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e00a934-810b-4625-8db8-c23f2e6c2970",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f80f8ed8-3edf-448e-8977-edf34b40f25d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9171d139-8bde-4189-abba-529b7173652a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edaad0d0-4582-49c3-9a5a-fbbc69f417e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dac7e790-0e36-4dc5-a076-4fd76befe384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3614c969-ecce-48bc-8b36-7ca9e909fd1c",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64319c84-4c9f-4ef5-ad3e-68136df7aba8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "762fd5a9-2b1c-427f-a5dc-f4179ed8755f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26624974-cb9f-430f-98d9-319631aadfb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e7e473e-b011-4387-9850-48f6f041ad3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65e9d64e-bdb1-498e-bb39-8d1fc7b3a543",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c778e866-7ff4-4a33-b27d-f2de23c2d063",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86753739-8d15-4787-ac29-ee3ec15fae67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da363528-2ec5-43b2-9c60-d71e053a6e45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "827c108a-59c3-41e5-b60a-428690c3f6fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38b32a1e-b84d-45dc-9889-b205b5fd14af",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fea8410c-dc0e-4dc0-92b1-a8fde9035a05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c52412dd-70c2-42c3-b472-ebc2bf4f13f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3301ad99-5fe8-4342-98cb-e7193f178f25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f95c75c-5403-4adf-bbb5-7a08c16debfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65e2c613-0a9d-4bda-8f88-ff46785ec79a",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76ae2c80-672d-451d-b448-9aa54926fcac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57135f49-877c-4b4f-8c47-4da8b29c90f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6279a7a0-74a4-4be7-b789-1950306821fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e8de076-4273-4f91-a6f0-4fdc16566db7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5928ead7-cac5-4169-b003-25b6757eef6e",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e75c1ba2-dde2-42cd-8fae-39a2d137cd01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3385a43e-e4f4-492b-aa88-776c1470ba21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7064f0c1-7c91-491b-ac81-ec7536cf54fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77156ed9-24c4-47c0-90c6-91e152ea5d63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e13ec4b3-b2b1-4105-b4b5-fed46adb21f9",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68eeaa1d-cf0f-4bc1-bf88-e8e847eb0a31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "720e7b1e-eeaf-4e93-a6ea-22a3438c1cf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c846714-3af1-47d0-b2e9-2c2dbfb47016",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7158b9a-c934-449a-9cb5-a450165f09fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3d189c6-b384-4121-90cd-8f19ea91ee54",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7096a7b9-773c-446a-8173-5b80f2fd4c53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fb4a51e-757b-42e9-b820-a8d7fe4dc6b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb046516-4976-4ea0-b974-caa37b540f9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e138788-79a1-44b4-82e4-fc6e6e35a795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75f84fd6-6c6e-49d3-a47e-481c2e9a895b",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f151745b-f38d-4b48-9047-3629e264b933",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "863a91b9-355f-496d-8bfa-00015a7cf708"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96411a19-fc43-4bd0-bb4d-73a3772b6f1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2f76230-5196-4a17-9e3d-5a2c7a83fdb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b73087cb-866e-4c9b-8248-1c3a045becb0",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4014e7b-f1d8-4678-9e07-8d620b670caa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "422766a4-5104-4a23-bafa-df784e092b42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc2f7fc1-b7db-4e4f-ae94-571f146e0f2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2acaa234-4251-492f-966b-f4d5f35963f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "576dcb87-fd06-467c-80ea-37c9cba7eb8c",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7584c7b-89bb-4aab-b211-17eb259253df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c37993b9-2449-40f7-80f4-59378ced4699"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d05aeca-1813-4e25-93d6-23536b20bc94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e094fec5-4d32-4b76-9a79-4b1962378b4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20636c3c-1297-4735-82af-7a90b0f319d2",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1507d9d4-8703-423c-ad39-e6cf4cb953bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5aaa4291-1736-4118-bf5a-ec6247ea33b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f69a2723-ad24-45f5-b18c-94207ee677fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ddf115c-bed6-4ee9-95b8-262a7ebdd670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "049a27a6-0a3a-42f1-8d72-02a384c09dba",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9c682aa-91d1-49cc-b541-12787e24ac7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc587db5-8f5f-49be-b766-2d07a05c8bb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a8e10e6-4b25-4f82-93cb-a03dcf48d616",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e1625cd-1e2f-4bcd-8422-88c49fa6c7a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a09a39f6-99cd-4f9c-b493-a529c8d28e94",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53b0a7d9-08b6-47d8-a161-bd845146d554",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1dcc013d-e6df-46aa-8bc0-208f8fc235b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b69a6c-5fbd-4b5e-84b6-bdde128679ee",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "272e4a85-eb0b-489b-b811-95b0fa064a99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee4c25ad-dc8d-4c19-8393-bf87747e5713",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c8a1651-5654-4a26-8530-2cb082cb89ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73c2b52b-db8d-4727-8078-ea673934534c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c709259-33d4-466e-b44e-1fa91b095edf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "103355a7-721a-4ae1-9c4c-4eff3de109ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b045badc-0262-49dd-bcab-13aecf64871d",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04a5bb6d-a913-43bb-ac36-378c9dca86f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8362c8d-c400-4b3b-9580-0fb688d6e51d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5465fa1-a67e-463f-8803-af26e6a73b05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c104294-baaf-4caa-b64d-a2ffb5275ae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c60519a8-2cdf-44d1-b73d-86372632b721",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e058e778-5ca0-4c9c-9236-eae081560ff3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f059c6e7-239f-4086-9e6a-dba68d08364b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f482c88b-9940-4249-b0e7-2298375cde21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2e216db-baed-4b62-a023-4143bc82bdb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f94cb68-92a8-47da-a44f-fd65bf6afd72",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d6a30b6-f5ed-4c8b-9df1-57c34816b4e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edbe7c9a-1782-4533-99ce-8de47444a393"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d918a51-8d88-4bc5-a683-aefab31c7815",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6b9474f-72d1-459f-b150-909c8cf1058f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ed498ac-432a-486d-aab8-7531515de988",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bc58700-db5b-44d5-b126-84b65681b227",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d79a6e1-c9a3-45cd-ac79-5972fcdf915e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "879b1bbf-123b-40ab-84c1-a5fd5419953c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02c67aee-78f8-47aa-a22c-1f295d682f5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e766a26b-6471-4aa5-9c18-a83464884717",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a408703c-b106-4dd3-b51e-387eabe0e4fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61b3b199-0462-4723-b1dc-2bd9541e4c54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20d3c276-4b7a-4f85-a931-29429ff8c710",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f3eabba-7896-4948-860b-e770b9b5246d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92805a21-e0ff-4042-9950-ef5040318fda",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56ac094b-2325-4207-8911-a942618950fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fa14d39-696a-4183-ab48-97e7b4e64c1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac7ab61-207e-494c-a7b1-e03987a76209",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3897e6f0-8605-4011-8edc-0c3fe1b602e0"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "44f57cf0-bc5d-4ac6-9057-9bee1cd5e1f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d29ce2c4-3948-40b3-ba34-d45a37c7d27b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "abe758b4-3739-4df4-9d7e-c7241d134d3e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1125b58f-1cb5-4383-b181-c4deaff4cb91"
                    }
                  }
                ]
              },
              {
                "id": "083e592f-11da-41a4-a94d-0c788384b447",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a0ed9686-1ec4-4438-ad63-c89e794ca4d6",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76a99f7f-b394-4384-a13a-46874ee3ba8a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "3f6bd2b5-5d07-4a23-8322-4b1748f492ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26c724bf-8b0e-4d1e-84ff-8311dcd94279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b5063e0c-1e10-43f4-ad8c-c89e0729abd2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "098cac99-6ab5-4a5d-9ebd-af6b099906d1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "509f3d11-9810-462d-b3d7-a8f2c6655700"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4fc7d313-7bbd-4fd3-acf4-8274bcf3d963",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "888aec62-32a4-4be7-ad57-f0991763971c"
                    }
                  }
                ]
              },
              {
                "id": "649b97b0-d130-4528-a073-117c4c56dce8",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "6d2037b8-3e6b-41e5-be59-e6f8729a9aa9",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a8d492a-5328-48df-b55b-ae554b4db0c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "09ebef0e-912a-408e-90f2-b9fac2814123"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0747756-ad4b-4ddf-9d19-e9ba13f30712",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38dcd991-4fab-4f3c-ab91-b42f4d3dfaa6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "dc5b4cbc-fe91-448d-b55d-c1697d8cd736",
            "name": "Positive Testing",
            "item": [
              {
                "id": "54d89b16-a6e8-437a-b7c5-32002af7b22d",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "33b65609-1119-4512-bf52-09581900d635",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b90a0f9c-7d85-4178-9007-ba88ae920e6a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "340de3a6-2b1e-4174-8f8f-bde40c75ca5f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e315506e-ee87-4614-bec2-761013ec05a2"
                    }
                  }
                ]
              },
              {
                "id": "e5e169e0-697c-4201-b3c1-a08af0cd81b0",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "36fa1f59-da50-4115-a33f-cb320a9028a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c50898f4-957f-4357-a4e0-1f1900f47083"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9eced5cc-282a-45b6-b8dc-9c214667ba72",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b4261c95-e815-4923-bec5-4840f9b6d044"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "77993009-1a24-422f-a9e6-ec23bc1548d0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "b7a033ac-3f76-4645-ba49-e76d4a696d29"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d905c175-11d2-403f-8c46-65242e36416f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b159ea3f-2bb8-47fe-996b-9335d447f152"
            }
          }
        ]
      },
      {
        "id": "fbebdba7-db2f-464d-a5fc-16681bb6039d",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c7de09c3-e1ed-4c71-9512-e272a76bf11b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bfe1a501-b297-4d78-b669-81bcffcd0727",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e2f9ea50-ceed-4feb-952a-36e9e7c73787",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a64eb16-6ec6-4f2f-b432-a3356003995c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b5f37be1-3686-490e-baa5-746bccb2075d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e78c2741-b966-4c85-af03-32664f9d1053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "25b8f67a-1da1-4b91-bacf-bb2ef6d8967f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e8274854-3358-4cde-873b-29d39ef9777b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bb9cbeea-e106-4814-b676-87e7125952f0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "60358203-efa7-4066-b8d1-606902875b18",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c09120e2-7f50-4d9d-8675-bf519a3acb35"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "708163d2-5034-4008-af0f-a739772d5b85",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "77c2de91-7561-4249-82f8-8ed2ae027bb2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "69d2e760-96b7-4678-b9aa-183f403593d0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6c819326-fd58-4548-a834-d6f3b39ca46b"
            }
          }
        ]
      },
      {
        "id": "8d936b47-f65e-4193-8b3c-e220abab3680",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "4b74ab3e-52fa-433f-b0f6-51ec3fc9d49b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "86c8c81c-4802-4b84-8554-e0d7788d2c9e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fc1f4a44-764f-4a08-a43b-54f7372dacd3",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c021043e-fa7e-4dcc-af53-84cea1f2b90b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "275e1171-2533-49be-849d-c43c5b0777e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91200f29-2cf0-4ab9-b445-eee71cff1075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3bbf5393-85e0-4178-b23b-ba8449e56ad8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f2c62e06-b456-4b47-8a97-d89949b58839",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9acc677f-f1c9-4880-83c6-b4cc5698d45d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "64aeb711-c299-4f2c-94a7-5731b76c55e1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a0dd6b1e-9469-4e5c-86de-ee30ceb5e88e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d2bcef72-e99e-4639-9ec6-d36493c008b6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0d4ef6f0-a209-4187-903a-8a66e48a0b4e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a4f345c3-0476-4ba3-9668-53a39b7e42bb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "92955de6-0c19-423b-b050-a44b062e928b"
            }
          }
        ]
      },
      {
        "id": "19bb4d58-c5f5-41a8-b21e-64d649874d36",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "73ea92e3-e45f-4f1b-aa9e-3a8741f376f6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f633f838-e6dc-4030-9cbd-267637ddca8c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "45f5bbeb-dd72-477c-bb0a-c7931049f2ed",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c33666fb-49e8-440c-a0f0-c0ccab8a91d7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "30e5d88b-fe74-44a0-9a8e-7033330a9b88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b9526fd-7726-4f11-82bf-c2f6ab3fdf77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff820958-552a-4db3-b2ad-21b90aee80be"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ff66578b-9ae8-4486-8b02-16d4115838cb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b78ccb0c-ecce-4e97-84ac-e93d61bccb15"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "76e8958a-b06d-43a4-b57c-b376a2bd9184",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1f951a83-c999-46cb-ae27-05d95fbba388"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1af81b0f-16b3-403f-8529-4edd23a581c3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6e12c0b7-8627-4761-a98e-f36dacd1bb56"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "03858dec-0ebe-4c05-a0fd-e8de1b468fe1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "acb2af3e-3554-46c2-b855-e3c1fc4c48fd"
            }
          }
        ]
      },
      {
        "id": "2ec6bf84-6fbb-48e5-93d2-b681787b5b2d",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "66f9ee07-31bf-491c-a8ce-2f3fed5158eb",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "97ce35c2-215a-4890-80be-d8668c016741",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "d44490da-c44f-405d-b619-67243abfdf19",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "afa6b24b-c441-4d2d-af10-70948897745f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "85be58e4-82b4-48a5-837d-9cae5aae87a5",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 85.67719298245612,
      "responseMin": 6,
      "responseMax": 614,
      "responseSd": 82.08814906356494,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1709166831889,
      "completed": 1709166865916
    },
    "executions": [
      {
        "id": "e96f021e-ffd2-4749-9617-a5614bfa3c70",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "96243ff2-8036-412f-b8a7-cfbd50c8e0af",
          "httpRequestId": "0d779840-5686-4fa6-8c29-090f16882016"
        },
        "item": {
          "id": "e96f021e-ffd2-4749-9617-a5614bfa3c70",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "0c14737a-e253-4ad2-b1cf-e86a8b87fccd",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 0
        }
      },
      {
        "id": "b4f56f49-89ff-4bbc-aca4-753fb8e42fb5",
        "cursor": {
          "ref": "c4b84595-0c82-40f5-9194-7a1ff172ba24",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f08a7e76-23c4-4094-acca-15f093028f13"
        },
        "item": {
          "id": "b4f56f49-89ff-4bbc-aca4-753fb8e42fb5",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "4ff2224f-77ba-4b2c-9c65-9a220f20266b",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "b4f488b4-687f-4a00-bf84-87c09fd1414e",
        "cursor": {
          "ref": "42e1d5ac-39e6-490b-a7f7-476a6dae4fb1",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "182854d1-5238-4f96-8e33-010b953e7c3b"
        },
        "item": {
          "id": "b4f488b4-687f-4a00-bf84-87c09fd1414e",
          "name": "did_json"
        },
        "response": {
          "id": "db2d1351-04ed-4a3c-b0bc-ea73a15bb28d",
          "status": "OK",
          "code": 200,
          "responseTime": 172,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b9a256b-7cad-4dc9-8477-c8acbef47fe1",
        "cursor": {
          "ref": "fcba1c4c-4cf1-424c-83f7-43e5b04bb3d1",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c4556b1e-6ee0-4863-b143-0964ecfeb852"
        },
        "item": {
          "id": "1b9a256b-7cad-4dc9-8477-c8acbef47fe1",
          "name": "did:invalid"
        },
        "response": {
          "id": "e5ceed30-cca1-4619-ba38-ffbc5b8667d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 159,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b9a256b-7cad-4dc9-8477-c8acbef47fe1",
        "cursor": {
          "ref": "fcba1c4c-4cf1-424c-83f7-43e5b04bb3d1",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c4556b1e-6ee0-4863-b143-0964ecfeb852"
        },
        "item": {
          "id": "1b9a256b-7cad-4dc9-8477-c8acbef47fe1",
          "name": "did:invalid"
        },
        "response": {
          "id": "e5ceed30-cca1-4619-ba38-ffbc5b8667d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 159,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "156e269b-bf78-4b36-8c7e-29acfb7f788d",
        "cursor": {
          "ref": "a2ae5411-73d9-45cb-a01b-76da10ef6e36",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e32996bf-c0bc-4d5f-9504-226dca430ceb"
        },
        "item": {
          "id": "156e269b-bf78-4b36-8c7e-29acfb7f788d",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "d98f0126-4363-4697-bdca-2825adc05f63",
          "status": "Not Found",
          "code": 404,
          "responseTime": 206,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d6c3c02-b26f-4fef-b0ad-a55353bf1cf1",
        "cursor": {
          "ref": "3d720447-f117-4fb2-bb45-d0cc24bfb6d5",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "14ccab8d-895b-4c83-8bd6-eb663c129889"
        },
        "item": {
          "id": "0d6c3c02-b26f-4fef-b0ad-a55353bf1cf1",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "34a5889e-0611-4e03-8fb3-5bdb5b1b9169",
          "status": "Not Found",
          "code": 404,
          "responseTime": 57,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b7f751b-8851-48d1-930f-ac3e99f6e8ca",
        "cursor": {
          "ref": "52f95862-86df-49f7-bae9-d765fe2e31e7",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "006b28eb-293e-4179-af95-bc3409e9f550"
        },
        "item": {
          "id": "2b7f751b-8851-48d1-930f-ac3e99f6e8ca",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "24c174f9-9881-4fdd-a4a2-5169c3a3a388",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ce3630f-e730-4a6c-b668-54748a768106",
        "cursor": {
          "ref": "4317f2df-275a-4db1-93fb-a2efbbc7d4a2",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e339d8c3-f6f0-4fb2-ace7-04b88faddc7a"
        },
        "item": {
          "id": "8ce3630f-e730-4a6c-b668-54748a768106",
          "name": "identifiers"
        },
        "response": {
          "id": "f8eb3162-ea7b-4ba9-8cb0-3dbe35c66927",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72ee4b88-e6cc-4b7d-9185-683a953ca422",
        "cursor": {
          "ref": "6fab9fa7-8620-4939-8333-1647f7dabce6",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "9aa80282-8e7a-44e4-a983-5ebce41def02"
        },
        "item": {
          "id": "72ee4b88-e6cc-4b7d-9185-683a953ca422",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "43fba534-3cea-4d13-b428-d066e0f4e76b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24c0c192-a85c-4333-ae93-efb49c590331",
        "cursor": {
          "ref": "1a80045a-1f2f-4bf3-b9a2-8c0a048a3315",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "abcdfb5a-a98a-42e6-aa38-785ecb5fcff0"
        },
        "item": {
          "id": "24c0c192-a85c-4333-ae93-efb49c590331",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "52f96745-de62-4dc9-8fe4-4e9ec96b1fab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bf33359-be6b-4936-8730-bbb2d63afa3b",
        "cursor": {
          "ref": "b5a5d44a-1205-48ea-a194-e750b76a436e",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2cca1ef1-29a5-470f-90da-01f347f6da6d"
        },
        "item": {
          "id": "3bf33359-be6b-4936-8730-bbb2d63afa3b",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "f2accc8c-4ab0-4c7f-8171-fc8fafbac21e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1af91606-fe81-4813-a26b-15b666913d8d",
        "cursor": {
          "ref": "683f4331-518a-4719-b3fe-cd5695b5e9b1",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "9cc646d8-8ce2-41a3-a311-0200a69b4617"
        },
        "item": {
          "id": "1af91606-fe81-4813-a26b-15b666913d8d",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "0c465082-b7cc-4caf-b3fe-c87b3428991b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb5183be-8c91-4fb4-8e04-c43387b73670",
        "cursor": {
          "ref": "236086c1-6795-4a00-8bb0-8c721ae741e7",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2543867c-ff1e-4c7d-8ac0-412141e3b176"
        },
        "item": {
          "id": "cb5183be-8c91-4fb4-8e04-c43387b73670",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "729ce9d6-acb8-42b9-a7fa-975aca8f585d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9619533-e069-420f-96dc-1aa3b1a5228a",
        "cursor": {
          "ref": "c41f259a-81fb-4903-8f31-d3be7b349f65",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d3e055c4-b89f-4fcb-a267-ea35c6240aa1"
        },
        "item": {
          "id": "f9619533-e069-420f-96dc-1aa3b1a5228a",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "912d30eb-51c4-4df8-bf9f-8b897af6fde2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de0aad65-d866-4d25-8823-3fdb48eed0ea",
        "cursor": {
          "ref": "50089e26-8ef2-4a7d-93d2-98da5091acf1",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "1fa0c8a0-a751-4575-9757-711daacd2f91"
        },
        "item": {
          "id": "de0aad65-d866-4d25-8823-3fdb48eed0ea",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "3062c10b-86d1-4830-8279-8bfbe9bf8822",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46380e2e-08fe-4d61-a354-206a002c64f8",
        "cursor": {
          "ref": "f6cea81a-adca-4878-a866-7f2ec4a7cea3",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "737ebe32-fbdd-4c3b-a10a-675e5638575f"
        },
        "item": {
          "id": "46380e2e-08fe-4d61-a354-206a002c64f8",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "60c5a324-1399-48d6-b2a5-0fe6680e4d55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f864864-5d21-4268-93bf-becc86cd58a3",
        "cursor": {
          "ref": "551a43f8-3486-4701-bf65-d72cf6df2062",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0c294be5-0024-4461-9eb5-3d461ba0967c"
        },
        "item": {
          "id": "7f864864-5d21-4268-93bf-becc86cd58a3",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "9af3991f-8cda-4101-9385-dab7957f5690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8f89916-aeea-41a2-a9bf-5cb263bbb084",
        "cursor": {
          "ref": "66091461-00c1-4f6c-922f-5833d15785f4",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "d59109cc-e8ea-4700-bb04-b018e61dce78"
        },
        "item": {
          "id": "d8f89916-aeea-41a2-a9bf-5cb263bbb084",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "a77cfcff-bd33-465c-9629-9ddcb6d0b132",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c110cfd-3214-4eb6-882b-cebde928723a",
        "cursor": {
          "ref": "80fd4470-c53a-4ee6-af2f-7939b2622e07",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "20bd65ef-7b04-49e0-b25e-b155cfa0a6ed"
        },
        "item": {
          "id": "0c110cfd-3214-4eb6-882b-cebde928723a",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "9f1d9b76-416e-481a-93df-c0833798ef14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "361616d1-8d16-4618-9f6a-067a771abfe0",
        "cursor": {
          "ref": "b789ec05-4117-4033-a7cb-91d79beaef65",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "acc1c6a8-fed6-47e1-91e3-ae17c5bb7a22"
        },
        "item": {
          "id": "361616d1-8d16-4618-9f6a-067a771abfe0",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "c48f414a-7851-4cfa-aeca-5672e449719a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a95fd98-7ff3-4c34-8173-742c4ae3a795",
        "cursor": {
          "ref": "ec8d8178-d644-41f4-9f82-71efea32eb9a",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "815962cc-942d-4ee6-8293-6df44a7f42b2"
        },
        "item": {
          "id": "2a95fd98-7ff3-4c34-8173-742c4ae3a795",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "fffc3a38-6ac3-4ad2-b31e-17cafcf0c956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f2769e4-c68b-401e-b64e-a0fabcf2fc5a",
        "cursor": {
          "ref": "d0759374-c965-4f53-8fd7-7389d261ac7c",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "4246a1bf-9056-47f8-9005-4a7a02c4bfeb"
        },
        "item": {
          "id": "8f2769e4-c68b-401e-b64e-a0fabcf2fc5a",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "4d863596-c2b1-493c-bda0-e639adb1d31b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "621429c0-1b00-4595-ab37-fc6531a98d18",
        "cursor": {
          "ref": "c25035f8-f175-4cdf-bd64-386533777014",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "4a1bfbef-a380-40ff-b5b9-08d46f2ab4b7"
        },
        "item": {
          "id": "621429c0-1b00-4595-ab37-fc6531a98d18",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "9b803281-74ea-4828-af29-9bcd249a6376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27e1a1ba-ebb5-412b-b392-035b40633d7e",
        "cursor": {
          "ref": "9cffa199-76de-488b-bc00-50fbea608d76",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4a91ec90-dc46-45df-943a-0506ff9d6a6c"
        },
        "item": {
          "id": "27e1a1ba-ebb5-412b-b392-035b40633d7e",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "ea36aebb-6f63-4c06-b7d3-84566ba4aa3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52983eb0-f267-4db0-ab0d-b81aedd666ef",
        "cursor": {
          "ref": "231300e9-62b0-40ec-9ef1-aced4537c940",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "4d8afc02-a00b-4284-9b9a-6e8064aabe20"
        },
        "item": {
          "id": "52983eb0-f267-4db0-ab0d-b81aedd666ef",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "becabba7-66e0-4c39-affa-df3d757d909e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc73eb2a-892e-4509-b364-e0b1c03dbedd",
        "cursor": {
          "ref": "fe1bcbf0-f747-4bfa-87ae-9e2c33824c5d",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "d97bc42a-559f-4e10-95c8-8b7704025aac"
        },
        "item": {
          "id": "cc73eb2a-892e-4509-b364-e0b1c03dbedd",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "4212f31d-143d-476e-92d5-2a79292ca7be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "796c15cc-7f27-45d8-bc0c-a4015b86d470",
        "cursor": {
          "ref": "eea704e3-b79b-4dc5-91b0-49f316ff6d2a",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "0ce75da8-72bd-4e28-be63-39961121be48"
        },
        "item": {
          "id": "796c15cc-7f27-45d8-bc0c-a4015b86d470",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "f0ce942d-896c-44a8-8863-3b646dce41dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf283050-14af-49be-946e-54d40b0c933c",
        "cursor": {
          "ref": "5ed6245c-0f2e-472d-9fef-aa4e300b2cb3",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "4af65ece-a605-48e7-bd47-e97dae39b0ab"
        },
        "item": {
          "id": "cf283050-14af-49be-946e-54d40b0c933c",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "866eb2ff-bbc6-42ac-82ee-73023ebb94a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79f5e1a7-f58d-4d20-9aab-67ecda8af0b8",
        "cursor": {
          "ref": "380e18b2-5d81-4c43-92b1-746f7bcb094a",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "db5bd976-4370-42ee-a704-35b662aa0a57"
        },
        "item": {
          "id": "79f5e1a7-f58d-4d20-9aab-67ecda8af0b8",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "7fe4ff87-d9a3-4b8e-9c08-a18951c87864",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c25ab1d-d78c-4872-bf8e-ad1d9ab0dadc",
        "cursor": {
          "ref": "d33f395c-310f-4967-aad9-2c9f3c15ab9e",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "7470b059-1627-4c63-8a5f-20a6132b6011"
        },
        "item": {
          "id": "8c25ab1d-d78c-4872-bf8e-ad1d9ab0dadc",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "28da955e-8d72-4dd2-8866-3262afa7bcb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fd85d7e-389d-4bf9-8bf3-b9308cd035c9",
        "cursor": {
          "ref": "33d58622-6acc-45dd-876f-821fc08d4d31",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "748eee24-4618-41a2-9061-40093b074de2"
        },
        "item": {
          "id": "0fd85d7e-389d-4bf9-8bf3-b9308cd035c9",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "a1b4dbff-c029-47de-a4e4-c274f94bf683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e57d3b4-4e28-44c8-b47e-e1bf9fef8650",
        "cursor": {
          "ref": "15540feb-b754-4f02-be31-8c822efa46ca",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "bc355a71-1122-4a1c-87fb-c02fa9df19a4"
        },
        "item": {
          "id": "0e57d3b4-4e28-44c8-b47e-e1bf9fef8650",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "bb4671fa-1605-4ab4-bf20-25767f195ed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8948495-5fcc-4c96-adb2-1a4adc5256f6",
        "cursor": {
          "ref": "b2b5b632-6b88-4b4c-9be5-ac4dbdd3cadc",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "df390dc8-831d-44b4-8ebc-1582aa96a6d3"
        },
        "item": {
          "id": "b8948495-5fcc-4c96-adb2-1a4adc5256f6",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "8e015c09-c3b4-444d-9c63-4b9884c9df4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d8e7a4d-80d6-412c-bb0c-fcf994c96d2c",
        "cursor": {
          "ref": "c4477147-237d-440e-b9f0-9a4e8501a4b4",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c35021d3-41d3-4ebc-a900-befa5344c613"
        },
        "item": {
          "id": "8d8e7a4d-80d6-412c-bb0c-fcf994c96d2c",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "273aa3e3-b136-4cb4-ba16-16ccc7ff7f48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69aa00fb-190b-43b8-bde3-804d2f7ba578",
        "cursor": {
          "ref": "70d810ad-1cf8-45e3-a139-34c675c2664f",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "b08267a5-80b1-4037-9d02-08acbdd9fa71"
        },
        "item": {
          "id": "69aa00fb-190b-43b8-bde3-804d2f7ba578",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "10597d37-de35-46f5-af09-ea0ad834550a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08de9f44-5553-49a4-a760-310c9e3747a3",
        "cursor": {
          "ref": "8b9833c1-8860-4b85-8f65-0f420f45446f",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a8d37fc4-1574-4bef-9216-ae11c21e1be4"
        },
        "item": {
          "id": "08de9f44-5553-49a4-a760-310c9e3747a3",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "c1d6c62d-c6bc-4adb-8738-38822f19dad0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68880f72-e2cb-4ee8-b8e7-5e044965ef26",
        "cursor": {
          "ref": "2846f536-ca77-431c-ab16-31fd96687320",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "7110b662-6a41-4526-886f-b765577db73e"
        },
        "item": {
          "id": "68880f72-e2cb-4ee8-b8e7-5e044965ef26",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "48105d6d-68e4-48a2-a2bc-a47c88732d8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b1794b3-938f-45bd-b2a2-3deea6301071",
        "cursor": {
          "ref": "67d7c8d7-db61-4d16-a330-275fc7ff5059",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "73604a74-404e-47c1-8da5-4299efe2dd37"
        },
        "item": {
          "id": "3b1794b3-938f-45bd-b2a2-3deea6301071",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "9633e1c8-8823-4d4c-8715-d6cbfe7d9836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19af25c4-7af5-43dc-8244-5d517d386e5a",
        "cursor": {
          "ref": "bc11ad49-c8f4-44a2-87fe-5cb9a7a99265",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "2d31ec2e-2fa5-4ac4-9794-db47ed5e7684"
        },
        "item": {
          "id": "19af25c4-7af5-43dc-8244-5d517d386e5a",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "bc7ca210-5f57-4545-806f-ba5243273fb1",
          "status": "Created",
          "code": 201,
          "responseTime": 614,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "d2c865f7-99a7-4ab5-82e8-f4af0a7d47b9",
        "cursor": {
          "ref": "4b189d47-d664-4c65-bed4-54c33f37f82e",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "fd19c809-b68b-47da-bc88-1bf7525ebefe"
        },
        "item": {
          "id": "d2c865f7-99a7-4ab5-82e8-f4af0a7d47b9",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "6ade8857-1d5a-4f48-80af-a0db5be29aab",
          "status": "Created",
          "code": 201,
          "responseTime": 383,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "5ead48a2-92c3-43fc-bcd6-a683c5b51c09",
        "cursor": {
          "ref": "cd3acd22-6067-4ef3-b4b1-67c964e0cf73",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "53375cd9-6b66-48e3-8bf4-5683b88c6b1e"
        },
        "item": {
          "id": "5ead48a2-92c3-43fc-bcd6-a683c5b51c09",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "7013deb4-6be4-47c1-9aea-81bf7e94d938",
          "status": "Created",
          "code": 201,
          "responseTime": 327,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "dd38f0a6-c82b-4cc3-985e-66befb4b2d65",
        "cursor": {
          "ref": "775d8a93-2e87-4b25-8566-74b423fbf0fa",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "1a82e7c6-920d-4960-9bcf-d399827b424c"
        },
        "item": {
          "id": "dd38f0a6-c82b-4cc3-985e-66befb4b2d65",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "082b05fd-6571-4528-80ec-b37656f893e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6198aaf0-fc02-4658-a2f7-bb893391417f",
        "cursor": {
          "ref": "f7ca7401-275e-42f2-9f09-6f52a80cb3b0",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "fec3b6fa-cf8e-4e94-8fec-eeba81896dc3"
        },
        "item": {
          "id": "6198aaf0-fc02-4658-a2f7-bb893391417f",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "e14d7150-7dc0-4c1e-b98a-441b8c2f347d",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "1196524d-310e-4139-9493-0ee8ca15ec25",
        "cursor": {
          "ref": "537b01cc-6d20-4daf-a25f-85cd5a37cb36",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "9917654b-62aa-4ce9-abce-50439b2a2390"
        },
        "item": {
          "id": "1196524d-310e-4139-9493-0ee8ca15ec25",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "b92f086c-e281-4cf4-bcdd-9d82211383d2",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "f9f43409-c1a8-46dd-be37-eb7bfb04ab77",
        "cursor": {
          "ref": "ad43490d-29b9-413e-9cd4-80116b7d5d5c",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "02a67cab-fc80-442a-9390-b2a1544e1bb3"
        },
        "item": {
          "id": "f9f43409-c1a8-46dd-be37-eb7bfb04ab77",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e3577cb9-cea8-4892-ad21-62e912875a09",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "86c40b8f-2167-4a12-9a6c-4641fca06964",
        "cursor": {
          "ref": "762fc30d-2d65-4e5f-96f4-71af29827696",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "4b1edcb4-79be-4c1d-a074-f2428716eb63"
        },
        "item": {
          "id": "86c40b8f-2167-4a12-9a6c-4641fca06964",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "a6c65d18-2105-41c2-8cb8-615d353dd333",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "773ad3fd-7d88-4f44-8f22-55e6a3ec2b21",
        "cursor": {
          "ref": "84a30bcb-bd9c-47c5-b47f-c782aa0430de",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "2cca212b-9f26-4852-89b0-c2b87b289912"
        },
        "item": {
          "id": "773ad3fd-7d88-4f44-8f22-55e6a3ec2b21",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "3b005949-f816-4d57-a35d-df3aa4e6b390",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "96ad175b-565b-4397-a61e-592869ca3d66",
        "cursor": {
          "ref": "f459ea66-dd0d-4632-b57b-af63aefcc57e",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "5a920bca-3c00-4095-9cd5-cc191ef5295c"
        },
        "item": {
          "id": "96ad175b-565b-4397-a61e-592869ca3d66",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "db50f503-eff5-40bb-8503-1cd7067aa1f3",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "54c6e065-0b13-42fb-8c8a-8d93cfc5a607",
        "cursor": {
          "ref": "5b68fa29-1a49-4a21-96bb-b0b9a03ab8ef",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "660daae1-97df-48b1-a4ee-1e83350feeae"
        },
        "item": {
          "id": "54c6e065-0b13-42fb-8c8a-8d93cfc5a607",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "9e45b408-c271-4d3b-bcf8-888b4fb7d55a",
          "status": "Created",
          "code": 201,
          "responseTime": 364,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "9d506012-a820-45bd-a0bb-51d5898e139f",
        "cursor": {
          "ref": "bfc4c594-9704-4522-a644-3ac05f2cd1e9",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "6f097da7-c2b3-42fb-a5cb-20abd75c2173"
        },
        "item": {
          "id": "9d506012-a820-45bd-a0bb-51d5898e139f",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "2991136f-3440-4e76-8ffe-8117a5ef3dd9",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "d42c9671-849e-4dbe-9d70-598cd22dd074",
        "cursor": {
          "ref": "22b4b1f8-2f60-4d5b-af35-b2ab6ebcf618",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "462fd870-2d62-449e-961e-6b165f88d45d"
        },
        "item": {
          "id": "d42c9671-849e-4dbe-9d70-598cd22dd074",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "bf9e801e-8a27-4bc5-8e00-8da86f15d78b",
          "status": "Created",
          "code": 201,
          "responseTime": 327,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "693ae767-a79c-40f2-8dff-7ec1232c862d",
        "cursor": {
          "ref": "5109c745-28d0-45bf-a0aa-b14a2e601f04",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "fb5cda04-8568-4a4a-9bb8-0ce8824a2c4d"
        },
        "item": {
          "id": "693ae767-a79c-40f2-8dff-7ec1232c862d",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e8b0ec0d-6634-436a-9692-6f186982e11b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27fec942-dd80-43ae-84de-f154be2726f4",
        "cursor": {
          "ref": "be3f1bd9-713e-4e9b-88fe-4342dadb3d0f",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "fd824740-2993-4de7-a5d1-da5623bad870"
        },
        "item": {
          "id": "27fec942-dd80-43ae-84de-f154be2726f4",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "178bd2b3-5dfa-4f9d-830c-0fe0fee762f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97158226-ef4a-43e3-97b9-b0fc1c55e4ef",
        "cursor": {
          "ref": "8b735796-babb-429e-82bc-a9b1c5f73b52",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "6f3732f9-da29-4715-9983-efdf7751406a"
        },
        "item": {
          "id": "97158226-ef4a-43e3-97b9-b0fc1c55e4ef",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "ecee4f98-4a95-481b-b2b6-d256440967fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25cb3ca3-cf2d-4a1b-93ef-a0476b21a410",
        "cursor": {
          "ref": "1d942690-ff7e-476f-beef-fa34481cb6d3",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ec7e81ac-65e8-42f7-b503-01a9fe8eaa8c"
        },
        "item": {
          "id": "25cb3ca3-cf2d-4a1b-93ef-a0476b21a410",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "757c70d0-019c-4ea8-ae1a-57749003289b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "100bb161-f5ed-4c0f-b765-c7334cb4e0d0",
        "cursor": {
          "ref": "4698654b-5763-4867-8e69-acfd004f0a51",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "39a23350-e4d2-4f8f-9d61-69e17f030305"
        },
        "item": {
          "id": "100bb161-f5ed-4c0f-b765-c7334cb4e0d0",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "af494a95-9317-4894-a4eb-9fd53f064b1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42aab725-cea3-49d5-948c-a8244d802ce3",
        "cursor": {
          "ref": "3eeb683a-3689-411d-b1f2-034737b7549f",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "8990fd3b-8632-471e-ae57-ed0f5c215a7e"
        },
        "item": {
          "id": "42aab725-cea3-49d5-948c-a8244d802ce3",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "10746caa-ad97-4ba2-b779-48f5e3a11611",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8186243a-86d3-4930-bfff-2b925adfbca9",
        "cursor": {
          "ref": "53d0a2ff-c8c1-49d2-b894-6716df08180a",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "71c2ee81-0cc4-4416-9e59-5d007899add1"
        },
        "item": {
          "id": "8186243a-86d3-4930-bfff-2b925adfbca9",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "2d77f5f7-c5be-40fd-8bf4-3ecef16f67e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fbec42a-d5fc-44f4-979f-51cf6af0f479",
        "cursor": {
          "ref": "d2ff732e-7998-4156-ab65-6c084ff3ef8e",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "93614fcd-8279-499d-b7d0-89e7ea0d21d9"
        },
        "item": {
          "id": "7fbec42a-d5fc-44f4-979f-51cf6af0f479",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "5f07f901-4390-4326-acbc-f1b5e6bdb943",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ba331ce-0fbe-4dea-8b3c-a1572f00ecfb",
        "cursor": {
          "ref": "0d62f71f-b1fa-4c0a-96f9-1b03a68620a8",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "089e5d91-d938-4247-9525-cd3173aa24be"
        },
        "item": {
          "id": "6ba331ce-0fbe-4dea-8b3c-a1572f00ecfb",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "8af76bcd-73a4-4b2a-8eb5-82dcbce59f3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90c894db-da4f-42fa-987b-413b5213ddd1",
        "cursor": {
          "ref": "9933426c-f519-4823-8bf2-30f6a2284cf2",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "3e038433-97fb-44af-ad0e-a17bffd1cad2"
        },
        "item": {
          "id": "90c894db-da4f-42fa-987b-413b5213ddd1",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "e5ed2d13-5f27-44c3-a9d2-5045315ac7fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8899be14-5fa2-42ba-9f9a-241a0a8082b5",
        "cursor": {
          "ref": "da6a14fc-7261-4f52-ba2c-148215b62ab4",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "f58b0e5f-70d7-497e-a067-c956ac22b4d6"
        },
        "item": {
          "id": "8899be14-5fa2-42ba-9f9a-241a0a8082b5",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "1701c92e-8f26-42ba-98ab-693e32e9cc63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d27f6a6-0912-41a3-ae6c-596e592748b2",
        "cursor": {
          "ref": "b70b4bc5-b5c1-483a-8a9e-6395952a13b5",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "8adfe588-a96b-4d4a-9371-0bb3e7e05efc"
        },
        "item": {
          "id": "5d27f6a6-0912-41a3-ae6c-596e592748b2",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "3cb9ad53-9799-4183-b7a1-1e6ad0a1908b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ced6db5-ad1f-4c2d-8bd9-7f2aac460225",
        "cursor": {
          "ref": "a18b8f61-a489-41bb-a5d8-e622df3c4876",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "e2aa4c27-2a3a-47aa-9d61-db40cb2883ce"
        },
        "item": {
          "id": "4ced6db5-ad1f-4c2d-8bd9-7f2aac460225",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "0c0c2a25-9865-4680-b4cb-9a259b0e9d13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c5d93a0-34c5-4c6e-8c8a-6ca7573c2a6c",
        "cursor": {
          "ref": "00a1972e-c904-4dbe-9c7e-72723623e73c",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "32728396-62ea-4dca-bf15-50d39cdb37df"
        },
        "item": {
          "id": "2c5d93a0-34c5-4c6e-8c8a-6ca7573c2a6c",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "00e1696d-d633-4b14-bfcc-30f58b73fc40",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "b366b31c-6daa-4e8c-afbd-ce3464890a25",
        "cursor": {
          "ref": "bf5aa3a4-271a-4f3f-9a27-c89a503134f8",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "7917c3dc-dec4-497b-9f58-44c5a0816e8b"
        },
        "item": {
          "id": "b366b31c-6daa-4e8c-afbd-ce3464890a25",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "cc4d3072-b4b0-49fe-bb78-2bdf3f6cd9af",
          "status": "Created",
          "code": 201,
          "responseTime": 358,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "975336c8-3ca7-4892-a225-bc8ae721fb40",
        "cursor": {
          "ref": "efa31014-82fb-4c6a-ae16-8fd93bf7c1b0",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "5d4c35eb-0cc2-4e4e-be34-0184a56dfc20"
        },
        "item": {
          "id": "975336c8-3ca7-4892-a225-bc8ae721fb40",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "ac7121e5-6c93-433c-b5cf-0308236fb98e",
          "status": "Created",
          "code": 201,
          "responseTime": 340,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "ad4793a0-036c-4dbb-829b-3ad5f9fe0c0c",
        "cursor": {
          "ref": "ebd3e941-9fa1-4b06-bfa9-a746e3204a9b",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "17e3275f-a352-459d-9df9-8f6a6370a876"
        },
        "item": {
          "id": "ad4793a0-036c-4dbb-829b-3ad5f9fe0c0c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "2a737b61-37e4-480e-815f-4a1692aeafe4",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "72436be1-cb16-40a4-8222-a763a19e895e",
        "cursor": {
          "ref": "686752c0-c603-4d68-817a-16656b932dd1",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "f24da4d0-1606-4db4-8664-71a503a55cba"
        },
        "item": {
          "id": "72436be1-cb16-40a4-8222-a763a19e895e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "6391b220-a751-4a6c-a67d-a1000c21a1b9",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "a36c1160-9b18-4db0-8eca-7bb81b56ac56",
        "cursor": {
          "ref": "b84e4a0c-d266-4a6b-b1bf-49ff8967545f",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "5eba6289-16dd-49b8-af83-9541655a260d"
        },
        "item": {
          "id": "a36c1160-9b18-4db0-8eca-7bb81b56ac56",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "18451afb-54d9-4233-bfcb-c7e2cd419495",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba1e5980-7724-4317-9699-e2804908ee39",
        "cursor": {
          "ref": "4993b8d6-ef76-4543-9006-d49c6a42229f",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "87835dc2-341d-4e02-8406-8019e05c9a6e"
        },
        "item": {
          "id": "ba1e5980-7724-4317-9699-e2804908ee39",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "623f0f72-3cec-4386-87de-cc65ff68d5de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7a9d527-6851-4151-98e7-35f8e78bb4c2",
        "cursor": {
          "ref": "55648ffa-cd56-490c-9b4c-79b3dd845c7b",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "6998c5f1-8766-416d-a9ef-60d30eb858a1"
        },
        "item": {
          "id": "b7a9d527-6851-4151-98e7-35f8e78bb4c2",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "34c7f8b7-8f68-44c8-815f-58dede0f8f46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84613328-fca9-4b11-a4ab-0c9f20df5f00",
        "cursor": {
          "ref": "82e78981-b9da-4b7d-80fc-a642ffcf4f6d",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "709ac41f-2213-4da2-a73e-abec96d4b10f"
        },
        "item": {
          "id": "84613328-fca9-4b11-a4ab-0c9f20df5f00",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "84ec8ba3-64f7-423c-8184-56df212c49fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf99fc6d-a5ef-491d-9a42-fbe37bf6548d",
        "cursor": {
          "ref": "4041a6dc-0249-441a-a775-8d92235ad280",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "452395b3-a98e-407c-83aa-4f59d92a35c6"
        },
        "item": {
          "id": "cf99fc6d-a5ef-491d-9a42-fbe37bf6548d",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "a908b5c7-9bd3-46c6-b00b-cc271e755b4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b444f22c-e0b2-45f1-9891-13184c28671e",
        "cursor": {
          "ref": "4b55eaa8-f50d-4c33-beee-d29fc86337aa",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "9a98145a-1d34-47ac-bc66-9a5049363322"
        },
        "item": {
          "id": "b444f22c-e0b2-45f1-9891-13184c28671e",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "8f3e9e6d-d5cf-4374-b8ac-70cb430cca8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2ea96ff-7b9b-413c-bb01-86d3de590d8a",
        "cursor": {
          "ref": "f6789091-9794-46db-87cb-227c69eba4ce",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "83b1f291-dfd0-4ed3-961f-716418f6ab66"
        },
        "item": {
          "id": "b2ea96ff-7b9b-413c-bb01-86d3de590d8a",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "5eb240f0-a5f5-4d3d-8419-40f4b817f151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "323c9216-7c3e-41de-93f0-d8757a072a5d",
        "cursor": {
          "ref": "75f0b7ba-25e6-4dee-9379-b79ea716b0fd",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "1d58cede-018a-4b60-b77a-51a23397d83f"
        },
        "item": {
          "id": "323c9216-7c3e-41de-93f0-d8757a072a5d",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "a772e781-5628-4c22-9b05-9036ec05d85e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "969ec1ef-b134-40e0-96bf-4f6bdf4ed97a",
        "cursor": {
          "ref": "dea64e1e-5d14-496e-a7c4-c50b8a3f4ae0",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "5f62e825-7a4b-4fc2-95fc-f826b2c9f40e"
        },
        "item": {
          "id": "969ec1ef-b134-40e0-96bf-4f6bdf4ed97a",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "6cb0dcc3-e6b0-43f0-ae34-71b8c8b1d382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cab818f9-0473-41c0-b861-f0a77a028cb7",
        "cursor": {
          "ref": "a224684b-9980-4fd0-b3c3-869313714dc6",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "8b45d9de-6061-4444-8fb3-f22b7dd1a6a3"
        },
        "item": {
          "id": "cab818f9-0473-41c0-b861-f0a77a028cb7",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "e39d3c38-1d49-45df-b7fd-fdd0cb64f292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c687c0e-e6cf-441d-93b7-2c80b5fe4295",
        "cursor": {
          "ref": "0bfe7711-1880-4b87-82b7-9e5fc15a60b6",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "f391ccd8-a36c-4b07-a6af-79aa94f6b244"
        },
        "item": {
          "id": "2c687c0e-e6cf-441d-93b7-2c80b5fe4295",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "92785a22-f569-44b2-9727-98b36567c2a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e346a0f6-67fc-495c-bd33-6a91a2004078",
        "cursor": {
          "ref": "cca75424-3add-48f7-bcfb-76c6bcf8fbb6",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "777d937b-b12d-4c32-8f94-fbccc8b3cfb1"
        },
        "item": {
          "id": "e346a0f6-67fc-495c-bd33-6a91a2004078",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "b2735fd2-6c63-4307-babf-273e08aeec9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 138,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d626114-44df-45a2-b6ec-0cc8d6921018",
        "cursor": {
          "ref": "e221b601-f98c-4d18-a1f6-34c6221f47af",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "5bf0328b-d4c1-41cb-a825-2037b343513e"
        },
        "item": {
          "id": "4d626114-44df-45a2-b6ec-0cc8d6921018",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "ff26933d-e713-4317-b0b4-61b265915c38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32a2b9ca-a392-498c-b768-ce1efc9fa29a",
        "cursor": {
          "ref": "0d260a77-e787-4156-a7fb-d6daf0ee1f10",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "cf97f89f-e9d8-49e1-b630-a296ad8f448a"
        },
        "item": {
          "id": "32a2b9ca-a392-498c-b768-ce1efc9fa29a",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "37fe96ad-e902-4a61-bc02-5c80c821c505",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "357d18e0-8b12-427f-a381-0500be41b403",
        "cursor": {
          "ref": "fec69612-32e7-4b3c-9cef-4c63a21b6e4f",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "73456735-8af7-4e16-995b-78cb4b85618d"
        },
        "item": {
          "id": "357d18e0-8b12-427f-a381-0500be41b403",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "a8aa6e78-c6ad-4833-88e6-39f958b89a88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e52700d2-0ef1-4a79-85ff-6f3ab2d9daac",
        "cursor": {
          "ref": "712813a3-96e7-44b8-9e69-ad3d6aa360f3",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "139ba4f3-1031-4780-93d9-0442ebc3fe29"
        },
        "item": {
          "id": "e52700d2-0ef1-4a79-85ff-6f3ab2d9daac",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "8a410301-50d4-4255-abe0-3c6952c89fb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a2e7f1e-ae63-4b1f-a003-98c448bb2834",
        "cursor": {
          "ref": "8b937734-1548-4097-ac6c-b9e4a867a43b",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "dea8c045-900b-49a6-8572-0d122fc2fe06"
        },
        "item": {
          "id": "8a2e7f1e-ae63-4b1f-a003-98c448bb2834",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "e20fe93a-2836-4d29-9b61-e684e3c410f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16bd8d52-f8f5-45f6-9e23-f0d793e81a36",
        "cursor": {
          "ref": "1de1d0a4-c53b-4b4d-8f71-62799e36285e",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "d7f145a6-7432-478c-8c01-135b09dd07cb"
        },
        "item": {
          "id": "16bd8d52-f8f5-45f6-9e23-f0d793e81a36",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "07d69cd5-4f70-476b-94da-41b4e2ab2e97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "566cdce8-138c-4a3b-b356-cdd1bbaf02a7",
        "cursor": {
          "ref": "a6c9b15d-4b6d-40fb-ad11-58487d72e5bd",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "6388ffa5-3144-47d6-b5d1-c1b6dd1f62b8"
        },
        "item": {
          "id": "566cdce8-138c-4a3b-b356-cdd1bbaf02a7",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "bf629781-be50-42ba-94d9-e5ae4d6f0434",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffea9e3c-0eeb-485f-97c7-c26ca2466930",
        "cursor": {
          "ref": "221ecb6c-a3de-497d-9796-0bcf280176c2",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "7c578425-9956-44c1-a46a-4fa1c392a79e"
        },
        "item": {
          "id": "ffea9e3c-0eeb-485f-97c7-c26ca2466930",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "de80d30e-0400-47af-8fe4-ce5048367415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24818a52-a6c0-4be8-8412-5319ed676cc8",
        "cursor": {
          "ref": "6214bd2d-ab2c-4a29-bf86-04c0e58df0e8",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "e8c2a171-3b6d-44e1-8cb1-b4586329f069"
        },
        "item": {
          "id": "24818a52-a6c0-4be8-8412-5319ed676cc8",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "e9f0a433-f9c6-43b3-8070-5d6f8dcd98c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b92f2718-f5aa-42ed-8e77-40f60dc6cc85",
        "cursor": {
          "ref": "5adcc6de-c0e3-4825-a3a7-086cafd5881e",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "c2e231a3-d169-4c9d-ac1e-02390d815136"
        },
        "item": {
          "id": "b92f2718-f5aa-42ed-8e77-40f60dc6cc85",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "12734626-ed86-4baf-a3e6-c3cf67671772",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c49f4bce-6458-4bad-9209-d216ed05847a",
        "cursor": {
          "ref": "fbf1884f-9dd6-4185-9c6d-40e84507cbb9",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "544faa19-d762-4c4e-b17c-5b375e31cc97"
        },
        "item": {
          "id": "c49f4bce-6458-4bad-9209-d216ed05847a",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "194d26e3-e2b1-45d2-90f5-9306cc7df042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5a84f8b-5eea-47f1-bebd-9492552b2993",
        "cursor": {
          "ref": "db1cf2bf-c6da-4958-bbfc-7742d9564081",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "721d72dd-53b6-45b8-8515-5ee502b328cb"
        },
        "item": {
          "id": "b5a84f8b-5eea-47f1-bebd-9492552b2993",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "8c92265d-6e80-407c-bd56-bbd05b77d1c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f7b752-cf8e-4c92-bac1-f31b73b57727",
        "cursor": {
          "ref": "2039c88a-739b-40cb-9b48-3b81d9f123eb",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "860dcdca-01ca-4593-8f78-07ef98fda2e2"
        },
        "item": {
          "id": "50f7b752-cf8e-4c92-bac1-f31b73b57727",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e0cee855-a0bc-4425-bd5a-e5b2be40e82a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4826212b-630d-4426-b3d2-e131cd1f9718",
        "cursor": {
          "ref": "f213d212-7836-4778-bd7b-b2683f8ab48e",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "fc066f82-fff8-43b4-8b93-ea9a16fc3845"
        },
        "item": {
          "id": "4826212b-630d-4426-b3d2-e131cd1f9718",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "75ad8884-127b-4f7a-ac04-11adbfad9581",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ad46f10-e0eb-4ff6-bef0-081491da9e40",
        "cursor": {
          "ref": "cd49f0a7-54bf-4d90-903c-e5f5e20849e6",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "4dc2792a-6883-404d-8030-d666a99035b2"
        },
        "item": {
          "id": "4ad46f10-e0eb-4ff6-bef0-081491da9e40",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "c530a90e-c6f0-4bd1-b7e1-0b6b53243534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ffde70e-7b14-4aaa-8be0-6a350a75c67d",
        "cursor": {
          "ref": "06c72a1e-ac1d-4cc2-8d3c-831fe17f726d",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "ed34b4b7-12f5-407c-9e5f-290c33abc627"
        },
        "item": {
          "id": "2ffde70e-7b14-4aaa-8be0-6a350a75c67d",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "31d3bb00-f403-4177-bdce-a6b054d289fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40961242-4f13-46a5-9147-a9fb187d8b61",
        "cursor": {
          "ref": "842ea5ea-3264-4a7e-a78e-6ca62dda6d57",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "8cbac0b8-26a3-4411-bb48-546762e4d925"
        },
        "item": {
          "id": "40961242-4f13-46a5-9147-a9fb187d8b61",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "d4d0a99d-d9a7-416d-8e92-af40d94db4f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0f3a247-3335-4e6c-b6b3-83a943199ce2",
        "cursor": {
          "ref": "1474c091-c791-4528-9482-ea33bb8df74e",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "9fa290fc-5366-40ab-8d40-6b7642c28f67"
        },
        "item": {
          "id": "a0f3a247-3335-4e6c-b6b3-83a943199ce2",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "a4782aaf-5259-40a6-8d67-44d2f8fca1fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9677b7e-f8a6-4ece-ac3f-b89ff092706b",
        "cursor": {
          "ref": "d20e9b5f-d417-44d2-87e8-3d75becfdab4",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "238d4dcb-1aa8-41b4-9dda-25e2ef16aa9e"
        },
        "item": {
          "id": "b9677b7e-f8a6-4ece-ac3f-b89ff092706b",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "c9ab4336-2e8d-4aa7-b265-1bc416683223",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f7344ff-30d1-428f-9c94-b6eb88e5c707",
        "cursor": {
          "ref": "a27ea6c3-3f7f-430a-9936-38facfcc71c7",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "1c183bf7-405b-4f0b-89c6-308d122a3316"
        },
        "item": {
          "id": "2f7344ff-30d1-428f-9c94-b6eb88e5c707",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "c96fa94f-3c08-4f2e-bbeb-fe769b062a90",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f33b085-69d3-4acf-a1c9-baaadae55759",
        "cursor": {
          "ref": "239c65ff-4df5-48dd-bf97-4f7c5951545a",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "688d766a-f380-402c-a484-5fc56b351875"
        },
        "item": {
          "id": "1f33b085-69d3-4acf-a1c9-baaadae55759",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "f3337176-8938-4c4f-a686-8fb4c407d29a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "18f29c7f-dc3a-41c3-a885-8c8a63867444",
        "cursor": {
          "ref": "50cb3564-e874-4371-9c4a-bad7b528d622",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "5c7ce994-e71b-4b06-a2ff-ccb0bb613610"
        },
        "item": {
          "id": "18f29c7f-dc3a-41c3-a885-8c8a63867444",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c48b55c9-746e-4d97-a565-cf9c0b62a136",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "57e2b442-a01c-4e55-820e-8756be28d428",
        "cursor": {
          "ref": "5685eaab-aad2-4047-8b3f-021a9cf87f20",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "3f6c12e6-01a6-4ae3-9bea-c1bf65727421"
        },
        "item": {
          "id": "57e2b442-a01c-4e55-820e-8756be28d428",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "8e04bb3b-6bb5-4901-9e4a-ffd0be2ba2fe",
          "status": "Created",
          "code": 201,
          "responseTime": 321,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb02f4ce-2ce2-466e-bea6-165f547ce730",
        "cursor": {
          "ref": "2d3b404e-9d45-4724-8f6b-c7fe56d78ceb",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "c46e39b1-0838-4de3-b2a7-704a3dae5994"
        },
        "item": {
          "id": "cb02f4ce-2ce2-466e-bea6-165f547ce730",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0121a675-315b-4e93-b513-5cfef58e160e",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b8ed79e-578f-4674-8645-5c7b9e2a5977",
        "cursor": {
          "ref": "c851b5ec-9f5f-4e2b-93b9-66786aee7e65",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "ae7b5df0-5b85-4b49-bce8-d94ff71601dd"
        },
        "item": {
          "id": "7b8ed79e-578f-4674-8645-5c7b9e2a5977",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "f4a5dfbd-7028-495c-a3ea-2b422c66a56e",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b96d0f8-1b39-4bd1-a722-85d8980be14a",
        "cursor": {
          "ref": "7c505337-d23e-4e3d-a83b-e3b710d03b41",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "7d4fb68a-2489-401e-b580-b371b7c3c0f1"
        },
        "item": {
          "id": "8b96d0f8-1b39-4bd1-a722-85d8980be14a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "2ada9d0c-5336-4dd6-897f-b7052de76299",
          "status": "Created",
          "code": 201,
          "responseTime": 334,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-02-29T00:34:08.371Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-02-29T00:34:08.371Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "b2f283f4-b510-45f5-aebb-fb46aad10dbf",
        "cursor": {
          "ref": "72fbe85d-dec9-485c-8448-bffaace4d577",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "e11b2a6c-9ea6-427f-94e6-5024b7607326"
        },
        "item": {
          "id": "b2f283f4-b510-45f5-aebb-fb46aad10dbf",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "93388bda-ba76-4f6f-81e3-4402e3d3f6e1",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f740e1f-7c4e-44e2-96b1-e01a7048af83",
        "cursor": {
          "ref": "01b3faca-cfa1-4dde-bd03-7c8ae89163d0",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "49aca23b-cebb-4ce7-9e16-08cb94eaa092"
        },
        "item": {
          "id": "5f740e1f-7c4e-44e2-96b1-e01a7048af83",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "16635119-0e17-4a37-84a3-27ebcc7d1406",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72e8aeaa-d94c-4bf8-867b-9597e787ce82",
        "cursor": {
          "ref": "5f8eea61-5c46-4382-b6a0-3acae577e09c",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "30552aee-bd77-495e-a367-7ebf78664e47"
        },
        "item": {
          "id": "72e8aeaa-d94c-4bf8-867b-9597e787ce82",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "4314881f-45b6-4270-ab48-51db09fad403",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a49addec-f991-48ce-8091-ab83557d1571",
        "cursor": {
          "ref": "53eeeaec-2e9c-4d43-b2d5-b95a8266d1c8",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "bf8f7d0a-b906-4838-93cf-0bbfef765d6b"
        },
        "item": {
          "id": "a49addec-f991-48ce-8091-ab83557d1571",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b3f769f3-0761-4799-9e2b-409258df716a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2d4ed20-9436-4652-9fa4-661f52d4b04e",
        "cursor": {
          "ref": "bdcd2526-db0a-4233-beb8-e7defe40d1c8",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "75270b56-fb85-4ab2-8b32-970148bfc67c"
        },
        "item": {
          "id": "a2d4ed20-9436-4652-9fa4-661f52d4b04e",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "85d6aa93-2ca1-4793-b12f-91e0404e7cac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3f85f8e-31a7-4a6c-9630-0eb37be35bde",
        "cursor": {
          "ref": "9b520180-d127-4d61-8c8d-ff92a487050e",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "00ac390f-b28e-4de8-a775-28c004846387"
        },
        "item": {
          "id": "b3f85f8e-31a7-4a6c-9630-0eb37be35bde",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5229b4a9-9616-44e1-9fa7-b48ee14b7039",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c484b6da-e17f-4ae3-80d5-dfb7700be507",
        "cursor": {
          "ref": "ae015ef3-7766-495b-b14c-65bebb0b310a",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "91867b17-c36c-4b24-b243-ddc79536e02d"
        },
        "item": {
          "id": "c484b6da-e17f-4ae3-80d5-dfb7700be507",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "bc6b0cf4-312a-4d7e-91aa-c011e267e925",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6ce348b-1c65-406a-8788-03a958383d1f",
        "cursor": {
          "ref": "eb804c92-aa68-45ab-a569-f1f3ed01f4b8",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "407323c7-6995-4dba-9cba-272b5fa0d693"
        },
        "item": {
          "id": "b6ce348b-1c65-406a-8788-03a958383d1f",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "128436b2-95e5-4db9-8f0e-4e78be225a28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3ca6d9a-56d4-4aca-8b67-e0eb695b7a05",
        "cursor": {
          "ref": "f32d0e61-fbc9-47fb-b543-13de3c2f511d",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "5baa21c1-c17d-4342-91ee-758daf48de78"
        },
        "item": {
          "id": "e3ca6d9a-56d4-4aca-8b67-e0eb695b7a05",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "136208ec-305e-40a3-a308-47794c9140e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35fd571e-fdec-4df1-baf9-1031377f4a92",
        "cursor": {
          "ref": "5852136f-f3dc-48cf-a24f-51224385870a",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "87694766-b649-4d8a-85dc-7a5b7ea0e7b8"
        },
        "item": {
          "id": "35fd571e-fdec-4df1-baf9-1031377f4a92",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f1e72cec-e0ca-4ba7-b3e1-38148230d483",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cdd7aaf-df03-4d84-b335-617c40aa3e17",
        "cursor": {
          "ref": "f08e1379-f8c8-41e0-81fb-0d2a15cafe39",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "9bc5549b-7799-472c-b3aa-967b98bd126c"
        },
        "item": {
          "id": "2cdd7aaf-df03-4d84-b335-617c40aa3e17",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "f464f13d-ba98-401b-ac87-514ea6cf55f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b217f84c-dde8-4a32-91d0-58b77ca46658",
        "cursor": {
          "ref": "2ab407ad-0fd9-41bc-854e-0f876a2646b6",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "2d051a40-7d81-4db4-8c39-2d396b58cecd"
        },
        "item": {
          "id": "b217f84c-dde8-4a32-91d0-58b77ca46658",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "0c6918ce-5d27-4701-985b-d444b94e933f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05cd2686-05fb-4726-b95f-cd91f658363f",
        "cursor": {
          "ref": "b7eec2f1-a4ee-4299-9edd-371942754d74",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "f0d406f1-d734-4a7c-ad24-3c2456f869e4"
        },
        "item": {
          "id": "05cd2686-05fb-4726-b95f-cd91f658363f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "37eb88c9-4c9b-4a56-b161-d54331508303",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "840da596-0cb5-459e-95b0-d748fee5f9e8",
        "cursor": {
          "ref": "5b29534a-5a75-4777-ba2e-4d9fffac05a3",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "bf325fee-0df7-4aca-b0a9-68e915f0c7a2"
        },
        "item": {
          "id": "840da596-0cb5-459e-95b0-d748fee5f9e8",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b07adc66-523d-4562-8bef-1e0e62fe471d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 103,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "27e91353-2473-461b-a3e1-a879eb314580",
        "cursor": {
          "ref": "a0291f28-5d9c-4944-8278-04e2f244127d",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "ae5cca35-6d5c-4bad-8bcb-fcd366f67936"
        },
        "item": {
          "id": "27e91353-2473-461b-a3e1-a879eb314580",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "6bf39f8d-a7d9-47bd-a2cd-2e46894a0218",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 94,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "959a5fc5-32fb-4629-a8e1-7eaeab94dc54",
        "cursor": {
          "ref": "cceb277c-e965-42a4-9bf5-7d6d43b3e192",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "c09c6cd4-23f2-4d2c-8f53-bbfc6a177d28"
        },
        "item": {
          "id": "959a5fc5-32fb-4629-a8e1-7eaeab94dc54",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "7d4d4ab6-0973-4bb4-93d3-16123f2b1de5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "924db798-9398-4dc4-bed5-35ba67b01c42",
        "cursor": {
          "ref": "49813245-4ab0-4eb6-8337-76f4cff9104d",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "aec461d7-081f-41fa-b005-b2b6a555d702"
        },
        "item": {
          "id": "924db798-9398-4dc4-bed5-35ba67b01c42",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "2cf2c599-2c33-4772-83b6-9065801677f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "681d69ac-4ec6-4e10-8575-8f14d7c288e2",
        "cursor": {
          "ref": "0446ece6-871e-48b1-be4c-34be656ce711",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "44a7c4ab-a445-4258-9a8e-d319d100ed94"
        },
        "item": {
          "id": "681d69ac-4ec6-4e10-8575-8f14d7c288e2",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ae58d9a0-cfbd-4640-ad99-d75c2aa5055e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a4cb939-7f5b-4e87-8274-d2f086d74f81",
        "cursor": {
          "ref": "378b00bb-a926-4ce8-9cc9-8a2ab6ea5b05",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "15c0b0f5-f82a-4023-acc8-7e4b64a6442d"
        },
        "item": {
          "id": "1a4cb939-7f5b-4e87-8274-d2f086d74f81",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "a33a863b-6814-4cbc-9690-a52b4ff50800",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2740db35-0ca5-45c0-8f82-3a1a54c0c216",
        "cursor": {
          "ref": "17fcdee8-c202-48b0-b352-404c7870a5b4",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "8f9a4132-b7ca-4db2-a7e5-ece1068048a1"
        },
        "item": {
          "id": "2740db35-0ca5-45c0-8f82-3a1a54c0c216",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "8882009b-c668-4f21-a2cd-be0f39639a35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcf82563-e721-4c7d-855a-86d8ee214df3",
        "cursor": {
          "ref": "753b013e-b952-427e-8a7f-7dec5567f18b",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "54e2063e-bb7a-4575-acc0-3a11558f83f6"
        },
        "item": {
          "id": "bcf82563-e721-4c7d-855a-86d8ee214df3",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "67bcffe4-267c-4a47-85e0-401c96d9aec6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22e178fd-486d-4f2a-90b1-d300fbb1d1af",
        "cursor": {
          "ref": "ec49d11a-b53b-4b01-9059-32b629e6c615",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "8b53fb63-fa2a-41d3-9596-916b64f190a8"
        },
        "item": {
          "id": "22e178fd-486d-4f2a-90b1-d300fbb1d1af",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "0c2bd521-2355-455c-9511-ad21b78edfd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56deebca-0ec2-4a15-bb9e-426a443398d5",
        "cursor": {
          "ref": "39da56d3-eb70-4165-ac9f-b49de4e42140",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "6840f597-ba43-4cc4-bd80-66d350d634fe"
        },
        "item": {
          "id": "56deebca-0ec2-4a15-bb9e-426a443398d5",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "acf94cf7-a161-4c15-9d7b-8c379c341d89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "100c6c2c-088f-4a73-a514-c780dc2f4511",
        "cursor": {
          "ref": "76cb29c7-0356-4bb9-818f-3da432448ec5",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "9f2e1619-8015-43b2-af9e-77167c46db4f"
        },
        "item": {
          "id": "100c6c2c-088f-4a73-a514-c780dc2f4511",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8124209a-f9d8-4d6f-93f1-2960a5829f7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4adf90bf-d9ae-4dd1-a3df-d5858a363a38",
        "cursor": {
          "ref": "aab18a40-31cd-40bf-a886-db4078449be0",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "728867b3-a09e-4827-910e-99b71981ed37"
        },
        "item": {
          "id": "4adf90bf-d9ae-4dd1-a3df-d5858a363a38",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "12b5de25-31a5-4445-954d-5809087b5754",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef4571a2-8480-4711-ada1-5cac8242af27",
        "cursor": {
          "ref": "588c06a8-9532-4344-ac95-71a6903a1310",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "dbcf197b-78d6-42d1-8d6b-8caeb88ae6d7"
        },
        "item": {
          "id": "ef4571a2-8480-4711-ada1-5cac8242af27",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "cb256126-a8cd-45eb-8f78-0719074350c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9b54756-6d9d-4737-a2e7-6eafbf3d0bba",
        "cursor": {
          "ref": "5d5f429d-cd41-4f20-bf07-48b7bc0b5b82",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "183c6a0e-bfae-4d5e-9be2-871565028921"
        },
        "item": {
          "id": "f9b54756-6d9d-4737-a2e7-6eafbf3d0bba",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b02633dd-81c1-40f1-ba76-33786c0ce705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eed666b-a6de-44ef-a889-68be3ac4fd22",
        "cursor": {
          "ref": "f0a79e93-7f8b-4db7-8d70-109f5e487f7b",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "715379ff-60c0-4540-a1b6-2801a3fa9cd3"
        },
        "item": {
          "id": "4eed666b-a6de-44ef-a889-68be3ac4fd22",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "21abdd20-5a2b-4167-b8d7-901d7b0e1bb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d60507e-5567-474f-9682-07a15fcbc9f6",
        "cursor": {
          "ref": "4291c8a1-d7b3-446c-902c-f2250286cc8e",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "97606537-702f-4d8e-a6d3-b4030bacd6e6"
        },
        "item": {
          "id": "2d60507e-5567-474f-9682-07a15fcbc9f6",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "13e58493-6bb7-4882-b3bb-86ad7c1ff57a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4891dd55-0195-4234-9f12-16757a5f7172",
        "cursor": {
          "ref": "2ddabecd-6e12-4a5c-933c-b85ae8f56189",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "3c1212fb-a1bc-4cd4-aae9-d1db26e9de54"
        },
        "item": {
          "id": "4891dd55-0195-4234-9f12-16757a5f7172",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "814d46b3-fd40-45b2-8a2b-bdc1f83c9408",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f39e7c4e-9948-4565-b2b3-7d67bb7d15d9",
        "cursor": {
          "ref": "80db5263-6f0c-408d-ae44-9c7c096ff7e3",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "371f3d8a-f7de-4f37-9acd-915681916db1"
        },
        "item": {
          "id": "f39e7c4e-9948-4565-b2b3-7d67bb7d15d9",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "316c426c-1a46-4a47-ae19-a6af3716abc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac4d2c8e-7fbc-4fc1-844c-f0b1e696951f",
        "cursor": {
          "ref": "8d98942f-d31d-4d65-a964-ea29e068f268",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "527666d7-51f1-4f42-8715-8855efceba3a"
        },
        "item": {
          "id": "ac4d2c8e-7fbc-4fc1-844c-f0b1e696951f",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "992ca58e-d48e-4822-9c5a-cb2c1fe62499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dc4ddf8-8c64-4029-8bed-f94f8368ae17",
        "cursor": {
          "ref": "bf49682c-7920-4960-b244-1f4c08a7cd18",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "82e21aef-d98f-47ac-aaf9-cfb5a6297e49"
        },
        "item": {
          "id": "7dc4ddf8-8c64-4029-8bed-f94f8368ae17",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "15303ee8-e491-49f5-90c0-7f7c08e18726",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 112,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "3bdac08f-5fe8-4373-b35e-7f3a95db1049",
        "cursor": {
          "ref": "cc8deb48-a047-46f5-bfff-8d9a1a7ddade",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "0aae30ce-311b-4a99-ac99-44124efb143b"
        },
        "item": {
          "id": "3bdac08f-5fe8-4373-b35e-7f3a95db1049",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "77f99a5f-5704-4600-ad81-b3843656abd1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da0205f4-0710-412f-a1ef-23996d4985cd",
        "cursor": {
          "ref": "6b6b4080-fe54-4755-87fd-057ce6f637a2",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "46e966cb-92f4-4abb-b78b-e9af8fe025ad"
        },
        "item": {
          "id": "da0205f4-0710-412f-a1ef-23996d4985cd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f1bfb6b0-2fda-42ce-a50d-e77376d43562",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45ff574e-eff0-4111-8a1b-31ecbdb6a404",
        "cursor": {
          "ref": "ca9070f9-b5fa-4e3b-ab9b-df6b328dd6dc",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "e5b9dd35-73f8-4724-9da7-8c1d05906e4d"
        },
        "item": {
          "id": "45ff574e-eff0-4111-8a1b-31ecbdb6a404",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a038e4cc-b1ec-41fd-bcc1-b99ecfbaf4d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "460b5927-07e2-4bf6-bb7f-216dba29642c",
        "cursor": {
          "ref": "b1943532-3ddc-4b0d-853a-90427e719dd2",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9f9ed70d-63ce-4723-acdb-a60759af20cf"
        },
        "item": {
          "id": "460b5927-07e2-4bf6-bb7f-216dba29642c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "14926348-5840-4fee-a833-ab0657ee2675",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "938ad6f2-9324-447b-9d8d-e23e9f6b9163",
        "cursor": {
          "ref": "31c87962-adc9-4632-8e42-58ad61d929ae",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "9f786818-9c65-44bf-82b1-d65828ee454e"
        },
        "item": {
          "id": "938ad6f2-9324-447b-9d8d-e23e9f6b9163",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d59e4e0a-2ed3-4601-a4e7-763a1b6d3ff9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc8e72ab-c13a-4fcc-a5d0-3314025280e8",
        "cursor": {
          "ref": "dba74f71-b651-404c-bd10-93cbc0bebba7",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "caaa1771-1323-4a78-8a28-3e4d67240aba"
        },
        "item": {
          "id": "cc8e72ab-c13a-4fcc-a5d0-3314025280e8",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "715c7ae8-d1a7-4274-a2fc-7049c05d4101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a77538dc-af6f-49e7-834f-a34e98a8d405",
        "cursor": {
          "ref": "b0c264d0-ee4e-4432-a574-90e4905987dd",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "c5814d22-ee3f-43a8-9541-e3a52c0f6241"
        },
        "item": {
          "id": "a77538dc-af6f-49e7-834f-a34e98a8d405",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9384a29a-9d5c-4a5e-8d98-92e106b67d07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe82d0e1-e036-4774-86c6-25f56913266b",
        "cursor": {
          "ref": "323a7fd0-5d79-44b8-b5af-091df836589d",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "8dc53c7f-4e56-4c34-b3fc-110368e93efc"
        },
        "item": {
          "id": "fe82d0e1-e036-4774-86c6-25f56913266b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "64e55048-e6fa-4b45-875d-c410e9a26165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61e0d601-dd76-4e6d-9f72-f811aeabce73",
        "cursor": {
          "ref": "70c09ff7-aae0-47ca-9d59-b832b5611aab",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e41a60ee-4c12-46b4-97b4-8213cb393494"
        },
        "item": {
          "id": "61e0d601-dd76-4e6d-9f72-f811aeabce73",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "034ad6a1-8e29-4fa9-a1b7-94b4fb7b363f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bddb68e-33d6-406d-a95e-1e9b251f6555",
        "cursor": {
          "ref": "691b958e-10b1-4a5c-b416-93aadaa013a8",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "67553fb5-f7b4-47d8-96d1-7fcbd08fc231"
        },
        "item": {
          "id": "8bddb68e-33d6-406d-a95e-1e9b251f6555",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "01b2db4e-3328-4e64-8e10-b76d96f2f801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d6843c8-f682-4a81-8a4d-675c7f1f5841",
        "cursor": {
          "ref": "d94dacf0-95c9-40c7-bdc7-20711a8ac25f",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "123c0061-0bae-4cee-99dd-85f7405f98db"
        },
        "item": {
          "id": "1d6843c8-f682-4a81-8a4d-675c7f1f5841",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "07a89dc2-73bd-44fb-86f3-1e0ddac75583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75247cc3-eb7e-407d-962e-01257ca589ca",
        "cursor": {
          "ref": "d9fd9b44-d1cf-4257-b184-5757604be081",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "d19a69d0-b472-4e6e-85e0-96b279ddc0d6"
        },
        "item": {
          "id": "75247cc3-eb7e-407d-962e-01257ca589ca",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ad9fc6b7-6ee3-42fd-903a-793caaeb776a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "508b7622-ac5d-487b-b6b8-40aee3f844c5",
        "cursor": {
          "ref": "7b5afaf7-e177-4768-8e52-0b5dc806c74b",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "548f9fb3-d439-4ec5-a408-5dd28a7928e4"
        },
        "item": {
          "id": "508b7622-ac5d-487b-b6b8-40aee3f844c5",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "5ae76287-c49a-46db-8c27-4eda3b919f7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23f12e85-37e3-4bdb-974e-794aff180095",
        "cursor": {
          "ref": "f68c467c-ee19-4f26-9d39-9a475d2b5d00",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "b28c407c-fcd0-4651-97a7-c17bb358cd6e"
        },
        "item": {
          "id": "23f12e85-37e3-4bdb-974e-794aff180095",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8a30bd7e-9725-43a4-8ce5-064d699c4694",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21f660d0-a3dd-4453-9bfe-a484af69cb2a",
        "cursor": {
          "ref": "27bfdded-92b2-41f8-afa0-d3a0ed5b6e7d",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "d8a52975-cb2a-4a29-8cb2-b46d431178ff"
        },
        "item": {
          "id": "21f660d0-a3dd-4453-9bfe-a484af69cb2a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ef4d70fc-be22-48b0-a068-0a1b0f411fea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 107,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "5eea2c45-441f-4c1a-80ce-4b2aaf66fdc9",
        "cursor": {
          "ref": "ac56ccec-3fd2-4c84-be6b-4a15d2d6b041",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "daaa9120-00fa-4c11-9911-fe27291ed0bb"
        },
        "item": {
          "id": "5eea2c45-441f-4c1a-80ce-4b2aaf66fdc9",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "92517721-4f88-43de-b92c-e35c1f19199a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb30f174-4eb6-4821-9f70-76b001cd9735",
        "cursor": {
          "ref": "a8318978-585d-453b-9adc-0622e38dad0d",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "247c6472-cb39-4c99-81ca-47cc00a94ccd"
        },
        "item": {
          "id": "cb30f174-4eb6-4821-9f70-76b001cd9735",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "385fb6ca-64e1-44c9-9ac4-bb830d8b745c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "029136a6-04ac-40fe-a3bd-31d434917064",
        "cursor": {
          "ref": "8787bc00-e664-499e-9f7f-bb183596f409",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ad5704d7-2e5d-4849-a9e0-fc0f7265e0f0"
        },
        "item": {
          "id": "029136a6-04ac-40fe-a3bd-31d434917064",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "fabc26dd-45fe-45b2-8a5a-dc844346b46a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d544361e-e82d-4992-923e-a5c92ee4f513",
        "cursor": {
          "ref": "d9035b23-01af-4800-90fb-5802f646f57e",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "567cd25b-d931-40b4-bcca-a237cadc23b1"
        },
        "item": {
          "id": "d544361e-e82d-4992-923e-a5c92ee4f513",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "892c5431-b396-4075-89a7-3c1c6214bc0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc08df9d-5c5a-4f6b-82e1-7ca0528b1f74",
        "cursor": {
          "ref": "16cfed56-2c34-4b32-8e69-38053b002fe5",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "c22baf17-6042-4c95-a0fd-51752d03894b"
        },
        "item": {
          "id": "fc08df9d-5c5a-4f6b-82e1-7ca0528b1f74",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "254634cf-a246-49d4-bdd0-a868258a39ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97d22f8f-c23b-4369-b2ee-54dc69d61e44",
        "cursor": {
          "ref": "1cdbf514-1d9a-49d2-bfe6-7ada778a83bb",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "b1a03b39-8771-4b5a-8777-cf0e40c8cd6a"
        },
        "item": {
          "id": "97d22f8f-c23b-4369-b2ee-54dc69d61e44",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "535dec5f-c2a6-410f-b448-2313c6f5f67f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a74f257b-2f7d-4f76-a7aa-72baadf3f396",
        "cursor": {
          "ref": "3c25461a-e6fd-45f1-8666-b3ecceb6f080",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "2bc5e3a4-fbbb-4452-9def-c0700f888b16"
        },
        "item": {
          "id": "a74f257b-2f7d-4f76-a7aa-72baadf3f396",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d2399011-1149-44ab-9ead-fa37bb96af19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "871719e3-84b5-4920-9aa2-ffeae4732a4a",
        "cursor": {
          "ref": "5488682d-51b9-4a3f-a948-d3837fb40f6e",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "dc3388cf-55c1-4a93-aa44-47f43d670668"
        },
        "item": {
          "id": "871719e3-84b5-4920-9aa2-ffeae4732a4a",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "54d7cd00-22bb-4f5c-ac5a-fd4b4d74b9b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0faf90bf-6841-4014-a431-39e59717ca23",
        "cursor": {
          "ref": "6078d375-bb81-4ce1-83cd-3e7cee34db0f",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "7ac25b92-d4a1-4b03-b9f7-6380dcaa79bd"
        },
        "item": {
          "id": "0faf90bf-6841-4014-a431-39e59717ca23",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a18c90ea-1767-4765-8b13-b09c3d68ebfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75c0d708-b06e-4f61-8c55-e15a7d166a9a",
        "cursor": {
          "ref": "1ce9d2f7-536d-425e-bbbe-2fe9b5394dbd",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "b7e415c2-6d68-4b9a-a369-a411a74370ca"
        },
        "item": {
          "id": "75c0d708-b06e-4f61-8c55-e15a7d166a9a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "1095a06f-c31c-475d-ae69-894d33a0f0c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aacd102-cf28-4b44-a4a4-f14f6a52c71d",
        "cursor": {
          "ref": "00977471-34f7-4ed1-8a66-325c70a25900",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "331dd404-6395-4a92-9ca3-596dc34c14f2"
        },
        "item": {
          "id": "1aacd102-cf28-4b44-a4a4-f14f6a52c71d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "86da0a4d-b0b8-4143-8344-c159ded6080c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65b8c94e-90c4-4e8c-a334-d2bdd0d0bea7",
        "cursor": {
          "ref": "60dcd4f7-bd94-44b1-9d44-866a09ddd676",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "a501fa6a-54da-4b7e-af2d-7581fb1304ad"
        },
        "item": {
          "id": "65b8c94e-90c4-4e8c-a334-d2bdd0d0bea7",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "67f33ca0-cd72-49c1-b306-3e6dc21e2388",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "300c21a1-d807-41dd-880d-a7f1bdba2a3e",
        "cursor": {
          "ref": "bc3b9909-013c-4b27-8a06-c3a66aa15e7d",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "e6c8c7fe-28f7-48e1-90ed-1652c1b8f07f"
        },
        "item": {
          "id": "300c21a1-d807-41dd-880d-a7f1bdba2a3e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1dd4e813-f467-4216-b495-8bf729188019",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2779521a-c584-4620-927c-3f889d132bed",
        "cursor": {
          "ref": "2313e32f-1f22-48f4-bfeb-0278b06e2b1a",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "da7cc053-c716-41cb-978e-a2d687534a94"
        },
        "item": {
          "id": "2779521a-c584-4620-927c-3f889d132bed",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "9ad19ab8-69f8-406f-bf55-4c229a69ef33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4193da4a-41da-4c36-b7a1-e3654ca6e6cb",
        "cursor": {
          "ref": "0ebd9994-de22-42a9-8cc0-0a546372be00",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "643af75b-e983-4536-a5c5-7485969d3269"
        },
        "item": {
          "id": "4193da4a-41da-4c36-b7a1-e3654ca6e6cb",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1c7d0623-ca7e-491b-b375-2ec54a1c4b97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "681b51d9-c466-446e-a0ce-df3ed8ed8b7e",
        "cursor": {
          "ref": "bc51cc52-c144-4256-8df9-5a039116a427",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "d235b3b5-f8f4-4d4d-a361-1823f5209b86"
        },
        "item": {
          "id": "681b51d9-c466-446e-a0ce-df3ed8ed8b7e",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "9ce34727-5d75-4686-a7f7-15c7ce2cbd55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e61b905-b7d5-40a2-a00e-41c845900d81",
        "cursor": {
          "ref": "88a4c545-edb8-460f-b644-e43630aef19e",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "73cfc351-bd81-454b-9a43-cbd46d20f9b6"
        },
        "item": {
          "id": "2e61b905-b7d5-40a2-a00e-41c845900d81",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7b8d030b-3fae-4738-a5bf-f0d173b3b9d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07697df3-4675-481c-8b52-273595729d20",
        "cursor": {
          "ref": "c2def027-7ee8-4679-9615-60b6240377dd",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "b56f9eef-7c8d-457f-b191-36bfd61cba9d"
        },
        "item": {
          "id": "07697df3-4675-481c-8b52-273595729d20",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "22afef18-7369-43ff-b01b-c1d5183e117c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ef81426-97eb-4653-94ba-8043c5e368ba",
        "cursor": {
          "ref": "10bd0ee8-3586-4612-be8b-685bbd0bd2de",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "65f9325e-b90b-4da0-afaf-207d68d31cd2"
        },
        "item": {
          "id": "5ef81426-97eb-4653-94ba-8043c5e368ba",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "5a599a8e-5a42-4944-a43e-2d936a230610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2b3d7f6-d79b-4973-93e2-5e3c5c4215f4",
        "cursor": {
          "ref": "cbd7da58-8c0c-420b-b2ae-8610ab6a69e2",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "295d8abb-43c0-4a84-aae6-750892e36191"
        },
        "item": {
          "id": "d2b3d7f6-d79b-4973-93e2-5e3c5c4215f4",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "b4f9ab0b-ccef-4326-acc7-5de33b000917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f71bb86-9541-4a55-9bb2-bd9fa411631c",
        "cursor": {
          "ref": "5ad2c73f-b4c4-4cd1-b789-80a7df9d0636",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "2ba94c6c-1ef2-4714-8ac6-4b94ce17db9c"
        },
        "item": {
          "id": "5f71bb86-9541-4a55-9bb2-bd9fa411631c",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "05074d02-f179-4b10-8402-73260371c35f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ad176b0-e564-4161-84fe-8d158f6f66c6",
        "cursor": {
          "ref": "c1409c97-7982-490a-8275-ab0e971214b4",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "98992e7f-02d6-4059-84cd-16150375cadf"
        },
        "item": {
          "id": "2ad176b0-e564-4161-84fe-8d158f6f66c6",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "8dcfd765-c9db-408c-838a-96bac8acc144",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6576a763-e0ad-4f88-9f97-db100a4ed3f8",
        "cursor": {
          "ref": "97eda733-6464-4760-803a-13f839d3dfd2",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "cbb81b48-b239-4ff8-a037-e6a5aff39fe3"
        },
        "item": {
          "id": "6576a763-e0ad-4f88-9f97-db100a4ed3f8",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "427bd75e-8f2e-4048-8a64-4f4fef5a21c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ace6747b-29c2-4e92-8235-1767783d4c12",
        "cursor": {
          "ref": "aa056f94-bd6e-4050-9295-dca3995dabe6",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "3de06d2a-12fc-4d01-a19b-2cc99218cc12"
        },
        "item": {
          "id": "ace6747b-29c2-4e92-8235-1767783d4c12",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "9d4fb2db-2fda-469c-993c-9bca552f6539",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b82d1bbb-63af-45e5-b7cc-10565e65c0cf",
        "cursor": {
          "ref": "bba72b10-f156-477c-a67d-a5ae1929c851",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "c4867500-531f-41bb-a7f5-5d00683ea138"
        },
        "item": {
          "id": "b82d1bbb-63af-45e5-b7cc-10565e65c0cf",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "561b8f56-24a0-4c30-a3f1-2d35f6068f36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91671222-33f0-4cae-881c-669dc79095b7",
        "cursor": {
          "ref": "a4576c70-64c7-4b7e-9d3e-548d1f43b96d",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "7f8bd7e0-48b0-4ce2-a6b9-c4709602a485"
        },
        "item": {
          "id": "91671222-33f0-4cae-881c-669dc79095b7",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "014a1b5f-81f2-4c78-8825-4e39432cad3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95f5325b-8054-44b3-8834-b2b97003265f",
        "cursor": {
          "ref": "153c52ef-6b06-4a9f-acdd-ea249e454390",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "2742551f-87d5-4663-830c-bf0ad4df561b"
        },
        "item": {
          "id": "95f5325b-8054-44b3-8834-b2b97003265f",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "462767cc-f55b-496d-9fe9-08b83737b22d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6611e203-8153-474c-8595-e12894846d35",
        "cursor": {
          "ref": "de27655b-1763-4262-a11a-47a4884a16bd",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "a971de3f-2718-4b5d-874a-4ebc5d3b29c0"
        },
        "item": {
          "id": "6611e203-8153-474c-8595-e12894846d35",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "f67dfdb6-b199-47b7-a629-3bd5beb24a61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76d3e339-1658-4ea4-bc5f-127003cb4fe8",
        "cursor": {
          "ref": "e82c5060-6ba2-4648-8b28-6bc1b12d0377",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "380105ea-9d31-43a3-a211-7ff8e899e2d4"
        },
        "item": {
          "id": "76d3e339-1658-4ea4-bc5f-127003cb4fe8",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "4c06415f-f8eb-4f95-a28c-269a4b35c5d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66479af9-adbf-4d94-a13b-b842f588acfb",
        "cursor": {
          "ref": "f0b900f8-e676-47a9-b6bf-6a8304447af1",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "1643d6d3-9f3e-4941-b908-d8bc7f107344"
        },
        "item": {
          "id": "66479af9-adbf-4d94-a13b-b842f588acfb",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "1132dd10-a4fe-4961-8103-62c728edec3b",
          "status": "OK",
          "code": 200,
          "responseTime": 172,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "17c54a10-40d4-4422-b98c-8e212a27f279",
        "cursor": {
          "ref": "b7211935-0759-456a-bad0-21459236d7be",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "63ec1082-cc53-446e-b22b-f6ccc8a6ca8a"
        },
        "item": {
          "id": "17c54a10-40d4-4422-b98c-8e212a27f279",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "1e0de5ac-61bc-443e-81fc-2e80f196cfee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4b9ea0f-1c3e-4593-8833-648b7b07b44a",
        "cursor": {
          "ref": "e67c735f-6784-4724-92c8-a9e9a4ec4542",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "bcddfc60-c028-4145-9a54-296089c1b4b8"
        },
        "item": {
          "id": "b4b9ea0f-1c3e-4593-8833-648b7b07b44a",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "c204a58c-8c5e-4a44-b963-bc650147e93d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f98035f8-c685-46ae-9364-c67a42c15bea",
        "cursor": {
          "ref": "ef097995-3c6e-4671-9788-32d6716cc409",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "bffa06fe-7abf-4693-8823-0ff56225e09b"
        },
        "item": {
          "id": "f98035f8-c685-46ae-9364-c67a42c15bea",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "9ec9cd85-9a2f-428d-8d38-b2ce18a6dc56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c2696bd-2f09-41bd-9138-0906069f0ea7",
        "cursor": {
          "ref": "6b9d9bd4-6be6-4410-9c09-fb32ed104cd8",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "7ebcd41e-a631-482d-8100-ec9cfef030db"
        },
        "item": {
          "id": "0c2696bd-2f09-41bd-9138-0906069f0ea7",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "e6d6d6c1-a57d-49b2-b7c4-f69a25d6e002",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0c3b6ee-3e83-4011-87c3-f1c5bcbcfcb7",
        "cursor": {
          "ref": "884395a8-1bfc-4061-bcba-8ebe1d1096fa",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a08ecc87-591b-4254-8f5b-74e87d7e8be9"
        },
        "item": {
          "id": "f0c3b6ee-3e83-4011-87c3-f1c5bcbcfcb7",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "3afdc57d-fb8d-4d23-9d07-9f4b444f2ce8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b57a51f-bfa6-4d8c-8e7a-cbec2fcf65fb",
        "cursor": {
          "ref": "cd3b62cf-82cf-4720-aa7e-db87a3576c18",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "831f1e6b-c21b-4148-9e44-16a6e51a63dd"
        },
        "item": {
          "id": "4b57a51f-bfa6-4d8c-8e7a-cbec2fcf65fb",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "5b5a61d6-460d-4338-b061-1c4f4a2d6f59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e80edf1-0d4d-465e-a243-2cfd1d5a6c90",
        "cursor": {
          "ref": "7c7d422a-33e3-4995-b893-63a01f1d1dab",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "04cfa6d0-76fd-41f3-b768-95c8c74f621e"
        },
        "item": {
          "id": "9e80edf1-0d4d-465e-a243-2cfd1d5a6c90",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "9972e162-37f0-4a48-89dd-314587b89e8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16772aff-f237-4cd4-88e5-3f42ae95854e",
        "cursor": {
          "ref": "74c3a7d7-b0eb-4100-b24c-320a71168464",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "8673151c-09df-4661-9a13-7db256809dd9"
        },
        "item": {
          "id": "16772aff-f237-4cd4-88e5-3f42ae95854e",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "93c578d6-6433-4b11-9956-7be0dcd05fd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f608a2e-4c15-4e59-a7d8-d5f5957dee90",
        "cursor": {
          "ref": "1f840d5e-2c5b-4b53-83e6-d196da895b42",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "412fc914-a8ba-4566-bea1-e984f05fc754"
        },
        "item": {
          "id": "5f608a2e-4c15-4e59-a7d8-d5f5957dee90",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "13ce49f2-614f-4c58-8e92-dfee5a6e0d6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9721f660-6bb2-468d-9538-b4850e7c99d5",
        "cursor": {
          "ref": "394c5b5c-f32c-4640-ae1f-5bf690fb2e20",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "af5190f2-57cd-4c12-a8f3-a15bebd51dd4"
        },
        "item": {
          "id": "9721f660-6bb2-468d-9538-b4850e7c99d5",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ba231997-8166-4bde-9b59-5c5e71777b6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ef13816-7b39-4ddb-a65b-181906b9314e",
        "cursor": {
          "ref": "3cc1c367-da4c-42ad-8596-8ffa2d6935d0",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "f1886afc-b865-45cf-8108-a2c17f02a670"
        },
        "item": {
          "id": "2ef13816-7b39-4ddb-a65b-181906b9314e",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "b5d0948f-d1c5-4a51-9797-b1b6dc1efc63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5621e802-9ca5-469e-bf65-3305996fa070",
        "cursor": {
          "ref": "17c4a3ef-9d88-4e65-8fb3-c00cdca1ecb1",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "1b06796b-6ef1-4cdb-ab46-6b2bcac713f7"
        },
        "item": {
          "id": "5621e802-9ca5-469e-bf65-3305996fa070",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "ef56b899-6f28-4a17-971f-4ddc2217461f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76613916-598a-41b6-8695-b889c065b998",
        "cursor": {
          "ref": "938af4eb-9b5a-4d93-ad8e-715e603a16e9",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "0c3c4862-de91-4103-a108-b321a61f1f2c"
        },
        "item": {
          "id": "76613916-598a-41b6-8695-b889c065b998",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "103f98e6-ea56-4a20-a522-4ae757512489",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d60c371-5821-46d0-acca-5dad6df0eb06",
        "cursor": {
          "ref": "a566b610-f84a-41e9-9c36-5f6086b3e1db",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "03983d1f-9563-4917-b339-cd3c4a8f3ac8"
        },
        "item": {
          "id": "5d60c371-5821-46d0-acca-5dad6df0eb06",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "bc9853e2-cf88-460b-8148-bbb1dc1a4185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2956152-90ba-4181-a046-033875c40c65",
        "cursor": {
          "ref": "596042b7-d92f-48a9-8315-d96afd331c21",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "70943fe5-d932-4f0e-86a4-ecdfe40e69cb"
        },
        "item": {
          "id": "a2956152-90ba-4181-a046-033875c40c65",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "59f78212-00d4-4181-bdd0-95b2b096b414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b6476a8-d2bc-4446-b968-1fde6a9b85b9",
        "cursor": {
          "ref": "19836bf0-0f0b-4249-9191-2f3e35d06695",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "742a25d0-45f6-4433-9b71-acd2a39d54a0"
        },
        "item": {
          "id": "9b6476a8-d2bc-4446-b968-1fde6a9b85b9",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "58d7cd40-3f9c-4868-8da0-febcdb520147",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5dd9bb8-21f8-40ac-a718-6cdde16fd878",
        "cursor": {
          "ref": "a4636166-2d53-4cdd-819b-ccf6dbf1ffe4",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "e44165d6-4ad4-49c0-a0b2-df22f66340a7"
        },
        "item": {
          "id": "d5dd9bb8-21f8-40ac-a718-6cdde16fd878",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c593510c-8795-4f35-b008-368493d0d7f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec951d88-a841-40b4-b29c-fbc4ba72b5ba",
        "cursor": {
          "ref": "d6ea80f7-2ebe-4c0c-8697-af1f0a3e8c92",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "4fc7c290-1498-4af6-9cd2-f6b4c403b30e"
        },
        "item": {
          "id": "ec951d88-a841-40b4-b29c-fbc4ba72b5ba",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e81464bd-3c3d-43ba-afe6-272a2b7bc202",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f2fb10c-758b-4f7d-8b93-d03ae4cde869",
        "cursor": {
          "ref": "a528e7c5-dc64-4ea6-aa9b-d83d77768f03",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "5e3a8016-b769-43a3-a7da-7267aeccb851"
        },
        "item": {
          "id": "5f2fb10c-758b-4f7d-8b93-d03ae4cde869",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "0894bfb3-045b-433a-9982-99678c27d69a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc682126-6424-4e24-bd7c-3e0a949dc1a1",
        "cursor": {
          "ref": "0b662812-750c-4427-a97f-48796ecebb9d",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "3cd76a48-06f4-4a7a-9cd5-91c54447ae41"
        },
        "item": {
          "id": "dc682126-6424-4e24-bd7c-3e0a949dc1a1",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "6d75adb1-5285-461f-bc5d-5fe5534244e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84ecae80-7117-4118-a6ed-76c7b2874954",
        "cursor": {
          "ref": "fe222f88-33fd-47b2-af57-7d4a23be7d02",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "9eca6f67-9d84-47ad-b06a-4693a40acb8f"
        },
        "item": {
          "id": "84ecae80-7117-4118-a6ed-76c7b2874954",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "09fef63e-d4d3-4a98-916e-fa5a1fa62bf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3b0164d-d0be-4ad3-968b-b770d09cf743",
        "cursor": {
          "ref": "158887af-c0e1-47bb-8ce3-1572035a8477",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "cbba7e35-7dd6-48ff-b551-321b2deef6b5"
        },
        "item": {
          "id": "c3b0164d-d0be-4ad3-968b-b770d09cf743",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "218593f3-da1e-4acd-a0f3-5ec17913fca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "848e3aca-bb0b-4fab-bb14-0cfea6e77d3e",
        "cursor": {
          "ref": "b7f9e30d-51de-46dc-b0da-082096f7fbd4",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "22f9c1a8-80da-46c3-a3c6-2a5e782f4d4a"
        },
        "item": {
          "id": "848e3aca-bb0b-4fab-bb14-0cfea6e77d3e",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "34bf4dae-1f12-410a-9be2-c764fbf340d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "963b4f11-4aa8-4cf8-9af1-df3ff5fb6edb",
        "cursor": {
          "ref": "b41ecbda-de22-4208-80d1-9417e0154268",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "764a4327-50e1-4845-8b83-d2ce70b088f3"
        },
        "item": {
          "id": "963b4f11-4aa8-4cf8-9af1-df3ff5fb6edb",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "4c769bc0-e0e7-4da1-b5da-d59ecae334aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3512ef26-e6fe-4411-9dc5-4257272c68f5",
        "cursor": {
          "ref": "d8d79a37-dc89-4605-994f-371a88a52cc8",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "4d2429f9-0f99-445a-bf87-9e042feab6fd"
        },
        "item": {
          "id": "3512ef26-e6fe-4411-9dc5-4257272c68f5",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "581b916f-4ea2-4a29-8f96-dc9546c9adad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca5dd148-ff89-4621-b2b6-e7e01c964360",
        "cursor": {
          "ref": "82c68c1d-10d3-48c0-9175-9653886f614c",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "0391efd8-46d5-429c-8589-c685c294387d"
        },
        "item": {
          "id": "ca5dd148-ff89-4621-b2b6-e7e01c964360",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "b9fa85f6-1463-4657-8ab3-8516334a5239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66889a1e-53ac-4707-a0e4-afe5d78d8bad",
        "cursor": {
          "ref": "75998b33-e3bb-453e-b770-6188441c2964",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "1982f6dd-266f-4343-9494-6c06e928c746"
        },
        "item": {
          "id": "66889a1e-53ac-4707-a0e4-afe5d78d8bad",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "1baf64fb-77fb-4491-a85d-bb1b3eb6c99f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f46881f-69ea-4fdb-8236-f2480e0494c6",
        "cursor": {
          "ref": "6dc738d4-2d05-4c73-b000-bb6549c9928f",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "77205a3f-991a-42a6-abbb-7f67d4ca7f89"
        },
        "item": {
          "id": "7f46881f-69ea-4fdb-8236-f2480e0494c6",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "717e60d5-d115-4b85-8d84-601407f72e3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de6a8390-f44d-46e3-970c-1f570b698b90",
        "cursor": {
          "ref": "da5f9fd1-633f-4872-bcce-e1d63c27cbc4",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "f6f5fb37-1b12-4a01-85aa-6b7023108d4e"
        },
        "item": {
          "id": "de6a8390-f44d-46e3-970c-1f570b698b90",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "fe8e099e-c2eb-458d-980e-1f61ca650d88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0fd29f0-bda6-482c-9b1f-3f8d9bebce21",
        "cursor": {
          "ref": "450c2fe1-3dac-4aca-97e9-b058ff3ac9b9",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "a09465f6-d046-4ef6-90b5-15912ed783c6"
        },
        "item": {
          "id": "e0fd29f0-bda6-482c-9b1f-3f8d9bebce21",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "1c99c643-8d6b-4810-86c0-15917d3bb0bf",
          "status": "OK",
          "code": 200,
          "responseTime": 193,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "7f8087f6-52fa-47c5-9354-0bb30af82f46",
        "cursor": {
          "ref": "39172ff3-c3ee-4871-bbd2-8a1914b68949",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "3068a14e-945c-4d3a-bd8b-40cd725e1237"
        },
        "item": {
          "id": "7f8087f6-52fa-47c5-9354-0bb30af82f46",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d9604154-e462-492c-9592-e774fd7accfa",
          "status": "OK",
          "code": 200,
          "responseTime": 163,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "5f63d150-7f22-4974-a576-36b355ec16cc",
        "cursor": {
          "ref": "db3d0e55-7d9d-4b62-b38d-d498719c5dfc",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "897bc4c7-5b7d-4602-9293-806a8181d1fd"
        },
        "item": {
          "id": "5f63d150-7f22-4974-a576-36b355ec16cc",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "e560910d-023a-402e-b926-7cf6deb430cc",
          "status": "OK",
          "code": 200,
          "responseTime": 157,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "dd7724eb-800a-4e29-82c2-d213324e613c",
        "cursor": {
          "ref": "9106d94a-8f72-4ac9-a511-12df95ea32cf",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "68e07205-9465-4ba7-9f0f-5624afb620ba"
        },
        "item": {
          "id": "dd7724eb-800a-4e29-82c2-d213324e613c",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "7ac7e038-a428-4129-b61c-adfdb3c9a18e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c72ea67-b172-4a5d-892f-c3872a86546d",
        "cursor": {
          "ref": "f63410c2-5232-4f00-b778-8d73c43c49b0",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "75534305-7419-4e92-8b18-14bea42550b7"
        },
        "item": {
          "id": "1c72ea67-b172-4a5d-892f-c3872a86546d",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "f0ced80e-e040-4d2a-9648-792831b464c0",
          "status": "OK",
          "code": 200,
          "responseTime": 169,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "976727c6-2919-4fa7-8cd9-e9a1ded94f7f",
        "cursor": {
          "ref": "bd510d87-df36-4276-86c7-ce4395e218fa",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "9d3e97c8-417f-4e6c-8c2a-2f7d8954ea38"
        },
        "item": {
          "id": "976727c6-2919-4fa7-8cd9-e9a1ded94f7f",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "0fc99044-888f-45e6-a289-783c5b80f267",
          "status": "OK",
          "code": 200,
          "responseTime": 161,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "9ff23e44-e5a9-42e6-bf1d-a5efa4145b01",
        "cursor": {
          "ref": "4b8ca11b-9867-4961-97ec-3fbb01b39fe8",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "9a2160be-995b-41cc-9fbb-bac6f57490bd"
        },
        "item": {
          "id": "9ff23e44-e5a9-42e6-bf1d-a5efa4145b01",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "c9140ba0-1f02-4b66-8b6b-9b35f9ab8466",
          "status": "OK",
          "code": 200,
          "responseTime": 163,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "7318c2ec-c31d-4586-9c7f-30b854b75274",
        "cursor": {
          "ref": "37a7e0ec-873b-4c05-9cf3-c1f889d0c9bb",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "8ff78be9-b643-4be6-b554-e92b11c452cd"
        },
        "item": {
          "id": "7318c2ec-c31d-4586-9c7f-30b854b75274",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "df019a5e-5a97-46d8-aabc-8406ae0dfe35",
          "status": "OK",
          "code": 200,
          "responseTime": 161,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "224f8d49-f2ca-46ec-95e9-b515d93c3979",
        "cursor": {
          "ref": "262e9a8d-3dbc-4670-9b0f-f4951540b248",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "5d71422d-f893-469f-ae9a-eaf7b9805cdb"
        },
        "item": {
          "id": "224f8d49-f2ca-46ec-95e9-b515d93c3979",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "5057aa6c-0da2-4108-8e05-7d048e598f6c",
          "status": "OK",
          "code": 200,
          "responseTime": 158,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "278af0d2-353d-49ff-9943-a4332053e12d",
        "cursor": {
          "ref": "248e0f71-5541-421e-b864-bb515f4e8eb4",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "1d1069e3-dbfb-4089-8d9e-f29f2ea794e1"
        },
        "item": {
          "id": "278af0d2-353d-49ff-9943-a4332053e12d",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "0e85779e-8034-4835-85b7-d2b9d0d922e9",
          "status": "OK",
          "code": 200,
          "responseTime": 160,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "be95ff29-c1d2-4d47-9c31-738d137d4e6c",
        "cursor": {
          "ref": "e4de9c8d-2665-4834-91c0-702470bb555b",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "7571fe0f-e043-4bad-bd54-0e76041f5afb"
        },
        "item": {
          "id": "be95ff29-c1d2-4d47-9c31-738d137d4e6c",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "6acd80aa-691a-4129-8f70-95e494700727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d00f59ea-76b2-4b17-97e4-5982509e0a38",
        "cursor": {
          "ref": "c8bfd509-d5c5-4c90-85a7-816cfa621b45",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "d8d09351-8059-4a3e-a0cc-5d41cb721907"
        },
        "item": {
          "id": "d00f59ea-76b2-4b17-97e4-5982509e0a38",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "7a8e19c6-fabe-431a-b403-1348aedad1c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17b73fdd-7587-418d-9cd2-178f7e9ac574",
        "cursor": {
          "ref": "d6ecd389-4f05-46c5-8b2b-07df35053db6",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "43535ca7-703a-4caf-9156-974ca0fba0a3"
        },
        "item": {
          "id": "17b73fdd-7587-418d-9cd2-178f7e9ac574",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "94bd8d9c-963a-44fc-b77c-46a57c78d01d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63f3ddde-950c-4536-a56d-ebb28fe82d3e",
        "cursor": {
          "ref": "af12f2b6-244d-4561-b4f7-e4a64d1ef43b",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "b0e00640-328f-41df-8d77-7a0e3233cae1"
        },
        "item": {
          "id": "63f3ddde-950c-4536-a56d-ebb28fe82d3e",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "63ddd336-a0d6-43fd-898a-c33462597d0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ef9d9ea-0979-47ae-b663-eb693a294c13",
        "cursor": {
          "ref": "4788e3aa-5103-4fd9-b8a4-52b0c865aa7f",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "250e7882-3c95-4999-9861-a976e0d58cab"
        },
        "item": {
          "id": "7ef9d9ea-0979-47ae-b663-eb693a294c13",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "7917eb50-57dd-46e0-b791-c15afb11474a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0053428-d1f5-43d5-bde5-99297233a965",
        "cursor": {
          "ref": "ab123561-6f8a-4aa1-8621-57f29981e284",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "c9d388c9-b59c-45ce-aa64-1dc5589bc51a"
        },
        "item": {
          "id": "e0053428-d1f5-43d5-bde5-99297233a965",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "9c48a5da-0a1a-4c4f-ba8c-5cd4f390b59d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be368e79-8577-4fe3-b35f-448a958c305d",
        "cursor": {
          "ref": "4c211796-f04c-4293-9f38-39acc0fd839b",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "04ac2b5e-3645-4b63-bd22-149313f5c553"
        },
        "item": {
          "id": "be368e79-8577-4fe3-b35f-448a958c305d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "2a316f8b-e7d4-4ee3-a093-b7108eb0def6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "351caf57-997f-44bb-b7a0-6ebc922be913",
        "cursor": {
          "ref": "ab627530-b74c-4a61-a06a-d3d674a4c420",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "255fea29-9651-4d89-9ef8-63e685fd6e9c"
        },
        "item": {
          "id": "351caf57-997f-44bb-b7a0-6ebc922be913",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "9240915d-3c3d-4515-a9de-bf0798c48344",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06300266-36e4-4412-b22d-2c0f6985c3fa",
        "cursor": {
          "ref": "fd59c62e-aac8-40e0-859e-93a1eda21e69",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "2107e1ff-e172-4467-afee-7c88a059939c"
        },
        "item": {
          "id": "06300266-36e4-4412-b22d-2c0f6985c3fa",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "c07efdac-3883-425d-a3f6-60e588ff6339",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "634b29a8-9150-4f1e-b226-9c3786d28f0f",
        "cursor": {
          "ref": "ea9deb57-bfe0-4c53-aa84-3bb9782cff12",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "c6615efd-d30e-48cc-86de-b996c171e200"
        },
        "item": {
          "id": "634b29a8-9150-4f1e-b226-9c3786d28f0f",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "76440159-6e56-431c-a307-018098389a23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09bc2660-5153-4bf0-b84d-3af5970dd7e5",
        "cursor": {
          "ref": "c6e8bdd6-5266-42c1-8de0-366bd2745f9b",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "0b0d3f40-73ec-4245-a2e8-8ad71b5680a3"
        },
        "item": {
          "id": "09bc2660-5153-4bf0-b84d-3af5970dd7e5",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "50489aff-8a52-443e-9b0c-ff9ba12c0914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcecca47-8f2b-43d1-875f-218df432739b",
        "cursor": {
          "ref": "feb03297-a150-4706-89e5-e85e7498c787",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "b3f79ea9-a8ed-4c43-8626-8d9463a33780"
        },
        "item": {
          "id": "bcecca47-8f2b-43d1-875f-218df432739b",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "3a1ddc92-5219-45d7-a33a-3f3b084cb08a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e318fa7b-c8e5-4fcc-b6d1-3d6dcffee6a9",
        "cursor": {
          "ref": "13770e0f-f92d-469b-9226-5658d310cb1f",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "ab76167f-1074-4f01-bceb-464da14cb559"
        },
        "item": {
          "id": "e318fa7b-c8e5-4fcc-b6d1-3d6dcffee6a9",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "06dace68-0c29-4299-bdbb-8450194108d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2095240e-ba5d-4aec-ba23-288c2e3ec43b",
        "cursor": {
          "ref": "f7a44503-a085-4dc5-9d5e-6e9f6f01a6b4",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "6d2a3845-3464-4ef8-9e55-4dd8d30e9fe4"
        },
        "item": {
          "id": "2095240e-ba5d-4aec-ba23-288c2e3ec43b",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "b94490e7-7516-43b8-bce0-a1c5a9fcf473",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "68db462c-37cc-4314-b3e4-cbb9c920ea61",
        "cursor": {
          "ref": "99e1a975-1e39-4460-9cf4-b48ac1bf751d",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "45ebc0e7-f723-4a70-ab69-75b03c0b19f9"
        },
        "item": {
          "id": "68db462c-37cc-4314-b3e4-cbb9c920ea61",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "063e354b-ce0b-4d0e-835a-7424a4ae2e80",
          "status": "OK",
          "code": 200,
          "responseTime": 167,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "eb2dd523-43d4-4b0e-9f9d-565b7faad445",
        "cursor": {
          "ref": "d41742a5-e76b-4ec2-9ff7-aea5bac8971d",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "9ae25a72-4577-4db5-b843-06175d1eba81"
        },
        "item": {
          "id": "eb2dd523-43d4-4b0e-9f9d-565b7faad445",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "a2a64905-0cd8-4529-8e86-e0ae9939abab",
          "status": "OK",
          "code": 200,
          "responseTime": 156,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "cb6ef909-a573-4617-a9c8-0b023584fa08",
        "cursor": {
          "ref": "3173677d-e16d-49be-8ec6-8225274a4599",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "2e2b3d13-5c1a-4143-b08e-b365b5898b9d"
        },
        "item": {
          "id": "cb6ef909-a573-4617-a9c8-0b023584fa08",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "396fe91b-86a5-4b72-aa94-2b5beeef36d8",
          "status": "OK",
          "code": 200,
          "responseTime": 185,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "a94c9029-0545-4ba3-ab73-9ecb042fa4ae",
        "cursor": {
          "ref": "04258b98-8668-4774-bb8a-27f323a01510",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "4aa422a9-580f-4178-990c-cb003178c6a0"
        },
        "item": {
          "id": "a94c9029-0545-4ba3-ab73-9ecb042fa4ae",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "d8d60c1f-24e4-4ef4-8c20-5429ef664a9a",
          "status": "OK",
          "code": 200,
          "responseTime": 164,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "852c3f07-f80f-4445-a773-bf69635a01b2",
        "cursor": {
          "ref": "d94a4329-0d90-42df-8f1f-85adb381495f",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "dcd9f0d0-7c76-475f-b27b-a8f7bd80da7c"
        },
        "item": {
          "id": "852c3f07-f80f-4445-a773-bf69635a01b2",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "b8dc3ff8-e920-40bb-ab52-4e3155ff235a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9490271a-80e7-4f13-bcde-1c584c05ddb4",
        "cursor": {
          "ref": "d0bf31f3-04ba-4a93-8a41-2ba9a6ebe3ef",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "070681b0-cc75-4d0b-9c96-cb1be5533d49"
        },
        "item": {
          "id": "9490271a-80e7-4f13-bcde-1c584c05ddb4",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "31da1bdf-7964-4dc3-a1fa-4b43ef30e1a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f078ec38-8d10-45b0-9db9-34b2091a62ab",
        "cursor": {
          "ref": "05cf390d-5d3c-467d-ac74-0bd2a737a205",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "721dd40b-4eaa-45ea-9044-b0f6c22e07e6"
        },
        "item": {
          "id": "f078ec38-8d10-45b0-9db9-34b2091a62ab",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "a4d7638a-45c8-42f5-9866-d06dd2e1ce50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04e9ec27-def6-4e12-af64-03aab77b94fe",
        "cursor": {
          "ref": "fec13921-3086-45c8-bf50-b5af7d59323a",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "035b6911-bbdb-4b9c-8c2d-5064ef197cd4"
        },
        "item": {
          "id": "04e9ec27-def6-4e12-af64-03aab77b94fe",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "4fe58a9d-67c1-422e-9173-e8ce1a808c23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "004dd041-9428-4c48-9c35-4d3e26c5d4fa",
        "cursor": {
          "ref": "de7bc5b3-9f90-43d2-9c3e-c3822cc862de",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "f31f71ca-cca1-4ec1-a835-bb6ec58a4b3d"
        },
        "item": {
          "id": "004dd041-9428-4c48-9c35-4d3e26c5d4fa",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "3719d922-8089-493e-8210-172768baf9a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12ac6866-8a47-4e51-bcf4-60530e2fb85c",
        "cursor": {
          "ref": "c86fc156-52c1-4470-97b6-e7424086dbe4",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8ee31e50-5c47-47cd-b48a-71dd63ce2cd3"
        },
        "item": {
          "id": "12ac6866-8a47-4e51-bcf4-60530e2fb85c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "1d034c5d-ba22-43eb-be2e-ca808fafbe60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1aef453-a37e-4e03-b605-3cac0fe313e9",
        "cursor": {
          "ref": "28be4233-c3bb-4a88-9806-0c1c31cd631d",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "cc0a86a9-c308-48a1-8667-f9d5dfc430af"
        },
        "item": {
          "id": "b1aef453-a37e-4e03-b605-3cac0fe313e9",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "ad885263-d0f6-4f9f-8af2-636d190bd8ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfd0dd7a-ef44-4ffe-a78c-fd1523e4e7c8",
        "cursor": {
          "ref": "3e8c858d-c227-426c-ab57-4ddd2038688c",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "0dd9ee54-4d4d-4212-803e-b42d4bc89cc7"
        },
        "item": {
          "id": "dfd0dd7a-ef44-4ffe-a78c-fd1523e4e7c8",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "dc828df9-e98e-4fec-86f2-27a7a30b6d71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03d54da7-e513-4447-95c6-c84cdcebb584",
        "cursor": {
          "ref": "37d3e101-ba77-43cd-bdb9-bbc70cba4687",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "5f579792-8c4a-417a-be38-9d2192073c62"
        },
        "item": {
          "id": "03d54da7-e513-4447-95c6-c84cdcebb584",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "b8bffe3a-9f36-489e-9bca-95f7d12bfff5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef3e0856-486a-44b6-801c-38a46aa32922",
        "cursor": {
          "ref": "c0e5ad59-5773-4eb5-b19f-8b6e928de962",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "68bcd9e9-f919-4792-aea2-aed26f2f018c"
        },
        "item": {
          "id": "ef3e0856-486a-44b6-801c-38a46aa32922",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "3835f8d9-7f81-43f9-9a21-2cbed41ba9e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0a38c5a-a71d-4d97-a912-6881755a49d9",
        "cursor": {
          "ref": "a70145d6-5b0c-41c1-98b3-84f96af7659f",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "f9b2aa1f-4892-4e28-ba12-fcf71a725943"
        },
        "item": {
          "id": "f0a38c5a-a71d-4d97-a912-6881755a49d9",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "500f164e-bdea-48d9-801b-ae1287df54f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b7b41e1-cc2a-4c13-a1b8-1efdb69d333e",
        "cursor": {
          "ref": "adb7f2e2-9386-4eca-b0a1-f3889daa35f4",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "107821b1-de96-45ce-8512-a7b2d2cfcf08"
        },
        "item": {
          "id": "1b7b41e1-cc2a-4c13-a1b8-1efdb69d333e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "4112bc47-378b-4a7a-8981-635d2733e9de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd7ddfd0-bb01-49a6-a1e0-71b839d3ff7b",
        "cursor": {
          "ref": "288c2a27-cc5e-42e7-8cf2-4bedb903c08b",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "3c3f2ec6-c4ad-4253-99c4-235a16bea2b0"
        },
        "item": {
          "id": "fd7ddfd0-bb01-49a6-a1e0-71b839d3ff7b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "aa7f1296-d930-4669-9a09-ba63a941be98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e00a934-810b-4625-8db8-c23f2e6c2970",
        "cursor": {
          "ref": "7e2d62b7-3691-44b7-9da8-907a1b303f33",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "fc0b10c9-4304-458d-ae7e-4167a0eedce6"
        },
        "item": {
          "id": "9e00a934-810b-4625-8db8-c23f2e6c2970",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "6ee13aa1-8a73-408f-845c-522cb3d568ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3614c969-ecce-48bc-8b36-7ca9e909fd1c",
        "cursor": {
          "ref": "4a5b04c6-5e51-45c2-b620-de5d4abea428",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "42b5361a-6b6e-465c-bf52-458bac960048"
        },
        "item": {
          "id": "3614c969-ecce-48bc-8b36-7ca9e909fd1c",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "5712304d-14f5-4e15-856a-c7442c731cd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65e9d64e-bdb1-498e-bb39-8d1fc7b3a543",
        "cursor": {
          "ref": "08d7d178-e6a9-45ca-a1d7-2321f9d6786d",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "7091a09a-8984-4ea6-a4c0-7f9ba6a60c08"
        },
        "item": {
          "id": "65e9d64e-bdb1-498e-bb39-8d1fc7b3a543",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f29d34fd-651e-4921-9341-f7d2a2ffd0b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38b32a1e-b84d-45dc-9889-b205b5fd14af",
        "cursor": {
          "ref": "4b77a207-2435-42cb-8682-8040f74ac3e8",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "59e5b850-0aad-4736-bcb4-f30cb28e1086"
        },
        "item": {
          "id": "38b32a1e-b84d-45dc-9889-b205b5fd14af",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "1cc2c1c2-5cdf-4266-97ac-16009c801feb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65e2c613-0a9d-4bda-8f88-ff46785ec79a",
        "cursor": {
          "ref": "804fe09c-e817-48d2-9566-249a3a5451ae",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "f7fd4938-685f-4d6e-9c3e-2563150913df"
        },
        "item": {
          "id": "65e2c613-0a9d-4bda-8f88-ff46785ec79a",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "91bf260c-5ed8-4611-b298-db885a3f1a17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5928ead7-cac5-4169-b003-25b6757eef6e",
        "cursor": {
          "ref": "b15db235-4bb1-4a0a-8ab8-9a451a8666ad",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "817299d9-d560-433b-91ff-49097d339835"
        },
        "item": {
          "id": "5928ead7-cac5-4169-b003-25b6757eef6e",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ec533deb-72a2-46af-9425-0f82f70fa59f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e13ec4b3-b2b1-4105-b4b5-fed46adb21f9",
        "cursor": {
          "ref": "e676ba1c-6912-43f0-8a52-71ab2c937c9f",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "318f861d-978b-4047-8874-6a670690eea6"
        },
        "item": {
          "id": "e13ec4b3-b2b1-4105-b4b5-fed46adb21f9",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f3986e18-f8f4-4c70-9c1d-f862dab0a7fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3d189c6-b384-4121-90cd-8f19ea91ee54",
        "cursor": {
          "ref": "843d74e2-372c-478c-9f1a-6fe9b2b61cce",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "43913505-de6c-402b-9b2c-287dc9984898"
        },
        "item": {
          "id": "f3d189c6-b384-4121-90cd-8f19ea91ee54",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "a57d33ea-bef1-49e0-bd6c-5b701efb2b1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75f84fd6-6c6e-49d3-a47e-481c2e9a895b",
        "cursor": {
          "ref": "07d42c4d-5f00-45be-9657-1fd660ef8911",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "ac58c687-165d-42e5-a722-3e313e099c5e"
        },
        "item": {
          "id": "75f84fd6-6c6e-49d3-a47e-481c2e9a895b",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "dc928fc0-730b-464a-b1b7-de504d2f9fc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b73087cb-866e-4c9b-8248-1c3a045becb0",
        "cursor": {
          "ref": "312ba828-17e5-40a0-8a51-5b20611ed010",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "f3284c7b-7546-4d58-84e4-9133033e8cda"
        },
        "item": {
          "id": "b73087cb-866e-4c9b-8248-1c3a045becb0",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "93a27798-b001-4d3b-8f2a-f8b58ca284d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "576dcb87-fd06-467c-80ea-37c9cba7eb8c",
        "cursor": {
          "ref": "3e9fea67-5aad-4f54-a582-62fcb480331c",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "1f4e6102-5a2d-498b-81e1-33fc8b565ff8"
        },
        "item": {
          "id": "576dcb87-fd06-467c-80ea-37c9cba7eb8c",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "3519bb2d-b0a6-434b-8214-7ba821f533a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20636c3c-1297-4735-82af-7a90b0f319d2",
        "cursor": {
          "ref": "3bc92c50-667a-4e3e-8352-7c0299bfe330",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "0a877654-bd53-467a-b1ea-5a8b16f5eb36"
        },
        "item": {
          "id": "20636c3c-1297-4735-82af-7a90b0f319d2",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "fc232bfe-d98c-4268-bef4-4bc52d6f3dd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "049a27a6-0a3a-42f1-8d72-02a384c09dba",
        "cursor": {
          "ref": "86d8bc2d-d317-49c1-bdf2-fb49baaec4ff",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "eafefe2a-0cba-49db-a18c-d3f9772d89e4"
        },
        "item": {
          "id": "049a27a6-0a3a-42f1-8d72-02a384c09dba",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "9bb64a78-4932-409d-9b00-2780954ee54c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a09a39f6-99cd-4f9c-b493-a529c8d28e94",
        "cursor": {
          "ref": "5042b1d2-f6d2-414f-84f0-66dab6031e87",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "2dcad6d1-a838-4dab-b7ab-59543df30fbe"
        },
        "item": {
          "id": "a09a39f6-99cd-4f9c-b493-a529c8d28e94",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "e1f30626-d530-4df6-aa9c-0872e2646e37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee4c25ad-dc8d-4c19-8393-bf87747e5713",
        "cursor": {
          "ref": "4237abfc-a8c6-4f96-8c19-1d1f494b1d72",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "4e5dbe54-abbc-4ac7-98d7-59595641330f"
        },
        "item": {
          "id": "ee4c25ad-dc8d-4c19-8393-bf87747e5713",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "256794b1-4f54-4f5d-90e3-16c9a9a27a93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b045badc-0262-49dd-bcab-13aecf64871d",
        "cursor": {
          "ref": "39ff32ba-e8ae-4733-933e-9b9fd4347160",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "9085357f-0e45-452e-8e44-fcd1bdddbfd4"
        },
        "item": {
          "id": "b045badc-0262-49dd-bcab-13aecf64871d",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "255108a4-632e-4569-8fb9-2e55ac15dd37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c60519a8-2cdf-44d1-b73d-86372632b721",
        "cursor": {
          "ref": "9c63dac5-9931-4ea2-9562-ba4a89cae688",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "8fb4361d-badf-4416-a67e-04ce2152edc7"
        },
        "item": {
          "id": "c60519a8-2cdf-44d1-b73d-86372632b721",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "73ecb09e-688a-4ac5-98d7-087a42f14ec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f94cb68-92a8-47da-a44f-fd65bf6afd72",
        "cursor": {
          "ref": "69d77eb4-6f26-4746-a646-99fdb440bf7e",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "d5798175-e4af-40b1-878c-c5785de091d4"
        },
        "item": {
          "id": "6f94cb68-92a8-47da-a44f-fd65bf6afd72",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "feacb14f-0d08-4a3d-b7fe-03f2725c88ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ed498ac-432a-486d-aab8-7531515de988",
        "cursor": {
          "ref": "fe247787-d326-4e64-a395-2c0d281247fb",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "7a6a1ad3-6fc0-4c7d-bfa9-39ef9faa5bb6"
        },
        "item": {
          "id": "0ed498ac-432a-486d-aab8-7531515de988",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "fc9eab02-2b09-40ac-9200-59cb683076dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e766a26b-6471-4aa5-9c18-a83464884717",
        "cursor": {
          "ref": "48a1891d-ce54-476d-861c-7ad9a0c023dd",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "a308c7ff-fc96-49ca-a508-5b25429d6e0b"
        },
        "item": {
          "id": "e766a26b-6471-4aa5-9c18-a83464884717",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "d072be21-0ec7-4379-8e4f-6f2d10badf71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92805a21-e0ff-4042-9950-ef5040318fda",
        "cursor": {
          "ref": "b0a04020-f4a9-4b3b-a631-3a232b10e593",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "3e9fec1d-0a0a-4c84-bf23-960cb7f304a8"
        },
        "item": {
          "id": "92805a21-e0ff-4042-9950-ef5040318fda",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "a07f5b84-3b41-4194-8e2d-f2d3e040d3ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0ed9686-1ec4-4438-ad63-c89e794ca4d6",
        "cursor": {
          "ref": "b25f500e-90a8-4900-b5ef-f6676cbeaebf",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "336897c2-947e-4283-a1be-1e5528d7e204"
        },
        "item": {
          "id": "a0ed9686-1ec4-4438-ad63-c89e794ca4d6",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "56cbab1f-7337-499e-8e76-7e64507c9a01",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d2037b8-3e6b-41e5-be59-e6f8729a9aa9",
        "cursor": {
          "ref": "3714ee4e-4279-422a-88d1-46a80ad9bebc",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "2a563371-8b44-421d-b115-6526307580cf"
        },
        "item": {
          "id": "6d2037b8-3e6b-41e5-be59-e6f8729a9aa9",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "370251bc-35a7-4bd7-be4d-b844cc605d20",
          "status": "OK",
          "code": 200,
          "responseTime": 154,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "54d89b16-a6e8-437a-b7c5-32002af7b22d",
        "cursor": {
          "ref": "06ca2fe9-ed5c-4acd-800a-649e50d65a3d",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "cc996f1f-802c-4ca3-a327-660c4fec8785"
        },
        "item": {
          "id": "54d89b16-a6e8-437a-b7c5-32002af7b22d",
          "name": "credentials_verify"
        },
        "response": {
          "id": "7fb0a41c-8623-498e-a24e-48c7638e85f1",
          "status": "OK",
          "code": 200,
          "responseTime": 156,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5e169e0-697c-4201-b3c1-a08af0cd81b0",
        "cursor": {
          "ref": "a160136d-84e6-4c9a-8e04-a489e8ef7a26",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "e7f292cc-9a7d-4604-9bb2-6f6554e610c3"
        },
        "item": {
          "id": "e5e169e0-697c-4201-b3c1-a08af0cd81b0",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "fa56c322-0e37-4f08-a390-7b3790fbf0a2",
          "status": "OK",
          "code": 200,
          "responseTime": 159,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2f9ea50-ceed-4feb-952a-36e9e7c73787",
        "cursor": {
          "ref": "9a2cfd63-7306-4a79-8cc5-3defda3faa81",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "11e81680-ed6d-4df7-bb1c-838126f16ee8"
        },
        "item": {
          "id": "e2f9ea50-ceed-4feb-952a-36e9e7c73787",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a0cbc494-859a-426e-a5a5-fdfaf2b34dec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2f9ea50-ceed-4feb-952a-36e9e7c73787",
        "cursor": {
          "ref": "9a2cfd63-7306-4a79-8cc5-3defda3faa81",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "11e81680-ed6d-4df7-bb1c-838126f16ee8"
        },
        "item": {
          "id": "e2f9ea50-ceed-4feb-952a-36e9e7c73787",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a0cbc494-859a-426e-a5a5-fdfaf2b34dec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc1f4a44-764f-4a08-a43b-54f7372dacd3",
        "cursor": {
          "ref": "c3e727ec-6ef7-4de9-be70-c9eb97806839",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "776ad54a-70e5-4b72-aea2-e0b03455372a"
        },
        "item": {
          "id": "fc1f4a44-764f-4a08-a43b-54f7372dacd3",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "5661b510-9d5d-46b6-b9f3-c1d6cde285fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45f5bbeb-dd72-477c-bb0a-c7931049f2ed",
        "cursor": {
          "ref": "1a1bb486-1c87-4bae-9d12-0e67a44589f8",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "abe272d2-5c44-4dfc-a3c6-6f99e3626cea"
        },
        "item": {
          "id": "45f5bbeb-dd72-477c-bb0a-c7931049f2ed",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "6be839ba-0b45-4804-a01a-b9ca51fc1463",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}