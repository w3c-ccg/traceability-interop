{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "5b9bba65-a0ab-491e-8ce2-819701c4896c",
        "name": "Clear Cache",
        "item": [
          {
            "id": "2fe6ca8a-8e0a-487c-bed7-9929282fd14f",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "050cc451-4e1c-4731-998a-02581d5bfd70",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "48891cba-fdac-4c04-82d1-ccd02ac16f59"
                }
              }
            ]
          },
          {
            "id": "f7d31912-c5f2-4609-9147-35ce7630e599",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "087465ff-a5f5-4746-a717-b7a0bdae5285",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2822b615-43bb-49fc-99f1-357d9787a60c"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "4b22c8f4-a64c-43e7-98ee-b9095ffd295c",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d82872db-110b-4ae8-b094-4ae28e866d54",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3568d5ec-d6ac-4c6f-8eb9-15250f6b41c1",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5351414e-5c0d-4302-86b1-71f689ca0163",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f4b39ab6-0619-4bed-8d6c-2b557020174f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c658cd36-9ba3-48eb-82b5-58298a92ff13",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "86b4287b-9276-4f1f-bbdc-c258dfbbb3af"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "250965c7-5282-4403-98e6-c1688344409b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8e60f658-1e7a-4bea-b126-7c493a825889"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d9d4ede9-a4cf-4db4-9e81-5196e185257d",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "1b0f7c7f-5b89-4284-82a5-b8b5082d268a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5acc5531-44b2-48a2-aa2c-151a3d961d5e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0d2f36e1-095c-4834-bbc6-57199f5feb04"
            }
          }
        ]
      },
      {
        "id": "565a2948-28b1-4ffb-bd14-82bbdd3376bf",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "3f0ab04f-54b6-4572-a92f-c6bc269508a2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e4198281-0bca-49ef-a8a2-d47c85836f30",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "56b5403c-c8a8-4106-af82-4ebfd0cff084",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba6d1047-931c-47e1-b5bc-188934e3e428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d642a9e5-a01c-482f-a854-f66372828c76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bc968b6-214c-4a14-a6e0-a402f15b30c0",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf3624e-5293-4876-a73b-197e724da694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "27996ce5-9bec-4e5a-a2fc-e4747c54849b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1e2ef37-7fa8-4289-8bc3-87c6080784d2",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d738782a-61ed-4446-9d72-9055e372d258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0ab17626-e9f4-483f-9435-75a151d17111"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f6cb1867-2278-4936-887e-f608f4b1e86e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1fcbbd5d-4f09-486f-8211-db7dba19af8b",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89d39204-25b7-4bc4-b455-e7acd7b4f2bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d31226d7-e474-4f4a-ab17-765b7fef6229"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "050fbd87-0310-41f5-b1ef-cb43a9163de9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b263593-d10d-48d3-a1cd-7d64f4375080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8b7553e-4a17-45b7-8321-50507f9a85a8",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "219981c6-fa40-4c27-9240-6d4b61ae78a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2651fe05-8567-43be-991d-a44cde7893cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de576cb2-e917-43a1-8bff-4d0e13e71994",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "c33e95ef-c4f6-48bb-bfd6-2d6d4ba82db2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ef1b6d76-7905-4b4b-8fc0-6f4ba5fa8177",
            "name": "Positive Testing",
            "item": [
              {
                "id": "49d0bfd4-9109-4267-8b7e-c32c319052f8",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3dbba17d-cced-4677-9ff3-dc9985247a30",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "15d8a4db-fd6d-49fa-b988-44dc123790c0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cf8064f4-3afd-4204-ab91-1c7fe5a5e671",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "8101d641-aa5f-44e8-bb9d-c807cfd880e6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2d3dabbf-c013-4408-8e62-0305b74a291d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0f367ad2-ab29-4ce0-aef2-70b997fc96ee"
            }
          }
        ]
      },
      {
        "id": "d8d2d8f3-0316-427e-a5a1-7dfe37119ec5",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "8d2a2192-804e-4964-825a-1e792b94030d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "051dd8b1-226d-4dbc-ae7b-8464ff026de9",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "240b49fd-25f4-4876-91fa-e8d6232818d5",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bb225fb-7b55-468a-828b-c4033d4e6584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3a38162-488d-41fe-8734-709a230ebebc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "935a7763-1bf3-4e8f-a4db-d8a085a09bd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e9f4c94a-dd6d-49ce-9a1c-1ad98ef945bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1543989-3a64-419e-bac2-4eeade7e0a01",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "966a6465-f3ba-4b58-81e2-460a70136434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ef990a4-c5d8-41c9-9ba9-3a10063a4c67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6e28ac6-1bd5-4652-a381-be22e82211f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "914f4258-fc50-48dc-a353-1aafcf359a25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9ae1b97-c05f-45c6-a285-a4b75448cf50",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac0a1bc1-896d-4fd4-accd-b9a774c761c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2e5d760-d8c6-4d50-971d-a580c214078b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14f46585-4a45-4286-b065-6cc0099693c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d33e551-d062-4ef2-9ea8-8cb1d5340b0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b5ca6fe-675c-4e8f-8db3-da57f63cedba",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a9d4f8d-ec9c-467c-9df9-871952177182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73657337-1048-4edf-aaf8-6d7aa6afc8bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0f23c2e-1c74-4316-a2fb-33b94c3f8c6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce95ba9f-b645-4ee0-974e-ad996b9e1d54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "656ea185-d62a-4514-be8e-4eb73ecdd6b6",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d161722-e29d-45a1-8c7b-2d4a7a536e8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b22f3c75-a217-49e6-8e8f-6faaf3a583f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8519689-00a2-4367-8a8d-f07ad1bb0d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ab8c740-b76a-45f9-92b1-9bafb122c03a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ce27033-12f3-40e1-9778-ba798908de98",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a6bb372-5242-4692-a0a2-2f34f0f4c7e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "123c4041-4a3a-4996-9341-e049fdedfa6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ad07b16-215a-44fe-8cee-7e62f889bc07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f5609e1d-81a6-406f-b85b-40ce21f9e3d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fabee95b-c75b-45fd-9431-59fd46e1df9f",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e43c50e3-8295-457a-9669-ab0575f1ac51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dfd5f76-fe36-40dd-955a-eccfc66bd080"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18b8e280-9b1d-4b30-9b4a-2b2ab0d053f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "063278ef-f28f-4787-98fe-122e2a6c3c09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b69ca52-ec5f-4264-845d-04bdd6221dc4",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1ba50b4-c222-4298-9989-f9aa3e056a30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e950f9dd-4f50-4a3a-808e-d36fd6fd9f1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "257e70d6-4cf0-4d19-ab7d-a931189883af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6ab2a532-f5e0-49a9-a46f-dbb6a7901977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c7513a5-f3dc-41f0-b930-549df1dc77f2",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a80a4e8-2c90-4b85-b933-4e27307aba21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0692234-2703-43e4-97fd-fae703eb5842"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e686cc9c-51e8-4438-97a1-aba3e69f274f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c932dd2c-d905-4f07-8cf9-e23c0c04b7ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a68a9661-cf88-4c39-a0e3-9b9fabad07ac",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a8ad1bd-7f91-4c8f-b004-b53d968050c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f386527a-cc8a-4710-b555-92cc74e6cdcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c9bdeaf-17aa-499e-ab50-495a9ad5785d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f0363c75-6b6a-4e70-b753-1185844894a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dae99ee4-e87d-4202-a580-3407fa3e7720",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "881840b0-502c-4478-ba42-f78a811e0b0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d594d3a0-fc91-4397-a762-941f29654ecd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfc4fa4c-815c-40f7-b408-5db8a9d09010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd859069-070d-444c-8d0a-bb1d732ba800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fac1b032-47a5-4d66-a2e7-ff86e2bb9a1a",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b33852eb-86fc-4c87-b8fc-a04b32f35edf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9de5363c-672f-474e-a860-81f99e4edfae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a783057c-d6bb-4b81-8d63-ae014ed30319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce68ceaa-dc9d-4adb-8cdb-e76f475c6928"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e19066f-cc07-4ffd-8253-d280e9de79c8",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "001e3139-c2cc-4bcc-ba77-35bdf7f5066d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "712b2f2d-ffa7-41fa-826b-41c8853ad888"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adb538d2-3cc7-4227-ad1b-96fec8b0f33e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b7a353b2-5414-47da-9afa-6d00b2fd1bcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a745f351-7d05-4ad6-a9fb-b8ea9e38dadd",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c41676e0-5b22-4f29-a500-f308138286c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e642dd0-5359-44e5-96c6-058e771f9906"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be462d96-0201-4a76-a832-d8d901bc430e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3b51c46-cb31-468b-9f4c-5f12e6464908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f9d4d44-6555-49e0-a57c-5bf0c02b0369",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee68389e-8b4d-4ed5-9f10-939079e378bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e1400e7-ddf0-422c-8105-0373b59e414a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea129e81-c059-448d-b2a0-a70112e545a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1c609501-8a97-41e7-995c-c14c19a68d2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22ca0d45-8e95-4392-a634-9b68d3ad32f4",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "839aa9d9-de03-4d15-bacb-d13e61f7a856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46c49014-03e8-45e9-9e02-208321c5693c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a132285f-3cad-43c7-a0f2-c204a17e3761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fec1a95d-c737-4188-9157-e8a6968a2a10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec1ea89d-cb24-4cd5-8c0d-1b948d614cb0",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d981597-8752-43fc-80d8-f21115b19900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11ec5590-cf33-475a-b3c9-475003c7a575"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22952d37-2428-4a09-ae58-d14ab3c8efc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f656e7b-fe8d-48db-80b6-ef3dd4b24d1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11c1bb93-9c91-4c99-a9e7-916299241259",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77e9aa93-3645-4f0c-b07b-f3bf4fb53694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c5d3ef0-d1d0-41ed-982e-a07e32a0d851"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "211323a5-1a1e-44f4-a062-01ee2cc59c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "acac7192-7806-4f94-913b-61ad7d3216ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09301b57-397b-4d2b-941c-10a3cc02319d",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3ab5086-a7df-454d-9dde-0963c374c6f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27b72a24-cbea-4092-8989-741a601ed750"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e66199a-1dbc-461f-8c76-5af3bec7ab9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "82b18195-0dc0-41c6-b1a4-73bc7eca0bf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7327a2ea-2ba6-494e-94fe-4114e9d7be84",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9141914e-5cc5-42fe-929c-3c3cdda8a6f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecbfc803-c14c-4e1c-bf2a-dff3b2d3d983"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38aead18-0026-4c6b-9cc4-9f4a54899366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1244a7c5-b7b0-4efa-bbc9-b1bc09cb0bc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84e9de72-8588-4ea3-8eb7-fd423a9370e6",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76812e16-aaf5-4530-bba7-5244e62ec44f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f970860e-8a15-44d6-b63f-779007adcfe3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3234235d-8681-4c38-9df2-5d77d3fe3273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cef21eee-2a42-4b0d-93d1-9232fda1c9c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40ac36bd-47d3-4e1e-8ae4-48d06f6141d0",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "962d94d6-c5dc-4d71-a2dc-c25da14bc3f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a2a78e7-cd4c-49e3-a324-b4736b429472"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a928a26f-6ec1-4ece-8ed1-b9f0596122eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4baf4c4-13c2-4cfe-b30c-44c0e480a87d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c056d0a3-5b56-4d3d-bde6-c2e089499349",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "097643bc-0f21-4b90-9b35-d51121694a36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb5c57b2-3891-4c79-9a5c-7458e85d4a71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdfad69b-b43d-4ec4-a6e1-d02bd50fd309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8fa27c0-385d-4689-ab4b-ca45176cf5da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fa5a204-4754-48d5-bf2b-cd141ba70b5a",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94c0cab1-d14f-44be-87db-eb9a682b38eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86bc4d9b-3a24-4c18-a92b-b8ab41c9d45c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a1d49ab-c608-478c-8331-f52cde581a85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "20a5bac3-bf35-401b-a268-ce16b2086152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f10c84f2-168a-4539-b85a-54236460a531",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddbba50d-c8a4-4463-9235-9861dc1be648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a027918-46b8-42cd-8d3b-400403d63c2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37d86cbe-4ed4-490b-8443-e2cae141ef08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "96fdea6f-01b0-4507-92ae-c7fdb9daf148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4843dd03-7083-46be-8bc4-c90d7e0d6fc7",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "813312f3-8e85-4313-84e3-51f3d813c3c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7aa9b99-56c8-41d0-b21c-7e010828e8eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a670ed6-d4c8-4734-9ef7-eb439d63cd58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef2c7ea4-e73a-426a-bb9a-5507704b47dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "148d280b-40a2-4534-aa3d-d7f40ddfd09c",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fc384f5-6b3e-4317-a126-142319d9cf53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f32ff9a-4eef-4bc1-b3bb-ba7da95ca28b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a53afb8-60df-4765-a32e-067b3d508536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5e465e0-3eb8-4895-aeb1-4f663e3750b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21dcc9d6-a950-4d1c-8def-e8fbd3f2a6ff",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12306d32-3ca8-48a0-9b5e-bc99beb49dd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1694e349-ef1c-4525-93b2-2f058f0b464b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fbd417f-69f5-4550-b82e-5c49628d42bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8223e71-923e-49d5-a107-9c08b93fbdbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eadaa06a-d2a8-47c6-8178-1f457a2fc2e7",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0f65674-5ea3-4337-b24e-aea5ae5c977c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e80300a6-1360-4270-89e4-a77eca6b8c46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaef618d-7644-4aef-805d-04f80d8ee751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6878b776-c5ab-43f6-adc1-e64a6b20d5b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1195eaa4-2584-4b21-b32f-231ebceaa5d3",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "750149fa-fb89-4b54-8784-4435c0457d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9c8025c-3639-485a-81df-4dbbcc718bb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ffeb510-e326-44b4-9f10-eb6986d408f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "09d25395-8988-4660-8a63-5cf0f090e886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d279dee9-98bf-43d1-b18d-c1eb65807c88",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30754fd8-cb3d-43b2-a5ec-73f00d40ec0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "049a18d0-3940-42fa-b531-8561d590d0df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "421eb6eb-7c35-40fb-b9d8-6b0cb0406222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fabf0904-b04e-4a22-8706-117f98f9aaa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8500b50d-c729-4897-be22-86c6df50d913",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a22f1329-5c22-4086-b96b-e1501cb5576e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c91a13ba-c965-4f28-b6a4-924721af4352"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "482a3a6e-7819-4e77-b9f0-b522d241d876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6a96a79-7892-44a2-8ed7-9a2f1dc3c788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eea8d22d-3dd6-4b5e-b201-26a7d5c06c12",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd2e3950-2665-4746-8a9f-e8fbc7978a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df24695d-5d0a-4de7-8097-9e0f90265997"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "739250ea-dd80-4a1d-9187-e3cf46e2f1dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d33ec17b-afda-4800-b9b2-605c2b65272c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b17878f-5279-4db5-b435-ae8fc63452f5",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f594366d-8ade-4752-9d19-ff8a94f4a299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3934132-fbda-4da5-9c60-fe2f6d1f51ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cefb7cd7-cd37-4081-8f09-402f8678a245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "067b7b14-6fc7-405c-a597-b5864f0d32b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2e25a9a-fd2e-4115-9ee6-250c94750a2e",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96e7528f-bd9a-4e94-8ebf-cad26eeba193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc72c321-5834-4387-991f-bf45beec3796"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a45fe328-88ca-4adb-8028-bb7aafa55bec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "88fa1267-9144-42ee-b52f-37abb816c637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1848a2a1-c86e-4c30-9e84-b1ee8a0ea97b",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0540a3ee-08d2-4013-9754-05555a673b6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ac887c9-eb34-4408-9864-bcac4ac1a534"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d76ef984-7223-4814-8f32-ccc6cb047664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0f723f5-4c6b-4d3f-a698-94f57c955a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4276a068-5e35-4ebb-8b72-dd493115161c",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb0c81b1-d4df-403a-bd6f-d3f657812392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ec8b70c-ed29-493d-892c-34fb2b245b4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12bb8089-411f-4272-ab70-7dad82ba17d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "e5d5c285-633d-4df1-a1ad-913d16246c12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "694bdc80-c690-4fed-b300-7ef5e6242f28",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f515117-cdb3-4494-9451-9885ece6ec6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5e79397c-f578-4cd8-8c9e-fbc3515c3780"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e35e106-147f-4acc-84fb-a673b7d2c1f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8a7b70fc-5e42-4bf0-95eb-8d63a6fff2c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c10494d-237b-4a3b-aecb-3aefb217a8d7",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b77b361f-32e0-4bc6-80af-3320cd7319a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb5b2965-b0b7-4f68-b128-3af11a917c87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09dc68ff-8218-4453-8010-7e48db2523aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "174cf403-f229-4286-8082-e1309c430173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ed99490-46df-4c5b-a68e-4dc0658d7495",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a33a78a6-8e02-493b-955f-91335f587d8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82d5dcb8-4710-4181-9ff5-e1510001d257"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64a47733-5eef-420f-85b8-8dc319cf207a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8e12b1a-89b0-43b2-b667-947fe2552d92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6bba2ad-3043-474c-a4e6-73b717a11610",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "903c6675-7ea0-48a9-86f9-e6e9f393517d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "892dbbf8-540e-401f-87fb-a677d1413014"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12418881-7bc6-489d-9ccc-a89c5718b494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "642e937d-ef65-4192-9330-27f6306d8546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1db13a4e-df97-47ec-82c3-3971c46f496d",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1572de6d-592b-47a0-9b6a-0a0aab3daf5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3290e3f-fb57-4118-87ad-78a443459387"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "164df704-e980-470d-93bb-22b5f01777c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "36592365-0c89-48d6-b408-e3263e951940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62f6526d-7274-45c3-940e-13ed8d6feb93",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db1586b-f10e-404c-8ba7-93388455e457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bd2d41c-afe1-4020-9ceb-7d3a60675d4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37d8f489-74fc-4bd5-bd61-324b2d7da04b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d369c562-9878-4817-abb2-155c0ea0ae1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dfbecdf-54f7-4e3c-a633-e415c6ce8b55",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7967798e-dbce-466c-91be-d3b8f85b1571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80895723-2d0d-4adf-8ee0-83a68917cd88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af034079-e0ba-41b1-ba47-844dde1ffc6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "10d8b40c-bdee-4529-96db-b13c14f85463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9add4d26-4db0-4c90-a425-d8368bf4f220",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a53167db-eda4-4a0f-8d7a-bcfd11889926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71e6774f-531d-47dd-83c6-9c2b033fb5c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd5241eb-e505-4c1a-846e-8326561acad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "36cd6386-255b-4bdf-9d4e-14040f80442d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "986df76b-00d4-4b50-9eed-1141f6285e63",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13dae483-e667-4042-a584-7bd4c5a27a73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02a66dbc-f12c-408d-81b1-335f95c13257"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae9fc00a-6b20-4ccb-8c5c-808119353ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1dbff2e-a78f-4f57-a00c-b5a730274f37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b2126d9-06a8-4d2f-b84e-72a1c58e8c49",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38df5bf1-1564-4437-b414-086c4e8497a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "097b1ebd-f25a-4248-b5ed-b335bf77cf90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27149fc8-deb9-4878-babc-cdba317a4b0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "513956a0-8818-4576-8211-f1824122ec75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "398b97eb-3c6c-4fb2-86d6-65f1509f403a",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b324ebc6-7323-44a6-bc9c-0e389aff93d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0957c2fc-c39e-495a-90b3-281b870e8609"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ae7dcf4-7dbd-480c-b311-720d99a3c1ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "12f52769-6ca0-4b1b-883b-34ca833a4441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2209058-cff5-4087-b364-a7409bcd29e1",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f81508-f030-41fa-9ed7-52a14858f16f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5be7b9c9-5ff7-4473-ac1f-7d15c8430acf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "265185d1-558d-4d1a-b9ac-8f2cec107e85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aee79394-c018-4c89-9b68-af3638616777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd7d559f-3935-47d0-b246-ca8a1961316b",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4181577-2f50-4019-ab20-e8e9a223c4c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bf8483f-aa8e-44b1-986c-fbf33e6d4cd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69cb066e-7899-4c21-acae-179772a6bc94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9888992f-dd98-48f6-b787-cb12ee8332af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2442724c-e3c0-45c7-ad30-b6aff450cd92",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6597d66-c8cb-4956-9b2e-6413e1fabf1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76cd35cb-ce39-4c45-a4b2-40055fd77614"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a0296e9-7b41-4ce5-b3df-ecb177a10cbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1adb4f5c-68cc-4b0e-b660-07337d45c24c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef2e9acb-00dd-4bd4-9048-aafb01ee1711",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fe70028-847d-4b90-8353-a57f1832c505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d6fc69a-57fd-4c5b-9738-38255e3697fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f66fa7d3-f236-41c4-ad5e-2cf1b85cc1b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ba03dcbd-5161-4476-bb6e-e458d46d71d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e881486-45a0-4122-8658-5053927f203a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43fe84c7-98db-420a-b430-70f41c699631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4afdc841-cd65-46a3-beb3-f0dfdd6d7701"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55c94a2a-36a2-4abc-b56c-590df4c17ca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "53107454-ed3d-40d9-9de3-2325ccd39c83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "450cdcbc-4381-4d64-965e-6f471872d892",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7df44e64-76c3-4dc7-bc8c-ac961891aad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aac5b774-28d1-48f1-bbea-071317f1aceb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d07ee927-d0d6-4080-bdea-21a31c7c59d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9dcd632-381d-43f6-b66e-e4c63dc8be13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f951710-9dcc-4117-89e3-619ad3ff8ee4",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b056638c-bde8-4fd7-bff3-ac17ab0d72ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40aab500-f428-4c06-ac4e-473976dd12c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd54e05e-9977-4d32-a072-ca9afb2be060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb526bfa-4c43-4929-8174-e1ebdfa60bbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "661a2f05-af75-43d2-a946-11155750e51a",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "133028ea-1f4e-436d-ac03-fbea1b19c62c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64e033e7-d90b-492e-b19a-4954f1e0a0fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79104ee7-1e87-45f4-8a3f-29e3faf65c8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e6e940b-e651-44f9-b2f7-4ca915b218e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33224879-24f0-46ac-aa18-ecfc2eb18e4d",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bc1cde8-04a7-46c1-b280-c90f891473aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fac3a89c-f455-4ed1-aa52-1d0ebb2980cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ccacfd1-c905-44ae-be76-effc335a2ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc935ff0-3f33-4fde-8c23-45ec0c3c8699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9987b9d-ccd8-4a72-8db6-968c851dca6b",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aef9b9f9-d417-4a9a-8a06-4db79a95e4cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5ec2954-ae7c-40cd-9477-4a0bdaf8e6d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8bf3e7b-2311-4d11-9965-4b9409b0cfc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "95080ebd-fef7-47bd-bbd5-270821c8c824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1694f65c-79f9-4cca-922f-ec73ec83ff59",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bff6982-3eb4-41bd-9ef6-7bfcf38bb9f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fbb7b1c-9a10-4089-ba25-7d7effd6a8a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd7dea60-394b-4561-bfff-f024a54f4993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e8c0901-3cd1-4d69-b7ae-1c1d65db35f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42fdc49f-d783-4b67-b577-c93aab06a1f8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d96bd3-a087-4e43-8c7e-5980e5f8aae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1af61ce5-9baa-43d8-a33c-a710271cddbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97c08b0e-fe7c-49c3-9a9c-7a9ee39280fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d50d1324-c57f-4ed6-afa9-0f60b2fdab08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "937832d6-62de-4637-8203-2dc8f78bac99",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ca2cb49-7348-49d2-bcc5-992fd5477688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43492981-1936-4cec-89fc-2e1a36e01aab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e6ad239-949c-446a-9731-f4cb683dce3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "53dd43c6-2086-4304-a6ab-a919080cf246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfb0b023-70e2-4acb-bcbf-1d69074c6e11",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b23b364-9ced-4753-90ba-762990587e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd54a02f-cf59-4ce2-9fa8-55105a959009"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f126e5f2-3d21-49c4-905a-fb8e5912a149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f553d7b-416f-44dd-80d9-9dae3749bdfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcc74e22-7adb-4701-9295-06ef486ab178",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f5827b8-8cc5-46aa-8540-9910a5984a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee097c08-50d1-4bbb-a119-95107fed5055"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb0ef326-24a4-4169-8623-d491dc3b4a7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f18bda1-318e-4a68-893e-db7175f71ed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de011193-bbbd-4f1c-be28-415dd86dcf1e",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a51197f-5c76-4bdd-ab83-c1e9795ffd61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02958a49-fed5-4f77-8946-0fc5e39f1a9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6a180fa-8bc5-41a9-9add-2dd9eae770e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "80c085bf-e3b4-4cdb-9f4a-41b145c13a26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbf0e85b-9e78-41a0-bc45-38a6e2d5a01d",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcc3c359-ef9e-44db-a879-27def0630a02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89717ade-53ee-4276-93a3-4ef2227f55df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ed56bdf-faa3-40d8-aca1-f937290eb5c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d665164-5a84-42f6-971a-c1762b4b6171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a161ba7f-730e-498b-8450-da712cacd9fb",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ded0e7b-7da2-4b29-ad98-02bdad60ca66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a6cba33-5794-4345-ba0d-f58ff52506eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "476479d1-4a43-4b19-aba7-9c0709b6df4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c44689c3-d004-48d3-bd10-834e654257f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ccb86ce-48bc-48b1-b8bb-3a5629760054",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68fe5d02-70f7-46bd-a183-5a2dcf125d93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c660387c-1c70-44bc-85cf-9196ba59e584"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e80b4b24-70b1-4996-8db5-86850720a0f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "746bfffa-5ea9-46be-a570-4eb09468151c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eff43830-71b8-4ffd-82bb-595466203208",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a361ef04-08f8-4df8-9d21-f634a98a10d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39e272f1-e8c9-4b59-841f-5fe810d5a9e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abf03c2b-e4be-4d02-a758-dbfb4f1cdb0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec8a592b-0753-4db2-9feb-679105ee1b7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de6af8f1-9323-400e-b32d-ec85f28c5d7a",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f569c083-7457-4a46-9908-648e2d498e55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f5db0f7-e4ca-4999-9345-448b0795f8ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "185208c8-0e9f-4830-b461-d067376d3655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9d2932ba-5fd0-4e42-b516-7e0645eb2e36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a6cfcc2-df57-4b8f-afc8-f6ab8335ce24",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7ae1108-fbdc-4a13-ab0c-aa985f482251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5cf65fd-3566-4fe2-a48b-2b55646e38fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a23c0e3a-2984-43e2-9b25-2c1a20f4ab76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ce9d6c8-aa5a-47f1-a32d-feb132941700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09ada5ae-4504-4af4-b051-38425f887ab8",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ea8f560-a479-4607-a44d-9aa7c1e63f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b24ba0c-781e-4247-8e52-e016ca3b4edf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bc6edc6-e93f-4484-9071-2c624566c537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd551501-da8d-4eaa-851c-d45e37696a51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9956a03-829b-4cf1-8a19-23c866c42b7d",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2acec683-79aa-4103-bf07-02c7cac27938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4343e90e-39f5-43bc-bb69-71bd43205981"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dbf3311-318b-4243-af41-9f409cbe9312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "68bd18ea-440b-4074-bf40-f6d2c027454d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78cd9752-fecb-4f19-8efb-44ca84f7e1c8",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd8f6e64-07ae-46f0-b628-9fb100c6121a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91404325-a130-4e3a-98ad-11acb25c971a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef89e718-4d34-4138-a526-59ba44bad62a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "17bb26d2-db8a-48d2-928d-35fc9e0a4310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45bb87da-1bc1-4a1e-8515-d4f0bcd05a8a",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64c77817-afed-4224-b475-ac3ba2e0429c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d270b459-b0a8-4183-b6ed-de0903a2cd14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbfb542a-f425-40a8-bb75-c270a3ad1eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "af485b82-5517-4597-9da9-435df7a7c885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aea379d-eca9-4264-bfd5-29b1332fc170",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5814d1e3-5cca-4dcb-b57e-447cdb60b8f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc3bc212-3418-42d2-9efb-37eaddd796c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "997ea313-887c-45e2-84e6-cbeb015d984e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d646769-1864-4826-9f4d-ad76d0349fdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "446ca20a-8de0-4350-83d6-16f3ae539746",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20862160-3bfa-4a97-b764-6ee9fb707d60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2911d2d0-6096-4a7e-ab9b-19cb59996d72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52d5c32c-1b35-4311-8450-474a1448660b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b44bad2a-21cc-4be4-a07e-7a1e0966b16c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fd2a68d-724d-4212-8098-cecc7b0f5e74",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0732a4c3-3ab1-4c82-9066-3751981dff4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4a1931c-d08c-4846-bada-5f4521cc852c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdb1cd4b-e109-48f4-9b57-1e20888c6d74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e28183d8-60e9-4e86-9fb5-5c791d9d1dd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6dea774-1798-47eb-9656-5e368469085b",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a038880d-42bb-4110-8992-4d0667d9f9aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca86653d-530e-494e-953a-173b34ca5720"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "970f1eb2-2279-4160-8548-7124be2524bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b54dda5e-c2b4-4765-b1ba-1de42df5c76e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20150104-9d48-4142-ba5d-a38c33e10910",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67ea7c05-25ac-4488-9aab-157a3e2afb45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27bc6cf8-6ca9-4575-987a-9d3c75603771"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30eff0d5-f0c8-40b9-b133-c5ffce7772a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8867f3e-f7ae-4dcf-9d3a-44e3ea13ea82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f39fbff6-e11d-4844-8fe6-9d8792d3ef4e",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c65fbf2-64af-4a5a-8a7d-39c150efd0a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93f72b92-b646-4b17-9ffb-39bdb694c168"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "587e900e-1e89-4fba-9ab4-6fd1a1452406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c034869-ae88-4fa4-bb66-a906505f7150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "307b44d0-5eed-45e2-afb7-f153497434b2",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19e2405a-3c4f-42ee-8794-52b5a7d945da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5929c899-5fbe-4289-a05c-94d67bd4f610"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d258b0c2-341e-40c4-8ad3-92fa516f1c17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b9c460a9-1d7b-4dc7-976e-dd2c778767a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8115580-32aa-4792-94ae-acd5019a04ac",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "330515a4-99fb-4630-aa53-19fc7e8892ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "286ecfcc-e0d9-4ee1-907e-1688eda93db9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f885198d-15ae-4c78-a5d1-1b5e735452d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8b63287a-c623-456f-ad13-ec585caa8b4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af515537-f639-405c-ba19-4f0d209360cd",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dec6ac4d-d698-4d5c-b47c-78da88b75310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf1030f4-380d-495d-8fa7-440f102b6566"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "564c81c5-14fa-486e-973a-e5a361cdeb9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d090a88b-f373-46ee-a429-6c18a1f1eaca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc987d9c-4665-4944-9d00-10829becf657",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8e29a8a-ab91-4dde-a3d9-8168f8e9d218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39284b9a-0c27-46ec-9db9-1bb38da0fce9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd00f10e-7b88-4e05-b387-5ddbce308b8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a088413a-d160-4e05-b15e-9e553acdf5da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a7d1550-7c88-4db3-8848-8b2ab28157ad",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41f1f96e-3604-4302-9383-2205eaa48ecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86e54864-e225-4ebe-a544-ce222ccbae01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bab0c76-23f8-4533-83ab-b8414bbf9717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "348cca68-7100-4edf-b582-5202cc008de3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be65710c-c464-480a-bcc1-2f8403015d03",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "003b4ffd-9c09-4ae0-9534-f0ea25786017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b157ba69-955e-471b-b466-a954ac457ca6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99283729-7ece-4ed9-bdae-9f60b97896f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2cdb1f1-0a45-47a0-97bd-bf313fbf68c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40ccd045-ce7b-464f-883e-bafbcc676953",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0b967d8-6a61-437a-91ac-d15fe8ce7a6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d7ca024-352f-493e-a9c9-819a1524b608"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38b6c6bc-02f4-481c-86f7-a2d8ef15f320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5675f9cc-0677-480a-9c4b-6a0833d222b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04cfa24a-3654-41b9-8a06-adcf8565c8bf",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "479f8cb2-5399-4b6a-b7f1-63e4d269f061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0f1a00a-2543-4cf6-8fee-1533f311a1f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a808043-ab51-4181-8c5f-c942fe510d01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "118c342f-7ef0-4d83-839a-933e0b1a1c7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "119c38bd-06c3-4734-9b20-ed692741915b",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "993a24d6-d5e5-491f-9969-c83ec542148e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "750ba8d4-2e10-4060-aaed-57ef926ac2a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2f27196-adb6-48cc-988a-bab4f7592e23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f6f80b9-05de-46ea-a50a-5185375a47fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30664695-f849-4857-a4f7-0a49bed5a372",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09cecf46-b858-423f-97f8-a4196d590919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9df09d23-42cd-4fb7-8cbf-696d8536884d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18a89cc2-4131-4bd5-a0b1-681790449138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab65669b-6dd9-4e24-9b1f-a3b35b5704c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b13c67bc-902d-4581-8b00-6c8bd83bc471",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "954a5d04-0b53-491f-996c-b745b284cd79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cdc9100-2c36-45ac-bcee-e9dea6b12043"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ee07f8b-ec83-46ca-a850-91b63dcf3b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3c950ddf-9216-4e13-bb02-1fa44d0aa4d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81d2ad45-e3ce-4302-a33b-75a4f77c1aac",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26b56953-dc01-4dbd-aee0-7b23aadd72dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f35fca0-2508-4f9a-904e-52d40d6e509a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "112537e2-6fbd-446d-a0c2-bf283d6c2680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "92659394-2127-4391-bb87-541b02364678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63ec3d98-98c7-4cf5-b48e-a15aa8ffe6b1",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9bcc2e5-ec5b-4a37-82c7-1dbaac3f6b9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80f13e0b-5dfc-479f-bf7d-77bed88c6b4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b554aa4e-6331-4a7e-9542-51905d4ae985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f37a2a86-6b98-43da-bcd7-3627a0395731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80dc608f-2502-4df0-986d-6de04c36e3fa",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "116699cd-3f2a-44a5-b4e2-61cf25fc7be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "84dc7b78-a214-40fa-9f6b-ca41ee6beac3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f326176-9cc9-434f-8ba2-739afa7d9637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8170b5ef-1090-485b-8f7a-0f4458d738c3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ca63e8f6-614c-4823-a2e7-82f6ffd01a2e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8f09c08b-9982-43ff-a604-93a0d96936d4",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e18f0d50-19ce-46c3-afa5-f9058d95108b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "898c059c-84e8-4387-8bb3-09af89135b3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dfd3f38-287a-42cc-bb82-5ca4b2c88d32",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "a8dbcbe8-d797-4dc9-a2c9-98db410a5b70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeab8e71-5c52-4a9c-ab8c-6f1b59deea71",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd9e6d4a-e42a-42ab-b1c9-aac440368739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bb9c6f50-c31c-4a7c-9ab3-d3d034bd36b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "011e2137-5d45-47db-b645-7a909cc91059",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "30df2527-adcd-4ee1-bd25-b1574f372ef5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f1dba9f7-d490-4358-9c3d-887edf88e2d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b8cee555-af63-4233-87a4-6943c5de9a02"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "18735651-7cba-4c1b-aa12-f555e8725235",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fe046a21-fd39-40bc-b872-c9e06c8568a6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7d0fd1ce-b887-424d-82a2-c041306dedd4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "af19e57d-a961-4ecc-ba73-bdb5aa5a5a47"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9a558dc7-3656-491f-a92f-e02ca4b49a71",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8ee33d16-a392-4eca-b7bd-d13c4f117b98"
                }
              }
            ]
          },
          {
            "id": "92f71f55-759d-4c7d-99a1-7702539ca582",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b9fd3793-66f1-478f-a648-cf14dd973b65",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "518127ad-d2d8-4359-a1a1-d16543efb94a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7166ad16-1d6c-4531-b763-3c43962c0770"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eeb5fe5b-7396-403d-93c6-9692553ae4f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3ea85c3b-40a4-4582-92f8-4249f0a86fde"
                    }
                  }
                ]
              },
              {
                "id": "ca083160-71a7-42a0-a0a7-1d4c5670ee6d",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "60a9e66f-10a1-4be6-b576-7f7ba6fbe267",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7c2708bb-dff4-412d-957c-3077d803b0c0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3c1ce8d9-0e5f-420b-8945-46c5751b2572",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0b675e57-ea0b-4c3c-8f33-eb6d489dcf65"
                    }
                  }
                ]
              },
              {
                "id": "0cb9422c-2ab3-4fb6-af44-362960f39cf7",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "38c786e1-9df4-4114-a1fc-5da1bc39bf72",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2ffdf14b-37e1-4c8f-92c2-8234c7fe5b06"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "daf8d15f-716f-4203-83ec-f84c4cfc09a7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "0dbd2583-046c-45c3-8b46-c391d209cff6"
                    }
                  }
                ]
              },
              {
                "id": "8cfff72d-bd91-405e-b87d-fa4c620b147a",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3cec2c47-86a3-43d1-97e3-a8880f6248b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "683e2fb5-a8af-4745-9ec9-d6de7f4dd2ca"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6f2f7ce4-c8f3-434c-b842-b5ea6846a618",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "d7889cb5-def2-417d-81eb-2d694c4a2a73"
                    }
                  }
                ]
              },
              {
                "id": "3006dd94-fa0e-474a-afe9-c696bab29509",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c4fe159-9d62-4ad5-88bd-ffb7864d3b8a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6b48ff41-965e-4346-94c4-200a02cc0d84"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2d6b68bc-a157-4832-8bd9-4f7538a3839e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b42dba17-f8d3-4f0f-af5d-6f1134958b9f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "eb04942c-a30b-44ae-bf08-6aa628087411",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "086c231a-96dd-4ade-89e0-d60dee2cf55f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8036a875-fa47-4b2d-a651-b57615772cfc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ffb718e7-b1fd-441e-b886-d28fed09026b"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c927f85a-0e77-44b0-93be-f99eacb929e6",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "d0752406-7a12-4b70-965e-8b3e6ed8c5f3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "279e2ec4-13e4-4401-849c-b5b5c7cee3bb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8c627839-0299-49f9-9217-84585bd35c2c"
            }
          }
        ]
      },
      {
        "id": "54eb7cf8-d187-4218-9520-afed1ce75276",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "a549f7c8-9a97-4060-a78c-0cbd4249054f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "08bc9747-b0e6-4f0a-8f4c-a7387ff6830f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a3256c16-419b-4f10-979c-c9eca750f990",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c6a0062-3fe4-47f6-af95-4b46a90f5b75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a5a7295-3a6f-47e0-bf94-10a53cca1414"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdee920f-9e03-4176-bf5f-2ee3b23d8f1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c915e01-24fe-421c-8fa4-1ea613859416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b63cae23-ae15-461a-abde-26033aa107f0",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a160b654-85b4-4aab-848b-54e047826833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33e19654-d6ee-4441-a323-9a6860ed3d15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0556da61-1289-447b-805c-dde39834dcb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fdffb44-1622-4ef2-87c3-a44ed620c803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "653ab982-66c8-4f57-9694-7611a03d02a3",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e553ce35-7e8b-4aea-a1d3-d5c69c64fb58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fe2f78b-b8f1-4e46-bef5-baef0f3af6f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb43abc2-a376-4727-9602-edc2cd4782bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d33909d2-807d-4fc9-9052-5f63be71e639"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0356e98-d5f0-48ee-b36f-cf949500a724",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b7f2f42-72ca-4f6d-aeb1-e5b651ea7f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02275d29-a4ea-462e-96fe-f995a9196ad9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aabedd2-3435-4b8c-b006-5e77eeba6820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "39c75fc2-f9a7-4cc6-b043-f289e0e0683f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fef5a2a-75da-431a-9076-0ba6dbff1f7e",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4988710d-fe0d-4c55-94ca-9984535c8ab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc3fa383-1002-48d5-9f79-50c05a6b318a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b4b8ebd-1957-468e-8e45-e15f6864298d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bad8f9b-b951-4017-8bd2-84f010ed502a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e687e2d6-aaba-455a-8aa8-29aee03bc027",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9410373c-ba7b-448f-a3b4-215c1188d142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a448e87-0f29-4334-8cbe-a521c2766477"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9026408f-7d22-4abd-8568-6a51f047d4e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a5221e0-e72d-4c6f-9f60-6986cc7feff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7d8e0e2-9317-42a8-a2e4-2104fb38ff6a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac343292-fe5b-4698-b1d3-29d27d8c3b58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f052a4cf-2a44-4577-91b0-d8ec9efb7877"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47adccdd-898d-46d5-a911-597bea3f8de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "dabcdd98-3976-40cd-bed8-bd4dca4c89b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "092f6e59-e445-4b98-b4ec-9f072a9baa2d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a1d7419-8a5b-4574-bd65-4d81f99a8df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f074914a-f753-4ccd-8a22-e897888b2e61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37ba0aac-d8bf-4530-a157-33c2b87ebfa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8f02d76-42a6-49f9-92ac-c97930cf62e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ef8e34d-c46f-4449-93ad-0689bb3e0725",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75fff711-63ef-461b-8cee-f40c72a065b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8bc126f-6829-4c1f-ba78-951c6eccaec6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edc8fcc9-da10-47da-9190-89d313af800e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "881d3098-633f-420e-9d8a-d96a4bd2c6a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "182724b3-8367-427f-912a-6bdd1f2c192f",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b13d1807-a02c-4c2a-8d3c-f9c921b0d6f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f39fd44d-47a4-4f23-a514-c4a71037c45b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "416f816b-75b3-432a-aba7-3cdb53051579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d833ab9c-8674-4e12-b596-cecbbfd18a3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "271148ad-7642-4729-b6ed-35fb3d26af27",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc79fda3-c7df-4a96-96d5-f70fcfdffd60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4983e409-cc78-4ac1-8d16-40c7c2abd2f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76625fbf-3fed-4f92-a26e-04ffa0e1bc09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "679f9c3c-2c29-4421-a20a-dde5c8bc72f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d10897c-d112-40a0-a90e-3b22e2e9e8ac",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b82863f-d528-4fcd-a373-72967d01a0b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4f0ff28-b9ba-47e9-90bb-4a202b72253e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "674d2654-8ac9-4866-820a-8549198dace3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "14ffe09f-7e8c-4138-993d-5fe22af7e2a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f33576c-4fa0-4997-a35d-7a6b872e7eed",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eef74fbe-75e6-402b-95f8-452f01c3ef24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "280f7c42-8d1a-4e3a-88be-a7d483a5a3ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "804f015b-6f13-4def-930c-45c9fb69f415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "43dc0df5-32d5-4a13-8a01-5710c1c25e35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e57f30ab-f84a-408c-bc25-15930ea2277c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff99bb1c-dc32-4cb4-9841-ef240eca7c05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffaa8221-acfa-40f1-8faf-0639dbb5dce4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5155a0bf-b922-4742-b565-88ee7b714f68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ccc582c2-ed0c-4424-bf98-737258210623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2357f47c-0a66-4678-80bc-84031293eb07",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36760881-f664-485d-b575-c5dc3679aa36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c05cf82-1a65-4df0-a5a2-371ee577dcbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40847aee-305d-4831-95f3-4b19d1b7463f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "40e82db5-39d5-433e-88c9-f9ca24e7f93b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "588e60e8-0a87-4908-851c-e6ceea573040",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2729f70-988f-4002-b42b-fd323e3a5320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7be2942d-bacf-4507-8db8-f035025c4b83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e3b346a-894e-4385-9ecc-2548154c0967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "46da42d6-5965-4a78-9c58-53b7cee7c48e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "770b2a42-99e7-4a2f-92ba-497d9599ac6a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "211fc289-641d-4138-a779-c218faa1d68a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "600e3dd8-958b-4bd9-908e-1f9b7a5ae123"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8bdab93-0e4c-4026-895d-e4a4a26459b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebebd3f2-3d9e-4e21-ab3d-2a5fe8a04090"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d8ec388-3c76-448d-ab0f-4de835fb6562",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b566a55-aff2-42ea-9145-da04e0e0aa4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a18176c-3a09-48b1-a983-762c742c1d02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc18a45-cfaf-44ae-92c6-1ee21afaadfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "79367a98-b067-4853-b62a-41d6fc8dbcb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7e4d9ed-4ca9-4f4c-bb63-da25aac86d17",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "430b2e3c-5ce8-4e6a-a23c-8fb7907be37a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff5ab9f3-807a-4305-b000-6bbaeac84a2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "548c729a-e273-43c1-a3bf-055cdab21632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60f54a86-f381-40f8-b65d-e0795ee3542e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ffc5ec1-6adb-444e-b3a8-66367a6fc843",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36cfb18c-9ee2-4642-9d1b-ff40871aae27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "693bec46-3def-45ce-888d-b5522d219f09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98069bf0-acda-4da1-b310-7656dd15f21e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4446950-1168-4e7a-ae5d-a9441daf272f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0b2220f-2434-4295-984b-9c3f1fba3a04",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0596f6c-9803-49e7-a9da-a18bab63039f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ab82657-1397-46f0-907d-b580ac17e157"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24aaf987-045d-4bcd-aa26-0bb53abd7268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfeb98b9-6379-4b38-9196-ea4b5732131f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9481695-7517-4df9-884e-ffc5f18535ea",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec159f24-a775-4bf4-bdd0-5346ec5a68ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2533bbf1-fd42-43e7-bfd4-bdfe8015b23d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5134a8b1-06fa-41ff-92d5-cd494b2b569c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b368cb2d-3f0c-4cbb-9e59-8b068aa7d3ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35a795f5-7739-46dc-9b52-63d51c0d961a",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc5e80c2-31e2-49df-a23a-4ed6942dde64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88585f8e-facf-4bea-ac42-8b47c5e75bf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea6d3d5-11f4-493e-9978-c2dc67b75bd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "95f230e8-f2e1-4cea-8e6f-81ecca826373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a619df4-0a77-4aeb-9414-9951dc128b5e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4727b6eb-4021-42aa-94ba-e08206dc0e93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e88a1bf-a17f-4b2e-a00e-184840d7af52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "321d5ff9-4799-41db-b7db-cbefc49b42b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b539781-0246-4f19-8d1b-a79ff7207ee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20152ea9-51cd-4806-b6d6-dd2f62a52150",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88765cc4-effb-4abc-8fd6-88ae191afb9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65118f36-88f4-48a2-b777-d59855ab4a21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f9a95ea-f573-4cd2-b200-5c658242ca30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af395287-7020-4853-8f89-4e588f78d48e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5e5878d-2d90-47f8-8bf3-0f6ddc20821e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c148d0cc-8ffc-43af-a423-2fd2607e285a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a7831d7-71a9-4714-a689-600846b3d5d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f68f79f8-7dc2-4081-ad15-6b4f76764b49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a79aad0-9c88-43da-8552-32b1b8350127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae3aa34e-94e1-4c93-9938-0b1d11397b9e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4442f1d-38e4-4c67-84e2-a3012818803f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6995e61-ce48-438d-bb80-9155234dca94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a93165-5a6c-457d-82a8-333218d155cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb552976-979c-4c70-ad90-8a0d44af66b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bab60e4-02da-46a8-807f-99f454bc0618",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2018cb39-8e0c-406c-a4f4-fdfbbca4da45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2690b06-bb62-4919-85ad-2289572a8403"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bedf011e-ec96-490e-ae19-ae97f5461ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "54a38d5c-0a62-4fb6-9abd-ee051fd6830a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3899740a-7323-419c-b270-0d68a7982455",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ec6b92a-8ee4-45d5-857e-35d787b5d6ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b1bc511-3a61-4fc7-a139-f998a6540905"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c35bc23c-ae4d-4dca-9142-90110dc9c90b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d56b117d-224b-45ed-b193-072c8db59c01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48ea9032-37db-45f5-9063-6a3b4358093f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c786b76-4a0a-4b91-ba06-01f54b0851ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a81348dc-bbc3-4349-89c2-109bc55b3dc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9079bc1f-1b84-4c61-a208-bd06ce1de3e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2ddaffe-8820-47ed-be37-71dbab5e27ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c40d65e4-354b-4df4-89b9-ce5bf8a13e7e",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cb70c26-9294-4592-8d9c-4ad60369551e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ceb15045-2133-4cd1-bcac-833d32a39a80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f597ea4-a7a4-4738-bfea-9653bee2e54e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2835fb8c-0d7e-41be-a8c5-6c6f1e169f1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97bc99bb-c09b-4d39-887f-275ea2c070dd",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "294a939c-3fe8-4661-9132-46c967cfe21a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e15adb6f-5458-4a9b-8de1-a055a549fd58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0334abea-dd66-49eb-9d37-cef78280a7dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "26c7bf8d-5eed-424c-aabc-7e2f75bb4630"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6c908cce-ab13-4604-9a5c-430c4349104f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "791ddd96-0c89-455c-aa5f-b309fde87d58",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78d2c11d-be6c-4606-89be-31945fdc80f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49771a91-eeec-4e96-9e9d-399c52e9546e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84477138-9e29-419b-948a-0f61b414b6ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "51995bf1-3509-4d22-b900-29f7a35ab7c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7b98bcf-a0c2-4042-808c-21cc72523a91",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6744cefb-c0a2-4e74-8dd6-82492aee2ac0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "6c31bfa0-ac0c-4d2e-b1a4-7e0ebbee7278"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a965ad3e-ae3d-4182-9624-520663a42723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f7719370-b63a-434a-b3ea-83db33df8e06"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0c7e5550-204c-414e-a815-5c110e6f72ea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "479aef84-4654-4d15-bec8-00b8a507fc45"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "88a23cd2-d2eb-416f-b0df-8fd1ec67f0fd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3a195f82-2d9d-44e6-825d-444bb39a6310"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9f71626b-1b1b-4dce-ae89-798c7180e83c",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2cbbab9c-9355-4498-8ff2-ecc442f0321f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a1fbb8eb-ac4f-4bbd-8e10-8603ae26f034",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7ecbabc3-87a7-4e42-b1b8-d145ab11339b"
            }
          }
        ]
      },
      {
        "id": "188b2edd-9325-4d44-b3fe-32ebd08e2358",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "1f409001-50c4-4cca-9e25-8a669a5e381d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "30c370bd-8fb2-4ccd-a55c-8420c6a1ba70",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "45770474-6d11-4135-af83-821497a06db5",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "067b8477-e0ce-47cf-9f77-5dc1d1a29b17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26c51468-dc72-4455-b3ff-996542572023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f43beda1-b30f-4282-800c-0e2f2e761eb3",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "350b35ae-d6a5-418a-bc59-8acbdaa78353",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5031635a-c4bf-4280-986e-b8b92dfdf909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82165efc-8cd0-4692-91eb-99c88f2c6468",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d61338e8-b818-4396-a450-c232442b7510",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fb05c2e-49e4-44b4-b2f6-18ace2c68e40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3033c387-3025-4b4e-89cc-0f68eef98f6d",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "455e7237-ef3e-452b-81fa-d87ec9994830",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3df87f8-4f93-4e9d-b2a8-c71051dabb98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3dfe35f-148d-4b67-bae5-d80f61bc9cb4",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e2c3f8b-8465-47af-a5f5-744879e96a3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c6d0669-0ca0-488d-8b12-41cd04aebbb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fce4850-ed62-4978-bdc4-33c0ae8af97b",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0b52855-8904-4e54-bcc0-68b798015ef8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89a304bc-ec97-4c12-b001-42abf1f78ddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbc561ca-fac0-42d7-9c3a-e7e3e59b1843",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fee40075-21ac-436f-98bb-dda8045b98b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b09e927-ee83-430d-9748-4b8830b6a7cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efd5d8ed-0f1a-4b14-854e-ef0b68c2edb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d21cde5d-8c63-470c-92a8-a26d3e6471e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20530c86-b45f-4ea0-bf3b-10dcbcc82dbe",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c85301-116b-4461-9970-f3c358a216cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37be3ccb-9938-4f60-b637-eef7c0299ea9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e7e476a-e14e-412a-885d-ea62d6d5ff26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f2c0949-12ad-4cd2-8947-ac312d389392"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70a993da-94cd-4d5d-a832-a0d2621be561",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3eb3bfd-6d18-4fc1-be72-b92bf407fd92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a174dc98-f66a-482d-8eb8-ea2bd0c739df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "403cb70b-1e00-4c6d-bf73-1673d47b729c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb3d5386-a3ae-4f2c-9c6e-0d3aa0063733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1164001-6a4a-4018-9ec9-815d2da210a0",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4d87355-38d9-437a-8005-9a69d5df729c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e73a9fb-998c-4c67-8acc-45b7abb3bf52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b09cfaf-0c82-42b6-9b49-2ce9d1329e3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f4cb2eb-4d01-4189-89e5-b1355adcada6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cca7683f-a46c-449e-b735-ff62ab5d5357",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca80b362-306f-423b-b451-967a9bb1f22a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f61b6a0-e9a1-4a1a-b898-5bcf05586a1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f885bf5f-d490-4dde-9ccd-694281372e78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "911ef6d5-d48a-4408-8126-06a3cbecee9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "155d0cee-f756-4ca3-ac6d-7fb379a82194",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b158a1df-a52a-4505-a2da-93bbb453eb97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c08e4436-8d93-4841-a183-9587ba653e4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "594cd4eb-40b3-4ac8-854d-3986d95e73cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3417b48b-e6dd-428e-8b87-a6c58b872ecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f50a1b31-652b-4eab-b59e-dc53340a465d",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea2626c2-9add-475a-8f65-d7e3218dabc4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8695d41-4b47-49e5-8519-f6dfc8781353"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53b7b989-a3dd-4cd6-b328-08befe5f96b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba2443dc-5c8a-4efc-a60d-c0bedf57f221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a54e087-372b-4512-b633-0d632f095d0f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a534b932-9732-46f9-bd99-cf55a80a192f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56a039ed-e877-46e4-ad17-d58f52ba732b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13027755-5fd5-42e7-8649-66385dfda762",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4f1ba14-a0f3-49ce-874c-b254dece73bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46d279a9-1645-4cf4-9d53-b41360630640",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8562fb6d-654f-4186-b9da-ccf1a865be3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a1bafe7-1ff8-429a-9a4b-7ea964f4d5b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fa5f205-ea4f-4cae-87af-ed826fab158d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6d00c95-ce61-4446-9c49-e9da52b68f2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc1a5de8-6f34-44d0-8c6e-182b0ceaccb7",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb25e89c-e8e2-4fa4-b528-cfb3eefbd72b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae0b8e7e-f6ce-4cc6-b785-be73a0a049de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3b01e27-9430-4035-9473-4abea620dd06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f7636a4-a156-4bff-8a98-7ffc40f1f361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdb37f98-cc72-4b19-9762-6e886c1a7eb0",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60e4c3bc-4dc6-43e8-a9ba-f4b3433cc329",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36e42ae8-8bb4-4d7d-8b43-36382124e2e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4dbbd06-bc9b-4d47-86d3-51a0ecb03f13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c29c61cf-9821-4d99-a1fe-623e8470a26b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5efafc72-f501-4fad-b63b-d1a1e1b448ac",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4a2160a-f930-4df8-9333-a45506c3f685",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03a8d6f3-7037-46bf-a0bc-dccd3be9908e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e919aaf6-795f-4acb-b05c-70d57e3cc717",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bbf3c71-7921-4f8e-b88a-4f3ebb06621b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d239180-e343-47c3-b55e-3fb216ad14ad",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3410217-1ac9-48b2-9426-f33b1a094ae8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16b48bb9-ecc8-43d7-bc4a-761c3e8474c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c99a349-a100-4a9a-bcaf-c4214e6d8e81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "055c1438-f9f8-4599-88b9-e4c095698fc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "400c9d46-8978-4a0c-b8a1-4a509c1e16ec",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05359646-02f9-46f4-b5b8-b1ab2354b402",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fead519f-0ea6-4db4-b782-488ac3b03b67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b9210c9-9a17-4064-9cb8-28c692da33cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be769e30-c0d6-452a-abbe-3642379dd23b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "678c79f1-033a-41cb-9de2-ad567bf45fa4",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef171f9c-55c9-429b-addd-edae704a3b2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53f0c075-eecf-4968-ae5f-0f9ba17296ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eb3c2ad-ba83-40e2-b678-aeaeaf2f9cfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ca6e283-49ff-4654-b226-6bbd7b3edb9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71c267f5-75c7-4570-9f95-2120d1640195",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cebacce0-469c-4c14-9a75-a7948e517062",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25d4b5cf-2d98-40b4-99a9-302cf5a85dc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37284b0a-37d5-4208-9539-455a7db2d80c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b56ab87-d81f-4d82-bf75-e7e378346328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd3d49af-68a9-4057-969d-f2d9a891477f",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfce6b62-1529-452e-873e-f8b30811352f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b702c7c0-b0d6-44d5-81f3-63d4c2d56c8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "913c4e0b-9c66-4c44-980e-95d43dfe8b7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37091ee9-1fae-4879-946b-80acd9bfffc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "675f680f-da0a-4c3c-a8a5-5ff0e3c0f0a6",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a574d6c-a3c2-4b5e-9ea9-1261fe69ef0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d049dda3-3978-4fe2-a93e-3c147d30a6b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a0f5cff-8ac2-431c-a7a2-b83bb22d52e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d18a63d-8793-40b4-bd0e-8bf675cc88bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3379ad76-dbac-4f88-84ea-51e7a6cc6a9c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cd9b09b-0d4c-460a-a97b-74c638ffc09a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae5332e2-18ca-44c4-b1c2-153a9043189d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54eb34d9-449e-4acd-9cec-57b822df0e31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3643a692-5200-49df-b7a0-275a1a7944db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03a31ba7-db9f-4f76-bf1e-db16ef5fce94",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7970c709-3427-4272-94e7-88b9326a99dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "acdd4803-bc39-443c-968a-68f80dd46f44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa31acb9-c993-40ba-98f4-925a9ec82091",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3aedbc22-fb24-4de0-ab65-b7872e969959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7981760e-8d35-47ad-8c45-695f007bbf75",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96ea279c-738d-4555-95dc-f88b4e62780b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15907c97-9fe1-4651-90e0-ffb4947246ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "606c9486-2875-489a-9272-cf2b20b167a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "299503f7-041b-4719-a461-c464f86f1981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0585f9bb-3e1a-4ea1-9306-2779de5c9f5e",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed170b1f-3a73-4643-8f56-f3acbc34548e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9a078e1-6589-4cf4-873b-010ca880c988"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3da38436-15a8-48dc-8d0c-eb58e706fe01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eafcafdd-b48a-4677-af08-e43e40c1083b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faf53658-f0d1-46ae-b334-9820242b4ae6",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaa31900-425a-4e7a-bc40-a7a07367a3ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13baa864-0f69-4d76-a3b0-df2499c52920"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95931ab5-257b-4852-a297-9d04590d477a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21697bfb-7093-4c84-95c1-fc1b423665a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cfdcb99-0bed-4bea-98c9-b22fba762ece",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acb8ab4a-431d-4c50-86c4-e4fd57592d54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e7ced8f-a6c5-4ffc-93b3-ae80bd73eab1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba8725a7-b972-4f00-b874-eb66d01ef70a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73ee0643-af47-494e-8ac6-87fdb281881f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88c73a06-6636-4aea-8d77-24066ff4fd81",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5a5cecb-bc8d-4974-934b-0db291acde4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61d87be4-5688-4ded-b2c7-e321dd455c18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d0ceeca-8add-4c19-b7bb-53e8bbc4d107",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48ef0ddc-8887-4af1-b267-35743b20fa39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "408fa764-bbe6-44b3-958e-2ccc82d2f53b",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "612ecebc-d20a-4e40-913b-c63728e730ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc7834c9-0482-485e-b926-ea6f3cbe0a46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7ac2ee1-fa87-466e-aa98-5cf09a590840",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71b9c6a5-0c89-4eaa-8fad-3aa36392c03d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f3ae631-149b-4614-838a-d51624e74c59",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d491d095-e26e-49fe-8d8e-c3ccd685d49b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7eaf70df-5f2d-4048-8bcd-a47e0d650c1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34ef801b-6dd0-471c-b863-0b077fbebe5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9df584b-2847-4f55-b183-bab8117d1119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b931eb93-9824-41bf-a8c8-e1b5b0d7714c",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96df7ef0-e879-4e7b-9378-b5e8bbe22c85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aeef8b8a-1548-4be4-be7b-28e3e39f0106"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "015bb567-6129-4efb-8663-1db6fa054984",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b9af340-0943-4a72-916e-1bb25ecf9d91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea7ae5cf-446e-4a04-945f-c88493c7c4f3",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9569aea-2f1c-43fd-9855-adc815e3569f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3559d58-fc82-41db-9dbe-9837da210a30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fbb3c15-76d0-4add-92f5-ca761e0687c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b9320e9-97d3-4ca8-9b81-c82a2c8d2d1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7547e01a-74f8-4925-a8db-8a71b6156716",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecd7b1d9-8eb5-487e-88b1-0666447c47db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4a23e81-a425-4e40-9de5-70e52e9cf025"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fff00722-0e67-4dd2-8754-d39c974ce4d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba2911c6-d3c1-4aa0-b0dc-719c55e021b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c504ce1-88e7-4e25-9233-4c88d8fde3f3",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f56450a-2ec1-4a11-b689-2a220540e1d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5af43a7-b7c0-48e0-8874-8c42f171f198"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd1ac8a-3972-456a-b8a1-d4e19de14f00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70aadd8c-59ce-443c-8ea6-30c8e22c619a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86f0fcb6-878a-46a1-80f8-06e2df1f5159",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9c791dc-e26a-4f5e-acfb-d989c96e5442",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d4c952d-28ba-4f7c-9001-3b868c9d36d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08488323-c991-48ba-98ba-3c35ae6c72eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "502e21b6-991e-48a5-bcfa-b922b34d1a0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf2b45b5-f6ed-4c46-b533-b638121038ca",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a74496b-6466-4130-b6eb-c780bacc1560",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8eb17aba-4586-4edb-96bc-512015c6a658"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e1b68c3-7fb8-4cb1-933c-790b31285da5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2320b73d-015c-457c-af27-f258e4400577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d48d988-2af1-47fc-b426-dc16ce13f4e5",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db1cc645-64d9-42c2-85ba-b8015228d029",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b024f369-05b9-43f4-bcb8-7f5bda2cf3ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce1b131-b8d0-4c55-bc9a-fca6041d08d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbc2bbc9-7410-4f4b-83c0-79e6729c7acb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21f3a2d5-920d-47e4-8f6d-d82be1397f87",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ac8d317-5285-47b4-9edf-388ec2b45712",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4906b6df-bbd2-4eca-be8a-8a47f9af95ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b865e0-af2c-4619-a7ca-bc9202cfb40c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "437d3fa0-4e78-4162-be4c-a89fa4646fac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f2ea66d-4795-41ab-a68e-cdf375398c4f",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8404ebf5-4501-4b08-8654-41c08fd36caa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "324677aa-02ab-4182-8186-e53a874da42a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4903dfd3-4b9e-43de-9aef-b42a91dad4e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85e05619-7254-4281-91c0-a4637b30634f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd9e537c-746e-4913-8b5e-4d31ebf1fba6",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ef71d7c-b017-453b-b26a-01031fd9c891",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bdaca9a-d149-47c0-8210-915fd4c6f94c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42737292-58cb-405c-a6fc-5523fe6bbde0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85180974-739f-4fed-ac46-32219c7d15db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90129c16-9f8b-4810-b4c6-4db3c706b906",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e63dfc8-d3e5-43d6-97d0-6e55e763c84c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d618f8b-9074-43ce-89f3-e85623ace3c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9801e26c-a572-4b96-9d16-70bda566877a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2259d6b9-a60d-465f-b44b-62dbab34423e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4ac6908-b920-44aa-8488-dda19af87ee3",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d30dff1-50f6-4c8e-b5eb-efa0a2002ad2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea6b9b68-3a17-43c4-9c3a-0e0ea5fb2398"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21a4b109-bb9d-44f2-a384-41678671d49d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "862d7efa-3ac8-4734-85a2-d50f2d28a4d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34bb984c-8718-489c-b743-8084f3af0f62",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f64eecc3-b035-4888-ae7d-b82633748a9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "918228d5-92c8-4d38-abdc-72b983643043"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58f93f94-212e-4877-a42e-d842a9c0652c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee473ce7-a3ad-4166-852c-533a3505aaa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a45a7044-4875-4499-94f8-b117b05bc9f4",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97974054-db27-4075-b7ee-86b379b42e09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8f74541-bd65-4706-800c-95cd8aa558d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05ccbe75-f245-4c39-993c-43dc20b37ffd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4317da7a-90d4-4fd6-a2f4-0e96945545a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48689dfe-eba8-4d72-8067-a8254734ab5c",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "526af0d5-9ad3-4a98-a227-d07db55efe1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95aebdb5-a7c3-48b9-91eb-78d1513e78f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2332ad35-e582-4cc0-87a0-121795eadea2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1aa8820-b39c-4d66-83d9-2df07bcedc1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51cd7c18-318b-4f9c-8230-f84a84408ea2",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5efe6f7-e0db-484d-9480-858bbaa83483",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53122832-8498-4bb3-a85c-dc9280d27b4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94a7aea0-a0b8-4c33-88bf-dd45e17a64a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88641e2e-0856-4c58-9b88-4fdeef6870a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1c6b056-2878-4881-a132-e213601138c3",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23323804-68d6-4351-bb7e-5efff59de4c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97a483b1-45f0-45a7-a2d8-6dbf1fe5172b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a1c4c6a-deac-45f2-a5c4-0db75d588547",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "680df329-4667-4567-9181-b042d579f9b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "171f5973-02d0-4fc5-95b2-660faafeaa6c",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a917798-b3da-4108-814d-3396d404f1cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99a4c4fd-e4d0-41d7-904a-8a3fc8721521"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65b164ee-cf00-448c-8514-4d200fc078e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fd9f47f-9071-4551-9f5c-2dc2ed4d833d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5895c897-06a2-41c0-8ec5-90ff154eb6b5",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a86fd351-e189-452c-805f-c7ce542e4aa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1783fe4b-2918-4fcd-80c2-a1e754fdda1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02d5ca66-5151-41eb-9783-b75c969dae24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4055faa-528f-46d0-baba-2639d8036026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77a858a6-2d8f-4568-8b19-281d9e0464c0",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32f7ea71-eb69-4c72-9179-660357b9491f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daf76f09-1525-4334-aa12-d4f9d4d4d9b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "044a5cb4-c237-4a79-99f7-fbaffd9193ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30644133-6642-4dcd-899d-aabe78ebae95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a38c86e-b5ff-4a53-8be3-21d107f546ae",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e1684e4-53c4-40a8-a94c-b5da0cc0f236",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc60572a-4e63-4401-8049-9403217555a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8921ba7c-f482-406c-911c-2dba85eb55dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecbf8a1b-73d2-4b4b-a335-c1aff0258a62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ac128a3-3a21-4b91-9d55-aa33da1fcad5",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e120a31-0932-4474-9fee-83ec82663636",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "932a4c56-8395-4a0b-839e-d70e7c12f596"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01ece5ae-f538-4a2c-b34d-bba893390da9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28a28066-201e-4263-a715-abdb1b7378ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9d1d9bf-6360-4484-b7cf-1eabb0a05ad1",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51c770d0-e3ec-4da0-9cd2-dda6e39ef122",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f77ab38d-01cc-4d03-9562-aafd7bf71f6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f92a3af-15fd-454c-b0bc-0dc101e83799",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ddcc386-ea22-492f-b419-aa5fa2fdeedb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85bf39d2-bca6-47ac-9e8d-f7d1325072a2",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af066c9a-5e1c-48d0-b8ac-085a7197b70e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8725293f-31f8-4f38-8ed1-a14631651a8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2217a8fa-1332-44eb-bc4a-a154d192cbd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b993f94-fb0a-4795-88cc-aae3d1d2443b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cedd2333-ba8c-4837-8d77-c5fcc699c6ff",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7638e41c-16d1-424d-adc0-57377bc02f82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "914e0a71-de53-44b6-82a7-0187df169bb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fa62ad0-6395-45ef-9998-df374aabb456",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f97339b2-69bd-4b60-8a69-438b7287f89f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c30f577-f702-4b18-8ae8-ff9f830d4086",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e85d3625-1eb4-4559-b56d-4f09e590dd1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "101cca1f-cc3d-45c2-8879-8617e509d8d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8673e9f-f275-4ced-be6a-e8e4caffd350",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ddc7344-2ccb-4cdd-9668-191ff35ccb36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97adafe2-33aa-42cc-83ff-e6d07c9c2525",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4140563e-f94e-475c-b160-5ce11743e640",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de512bae-e992-43ad-85f9-e88eaacd41b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "165709ac-4620-43a6-927e-82b28c0fca95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f752d90-9750-4cf4-bbc5-70b204b421c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c93908b5-e321-4ed0-854d-697f237ea840",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bffdcae9-0475-49f4-a74f-b673ce747d08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34221fbd-6171-4447-8a7b-cf2fb332fb6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80818f31-17c2-4d04-b30b-ef5786bc2279",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac040556-2b61-4309-aabf-b1d01266c3b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f08045c6-837f-4dd3-a118-dd65ad79dbf2",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dacfba1-2e4d-4631-a8f4-e10bcfc9454a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fba57dac-8e0c-4770-b4b9-770f9807d731"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29274986-9c01-4690-a6a3-bd7afdc2a2ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41bc880d-5745-46e4-9053-86c1638d764a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d545354d-30bd-4832-8c7b-5f6c6684a8f2",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80b86ff9-66b9-4274-91d9-ce86927c9572",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5be83f1-fbd4-4b12-8c16-ec5c1d219b47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a134c2d-79d5-4610-837d-714550675294",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5e839d8-0af7-458f-bce1-6d3793c9b1f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc2fb3e8-b8bc-408b-9f9f-de4b5878c68e",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74103500-0484-43ae-b67a-fca40408ec5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0be4d880-4544-47d6-8657-2108a00d617a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "499ab167-5535-4b16-972b-7950eae28fef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d767302-421e-4df0-b303-4c1f7af58087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baf49d8b-83a6-47f9-bb8b-5a7a8b4a1910",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60af1605-90a2-4194-bbdd-c403705a8d22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "170d1e38-e187-454b-b8a6-1fa3f7dd4b72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee5d82f3-b4e5-4bc0-9338-a42952b3fac4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46f3f1b1-4f7e-42a2-8770-1bf9edcbdbe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a641cc9c-49cb-44ca-a835-83053a5849ab",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1ef3b5f-5f2f-43cd-97ab-2abf768aec5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40249351-d289-49a9-844f-615f8b0f4c83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29e3669c-abc9-49a1-88e6-a14868cf98ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e27a6347-cc7d-4bfd-ae51-2746a44c92b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94faec08-f90a-43f1-955c-fd429fc639c7",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f159206-b92a-4234-9537-8ad236307c61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af5d2e87-27da-4069-a487-0ad3a00131cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c893c674-a513-4ec2-81ce-15fdd580b1a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48436a4e-ccdb-4e76-aac8-3fa66abf45a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "459a0fb3-4fd9-494f-9793-eac073321a5e",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79ecfecc-1422-4752-8113-6d673929b21f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b27499dd-2d9f-42ad-bfe5-9a7628c18608"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25dea9fe-50e7-41a2-bda1-e50d80e55233",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9648ece0-862b-4b57-992e-ad63cd7d55c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e518eb73-08d0-401b-b8c5-9cd21711e194",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6825e643-eef4-44a9-96f8-7dc622e63f9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb1a8de2-05ba-40db-99bb-9de32a987193"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0289cdd0-1dc5-482b-be28-92fe2e37f1e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eda45879-d48a-48c9-a2c9-875ebb16d695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e02fcfa1-81c4-43be-8ced-0c302ca730f0",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "039fd9f8-fb00-437b-9f61-12f64102c9fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fd2061b-b1a3-4248-aa4e-d471d0e24d2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4c3104d-531b-4d71-89e1-62058dc6a495",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f8fb72e-6544-4100-9ad3-e9eeb5615390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc43377b-5350-49de-8602-edbf107166b2",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf361444-1126-47ab-9c61-8fbf70854d2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf5c6ee3-5309-48a7-b111-253925a55162"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f39f55be-5c0c-4f09-af16-4efde6f60c25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "127a0287-2bf0-4e16-99c5-202e2cdf7200"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f905e36b-192a-44fb-87e9-f1a4250ab6aa",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32817377-0ea7-4f86-8270-956ccfd8d41e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b17014c3-1cd3-4546-8cac-4846a0e5e893"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "619926b1-2b4f-4c1c-b595-0c265840f041",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab1bcb02-2975-46f6-b6f6-71ad0f9c65d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a9ce0a-d721-4205-a0ff-afa98a40336d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cfd9144-3514-45b5-b84c-76040315314a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb64c69e-c2f7-49d2-acb1-21590392f19a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6822d95-3eda-4798-818b-ac09899edd4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07fd3a1a-3f48-4a28-8cad-6cff59096f3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc32764e-62bc-453c-8287-caeffb692db5",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4629b925-4834-43f8-b4cc-a80139889a2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a561621-a3d8-48e5-8e18-9989832f2955"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b8ff1e8-19a8-4b8f-82cd-54bfef93b71e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f92756a-5dc9-49d3-932c-084badff5bc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dcff10b-9799-4966-bb50-b70b9d49e60c",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25672da6-15bb-47a4-b1b1-387ce456cdf8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd0e1e22-1c35-47d9-bc12-621478e5120c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45c61ffe-9456-4246-b477-23e013c7fa12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00268c02-f954-4136-a9b5-e219f38fd4af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc2eceaa-8422-4d44-9e82-241f5e2852b3",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a39f3dd6-4aa6-4538-bf38-4a3133a688e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e6e9107-0985-400c-83f4-7d0775ad812f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "606d32fb-1b0e-4685-884c-2e8c5204ede8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7114f81-0a1e-4fd4-bb49-6432c4a2b814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "387a462f-3d50-4e79-83f9-d4bda01f297e",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72efc40b-cf18-4854-96b2-d955cc2c8876",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddea894e-ffa4-4077-b163-2aa0b5544cbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb416128-145c-4eea-b3df-2ce423e1e5fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "466af628-8091-48e2-9999-2e1009fd689a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b53b7184-a7ec-4e69-aac9-cbf591b5849e",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c91a691-f2a4-4d86-9731-b5f980312e15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d558e7f4-8a07-4440-aa31-dc213e0bf042"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c38a3ce1-7888-470c-b667-83d0b63c2d06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ac97e7a-85f6-450c-af78-075373fb7235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b19879-4fec-424d-b84e-c513e2ecd67f",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4819b36-2530-429b-b354-3dded0b5e1ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fe7ddaf-2e34-44d9-8470-56cc73e101bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bde64509-94f4-4e12-9431-b2e0af220454",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43e15dc5-d9e2-4a40-b3c2-7fe1386681ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "948d3ed4-973d-4fe0-8203-cd4d79bea884",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d718d048-e6d9-472a-8c4e-fda2f17f27f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0627bda-fcfa-4c06-b689-ce590019c583"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40b64816-d9e0-4be3-9b91-c9d5bc84536b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aebefaef-5f88-4567-b429-a822725c2508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae83bad7-f171-459b-9b47-1af65d766122",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6428ee0-7f43-402f-8e99-d3cd65d1d6da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b752de5f-aeda-4459-8679-63c4bb7e61f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "777417cd-28de-4e25-9773-877a3a67d6db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cba36da2-a60c-4732-918d-9dfa2ba3739b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06dc75ed-9e15-4e0e-9927-9b7ecda0c068",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ee91a6b-b2d0-4481-807d-bc02a96863d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2061b46-aac9-4632-9434-caf5ee5e90fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a06a10d-ab3c-4498-94a4-a2abc0356364",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "536fc6b1-7fcd-40be-8218-ae5e74d1f6d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d82657c-838f-4524-ae7a-ba3df8811475",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbb7b3e5-65f8-4366-aa86-d56d870f5a20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ed3ae44-8710-4a4d-b5c5-4f0517ffbf34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a50da25-901b-4773-ab85-d13a0232490d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "639318ff-626f-42af-98ed-e0aeee99df29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff1c5289-fdb9-4b1c-a0a9-112d9ba89f0b",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab1a40cf-8f88-4863-ae51-75d4ff7b3cd8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57fcca1c-d0fe-4a9c-9ed6-7337124d4444"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66074ab2-57bd-4acc-a538-a3c040bac714",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d75b19cf-14fd-4f24-8436-97797b2e0cdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1aec9bf-78a1-48f7-820c-e26131e66894",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a7b5d46-dde7-400b-90a7-0c9ea87ba363",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d44af5dd-4dce-44ad-9be1-4eec70fc2c59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adcf4d19-76d1-4c38-8a23-edd90481f1d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a9a789a-44c1-4c41-a5ba-9ef6c5c16ecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1c14275-316e-4857-b9ee-a7d54a57b819",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c3d9b49-95c1-44b5-9efe-ff167597bde8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4edd2a48-993b-4080-b2ca-79b28b023122"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44a10379-cdbe-4a8d-9302-20461ebc144c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cea5a5c6-885e-41fe-83fb-8d6faddc61c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8b373f1-3bdd-473a-98f1-ae86a2e46b54",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "402706b8-77e4-4b7e-8adf-96c5fa3ff805",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cb4ef5c-edd2-48e5-a0b1-3b68cdb90d7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "118e9805-3542-445f-9a09-ca5d84919691",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dda8f791-0792-471d-a36d-20910f45c503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a57a55de-9834-47ae-92d4-6820790b5c5e",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05617c8a-57a1-495e-a4a3-99b6c5c6abf2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f07fd32a-4f47-4ab9-bd52-6ac41422ffaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5978584-3973-4155-adf3-650cc15c03e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "095837ac-2578-4f04-8f8e-6da1b5224a50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7987feaf-9bed-44c1-ba5f-04c577884dcc",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d466fa49-442d-4862-b500-8f311752f5a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f0ddcf3-a117-4f88-94e0-ab7451511ce5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e009e80-7d22-4276-9c50-b3f36ae9fa41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6ff4089-b0a0-4b23-8710-90a2fbcb3a54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc803404-94d1-45b4-b3aa-fca2f15dcb08",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "682b39df-3dfa-4d68-a34c-148d48b9f207",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67a96680-ba78-4307-82cd-36892fe2b8fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "046464aa-250e-4ff3-9ec9-d4f8bef87038",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "588ecfe6-fc3d-4112-a696-610cea693cc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a02487ec-d739-4685-b350-6c1b9283de0a",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ccb3501-96fd-4fc7-bbec-a64073af79e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0b3e2cc-9bf5-45a1-84e6-fdc4ef0b66a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f2a04bc-f232-4ff0-b394-8f3f965bbd05",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8b6f594-3008-42b6-ae42-b01654c4635b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a453ba1-1ac1-4416-b028-e0165acdea62",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e30b10f-5bc8-4c57-a427-652f69386f09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6025a0f6-7fff-4c24-a70d-4f7f9fe27f54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cf685a9-48c8-4db6-baa8-dd19bcc02756",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "490c813c-76ab-49d7-b832-33c8b06587a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68998c45-4656-4482-8cfd-e5170ff38e02",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dfbb7b6-4815-412e-8c68-78aca558a503",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e12be9a8-250c-4d2d-80c6-1c528974036e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "268b6b98-51a7-406e-894d-0ba68b077988",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f46f52fb-5979-495d-b245-319ba37ff872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12ff42e2-8c8b-4e20-a7f7-345652826744",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f6e9a4-0ffa-44d7-81f6-fa9386d324aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b97edf6a-ddd4-465e-8555-480b8b40a3cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fc59e8d-c8de-4dca-91ab-1af99469220a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ec7d4a6-ebac-4d1a-885e-93451a1ba570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "782cf12e-94b6-483a-99d3-0d3c75668bca",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dd27071-60f8-4b47-8ac9-f94f899b0336",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccf65851-d728-40f3-93f7-3da78b4b024f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8210ad4-e959-4056-ae9d-fc4e9b585678",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4999d952-6bb0-4c01-bfaf-8c6fd5063119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71201dfd-0262-4fe4-8d64-f10d1ab54943",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "592572b8-cb06-4a8d-b6c0-197984645ebf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56f45149-44c0-4b5b-a8ba-6eb40ada0e78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b32d1b43-bc88-408d-ac09-d989a7fff88f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8e70e89-0856-4593-be30-432242ecec67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "917baeca-6d84-4e15-b013-106791ccace1",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f10de3c-f9c6-41b5-b09e-8d3779dae9ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1cdb0f96-8de3-44d3-8d12-dc3d3bf325be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "deeb9457-eae9-46a5-925b-170605b16e45",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "386947c1-1bab-4bd5-88b0-9977ff97118c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbda77f1-096b-44f0-94e9-7c1da45f8022",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f396154-f41d-40c3-9ea6-61f038332819",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79fe655c-1232-4cf7-8d03-d8d51ee12afa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0222fa1-dd2c-49d6-9234-c5cb4a6d624e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c25fa23-0f59-4dc7-b713-a98b4e3eb719"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ea04487-015b-49ed-9288-2cdaf8bee018",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bfde3e10-7d5f-4bb1-8188-f117e612589b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a596c05-abc4-4ef1-a0cf-6dac1e3cdd8e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "45a09e1b-6863-4b14-91c1-88deeebc5da7"
                    }
                  }
                ]
              },
              {
                "id": "95d98a42-ccfd-4430-a3da-72f7cd029786",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a5332d4f-60c8-49f5-ab56-b3169b243bb4",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9e1639b-2d7f-4367-a735-23ee70f0f75a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "3d3c9624-e195-4c5a-bc39-0fd35d3f4b97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f58405d0-d428-4457-8ebd-2874f36542bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "00371ebf-28f4-4e16-9b38-d923595eec7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "144984b5-fabf-4bc3-9b43-f8fdd028c568",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c60bce23-a2d7-4755-ac5b-41ffc602fed2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d962dd1c-c9c3-473b-be71-7e04316794ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b45aa5e9-4302-496c-bb8b-eb7578e1b158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff882550-9819-42c3-a09d-d18e1bac0317"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "571a5586-a80f-45d3-b53a-641c8b32747c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "84424a0c-9489-43c5-a2cb-1e81d181eb0f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8fbd56dc-d715-4838-8a46-567eb05b1e80",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7322366e-dc76-4cad-8891-f0905e480994"
                    }
                  }
                ]
              },
              {
                "id": "fc51b8dd-8aa8-4bc1-b928-4d6d26322998",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "91ca75e8-d428-4f84-94d3-f029490c7b74",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a55056a2-139c-499b-bf49-09a60005b70e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "692b9914-883c-4ee9-92b3-449d8d31a17a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56d36c26-82c6-4bcb-9059-448e3f80c265",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b809830c-a0b6-49fc-a182-8212beb9e3f7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b56e1b3f-9082-4f43-8378-829d438226db",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bc8d9159-1060-49ed-bfa1-7c25f1db5654",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fc73f9fb-7327-4d7a-9aa0-22b37ad75c54",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "42f696e5-6d53-4de0-b5ce-b092e074b1ef"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ba2fcc5d-3816-44a4-b63d-81387cc45fe2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e5295ed3-dc03-4d69-9ef3-74bd046689f4"
                    }
                  }
                ]
              },
              {
                "id": "2473d783-e944-4e56-b1e5-2d33b465e9a0",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c9a2d5db-1416-4eb9-89ae-6b348b42f132",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6a9774ce-7d3d-4e4f-b41b-7ad5f349b485"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f1fbd2a7-7b7a-4551-ad3d-b56efcaf7a4d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6f145e16-34dc-44a4-8fc9-3342aea40acd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "492515be-fb99-4cb9-a5a2-8b4c278a4d38",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "3f815bc0-81bb-444b-975a-bde17e2c601a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e5761dd2-1ef2-467c-afc9-1e732bc1427f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a084410e-c010-4902-a673-14049967e859"
            }
          }
        ]
      },
      {
        "id": "54e1ece8-caaf-49bb-a0f6-aabede9192be",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "271f64e5-96b1-4c69-98aa-1c6125a106a3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0c63d48a-8ad4-437f-9428-311c58180cae",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7920b478-fd47-4e13-8e05-abcc0dcba983",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99aec9e2-8417-4c30-90b6-8ea0e0826940",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c062e7bf-3c54-4431-82d6-67b478785be1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67298eac-0ce5-45be-9a08-d89802078e5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c56a5eba-3ce2-4281-816d-4c6410043a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5902bc04-7335-47bc-8126-e3393f585f54",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ed95283-e366-4729-a7e9-3c94b9ed2797",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9f94b20a-2163-4d63-aee9-f69374bca0a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11791a36-0cf7-46d2-a045-89b63201ce3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e8cbd078-f05b-46b9-868f-be6e42fb9656"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e153ffae-ba0e-41bb-96f7-a8514dc3df3a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5faf9817-a7df-4721-b730-9b89728391b3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c5750109-d84f-4b51-a1d6-a24405925806",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "48b3c257-50d5-4b38-9690-d7722303278a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "53bd30eb-0c78-40db-bcf9-da42cc53767b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "a8ecdefb-c0a0-48f2-b736-fdeecab95169"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "70fc6a3e-6930-4641-9f3d-ff899ba47458",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "383f42be-a015-482a-98ed-6493632d2a01"
            }
          }
        ]
      },
      {
        "id": "71f09ea8-72a2-447e-99cd-6b0e0f88cce6",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "1668a8e1-b30e-4a2c-9f10-6279a485f233",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a7bd1811-f427-43b8-955a-091eed0ccc28",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "56581ea6-cba7-46f0-8901-9ec5bec17273",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1dfcb30-af6d-434f-aaa4-64439f6ca398",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "91a8dfaa-8da0-4cb2-acb5-53a79c68fa30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aca70f2-0b56-4c14-a552-eccd04b3f18d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e9b83fb7-8786-4558-9daa-cfc042009e03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa02988-e259-402e-b4aa-dcc39297f562",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fccd593f-45f8-4041-9cd2-680b0882e2e1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c97cea99-c5d4-4dc2-b8d5-241c1d0f6095"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03c35ab2-ce73-46cc-9f37-5f0464a77530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a482cf5a-ebfa-4c0c-9946-b9816c26ee8d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f7e5bb26-57d6-4312-a4ce-73bb123e7398",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a3a24ca2-c00d-4ff6-beed-e5f3d05c1365"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d4ad2346-9312-46c1-81fd-049e13f569fc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b5b958b0-cfae-4cee-84e5-a9d9779f0fb7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "530d0150-3671-4071-84ac-e6fe551edf48",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ba659923-6460-4b5a-a9e1-77ce86827d1d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "06e2d9b1-d4eb-4b17-8454-41853c283753",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a3e406ce-5bf3-4022-9b30-613a59f50b41"
            }
          }
        ]
      },
      {
        "id": "e9b52844-49ac-4dd0-a081-33070123c505",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "edcf2a3a-000b-4fe9-ba65-391dd43c7f31",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9e8125c2-f91b-4d6d-85e2-fbab8abcc23c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1cbff92a-a230-408d-b32f-1bec31404b12",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85f1a708-be20-40f1-8598-21edf035c655",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a94797a3-6d3b-4467-8906-e6e2f005fc58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70f22cfc-88ce-48f4-b80d-c19b90016d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3723b023-747d-4694-919e-477386b56e23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1913ee5-918d-4844-b0d9-290f28a0dc7d",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "793ff4ee-c810-4115-90d3-b9d56d8d2a70",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8a93446b-68bc-4331-a38a-e96922172b43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07b6d913-cdf6-40ea-8419-6645c68643fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "af87066f-81c3-4294-9346-804ded9ce145"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b05cf45-18ad-4900-99a0-5fa756b71aa1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a654829d-0b2d-48c4-b0cc-e4cb96a0ad7e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ea31a4c7-9367-4d0b-8d9d-8ec98545e0c7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "62fd2a5b-7310-4876-998f-c4ea0057daf6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b648969b-5dc7-48b8-a41b-c445656332f6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ade2d341-1400-48f0-b9c1-7f7b4e9e7d46"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cb785e44-1731-4c55-aad5-e80dd7dacf45",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c719b1d5-e1bb-4eaa-850c-c5077ab54554"
            }
          }
        ]
      },
      {
        "id": "df123d78-c4f6-4f89-9d97-0156dde1e592",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e8c02a83-31f7-4cd8-a11b-ebb045045b19",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3ec6b6e0-5bb4-4406-accc-5e6dc3688e03",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "0566f48b-006a-4ece-b2f5-3b5b518dc879",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "08a28519-fb35-4db0-958d-32ab89626dd2",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b029644e-ef98-463b-b34f-dbb95256c913",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 6
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 282
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 6
      }
    },
    "timings": {
      "responseAverage": 319.61374394011887,
      "responseMin": 6,
      "responseMax": 6635,
      "responseSd": 1218.1930840017371,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1675384905349,
      "completed": 1675384998690
    },
    "executions": [
      {
        "id": "2fe6ca8a-8e0a-487c-bed7-9929282fd14f",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "2d143691-3329-4b8e-a010-0f4270c6250b",
          "httpRequestId": "0ca619e5-0b43-4ea4-8c7d-a9d93486b608"
        },
        "item": {
          "id": "2fe6ca8a-8e0a-487c-bed7-9929282fd14f",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "10a473c1-3d7e-4285-a4cb-8b301acc7a5a",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 0
        }
      },
      {
        "id": "f7d31912-c5f2-4609-9147-35ce7630e599",
        "cursor": {
          "ref": "a52ac15b-6bc4-46c1-bc80-1b0dc182835a",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d6e4bc4c-aa80-48c3-8c28-6714f393b339"
        },
        "item": {
          "id": "f7d31912-c5f2-4609-9147-35ce7630e599",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "d25bc778-1bb6-4e01-8751-f73eb95fc7ea",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "3568d5ec-d6ac-4c6f-8eb9-15250f6b41c1",
        "cursor": {
          "ref": "556210c7-7dcf-4366-a7b6-d058e25f0267",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "23d7b51c-e369-41a9-ae7b-5f806f7a1420"
        },
        "item": {
          "id": "3568d5ec-d6ac-4c6f-8eb9-15250f6b41c1",
          "name": "did_json"
        },
        "response": {
          "id": "b0ce18b8-b5b7-46dc-a654-7208df0005c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56b5403c-c8a8-4106-af82-4ebfd0cff084",
        "cursor": {
          "ref": "bc656d4e-c06c-43ae-a578-a7ca8abcee37",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d404a5a9-3699-481b-9dc1-ab43a85e376c"
        },
        "item": {
          "id": "56b5403c-c8a8-4106-af82-4ebfd0cff084",
          "name": "did:invalid"
        },
        "response": {
          "id": "37441407-e83f-4a40-86a6-c9556732a08b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56b5403c-c8a8-4106-af82-4ebfd0cff084",
        "cursor": {
          "ref": "bc656d4e-c06c-43ae-a578-a7ca8abcee37",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d404a5a9-3699-481b-9dc1-ab43a85e376c"
        },
        "item": {
          "id": "56b5403c-c8a8-4106-af82-4ebfd0cff084",
          "name": "did:invalid"
        },
        "response": {
          "id": "37441407-e83f-4a40-86a6-c9556732a08b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bc968b6-214c-4a14-a6e0-a402f15b30c0",
        "cursor": {
          "ref": "f5e5a571-601e-4934-8321-631825748bb9",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "bf8ea07b-7f5a-47cb-b450-b2dabeb8f6da"
        },
        "item": {
          "id": "0bc968b6-214c-4a14-a6e0-a402f15b30c0",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "eb6e37a4-404d-40f6-a4f4-1cf8bb16fac0",
          "status": "Not Found",
          "code": 404,
          "responseTime": 136,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1e2ef37-7fa8-4289-8bc3-87c6080784d2",
        "cursor": {
          "ref": "466e2642-3a5f-45aa-9102-2c5bf114d63e",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "1bf0c851-3773-4035-89aa-246852027f3d"
        },
        "item": {
          "id": "a1e2ef37-7fa8-4289-8bc3-87c6080784d2",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "efc8f696-8cc2-41f3-8f50-7d0297e2711c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 33,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fcbbd5d-4f09-486f-8211-db7dba19af8b",
        "cursor": {
          "ref": "424ef3d8-e612-42fd-8d52-88f0e9e8dcac",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "9a69747a-81b1-49bb-b002-d035bc4ef5f2"
        },
        "item": {
          "id": "1fcbbd5d-4f09-486f-8211-db7dba19af8b",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "81c300e0-227c-4c07-a398-5c38db77b5ee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8b7553e-4a17-45b7-8321-50507f9a85a8",
        "cursor": {
          "ref": "b62b8a59-0bfb-4d2f-b4bd-a8936e1a43cc",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1c8e781d-30b5-44f8-ab04-d0acee9813c7"
        },
        "item": {
          "id": "e8b7553e-4a17-45b7-8321-50507f9a85a8",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "6bae23b5-a2d6-43c7-8270-95bb546586a3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 67,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "e8b7553e-4a17-45b7-8321-50507f9a85a8",
        "cursor": {
          "ref": "b62b8a59-0bfb-4d2f-b4bd-a8936e1a43cc",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1c8e781d-30b5-44f8-ab04-d0acee9813c7"
        },
        "item": {
          "id": "e8b7553e-4a17-45b7-8321-50507f9a85a8",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "6bae23b5-a2d6-43c7-8270-95bb546586a3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 67,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "49d0bfd4-9109-4267-8b7e-c32c319052f8",
        "cursor": {
          "ref": "2a8e1491-6588-4930-9dfe-39dd29f0eb83",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "bc59e251-807e-46ae-a827-689cbb1593a6"
        },
        "item": {
          "id": "49d0bfd4-9109-4267-8b7e-c32c319052f8",
          "name": "identifiers"
        },
        "response": {
          "id": "1d37f188-f339-4b75-8922-6253c3ba5699",
          "status": "Not Found",
          "code": 404,
          "responseTime": 54,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "240b49fd-25f4-4876-91fa-e8d6232818d5",
        "cursor": {
          "ref": "e5aaee66-ac42-464f-bd8e-13269c8ec6c6",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c9a7a9db-2739-42e7-bb59-b44a4da42804"
        },
        "item": {
          "id": "240b49fd-25f4-4876-91fa-e8d6232818d5",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "313b7ced-83a6-40d0-9b31-8cfcfb823a5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "240b49fd-25f4-4876-91fa-e8d6232818d5",
        "cursor": {
          "ref": "e5aaee66-ac42-464f-bd8e-13269c8ec6c6",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c9a7a9db-2739-42e7-bb59-b44a4da42804"
        },
        "item": {
          "id": "240b49fd-25f4-4876-91fa-e8d6232818d5",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "313b7ced-83a6-40d0-9b31-8cfcfb823a5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "d1543989-3a64-419e-bac2-4eeade7e0a01",
        "cursor": {
          "ref": "ac2a7667-9c9c-40c1-9a09-f5db849bdf75",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "bcea813b-836e-4d6c-be1d-459e27325926"
        },
        "item": {
          "id": "d1543989-3a64-419e-bac2-4eeade7e0a01",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d43e6821-29d4-4553-b382-907a084745d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "b9ae1b97-c05f-45c6-a285-a4b75448cf50",
        "cursor": {
          "ref": "06222b77-6646-44a9-8d60-c67e1af760cb",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "f0427926-a0e8-4fed-82c0-f1e4e8ea334e"
        },
        "item": {
          "id": "b9ae1b97-c05f-45c6-a285-a4b75448cf50",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "05f5b8f6-4091-4709-abc7-b449fe2ea016",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "4b5ca6fe-675c-4e8f-8db3-da57f63cedba",
        "cursor": {
          "ref": "4b6470b9-25e0-452e-9c25-b160ae0bdf3a",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "8feece87-fc86-4be2-bee4-ccff834d34d1"
        },
        "item": {
          "id": "4b5ca6fe-675c-4e8f-8db3-da57f63cedba",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "58b17ab8-38fe-4b3c-bbc7-77dbd34fd6ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "656ea185-d62a-4514-be8e-4eb73ecdd6b6",
        "cursor": {
          "ref": "00713f44-b55e-46b5-a329-eb81823aa9dc",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "9c1277a5-71aa-4390-bb0e-b9a7f762b687"
        },
        "item": {
          "id": "656ea185-d62a-4514-be8e-4eb73ecdd6b6",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "d6d91e89-ad3c-4046-a93c-2bf75fdecc01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "6ce27033-12f3-40e1-9778-ba798908de98",
        "cursor": {
          "ref": "186d9263-5315-41ee-a91b-cba411cf1aa1",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d45e98cf-e199-48bf-8473-c291626045ea"
        },
        "item": {
          "id": "6ce27033-12f3-40e1-9778-ba798908de98",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "dee7bc62-7469-4ae3-a3d8-16015d0172f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "fabee95b-c75b-45fd-9431-59fd46e1df9f",
        "cursor": {
          "ref": "7f32d8cd-b978-42db-8ce2-735f85656fdd",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "f7094754-91bf-4bfa-99a6-fe7ecf73b91f"
        },
        "item": {
          "id": "fabee95b-c75b-45fd-9431-59fd46e1df9f",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "fc71ea08-43fb-4a77-9b0c-5945b98666c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "0b69ca52-ec5f-4264-845d-04bdd6221dc4",
        "cursor": {
          "ref": "97c72e5c-d97d-47f9-bdb4-84491085e611",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "92491b47-5919-4a7a-8a14-e8c11c3cb788"
        },
        "item": {
          "id": "0b69ca52-ec5f-4264-845d-04bdd6221dc4",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "6f7045de-78de-4256-bf73-984e5009dc11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "0c7513a5-f3dc-41f0-b930-549df1dc77f2",
        "cursor": {
          "ref": "284806b9-4a57-4581-8684-2adbc5bedc34",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "7626c56e-348d-4ac6-90e1-ade7e8b2e055"
        },
        "item": {
          "id": "0c7513a5-f3dc-41f0-b930-549df1dc77f2",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "9a67ba19-39c6-462e-a153-24d489356d7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "a68a9661-cf88-4c39-a0e3-9b9fabad07ac",
        "cursor": {
          "ref": "fd880827-a2de-4fca-9455-f67c315de490",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "843a4ce3-7cbc-4254-bf9c-d555f55b9e20"
        },
        "item": {
          "id": "a68a9661-cf88-4c39-a0e3-9b9fabad07ac",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "d5366f0f-25bb-4455-89c9-03e4251240ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "dae99ee4-e87d-4202-a580-3407fa3e7720",
        "cursor": {
          "ref": "5e64b75d-b4e2-4b45-a165-cf7c9235774e",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4b9fb929-be2d-48e0-a722-70b59edf19ea"
        },
        "item": {
          "id": "dae99ee4-e87d-4202-a580-3407fa3e7720",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "63881f4f-4bb0-4e15-8726-49628809c3f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "fac1b032-47a5-4d66-a2e7-ff86e2bb9a1a",
        "cursor": {
          "ref": "4aeb4543-338b-44bd-810a-00228bd9424f",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "230bb7ce-74f6-4e2c-a8d2-7882d57d490b"
        },
        "item": {
          "id": "fac1b032-47a5-4d66-a2e7-ff86e2bb9a1a",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "705f435d-48c4-479a-b577-8bfbde96e39b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "6e19066f-cc07-4ffd-8253-d280e9de79c8",
        "cursor": {
          "ref": "11ff32ec-f2a5-4224-bbd5-e1f0b5d22a9e",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "7fc5d36c-9366-4bcc-911a-1421123569e9"
        },
        "item": {
          "id": "6e19066f-cc07-4ffd-8253-d280e9de79c8",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "51af8ff0-d3b5-4814-9c97-7f354d44056d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "a745f351-7d05-4ad6-a9fb-b8ea9e38dadd",
        "cursor": {
          "ref": "544dc4e5-ab97-4bfd-865c-8620beaa3cf9",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "fcb824b1-df0d-45a0-bd3e-9116ac46a8d4"
        },
        "item": {
          "id": "a745f351-7d05-4ad6-a9fb-b8ea9e38dadd",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "be932fc5-39c4-42e3-9940-fa7cc54ae0bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "1f9d4d44-6555-49e0-a57c-5bf0c02b0369",
        "cursor": {
          "ref": "0a291617-396c-4813-a94d-5e97bb87c695",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "07843683-97f4-46a3-a10d-5633c087ffeb"
        },
        "item": {
          "id": "1f9d4d44-6555-49e0-a57c-5bf0c02b0369",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "4b8fed76-ecc3-47bb-bb2c-c5b07ac19e4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "22ca0d45-8e95-4392-a634-9b68d3ad32f4",
        "cursor": {
          "ref": "e387a995-d0b0-44ab-b004-30c4024f0863",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "55aa0c17-c0ee-40c1-b031-56fdb4830691"
        },
        "item": {
          "id": "22ca0d45-8e95-4392-a634-9b68d3ad32f4",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "49b37507-db32-464c-8bbc-5256bcad78bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "ec1ea89d-cb24-4cd5-8c0d-1b948d614cb0",
        "cursor": {
          "ref": "1223d08d-4f47-4637-96a8-a891a8aacf1f",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f76108c4-5b34-4014-910f-835b4f5f23a8"
        },
        "item": {
          "id": "ec1ea89d-cb24-4cd5-8c0d-1b948d614cb0",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "3ca23bab-cecf-452a-98e6-9ab29b9088c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "11c1bb93-9c91-4c99-a9e7-916299241259",
        "cursor": {
          "ref": "496a9211-de51-4522-80f7-f059f4aad7c9",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "21c03ea2-f4d3-461e-9103-3d596024d8d0"
        },
        "item": {
          "id": "11c1bb93-9c91-4c99-a9e7-916299241259",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "014b291b-b188-46ce-a948-4f08d53239f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "09301b57-397b-4d2b-941c-10a3cc02319d",
        "cursor": {
          "ref": "564e8b88-bc79-47ea-a605-24ca8cdae447",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "3eadacc9-e43b-4766-abe3-351e0e52653d"
        },
        "item": {
          "id": "09301b57-397b-4d2b-941c-10a3cc02319d",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "583aaa82-ebc7-444b-8d46-5b418b802a80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "7327a2ea-2ba6-494e-94fe-4114e9d7be84",
        "cursor": {
          "ref": "6235dbee-0e61-4218-afe2-0cfe21884d0a",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "1c06ea01-1795-41d9-bb93-ded9af9dc3f2"
        },
        "item": {
          "id": "7327a2ea-2ba6-494e-94fe-4114e9d7be84",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "304cc2c1-9769-463e-9f0a-5f4a8a509936",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "84e9de72-8588-4ea3-8eb7-fd423a9370e6",
        "cursor": {
          "ref": "7b972821-9569-482a-9425-86808cd3c081",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "5370fdbe-8ec4-408a-acd3-fdab69ea8063"
        },
        "item": {
          "id": "84e9de72-8588-4ea3-8eb7-fd423a9370e6",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "fc8ffabc-b319-4570-b5de-6f75ce97b638",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "40ac36bd-47d3-4e1e-8ae4-48d06f6141d0",
        "cursor": {
          "ref": "a3cb375c-1e17-42a2-90ec-b7d9d456c57d",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "1c40e07e-dff1-407a-9d9f-62e351bcfb3b"
        },
        "item": {
          "id": "40ac36bd-47d3-4e1e-8ae4-48d06f6141d0",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "9326ca14-c235-4bc4-b92c-92987ef0b7ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "c056d0a3-5b56-4d3d-bde6-c2e089499349",
        "cursor": {
          "ref": "3dfc42f6-5c1c-4a06-9692-1cf7a2f32733",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "876a69e2-0b03-4789-95b8-a9ccb74e68fb"
        },
        "item": {
          "id": "c056d0a3-5b56-4d3d-bde6-c2e089499349",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "bd9e5790-1f5b-47c1-860b-a1c73982ba37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "1fa5a204-4754-48d5-bf2b-cd141ba70b5a",
        "cursor": {
          "ref": "fd682930-a60f-4d7e-9abc-02f0454ae186",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "3265ec82-b281-4ec0-b215-4bb9ced23aba"
        },
        "item": {
          "id": "1fa5a204-4754-48d5-bf2b-cd141ba70b5a",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "65478f5a-a263-4e95-8a69-4f04d148c707",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "f10c84f2-168a-4539-b85a-54236460a531",
        "cursor": {
          "ref": "39073809-dae6-4a23-8cc1-e51cc95451f4",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "2323458b-3e35-4d6f-8624-cf308db3cba8"
        },
        "item": {
          "id": "f10c84f2-168a-4539-b85a-54236460a531",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "efe8cd6b-23ba-4f12-b18e-daf3f79ccfbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "4843dd03-7083-46be-8bc4-c90d7e0d6fc7",
        "cursor": {
          "ref": "b3fa6ad5-24bf-46d4-95d2-34b1e5e7dc88",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "96191460-178b-4d32-baa7-a9e3f7e83328"
        },
        "item": {
          "id": "4843dd03-7083-46be-8bc4-c90d7e0d6fc7",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "52d3042f-ab98-4a4a-a3a2-11350a1d3f23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "148d280b-40a2-4534-aa3d-d7f40ddfd09c",
        "cursor": {
          "ref": "c32f35ea-dff0-40a4-8c55-60ca7fb2b3f2",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "7f7d3552-5ff2-4eb1-afc4-645c787b208b"
        },
        "item": {
          "id": "148d280b-40a2-4534-aa3d-d7f40ddfd09c",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "546699d4-8820-429a-91e4-e0358f4e130e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "21dcc9d6-a950-4d1c-8def-e8fbd3f2a6ff",
        "cursor": {
          "ref": "dd99d1c5-6478-4a60-ab01-f3a2a40cf9f2",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "b4250788-2605-4879-bf8b-c12d73869253"
        },
        "item": {
          "id": "21dcc9d6-a950-4d1c-8def-e8fbd3f2a6ff",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "f0858782-cc50-48d3-b80b-8b7d97704759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "eadaa06a-d2a8-47c6-8178-1f457a2fc2e7",
        "cursor": {
          "ref": "2d0d4ad6-4486-4a3c-ae8e-292bf5c8ebd7",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "7a7c2685-99e4-4b3b-97c7-c881c93291fb"
        },
        "item": {
          "id": "eadaa06a-d2a8-47c6-8178-1f457a2fc2e7",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "e81cc882-f89a-41e0-9cdf-3fb1777b919a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "1195eaa4-2584-4b21-b32f-231ebceaa5d3",
        "cursor": {
          "ref": "4d7e432a-a40f-4db0-824d-30886faea61d",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "599518a5-ed05-4e2b-b819-bb635fbd8b7f"
        },
        "item": {
          "id": "1195eaa4-2584-4b21-b32f-231ebceaa5d3",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "f4a297e5-522f-43c6-9a4c-aad838825d04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "d279dee9-98bf-43d1-b18d-c1eb65807c88",
        "cursor": {
          "ref": "27fe5aa4-ce59-4151-9609-73c156107298",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "469e092c-3f07-4009-9448-855c18bfcea7"
        },
        "item": {
          "id": "d279dee9-98bf-43d1-b18d-c1eb65807c88",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "38766ca5-727b-4305-8fb9-a1d69e840b66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "8500b50d-c729-4897-be22-86c6df50d913",
        "cursor": {
          "ref": "43480ba9-1755-4578-a770-bd431c01da55",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "f9fd6336-0414-469c-8a59-b6cad1b40a7e"
        },
        "item": {
          "id": "8500b50d-c729-4897-be22-86c6df50d913",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "38db48e7-c42a-4842-9512-1b29e4d65afa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "eea8d22d-3dd6-4b5e-b201-26a7d5c06c12",
        "cursor": {
          "ref": "39e988ea-3686-4b16-8db5-535d745536e4",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "cd1de49e-5289-4b28-94e5-496d5ce8216a"
        },
        "item": {
          "id": "eea8d22d-3dd6-4b5e-b201-26a7d5c06c12",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "89f961df-e697-4b84-ab50-4c96340e0338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "5b17878f-5279-4db5-b435-ae8fc63452f5",
        "cursor": {
          "ref": "d40e874c-708b-4473-adb7-f3595e5cd799",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "3538a108-c8e9-4282-a60f-2c845688b260"
        },
        "item": {
          "id": "5b17878f-5279-4db5-b435-ae8fc63452f5",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "ab5d65bf-cea6-47af-99b6-be0bb8bf4c15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "a2e25a9a-fd2e-4115-9ee6-250c94750a2e",
        "cursor": {
          "ref": "67d39f20-55e8-4709-98d1-74ae52656daa",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "3b106b81-5532-4047-ac9e-36e192b663a1"
        },
        "item": {
          "id": "a2e25a9a-fd2e-4115-9ee6-250c94750a2e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "90fcf595-5c18-46ce-9648-924468384be3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 325,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "1848a2a1-c86e-4c30-9e84-b1ee8a0ea97b",
        "cursor": {
          "ref": "f2f7797a-208c-4f0c-aac0-5df537f8bbd1",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "32102568-8b30-4eb7-9574-75d3cc8e141d"
        },
        "item": {
          "id": "1848a2a1-c86e-4c30-9e84-b1ee8a0ea97b",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "c415d295-6f5f-4ef2-95cd-6e485473ee3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 353,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "4276a068-5e35-4ebb-8b72-dd493115161c",
        "cursor": {
          "ref": "ba66d3fb-0d5b-48d6-9a59-a5479c230e95",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "30e2b5cb-3bf7-497f-8792-16e2e3ed9e9f"
        },
        "item": {
          "id": "4276a068-5e35-4ebb-8b72-dd493115161c",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "95928271-becb-4e21-8aad-69444bf420dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 358,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "694bdc80-c690-4fed-b300-7ef5e6242f28",
        "cursor": {
          "ref": "3f3eb931-5aca-4341-ba4f-370af6f517c4",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "5987824b-cd26-4d23-bfe6-85514ebc7072"
        },
        "item": {
          "id": "694bdc80-c690-4fed-b300-7ef5e6242f28",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "c762d5f9-6ee1-4e45-a03e-6385ac76a62c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "9c10494d-237b-4a3b-aecb-3aefb217a8d7",
        "cursor": {
          "ref": "15470929-cb19-4c25-b2c9-03648a0dcba0",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "100b74ce-4c30-4bb4-9ffd-07e443da4841"
        },
        "item": {
          "id": "9c10494d-237b-4a3b-aecb-3aefb217a8d7",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "5fc515d9-eb70-46b6-ade4-629a18578190",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "9ed99490-46df-4c5b-a68e-4dc0658d7495",
        "cursor": {
          "ref": "dda59aaa-4aed-4ee0-9a1c-4463ca8c9e3f",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "43da58fa-6ae9-4612-9541-acf4741fe17b"
        },
        "item": {
          "id": "9ed99490-46df-4c5b-a68e-4dc0658d7495",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "bb054080-1bc7-4771-ab84-71d7dc54f50a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "d6bba2ad-3043-474c-a4e6-73b717a11610",
        "cursor": {
          "ref": "be44690c-b866-4ef3-b4bb-0bf5f67f2b31",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "a9256bd6-7b8b-44c1-89eb-fa1ca33aaa71"
        },
        "item": {
          "id": "d6bba2ad-3043-474c-a4e6-73b717a11610",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e71615a7-8054-499c-9f73-4fe9072736fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "1db13a4e-df97-47ec-82c3-3971c46f496d",
        "cursor": {
          "ref": "690b9d6d-c73c-46ce-b038-81baca421494",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "26a5ec70-0838-4929-aeca-fc3595daf3ae"
        },
        "item": {
          "id": "1db13a4e-df97-47ec-82c3-3971c46f496d",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "c5feaf1f-19ae-4d04-9992-8e02d27dc3a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "62f6526d-7274-45c3-940e-13ed8d6feb93",
        "cursor": {
          "ref": "f6fd9c2a-1876-428f-9c8c-63aa7ac6e6ba",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "759eba45-69e2-4d9e-826a-d244f9fb4c3c"
        },
        "item": {
          "id": "62f6526d-7274-45c3-940e-13ed8d6feb93",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "842527b0-8372-455a-b1e7-6419deb7094b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "3dfbecdf-54f7-4e3c-a633-e415c6ce8b55",
        "cursor": {
          "ref": "7ba4c6c9-6aec-4762-98ae-242e11399ae8",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "dd41c423-9e18-40e9-81f9-e33009161392"
        },
        "item": {
          "id": "3dfbecdf-54f7-4e3c-a633-e415c6ce8b55",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "08b10603-ba73-4f1d-9060-36a28c604947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "9add4d26-4db0-4c90-a425-d8368bf4f220",
        "cursor": {
          "ref": "9bd73a89-1a74-4f61-a725-271161dc4707",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b4285e38-883d-4893-b4f9-0e4504c010d8"
        },
        "item": {
          "id": "9add4d26-4db0-4c90-a425-d8368bf4f220",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "2abfc693-8493-4b6c-8ed2-93a248f1266f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "986df76b-00d4-4b50-9eed-1141f6285e63",
        "cursor": {
          "ref": "8efcb144-808d-4754-9249-1a02dc4054f5",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "34e9ecc5-a331-4f7d-b043-a198bcd9a77a"
        },
        "item": {
          "id": "986df76b-00d4-4b50-9eed-1141f6285e63",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "edc4e625-a38f-4e92-950a-19158a6f909c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "0b2126d9-06a8-4d2f-b84e-72a1c58e8c49",
        "cursor": {
          "ref": "afcd4642-3365-4346-ab27-939733778749",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "e9177109-84d5-439a-bb4d-774bd44fe3fc"
        },
        "item": {
          "id": "0b2126d9-06a8-4d2f-b84e-72a1c58e8c49",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "6c10e5f9-78eb-4036-a159-896e49435e4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "398b97eb-3c6c-4fb2-86d6-65f1509f403a",
        "cursor": {
          "ref": "e53f80c2-c854-4045-ab49-a94a383fc606",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "c07d20fc-4491-43c1-8d6b-ab1bf309f94d"
        },
        "item": {
          "id": "398b97eb-3c6c-4fb2-86d6-65f1509f403a",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "d5509a02-74b7-4a4e-84f8-54a3a39c2d22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "b2209058-cff5-4087-b364-a7409bcd29e1",
        "cursor": {
          "ref": "d319eb17-380a-4367-a4f0-a1b1e60160c6",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "13314144-81ea-4886-ac2a-45b18b072757"
        },
        "item": {
          "id": "b2209058-cff5-4087-b364-a7409bcd29e1",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "3b38103d-9c09-400e-ad03-c34fee5b7b3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "bd7d559f-3935-47d0-b246-ca8a1961316b",
        "cursor": {
          "ref": "56add999-b832-45de-9215-19cad096db02",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "e4042fc6-7b8e-4d9a-be2c-15084278b97a"
        },
        "item": {
          "id": "bd7d559f-3935-47d0-b246-ca8a1961316b",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "6f752899-a104-471a-a719-5d5bf90a2c61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "2442724c-e3c0-45c7-ad30-b6aff450cd92",
        "cursor": {
          "ref": "5e06b144-4f07-47f2-8d2d-6d5824127852",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "8c3eb8ab-b543-459c-9fd1-aef5f37a622d"
        },
        "item": {
          "id": "2442724c-e3c0-45c7-ad30-b6aff450cd92",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "65334a68-d9b8-48a8-9b01-90609504a938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "ef2e9acb-00dd-4bd4-9048-aafb01ee1711",
        "cursor": {
          "ref": "b39098ad-8d09-454d-a2e0-7b21b4c263dc",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "aca039f0-385a-47da-8d3f-2798c5d9db0e"
        },
        "item": {
          "id": "ef2e9acb-00dd-4bd4-9048-aafb01ee1711",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "5ad324e3-353d-431d-8eed-448f1688129e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "6e881486-45a0-4122-8658-5053927f203a",
        "cursor": {
          "ref": "1b2b2883-3c16-42a1-9dc5-631dadf5d70d",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "92d8c537-6d97-4567-a9f8-dbf1f0449f12"
        },
        "item": {
          "id": "6e881486-45a0-4122-8658-5053927f203a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "32ddc2d0-8f7f-40a7-b62d-de3429681945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "450cdcbc-4381-4d64-965e-6f471872d892",
        "cursor": {
          "ref": "d93f9dc4-d44a-469d-a391-ec9deca53852",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e614bcab-3a94-4f14-81f6-16d63dab768a"
        },
        "item": {
          "id": "450cdcbc-4381-4d64-965e-6f471872d892",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "63559a0f-0580-46d4-8d68-626cffe346ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "9f951710-9dcc-4117-89e3-619ad3ff8ee4",
        "cursor": {
          "ref": "71640d60-8ef1-430d-81b9-c8a03b8ce523",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "50cb7f66-b967-4316-a4a2-75be5b7347f2"
        },
        "item": {
          "id": "9f951710-9dcc-4117-89e3-619ad3ff8ee4",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "a60ec272-5336-404b-ab11-45d481ef37ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "661a2f05-af75-43d2-a946-11155750e51a",
        "cursor": {
          "ref": "86c06e83-7c85-451a-906b-80b7e34a26fe",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "c9430480-59b1-4217-ae53-5d6e0fcacce7"
        },
        "item": {
          "id": "661a2f05-af75-43d2-a946-11155750e51a",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "1f4f6dbe-34f5-4cca-ba43-174feda34ef1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "33224879-24f0-46ac-aa18-ecfc2eb18e4d",
        "cursor": {
          "ref": "5f09e4ab-e4f7-4956-b1db-a455716fa14d",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b31b82ed-b13e-4caf-9cc9-2eb0247bac38"
        },
        "item": {
          "id": "33224879-24f0-46ac-aa18-ecfc2eb18e4d",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "4f71eee0-4b5e-43cf-b4f5-3ac4325ba759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "f9987b9d-ccd8-4a72-8db6-968c851dca6b",
        "cursor": {
          "ref": "98653edc-932a-46df-861e-7f44fead69ce",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "ef0b4bb3-12cf-41ff-8645-864cd4cde1d9"
        },
        "item": {
          "id": "f9987b9d-ccd8-4a72-8db6-968c851dca6b",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "9dade7ac-8f8e-4693-91ae-303eb2a34d9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "1694f65c-79f9-4cca-922f-ec73ec83ff59",
        "cursor": {
          "ref": "7dda8720-dc78-40d0-9609-c78198cac9b8",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "5068f183-e3c5-4d78-9f53-35aeea64e088"
        },
        "item": {
          "id": "1694f65c-79f9-4cca-922f-ec73ec83ff59",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "a0779dd4-639a-47d8-afb9-f09019de80a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "42fdc49f-d783-4b67-b577-c93aab06a1f8",
        "cursor": {
          "ref": "ee485df8-11fc-4d99-9495-783a586af020",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "c1dd3f43-1958-4e1f-a250-c26e33cc695d"
        },
        "item": {
          "id": "42fdc49f-d783-4b67-b577-c93aab06a1f8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "c096dc1f-6ac5-4bea-a411-cb7ea99a4e43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "937832d6-62de-4637-8203-2dc8f78bac99",
        "cursor": {
          "ref": "bb5dd804-94e3-46e1-8434-2f792719f044",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "b0dfe69b-24c9-47bd-988c-fdb543280115"
        },
        "item": {
          "id": "937832d6-62de-4637-8203-2dc8f78bac99",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "0b8a6124-2f97-44e4-9234-5a1b27b2b60d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "bfb0b023-70e2-4acb-bcbf-1d69074c6e11",
        "cursor": {
          "ref": "650f2727-4c50-40d0-b4e4-998b3f688449",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "4f69032d-eb63-4aad-b91f-7b0acd9465f0"
        },
        "item": {
          "id": "bfb0b023-70e2-4acb-bcbf-1d69074c6e11",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "ed299795-3d56-4e74-afd3-32e4d38d4419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "dcc74e22-7adb-4701-9295-06ef486ab178",
        "cursor": {
          "ref": "e42931fb-eab9-4e67-acee-2d3035236d1d",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "fbe18f79-5167-4c22-a6d6-adb16a5ea4ff"
        },
        "item": {
          "id": "dcc74e22-7adb-4701-9295-06ef486ab178",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "f859c0cb-7cfa-4a16-b8a0-b5b0c6c5ee55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "de011193-bbbd-4f1c-be28-415dd86dcf1e",
        "cursor": {
          "ref": "c9dfcf03-be25-4810-a0e8-d93b6c497802",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "00038e30-6c1f-434e-932f-e2e697328eba"
        },
        "item": {
          "id": "de011193-bbbd-4f1c-be28-415dd86dcf1e",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "db469dbe-52cd-4cbd-a49b-521c5e8c151b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "cbf0e85b-9e78-41a0-bc45-38a6e2d5a01d",
        "cursor": {
          "ref": "6ef21a38-3e6b-454f-b04b-4a2a3ce022bb",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "478ce349-36ca-45b5-8f16-1331dabf1648"
        },
        "item": {
          "id": "cbf0e85b-9e78-41a0-bc45-38a6e2d5a01d",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "21527090-ba88-4f66-bcad-981df3cae62d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "a161ba7f-730e-498b-8450-da712cacd9fb",
        "cursor": {
          "ref": "84d0e285-4917-4f96-8c73-58d9158d4eea",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "b8f26163-399b-46fb-a797-ecb1b3892ee9"
        },
        "item": {
          "id": "a161ba7f-730e-498b-8450-da712cacd9fb",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "9df0e4da-365c-4a48-ba50-c8db5658990d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "1ccb86ce-48bc-48b1-b8bb-3a5629760054",
        "cursor": {
          "ref": "bd3f5617-a9c4-433d-946b-3b4964a0e43e",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "715634f5-64ec-4b2a-812d-093bbd89d8a5"
        },
        "item": {
          "id": "1ccb86ce-48bc-48b1-b8bb-3a5629760054",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "36acbae7-de2e-40f5-a0a0-7ff3b8bbefee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "eff43830-71b8-4ffd-82bb-595466203208",
        "cursor": {
          "ref": "e7fbfaf6-3763-4fd6-ba27-8b521974ae01",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "7bde4cdf-c8ef-4180-ac58-e8c94ca58040"
        },
        "item": {
          "id": "eff43830-71b8-4ffd-82bb-595466203208",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "b0380f57-b764-4518-897a-e654ea3c0a9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 91
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "de6af8f1-9323-400e-b32d-ec85f28c5d7a",
        "cursor": {
          "ref": "d0186cdb-544c-4996-ba70-8866caeda153",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "bdd8b626-99ac-426b-8f55-16678d5b1709"
        },
        "item": {
          "id": "de6af8f1-9323-400e-b32d-ec85f28c5d7a",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "35e59fe9-0fba-46a7-8184-c9513401a727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "7a6cfcc2-df57-4b8f-afc8-f6ab8335ce24",
        "cursor": {
          "ref": "3082d3d9-6f2b-45f2-91df-304b292050bb",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "9dd622ea-5a61-4338-befb-1a053f06241d"
        },
        "item": {
          "id": "7a6cfcc2-df57-4b8f-afc8-f6ab8335ce24",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "70fc3c27-0e8a-4318-844b-daeea6fe61e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "09ada5ae-4504-4af4-b051-38425f887ab8",
        "cursor": {
          "ref": "381c2335-f79a-4253-9dea-aa0e19d9a7f0",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "d3d63ae9-0e1b-4cbc-9071-6cf56827b3fe"
        },
        "item": {
          "id": "09ada5ae-4504-4af4-b051-38425f887ab8",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "4918dac6-a5e0-4440-b15b-9efdad659ffe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "b9956a03-829b-4cf1-8a19-23c866c42b7d",
        "cursor": {
          "ref": "90fd0c2d-900b-4e86-a8b8-c70d154edd48",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "2f9120ad-6513-4b85-8dfe-79d69f6f8aa2"
        },
        "item": {
          "id": "b9956a03-829b-4cf1-8a19-23c866c42b7d",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "47dc2ba2-10ac-4b9a-8bff-77058b56b3cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "78cd9752-fecb-4f19-8efb-44ca84f7e1c8",
        "cursor": {
          "ref": "f771f14f-c37d-4e89-91a7-d5aa2c365a54",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "1bcb5ac8-d895-47ba-b24d-3201d1c1f42f"
        },
        "item": {
          "id": "78cd9752-fecb-4f19-8efb-44ca84f7e1c8",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "40ff72fe-c5d7-4a80-9437-00cbe689b742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "45bb87da-1bc1-4a1e-8515-d4f0bcd05a8a",
        "cursor": {
          "ref": "a00d0a76-31e5-4e62-9bf5-a9c4e68a8107",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "6e0031ae-276f-4550-a784-4a2417f8831f"
        },
        "item": {
          "id": "45bb87da-1bc1-4a1e-8515-d4f0bcd05a8a",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "9feae29d-4647-41c1-8234-e0b1f75cb403",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "5aea379d-eca9-4264-bfd5-29b1332fc170",
        "cursor": {
          "ref": "84a48911-51ca-4c6f-a9c3-22bc9e8f3c44",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "5f8867c2-c32b-4829-b846-aae46b5ec8d6"
        },
        "item": {
          "id": "5aea379d-eca9-4264-bfd5-29b1332fc170",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "315de5e6-1226-4ea3-856c-7da6b9d3f622",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "446ca20a-8de0-4350-83d6-16f3ae539746",
        "cursor": {
          "ref": "f7ff9de1-f4ef-4ed3-afe1-76349a7bc539",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "5a4fbbe3-b80e-4011-9dec-5c12abb24387"
        },
        "item": {
          "id": "446ca20a-8de0-4350-83d6-16f3ae539746",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "d704dbec-939f-45bc-86e5-a74ac18c07e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "5fd2a68d-724d-4212-8098-cecc7b0f5e74",
        "cursor": {
          "ref": "bc2be439-8bee-45eb-a242-daef624152b8",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "02daf855-aafe-4467-9a79-96fbdc74b07e"
        },
        "item": {
          "id": "5fd2a68d-724d-4212-8098-cecc7b0f5e74",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "f73be609-ec6d-44f6-adf9-fa71f9511e75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "e6dea774-1798-47eb-9656-5e368469085b",
        "cursor": {
          "ref": "cdf0ce88-1f5e-447f-9fdc-f8ae1ef1fa42",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "ff1a37d1-3ad1-43db-89ce-b55fce177cba"
        },
        "item": {
          "id": "e6dea774-1798-47eb-9656-5e368469085b",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "216950d3-92fe-4640-99b0-6c6eee6d6d2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "20150104-9d48-4142-ba5d-a38c33e10910",
        "cursor": {
          "ref": "c9ad7960-81d8-4ecb-9d0b-cc78c29ee0a7",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "9f42adf4-0b0f-496f-8d77-71238aa74b06"
        },
        "item": {
          "id": "20150104-9d48-4142-ba5d-a38c33e10910",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "515dff92-2943-47dd-8592-bde1c6ce2ab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "f39fbff6-e11d-4844-8fe6-9d8792d3ef4e",
        "cursor": {
          "ref": "46228af7-8f17-4458-8148-3e7b7474ad42",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "514b5e4a-62e1-4325-96d2-1967dffc1e2b"
        },
        "item": {
          "id": "f39fbff6-e11d-4844-8fe6-9d8792d3ef4e",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "bee1cead-0298-46a5-a33a-6adadc6ca01f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "307b44d0-5eed-45e2-afb7-f153497434b2",
        "cursor": {
          "ref": "5083ab64-b368-484a-b1c9-8cf244adaad4",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "e9f29f24-e033-41af-bb47-33731a715801"
        },
        "item": {
          "id": "307b44d0-5eed-45e2-afb7-f153497434b2",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "d73e7acb-27fa-4d33-94f3-5ab7ca95874f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "f8115580-32aa-4792-94ae-acd5019a04ac",
        "cursor": {
          "ref": "102086b1-4d14-446c-b908-df647a743e4b",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "e1698bd4-637e-4de8-9d5b-ca5e067c1cea"
        },
        "item": {
          "id": "f8115580-32aa-4792-94ae-acd5019a04ac",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "219e9143-2056-43f8-b4f3-fee54969aa2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "af515537-f639-405c-ba19-4f0d209360cd",
        "cursor": {
          "ref": "6d22ffa8-25a0-457e-856b-291dce3e2eb7",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5089d549-c666-483f-9a7d-e7c5bd604b5f"
        },
        "item": {
          "id": "af515537-f639-405c-ba19-4f0d209360cd",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "f733e011-2ff0-4581-ab4b-3d232eee44ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "dc987d9c-4665-4944-9d00-10829becf657",
        "cursor": {
          "ref": "97e9c4d6-fc6c-45a6-b97d-396d5d140394",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "7ac85f4c-9dcb-4db5-906a-aa5c376bf40a"
        },
        "item": {
          "id": "dc987d9c-4665-4944-9d00-10829becf657",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "5f74d1e9-87cb-41b9-b9f7-4b730873781c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "4a7d1550-7c88-4db3-8848-8b2ab28157ad",
        "cursor": {
          "ref": "f7a1f463-2597-48ad-b260-b78f890400dc",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "6566e662-8b29-4ac5-b61d-223f456f920a"
        },
        "item": {
          "id": "4a7d1550-7c88-4db3-8848-8b2ab28157ad",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "ce734e8d-9ba7-45ee-b896-db5110849585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "be65710c-c464-480a-bcc1-2f8403015d03",
        "cursor": {
          "ref": "561ba147-da5f-4a32-ba64-fac9772ce54b",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "263d9572-be5b-4c42-b17e-740e53c282d5"
        },
        "item": {
          "id": "be65710c-c464-480a-bcc1-2f8403015d03",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "ed320ff3-c9ca-40d1-8939-d214f2e0cbbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "40ccd045-ce7b-464f-883e-bafbcc676953",
        "cursor": {
          "ref": "55379f1b-034e-4d53-a789-ece0450b9557",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "bdda22cb-9f77-447a-9825-79ee799e4859"
        },
        "item": {
          "id": "40ccd045-ce7b-464f-883e-bafbcc676953",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "61fb6ab9-3255-4075-b145-75b77bf60b88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "04cfa24a-3654-41b9-8a06-adcf8565c8bf",
        "cursor": {
          "ref": "ff4a892a-edb4-487e-91f3-053a3973df63",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a9b8f134-4105-48de-8a0b-598c3988ccc4"
        },
        "item": {
          "id": "04cfa24a-3654-41b9-8a06-adcf8565c8bf",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "9c5c6faf-feec-4bdb-be0e-8ece5bdf1fd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "119c38bd-06c3-4734-9b20-ed692741915b",
        "cursor": {
          "ref": "e6d1e4e0-fe98-4b54-b8a3-1f80620a29a5",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "14cd0051-3ab9-40a6-8f23-9bc6a5278e16"
        },
        "item": {
          "id": "119c38bd-06c3-4734-9b20-ed692741915b",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "de993f4f-e349-48a5-abf2-0f95c8261788",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "30664695-f849-4857-a4f7-0a49bed5a372",
        "cursor": {
          "ref": "2a73be05-3ac8-4b73-965a-c1de3ad3ebfc",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "25625bd3-d426-475d-849f-efee3ba89c76"
        },
        "item": {
          "id": "30664695-f849-4857-a4f7-0a49bed5a372",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "542b5d82-1aa3-478b-aa38-57a4d37f4663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "b13c67bc-902d-4581-8b00-6c8bd83bc471",
        "cursor": {
          "ref": "f938c191-1506-493c-ae8b-2e71c641a77f",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "bdc1a2d9-ff8a-4653-99be-4afec1b1bf52"
        },
        "item": {
          "id": "b13c67bc-902d-4581-8b00-6c8bd83bc471",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "94f0dbec-743b-4ce6-a50e-99cb70b32dea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "81d2ad45-e3ce-4302-a33b-75a4f77c1aac",
        "cursor": {
          "ref": "3eddcd98-747e-49f5-b777-ae08a4c39cf2",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "84f4d9cd-2ef9-4975-ab5f-2a976aac4e2f"
        },
        "item": {
          "id": "81d2ad45-e3ce-4302-a33b-75a4f77c1aac",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "540695b3-a7af-4036-a5f5-e4241ff21419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "63ec3d98-98c7-4cf5-b48e-a15aa8ffe6b1",
        "cursor": {
          "ref": "85a0806a-2dfa-426f-95d6-fbbaee2a0a43",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "f3faf2b5-6914-438e-ab61-272cdb310005"
        },
        "item": {
          "id": "63ec3d98-98c7-4cf5-b48e-a15aa8ffe6b1",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "c34f72d6-1b56-4c77-bac2-f2a057ae4bef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "80dc608f-2502-4df0-986d-6de04c36e3fa",
        "cursor": {
          "ref": "16701d03-f667-44a3-8b81-7e665e4bc54e",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "678b45cf-ade3-4029-b03c-97311effa4a5"
        },
        "item": {
          "id": "80dc608f-2502-4df0-986d-6de04c36e3fa",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "73d017b7-4c79-489d-8b05-c4cd02593a6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "8f09c08b-9982-43ff-a604-93a0d96936d4",
        "cursor": {
          "ref": "fce67699-6423-4ade-9826-6fb3d145e958",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "32bee89a-b537-4aac-bd49-e7c6550353c4"
        },
        "item": {
          "id": "8f09c08b-9982-43ff-a604-93a0d96936d4",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "2fa684a0-bd4b-4463-89a2-ceb9c180fb88",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeab8e71-5c52-4a9c-ab8c-6f1b59deea71",
        "cursor": {
          "ref": "8454703a-06ee-4ecf-8e9d-dc12c06dab21",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "7eea64e8-6a1c-4192-8ffa-275320384441"
        },
        "item": {
          "id": "eeab8e71-5c52-4a9c-ab8c-6f1b59deea71",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "e312b5cf-1b7e-40d0-8031-02c4f26e4ace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "b9fd3793-66f1-478f-a648-cf14dd973b65",
        "cursor": {
          "ref": "47200b68-6d57-4696-a808-40b085b6e9fc",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "bda82d38-3947-44b4-8106-7df2941dee0a"
        },
        "item": {
          "id": "b9fd3793-66f1-478f-a648-cf14dd973b65",
          "name": "credentials_issue"
        },
        "response": {
          "id": "85fc9d42-98ef-4d97-8fb2-a03f746e7c2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:106)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:106)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:106)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:7:106)"
            }
          }
        ]
      },
      {
        "id": "ca083160-71a7-42a0-a0a7-1d4c5670ee6d",
        "cursor": {
          "ref": "d0000f44-9c12-4c46-8c4f-417c3501b4fe",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "22f171bb-736f-4456-bf4a-d5c6ce09164f"
        },
        "item": {
          "id": "ca083160-71a7-42a0-a0a7-1d4c5670ee6d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "c5079c7b-0414-47d8-a3ca-660fcabdae1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "0cb9422c-2ab3-4fb6-af44-362960f39cf7",
        "cursor": {
          "ref": "7976e2b0-1d54-4388-b081-55b3c8bce25f",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "f5a15f78-8893-45f5-8e7d-c8cac8defd66"
        },
        "item": {
          "id": "0cb9422c-2ab3-4fb6-af44-362960f39cf7",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "3ba2cceb-42ef-45d3-af77-8a64a69da9d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "8cfff72d-bd91-405e-b87d-fa4c620b147a",
        "cursor": {
          "ref": "fbce8425-5ed4-4d20-8dfe-2f97c20b5c1e",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "d13016c9-338b-46d3-816f-2e0a9f01291b"
        },
        "item": {
          "id": "8cfff72d-bd91-405e-b87d-fa4c620b147a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "9b831cf1-6440-43fc-b758-2a6bb6f9adc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:109)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:4:109)"
            }
          }
        ]
      },
      {
        "id": "3006dd94-fa0e-474a-afe9-c696bab29509",
        "cursor": {
          "ref": "00fcd8c7-0e07-476b-b188-63c8b1a67a3b",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "f5429d9b-1524-493d-ba9c-e9fde2f144c4"
        },
        "item": {
          "id": "3006dd94-fa0e-474a-afe9-c696bab29509",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "faec6c22-44fc-4772-93a3-15962e7d28af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "a3256c16-419b-4f10-979c-c9eca750f990",
        "cursor": {
          "ref": "51535acd-bc5d-4014-93b8-3254f4af4e08",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "46591a00-42b7-449d-942a-b240d10bbecb"
        },
        "item": {
          "id": "a3256c16-419b-4f10-979c-c9eca750f990",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "0112b7b2-59de-4f9e-96bf-546c48d1a825",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "a3256c16-419b-4f10-979c-c9eca750f990",
        "cursor": {
          "ref": "51535acd-bc5d-4014-93b8-3254f4af4e08",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "46591a00-42b7-449d-942a-b240d10bbecb"
        },
        "item": {
          "id": "a3256c16-419b-4f10-979c-c9eca750f990",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "0112b7b2-59de-4f9e-96bf-546c48d1a825",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "b63cae23-ae15-461a-abde-26033aa107f0",
        "cursor": {
          "ref": "9b4f06ff-5e9a-4206-91e3-69077a6ffbb2",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ff8c4364-5c65-4439-aad4-340eca3c2473"
        },
        "item": {
          "id": "b63cae23-ae15-461a-abde-26033aa107f0",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "3e22bdd8-c259-4798-a22c-0ad2b0290a8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "653ab982-66c8-4f57-9694-7611a03d02a3",
        "cursor": {
          "ref": "31e90d24-0e2b-43c8-a72d-923dad441d5c",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "2f8dc9dd-d7d7-4966-9cf2-b0834becf4ac"
        },
        "item": {
          "id": "653ab982-66c8-4f57-9694-7611a03d02a3",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "7447f868-7d0c-4189-89f8-c656293282da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "f0356e98-d5f0-48ee-b36f-cf949500a724",
        "cursor": {
          "ref": "a4d37afa-29b5-423f-bae8-1bcca9359890",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "b9f3caee-bde6-427c-affb-286809de526d"
        },
        "item": {
          "id": "f0356e98-d5f0-48ee-b36f-cf949500a724",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "26d89df8-e62a-4eb6-adba-41d77b6050bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "1fef5a2a-75da-431a-9076-0ba6dbff1f7e",
        "cursor": {
          "ref": "7178c53a-702b-434b-b23c-513a84a77b13",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "0bc88640-b518-48b7-96fe-13f3d31d522b"
        },
        "item": {
          "id": "1fef5a2a-75da-431a-9076-0ba6dbff1f7e",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e09bca68-350d-4022-abc1-68f74cdec886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "e687e2d6-aaba-455a-8aa8-29aee03bc027",
        "cursor": {
          "ref": "30429f80-06d3-4102-880d-bdbd88c0e1af",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "3955d173-39d8-41f0-967b-98e1dcfb9f92"
        },
        "item": {
          "id": "e687e2d6-aaba-455a-8aa8-29aee03bc027",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a8bef7ee-4ee1-4069-b644-f4e6f3c989d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "e7d8e0e2-9317-42a8-a2e4-2104fb38ff6a",
        "cursor": {
          "ref": "a48836c1-a5ed-4109-afe0-f06d37ed566b",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "48802e4f-3e74-424d-b73c-91930ce7ece5"
        },
        "item": {
          "id": "e7d8e0e2-9317-42a8-a2e4-2104fb38ff6a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "9daf18fa-bf54-447d-99be-6ac6678022d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "092f6e59-e445-4b98-b4ec-9f072a9baa2d",
        "cursor": {
          "ref": "be8f0a87-5b5e-4e64-8c37-19fdabaa8ee8",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "4d8ce9db-8d45-4126-8516-cbbaed377536"
        },
        "item": {
          "id": "092f6e59-e445-4b98-b4ec-9f072a9baa2d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "6d1b4d3d-689e-4406-898e-d59936d3002c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "5ef8e34d-c46f-4449-93ad-0689bb3e0725",
        "cursor": {
          "ref": "65909e88-4364-4ed0-9411-cd6533a615df",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "30893f67-41e3-4ac4-a533-a9dbce3d8e66"
        },
        "item": {
          "id": "5ef8e34d-c46f-4449-93ad-0689bb3e0725",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "692a43ca-177a-4c60-bdd6-3255d58f05b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "182724b3-8367-427f-912a-6bdd1f2c192f",
        "cursor": {
          "ref": "cd69f3d7-122f-4c65-b211-ee710f584d56",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "0e6fb27a-f201-4c86-bf00-e288def049c2"
        },
        "item": {
          "id": "182724b3-8367-427f-912a-6bdd1f2c192f",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "67f71dc4-47fe-4e7d-9c1a-f5fe6255389c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "271148ad-7642-4729-b6ed-35fb3d26af27",
        "cursor": {
          "ref": "73a45d8e-45c6-436d-b282-1554ad3768f3",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "67a9a6e2-d101-4712-af22-9c276fcae7e9"
        },
        "item": {
          "id": "271148ad-7642-4729-b6ed-35fb3d26af27",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "25759baf-a8b4-45ab-bcce-8175d01550b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "2d10897c-d112-40a0-a90e-3b22e2e9e8ac",
        "cursor": {
          "ref": "686ff87a-a161-4dd3-8c5f-8e2794804b23",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "ebfc3114-1c17-476a-8ca9-1d7989082dd0"
        },
        "item": {
          "id": "2d10897c-d112-40a0-a90e-3b22e2e9e8ac",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "991f4c53-bf85-4ac1-b792-8f8441f15950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "8f33576c-4fa0-4997-a35d-7a6b872e7eed",
        "cursor": {
          "ref": "a330efac-e781-4b4b-9070-9dd56de805a7",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "49ac354d-2126-4c0c-be66-e9424ae97d1c"
        },
        "item": {
          "id": "8f33576c-4fa0-4997-a35d-7a6b872e7eed",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "957537da-3d7a-4bcd-b0c2-0bc309727b79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "e57f30ab-f84a-408c-bc25-15930ea2277c",
        "cursor": {
          "ref": "2115a25a-2cb0-459f-9be0-4205a2c5f178",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "0c314668-99b0-4438-8309-a859dafb1b0f"
        },
        "item": {
          "id": "e57f30ab-f84a-408c-bc25-15930ea2277c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "59bd672a-7b82-47c0-a0d4-c97b5fc2f872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "2357f47c-0a66-4678-80bc-84031293eb07",
        "cursor": {
          "ref": "de74a7af-74c0-47d8-a060-df63c623b6fa",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "2742cacb-fc8f-4e6c-9c30-cacdd2876771"
        },
        "item": {
          "id": "2357f47c-0a66-4678-80bc-84031293eb07",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ab864baa-8106-4cc0-b20d-f50e70da846a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "588e60e8-0a87-4908-851c-e6ceea573040",
        "cursor": {
          "ref": "957f44e7-1c40-4cb5-8bd5-ba006cd09c32",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "80c90cb3-7800-4644-85c4-2c3949d5f8f6"
        },
        "item": {
          "id": "588e60e8-0a87-4908-851c-e6ceea573040",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "7cfe8555-afeb-4263-9ac5-18515e70d54a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "770b2a42-99e7-4a2f-92ba-497d9599ac6a",
        "cursor": {
          "ref": "27766935-5435-4c67-84c5-15d4b0bc77ed",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "3a6e49dd-7890-461e-86c5-af09dc6fdeb2"
        },
        "item": {
          "id": "770b2a42-99e7-4a2f-92ba-497d9599ac6a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "1e263512-b9d7-4baf-9eb4-61cfd781acb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "4d8ec388-3c76-448d-ab0f-4de835fb6562",
        "cursor": {
          "ref": "fcc81564-95ae-43ed-9ec4-bd440ec4e07c",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "61caecd8-8b42-4a46-9c85-b0f0beb72c46"
        },
        "item": {
          "id": "4d8ec388-3c76-448d-ab0f-4de835fb6562",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "f1c57f01-3bfd-4586-9340-0fb405035bb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "c7e4d9ed-4ca9-4f4c-bb63-da25aac86d17",
        "cursor": {
          "ref": "65852d9b-7749-4fd0-9380-f0536428dde5",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "d66bf506-e324-4e5d-9bdd-d0168d6840b2"
        },
        "item": {
          "id": "c7e4d9ed-4ca9-4f4c-bb63-da25aac86d17",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "9cb48115-561a-4c0c-8e0a-c68f9020d517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "9ffc5ec1-6adb-444e-b3a8-66367a6fc843",
        "cursor": {
          "ref": "630dea64-aa86-49d0-88ca-27720d125d9c",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "12a35607-6a4a-4264-b053-be638b9a39ed"
        },
        "item": {
          "id": "9ffc5ec1-6adb-444e-b3a8-66367a6fc843",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a01ae4bb-6b19-4e57-8514-8225bbe031f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "b0b2220f-2434-4295-984b-9c3f1fba3a04",
        "cursor": {
          "ref": "81b3ac96-3037-43ce-aba8-bf6185901425",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "95bb1f61-cdad-4ce3-bdb0-e371b5aafb64"
        },
        "item": {
          "id": "b0b2220f-2434-4295-984b-9c3f1fba3a04",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "6e91a38b-dfa8-49d9-b0ad-b25d703c3c4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "f9481695-7517-4df9-884e-ffc5f18535ea",
        "cursor": {
          "ref": "93194386-f0dd-4e56-999e-c43ac2c1276c",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "17004916-f654-45ac-ac44-da113b68fbb0"
        },
        "item": {
          "id": "f9481695-7517-4df9-884e-ffc5f18535ea",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "bf466f24-cc13-423d-b8e7-aa1408affaf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "35a795f5-7739-46dc-9b52-63d51c0d961a",
        "cursor": {
          "ref": "c2f4aa63-7bf5-43fc-b0ee-ebc30e8829fd",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "b3c9bc89-cf3a-4bab-bf7b-fed71cdbebc2"
        },
        "item": {
          "id": "35a795f5-7739-46dc-9b52-63d51c0d961a",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b0490433-3d4f-42eb-9aac-0f8a04ab8a61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "8a619df4-0a77-4aeb-9414-9951dc128b5e",
        "cursor": {
          "ref": "fa273a43-79db-43da-a44b-ee6c1b19bd8f",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "fd00ddb9-af23-4701-974e-fdddd6590ac4"
        },
        "item": {
          "id": "8a619df4-0a77-4aeb-9414-9951dc128b5e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "19f8393d-1670-4b03-9925-1c7ffad04fc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "20152ea9-51cd-4806-b6d6-dd2f62a52150",
        "cursor": {
          "ref": "a99d2cad-fc7a-4330-8f6f-057cd288d7b1",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "fdd9c83a-1b60-4f07-91e8-43303bc3c535"
        },
        "item": {
          "id": "20152ea9-51cd-4806-b6d6-dd2f62a52150",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "9d8614a0-1f24-4c0f-a1bc-e5437c0d93e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "f5e5878d-2d90-47f8-8bf3-0f6ddc20821e",
        "cursor": {
          "ref": "fdaf55f9-c412-4939-a890-3d312b612d69",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "1835da0a-bf7e-4b6d-a1d9-5b4c5f52673f"
        },
        "item": {
          "id": "f5e5878d-2d90-47f8-8bf3-0f6ddc20821e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "55ebe7ed-5340-46ee-a6ba-64bfd922943a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "ae3aa34e-94e1-4c93-9938-0b1d11397b9e",
        "cursor": {
          "ref": "06d0b073-04a1-4182-8f4b-f91c4f833a89",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "24fbd2e5-54e6-40a4-b13a-9fb7d7dcb196"
        },
        "item": {
          "id": "ae3aa34e-94e1-4c93-9938-0b1d11397b9e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1e5363c0-6e84-4d5a-b83f-09911f4d93b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "9bab60e4-02da-46a8-807f-99f454bc0618",
        "cursor": {
          "ref": "ced08e53-fc91-46bb-9ae3-8cf56fe12393",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "65728723-2403-4f86-869f-f07997f54f65"
        },
        "item": {
          "id": "9bab60e4-02da-46a8-807f-99f454bc0618",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "63e4d20b-625f-4cab-958a-c6531453c61c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "3899740a-7323-419c-b270-0d68a7982455",
        "cursor": {
          "ref": "d922ec2c-1cea-4287-bd31-0d5b130ccec6",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "5f4497bb-cdab-4bad-bf9f-5241fb09614f"
        },
        "item": {
          "id": "3899740a-7323-419c-b270-0d68a7982455",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "73489520-d288-411a-a96f-b4c54dbfb728",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "48ea9032-37db-45f5-9063-6a3b4358093f",
        "cursor": {
          "ref": "a40ce209-114a-47f4-8503-b1e068f6795d",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "8e997932-4b29-4d65-907c-490bb8375fd1"
        },
        "item": {
          "id": "48ea9032-37db-45f5-9063-6a3b4358093f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a15686fa-31f7-4482-9bfa-b5955f56fca6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "c40d65e4-354b-4df4-89b9-ce5bf8a13e7e",
        "cursor": {
          "ref": "7b9a217e-cbb8-49ff-b617-8b36d6db8a4e",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "dc9a883b-238c-4324-b1c0-5cbff0216488"
        },
        "item": {
          "id": "c40d65e4-354b-4df4-89b9-ce5bf8a13e7e",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "fb08679c-23d7-4a63-aab8-055686b30a09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "97bc99bb-c09b-4d39-887f-275ea2c070dd",
        "cursor": {
          "ref": "4a78a665-4399-4e45-9cd7-d685c46b96c7",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "fd671543-fca8-49fd-b878-c171c46e0c57"
        },
        "item": {
          "id": "97bc99bb-c09b-4d39-887f-275ea2c070dd",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "7dbfa607-66ac-4f6e-b7e4-2ba0af80a6f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "791ddd96-0c89-455c-aa5f-b309fde87d58",
        "cursor": {
          "ref": "097cc39b-138e-4cd1-adea-b90a5c3c72ea",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "3e79be78-533c-49b7-a921-58cd000d7cec"
        },
        "item": {
          "id": "791ddd96-0c89-455c-aa5f-b309fde87d58",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1d1d2326-03f7-4034-990e-76e150d7d81b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7b98bcf-a0c2-4042-808c-21cc72523a91",
        "cursor": {
          "ref": "21b9168f-2f46-400c-ae5d-55aef99135d4",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9a44bcf1-74ad-4d7d-97b5-57c8e9bfa37d"
        },
        "item": {
          "id": "f7b98bcf-a0c2-4042-808c-21cc72523a91",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "2716a5e0-1858-4dff-89ba-e8c387c5dd87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "45770474-6d11-4135-af83-821497a06db5",
        "cursor": {
          "ref": "3e98b15a-a4e7-46a3-b20a-476d6a2f85af",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c5747430-adae-4330-98ce-b98538fd6d60"
        },
        "item": {
          "id": "45770474-6d11-4135-af83-821497a06db5",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "96114779-f7b3-46c1-b3f1-197dbcebef22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "45770474-6d11-4135-af83-821497a06db5",
        "cursor": {
          "ref": "3e98b15a-a4e7-46a3-b20a-476d6a2f85af",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c5747430-adae-4330-98ce-b98538fd6d60"
        },
        "item": {
          "id": "45770474-6d11-4135-af83-821497a06db5",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "96114779-f7b3-46c1-b3f1-197dbcebef22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "f43beda1-b30f-4282-800c-0e2f2e761eb3",
        "cursor": {
          "ref": "ac61fe7a-4e9b-4b07-be78-47eda60994cc",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "2cdfc192-3449-4ffb-8ddb-f3cafce30b15"
        },
        "item": {
          "id": "f43beda1-b30f-4282-800c-0e2f2e761eb3",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "2d82a5a7-50af-4855-92b7-7a0b2057abc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "82165efc-8cd0-4692-91eb-99c88f2c6468",
        "cursor": {
          "ref": "4acfb59a-c5eb-4e72-ac5c-e0d1e0230627",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "d298443a-ebb6-43f0-b5a4-b32368d2ea72"
        },
        "item": {
          "id": "82165efc-8cd0-4692-91eb-99c88f2c6468",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "3729cbea-068d-45f6-aa53-c07bd3a7e0b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "3033c387-3025-4b4e-89cc-0f68eef98f6d",
        "cursor": {
          "ref": "3b61299b-4f09-44b8-a1c8-861ffb9d0995",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "69fc6ba8-3f72-4799-a6dd-e80a92312dcd"
        },
        "item": {
          "id": "3033c387-3025-4b4e-89cc-0f68eef98f6d",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "245f0874-3bc2-451f-83bc-49d84f222daa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "e3dfe35f-148d-4b67-bae5-d80f61bc9cb4",
        "cursor": {
          "ref": "51069ecd-17bf-4d6a-b1d2-6686a311027d",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "17c6c8ab-2914-45dc-9543-f760933e7bd3"
        },
        "item": {
          "id": "e3dfe35f-148d-4b67-bae5-d80f61bc9cb4",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "f25a1df2-dc6d-4d00-a22d-572a9c558733",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "3fce4850-ed62-4978-bdc4-33c0ae8af97b",
        "cursor": {
          "ref": "3701a14b-f9d2-4242-9d1f-ea4a2c36a63e",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "ad71c7b4-4e4b-4e82-9b8c-6f4a63fd6e33"
        },
        "item": {
          "id": "3fce4850-ed62-4978-bdc4-33c0ae8af97b",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "24d937fa-0c11-45fd-ac4d-80d5bbea6fc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "cbc561ca-fac0-42d7-9c3a-e7e3e59b1843",
        "cursor": {
          "ref": "37f19cf1-5625-476c-acf6-e4e5ce9b6a84",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "9b55fa27-69b4-4fae-9433-63f5af2d4d81"
        },
        "item": {
          "id": "cbc561ca-fac0-42d7-9c3a-e7e3e59b1843",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "26b1a33f-b9d1-47b2-ae7b-3560cca40baa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "20530c86-b45f-4ea0-bf3b-10dcbcc82dbe",
        "cursor": {
          "ref": "a41a7791-cb3f-47b6-8e9e-02b94abaebc0",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e5fbe675-5f00-4041-9c6c-35a8df3cfa73"
        },
        "item": {
          "id": "20530c86-b45f-4ea0-bf3b-10dcbcc82dbe",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "382a4823-37c2-4259-9ff7-830b87b752ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "70a993da-94cd-4d5d-a832-a0d2621be561",
        "cursor": {
          "ref": "6da1db56-6081-4b81-b2cb-99a384b0803e",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "8501c872-02be-40ea-b88b-8819d3d1b1b8"
        },
        "item": {
          "id": "70a993da-94cd-4d5d-a832-a0d2621be561",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "ebab4ffb-790b-4d46-846c-47bd6dac89f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "e1164001-6a4a-4018-9ec9-815d2da210a0",
        "cursor": {
          "ref": "69152b1e-52a1-43b2-b8d9-b5160596183f",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "978ad63c-5c2c-4d6f-a8ac-48ece49c2ed0"
        },
        "item": {
          "id": "e1164001-6a4a-4018-9ec9-815d2da210a0",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "9bfc2a95-9321-4c6c-85bb-89faa54620df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "cca7683f-a46c-449e-b735-ff62ab5d5357",
        "cursor": {
          "ref": "45c02dc6-4a96-4f57-a22d-9f00bc16e5ab",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "73832757-69eb-40e4-bfbd-50ac171bea1f"
        },
        "item": {
          "id": "cca7683f-a46c-449e-b735-ff62ab5d5357",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f6b14b47-5e09-4b0a-b9ee-84559864e1c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "155d0cee-f756-4ca3-ac6d-7fb379a82194",
        "cursor": {
          "ref": "8f3f207d-e8f2-4487-8653-7b07666d1796",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "8f4e2546-cb94-43bb-8419-d8117d0c92eb"
        },
        "item": {
          "id": "155d0cee-f756-4ca3-ac6d-7fb379a82194",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "62c05cb6-97f3-48bb-83f8-a6c26fa0cf8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "f50a1b31-652b-4eab-b59e-dc53340a465d",
        "cursor": {
          "ref": "d496a052-40c7-48f1-bbc0-257a453c56db",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "f0ae3c71-6d05-4eab-b1a6-f34e7ad832ef"
        },
        "item": {
          "id": "f50a1b31-652b-4eab-b59e-dc53340a465d",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "c01ea82d-2f28-4b88-9808-2481a3aa9eca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "6a54e087-372b-4512-b633-0d632f095d0f",
        "cursor": {
          "ref": "d61f1545-7da1-4111-a46d-22401c4b4333",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "2a1a4ba8-c72e-4c4a-b7f4-3899a6fc1c06"
        },
        "item": {
          "id": "6a54e087-372b-4512-b633-0d632f095d0f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "3305d678-fc18-4556-bb18-b3d026494a5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "46d279a9-1645-4cf4-9d53-b41360630640",
        "cursor": {
          "ref": "bbac13a4-0c56-48f6-9b00-38b4e84d4e00",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "6491a187-856b-4691-ae41-e9a05a2af852"
        },
        "item": {
          "id": "46d279a9-1645-4cf4-9d53-b41360630640",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "217e5300-0d1c-443f-8d36-a008fe0b976f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "bc1a5de8-6f34-44d0-8c6e-182b0ceaccb7",
        "cursor": {
          "ref": "a756eb93-2a34-4867-8dff-7d6a26b5b00f",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "29d0fb14-e3e2-49a3-a76d-0eafc5964c5b"
        },
        "item": {
          "id": "bc1a5de8-6f34-44d0-8c6e-182b0ceaccb7",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "385ee51f-ad5d-4725-be63-b0f350d4abd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "cdb37f98-cc72-4b19-9762-6e886c1a7eb0",
        "cursor": {
          "ref": "3155f40f-104d-417c-8227-9b9c2dd5b89f",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "8e5fd022-c683-485b-9cc2-3497466b8d50"
        },
        "item": {
          "id": "cdb37f98-cc72-4b19-9762-6e886c1a7eb0",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "4d454d21-fb9a-482c-9e89-aba4622d84cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "5efafc72-f501-4fad-b63b-d1a1e1b448ac",
        "cursor": {
          "ref": "714ce618-47cf-4632-a10e-e2b961571306",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "0ea05933-955a-452a-9696-8037d03bc14c"
        },
        "item": {
          "id": "5efafc72-f501-4fad-b63b-d1a1e1b448ac",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "46a80924-d0cc-483b-a10a-124bf0fed838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "2d239180-e343-47c3-b55e-3fb216ad14ad",
        "cursor": {
          "ref": "9eb3aef7-2dfb-4324-b09d-1ed60d7a3769",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "0a611d9b-9d2d-4e08-a8a3-642d06326f15"
        },
        "item": {
          "id": "2d239180-e343-47c3-b55e-3fb216ad14ad",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "1e4955a3-13ea-4861-b569-c7241c6c3ce4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6635,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "400c9d46-8978-4a0c-b8a1-4a509c1e16ec",
        "cursor": {
          "ref": "c276ece0-69ba-4f20-990b-1b41ebae7463",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "4e9be2b2-d8fb-4d43-b1f7-7106a9b15f8a"
        },
        "item": {
          "id": "400c9d46-8978-4a0c-b8a1-4a509c1e16ec",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "21dbd3f2-5418-4af8-8d8f-57e88f746984",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6558,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "678c79f1-033a-41cb-9de2-ad567bf45fa4",
        "cursor": {
          "ref": "6074d088-34ab-43e4-92b8-1012b043db55",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "74fe8ad1-bea0-41ec-96a1-df12cce0876e"
        },
        "item": {
          "id": "678c79f1-033a-41cb-9de2-ad567bf45fa4",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "092a84d4-6ad1-4440-b0cb-2506bdfc2021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6449,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "71c267f5-75c7-4570-9f95-2120d1640195",
        "cursor": {
          "ref": "dc96c31c-00ea-45ca-bd8d-5b5fc36adf7d",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c01c9639-66aa-4572-a40d-c02261d45ae7"
        },
        "item": {
          "id": "71c267f5-75c7-4570-9f95-2120d1640195",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "0a6c4c1a-e8f2-4331-b413-d680f9e61c10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 463,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "cd3d49af-68a9-4057-969d-f2d9a891477f",
        "cursor": {
          "ref": "9cb577c5-24e3-4335-9bbe-88816d81b2a9",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "98f24667-d2e3-4676-a08d-0f5bf71784fc"
        },
        "item": {
          "id": "cd3d49af-68a9-4057-969d-f2d9a891477f",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "0ba96dcf-01dc-45d6-b8ba-5d61851c8615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4853,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "675f680f-da0a-4c3c-a8a5-5ff0e3c0f0a6",
        "cursor": {
          "ref": "cab0d3f7-4ce1-4f5f-b0dc-d44860175a3d",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "8a77b29c-3078-43d5-83cd-6a4fa22f802c"
        },
        "item": {
          "id": "675f680f-da0a-4c3c-a8a5-5ff0e3c0f0a6",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "335596ae-d808-4eea-88c2-1c25a1b51b5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "3379ad76-dbac-4f88-84ea-51e7a6cc6a9c",
        "cursor": {
          "ref": "17cd4078-6795-4a58-8107-8f18238d3bb3",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "6c37b834-2621-4c10-9fc6-53101a9bb80f"
        },
        "item": {
          "id": "3379ad76-dbac-4f88-84ea-51e7a6cc6a9c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "f1882cc7-974c-4f00-b22c-fa25e1dcb237",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "03a31ba7-db9f-4f76-bf1e-db16ef5fce94",
        "cursor": {
          "ref": "645f8237-15cd-4cd0-9ffa-d4b82741499c",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "4208f0b2-f859-47fa-ab4d-6fad5100f8eb"
        },
        "item": {
          "id": "03a31ba7-db9f-4f76-bf1e-db16ef5fce94",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "d5230684-98f2-4457-a78b-4ec3a7590754",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "7981760e-8d35-47ad-8c45-695f007bbf75",
        "cursor": {
          "ref": "7d1120ea-beec-4351-a154-8469781aa414",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "3deeec15-561e-4f1e-8f82-8e6a6382d902"
        },
        "item": {
          "id": "7981760e-8d35-47ad-8c45-695f007bbf75",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "fcae20c4-0cf1-44de-9ef9-86a5a3bcfa26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "0585f9bb-3e1a-4ea1-9306-2779de5c9f5e",
        "cursor": {
          "ref": "4d286449-eaba-498a-aecf-9b4fd0687304",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "a7e99567-5b01-4114-bb60-7b6bb05a52fb"
        },
        "item": {
          "id": "0585f9bb-3e1a-4ea1-9306-2779de5c9f5e",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "329a6dd7-b3f7-4f85-9736-a0886a1db733",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "faf53658-f0d1-46ae-b334-9820242b4ae6",
        "cursor": {
          "ref": "4dd08c24-e0db-405c-8c84-73b5eecb6cbe",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "44a85f0a-e1b1-4d42-86cf-22352363fbd4"
        },
        "item": {
          "id": "faf53658-f0d1-46ae-b334-9820242b4ae6",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "34abae27-401c-4675-8c3a-d13855c676f7",
          "status": "OK",
          "code": 200,
          "responseTime": 6455,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "9cfdcb99-0bed-4bea-98c9-b22fba762ece",
        "cursor": {
          "ref": "5dd279e2-2d9d-4dff-901e-0ff58dcd7bdd",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "84207656-53e6-4e91-8a76-083f6bf9d3fa"
        },
        "item": {
          "id": "9cfdcb99-0bed-4bea-98c9-b22fba762ece",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "fab29b6c-5cfc-4459-a497-a741b32ece8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 258,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "88c73a06-6636-4aea-8d77-24066ff4fd81",
        "cursor": {
          "ref": "9286af8c-9109-4fd7-b8ca-3bb93d0a19ed",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "d382b863-978a-4f26-92ae-13d0311de6e6"
        },
        "item": {
          "id": "88c73a06-6636-4aea-8d77-24066ff4fd81",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "2de91e3e-1f8f-4137-91fe-a1e5a81fb8bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "408fa764-bbe6-44b3-958e-2ccc82d2f53b",
        "cursor": {
          "ref": "2a27e417-12b1-4971-9150-668e6211b0b1",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "c89af95c-4c8e-4773-9440-90ced79cca9b"
        },
        "item": {
          "id": "408fa764-bbe6-44b3-958e-2ccc82d2f53b",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "fdc07cb2-87a8-4dee-b7e9-895e8942b7ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "0f3ae631-149b-4614-838a-d51624e74c59",
        "cursor": {
          "ref": "a89fcbe7-7533-439b-bb99-9a358863549d",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "33d4a3a3-85e1-4799-a36c-4a41838a398c"
        },
        "item": {
          "id": "0f3ae631-149b-4614-838a-d51624e74c59",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c025688b-55b1-4f08-81d2-44795a011ec6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "b931eb93-9824-41bf-a8c8-e1b5b0d7714c",
        "cursor": {
          "ref": "e2112cbe-38d3-4804-a64a-132cb05bd2a9",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "488a1bde-70f4-4387-931c-8099aab45aab"
        },
        "item": {
          "id": "b931eb93-9824-41bf-a8c8-e1b5b0d7714c",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f1b5ca82-33a0-4a03-b426-1eb6fbf9eaef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "ea7ae5cf-446e-4a04-945f-c88493c7c4f3",
        "cursor": {
          "ref": "1479fba4-ef0d-45e8-9cbd-143dc948896b",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "af509631-a6c0-44c7-9bf0-c24831277aef"
        },
        "item": {
          "id": "ea7ae5cf-446e-4a04-945f-c88493c7c4f3",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "1e87983a-3602-498a-95bd-525a5c65cf82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "7547e01a-74f8-4925-a8db-8a71b6156716",
        "cursor": {
          "ref": "04148048-85f8-4c1d-8de5-415aa108969b",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "7fa80327-0109-4335-b7e4-e63354a87cc9"
        },
        "item": {
          "id": "7547e01a-74f8-4925-a8db-8a71b6156716",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "02ccc41a-2a92-4029-8b27-52e6b8c71f71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "5c504ce1-88e7-4e25-9233-4c88d8fde3f3",
        "cursor": {
          "ref": "25408551-4bc3-487c-b648-746a44732ba8",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "6840530c-9e08-4846-befe-63071279c2c5"
        },
        "item": {
          "id": "5c504ce1-88e7-4e25-9233-4c88d8fde3f3",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "3ac29ff2-938f-4e8d-9ca2-703675ac47df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "86f0fcb6-878a-46a1-80f8-06e2df1f5159",
        "cursor": {
          "ref": "17a983e7-18cd-42bb-80c6-e022cfcc9021",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "7d967cd6-fd79-4eb9-aa24-a3108431ab3e"
        },
        "item": {
          "id": "86f0fcb6-878a-46a1-80f8-06e2df1f5159",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "86f1610f-5999-4431-b96e-919b881c8a83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "bf2b45b5-f6ed-4c46-b533-b638121038ca",
        "cursor": {
          "ref": "794dde66-a877-4cd7-9e02-8f48613cfe1e",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "e225ff49-6ede-447a-9d9f-52778e18f8ac"
        },
        "item": {
          "id": "bf2b45b5-f6ed-4c46-b533-b638121038ca",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "a4516912-aa66-4ecf-9523-7940812dd705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "4d48d988-2af1-47fc-b426-dc16ce13f4e5",
        "cursor": {
          "ref": "475a73fc-7509-4f49-9d1c-67dacdcecec4",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "2ab4c14d-a77c-457b-89a0-560e3042c481"
        },
        "item": {
          "id": "4d48d988-2af1-47fc-b426-dc16ce13f4e5",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "046448e3-d31f-4618-865a-3d71cada4596",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "21f3a2d5-920d-47e4-8f6d-d82be1397f87",
        "cursor": {
          "ref": "ff3eb33a-bbb6-4f61-8f29-7b5e759f8808",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "df808ff7-3826-4948-9446-f4231b5a8710"
        },
        "item": {
          "id": "21f3a2d5-920d-47e4-8f6d-d82be1397f87",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "e8397d94-7b96-493c-accf-fad04846f481",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "1f2ea66d-4795-41ab-a68e-cdf375398c4f",
        "cursor": {
          "ref": "72e270ac-2f14-4998-a2ee-73589914cd2e",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "2aab391d-2297-494d-97e2-d4d19487f284"
        },
        "item": {
          "id": "1f2ea66d-4795-41ab-a68e-cdf375398c4f",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "ae1a6613-dc7e-4c07-abdd-b0d562291174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "dd9e537c-746e-4913-8b5e-4d31ebf1fba6",
        "cursor": {
          "ref": "c6d25549-e7c9-4e22-8059-836e7350e2ec",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "2255b0de-fd30-46d0-8e8e-20bd0ab44c43"
        },
        "item": {
          "id": "dd9e537c-746e-4913-8b5e-4d31ebf1fba6",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "b821cf32-b9fe-4881-aa23-7d5dda5da55f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "90129c16-9f8b-4810-b4c6-4db3c706b906",
        "cursor": {
          "ref": "67551d01-b5ad-4f15-b260-83df106f56d2",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "6334e6ee-283a-4156-b198-eb5987622fc6"
        },
        "item": {
          "id": "90129c16-9f8b-4810-b4c6-4db3c706b906",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "fdcb37f6-6e33-4c96-a406-62b154dd2427",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "d4ac6908-b920-44aa-8488-dda19af87ee3",
        "cursor": {
          "ref": "1305e5d2-63b3-4a5a-9e21-f4858f3a027a",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "b43b713a-79ff-4ee0-88f9-e7977b7e5207"
        },
        "item": {
          "id": "d4ac6908-b920-44aa-8488-dda19af87ee3",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "0819b2cf-53b2-4682-bc43-5e67db2ec80a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "34bb984c-8718-489c-b743-8084f3af0f62",
        "cursor": {
          "ref": "9dc50a0b-373b-45fb-b6bf-b111b1aded30",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "4a935c0d-e990-48c0-a5f8-0c83bc900a57"
        },
        "item": {
          "id": "34bb984c-8718-489c-b743-8084f3af0f62",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "1ea785bd-2c0d-438c-9fd2-edff7cf183db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "a45a7044-4875-4499-94f8-b117b05bc9f4",
        "cursor": {
          "ref": "de5dcdf5-fbd2-4693-b5c7-c004dc8b8d8b",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "5c32b4d1-6b54-4d43-88b6-174e18e6cd02"
        },
        "item": {
          "id": "a45a7044-4875-4499-94f8-b117b05bc9f4",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "1339ef97-5094-4cea-933b-13f48ba376db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "48689dfe-eba8-4d72-8067-a8254734ab5c",
        "cursor": {
          "ref": "29c7b3a8-3d68-4fe4-ade7-3beb15e7c1d0",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "8d3f1d51-d1d5-482c-8fe9-6908ad8f6886"
        },
        "item": {
          "id": "48689dfe-eba8-4d72-8067-a8254734ab5c",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "744bc9b1-94d8-494c-a2d6-5851200d366b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "51cd7c18-318b-4f9c-8230-f84a84408ea2",
        "cursor": {
          "ref": "a69131ca-1aa9-4cc5-a369-037e4e9f331f",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "60a0543a-2d59-41c1-907e-1ca8907d0b0a"
        },
        "item": {
          "id": "51cd7c18-318b-4f9c-8230-f84a84408ea2",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "2a50d39d-bbf0-4b9c-b186-5ef44adcf7c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "a1c6b056-2878-4881-a132-e213601138c3",
        "cursor": {
          "ref": "e119b908-61d2-44e9-8169-5bdc7cc8bdda",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "12844563-8f28-4d6b-8900-9447ccc9055e"
        },
        "item": {
          "id": "a1c6b056-2878-4881-a132-e213601138c3",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "1e86189a-904e-4b3c-800e-2a292f2b4edb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "171f5973-02d0-4fc5-95b2-660faafeaa6c",
        "cursor": {
          "ref": "147181c8-abc7-415a-b46d-3babc9c52ca1",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "6f50703d-e7ce-4645-a1bf-3883df3f60e3"
        },
        "item": {
          "id": "171f5973-02d0-4fc5-95b2-660faafeaa6c",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "8a6770e5-3f26-45d0-b975-7fe50e85fcd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "5895c897-06a2-41c0-8ec5-90ff154eb6b5",
        "cursor": {
          "ref": "2948177b-fc06-4fac-8b7c-31c842f463e7",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "1acaf445-fadf-4ea1-ba1d-8506fcc7bdde"
        },
        "item": {
          "id": "5895c897-06a2-41c0-8ec5-90ff154eb6b5",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "44d126a4-80cb-48f3-800f-0c327577058f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "77a858a6-2d8f-4568-8b19-281d9e0464c0",
        "cursor": {
          "ref": "206db161-69a4-4a49-8919-379403532e41",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "fc2eb407-5a24-46fc-9e79-4c2bff0e60b8"
        },
        "item": {
          "id": "77a858a6-2d8f-4568-8b19-281d9e0464c0",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "364b2485-3108-4b90-90b8-92c48a426ee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "8a38c86e-b5ff-4a53-8be3-21d107f546ae",
        "cursor": {
          "ref": "ff1d0203-2545-422c-8b7b-3d686fed7105",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "2f0d3c8f-90ec-401a-ab29-b61311f0f93e"
        },
        "item": {
          "id": "8a38c86e-b5ff-4a53-8be3-21d107f546ae",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "f0a2e408-6804-4cb3-93ab-03cd86dee77b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "3ac128a3-3a21-4b91-9d55-aa33da1fcad5",
        "cursor": {
          "ref": "49f8f7a8-f68f-4073-abf2-5572120f22cf",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "86095423-8cb4-49e7-8172-6882a3f9e1f5"
        },
        "item": {
          "id": "3ac128a3-3a21-4b91-9d55-aa33da1fcad5",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "d72e1022-d1fc-4b08-a651-c57639a6e117",
          "status": "OK",
          "code": 200,
          "responseTime": 4574,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "c9d1d9bf-6360-4484-b7cf-1eabb0a05ad1",
        "cursor": {
          "ref": "55b69032-2aa8-49ac-9a0d-a8ee20193e9c",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "f5155b3b-e29e-4615-ae66-ffa21d84cce4"
        },
        "item": {
          "id": "c9d1d9bf-6360-4484-b7cf-1eabb0a05ad1",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "30db02d7-6192-418f-b32b-ab3c1d7a95cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "85bf39d2-bca6-47ac-9e8d-f7d1325072a2",
        "cursor": {
          "ref": "a0498e70-366a-4909-a155-4d5969982bb5",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "6f8099ae-1b67-40f6-9809-d567168bbd51"
        },
        "item": {
          "id": "85bf39d2-bca6-47ac-9e8d-f7d1325072a2",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b5aefa6a-1d9b-4a71-8f45-ba77ce82afb5",
          "status": "OK",
          "code": 200,
          "responseTime": 5999,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "cedd2333-ba8c-4837-8d77-c5fcc699c6ff",
        "cursor": {
          "ref": "f5b9f778-ed10-4c94-8ec5-6441d845282b",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "6afdda8c-941d-41b8-ae73-be048ca5bba4"
        },
        "item": {
          "id": "cedd2333-ba8c-4837-8d77-c5fcc699c6ff",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "3812d63c-56bc-4e07-900c-51c55ae03ec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 642,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "3c30f577-f702-4b18-8ae8-ff9f830d4086",
        "cursor": {
          "ref": "ce9d6066-55f1-47b9-b78c-0f0151e8c373",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "6f36cee8-2632-4e72-a1a4-a67e477660ea"
        },
        "item": {
          "id": "3c30f577-f702-4b18-8ae8-ff9f830d4086",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "0a0a0278-ae76-4d75-8bb8-b08e4ffa93d8",
          "status": "OK",
          "code": 200,
          "responseTime": 4645,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "97adafe2-33aa-42cc-83ff-e6d07c9c2525",
        "cursor": {
          "ref": "4d96c79c-03f2-4ddb-8ca0-296e3ed20736",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "996e00c8-8417-4382-9305-b5424b67de01"
        },
        "item": {
          "id": "97adafe2-33aa-42cc-83ff-e6d07c9c2525",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "38df047d-5358-40bb-b79d-f4025880fa32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6361,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "c93908b5-e321-4ed0-854d-697f237ea840",
        "cursor": {
          "ref": "9a1a08d7-691e-4218-b37a-e06c28bbafe4",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "56f0a27c-dadf-4dc5-b310-73b357aac6d8"
        },
        "item": {
          "id": "c93908b5-e321-4ed0-854d-697f237ea840",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "e638ea0e-272f-4884-b10e-417182290eea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4954,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "f08045c6-837f-4dd3-a118-dd65ad79dbf2",
        "cursor": {
          "ref": "75c3ca20-e431-4576-9c50-5392f7423776",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "fad6a17c-9c9e-4e8b-920d-1f3550fc7532"
        },
        "item": {
          "id": "f08045c6-837f-4dd3-a118-dd65ad79dbf2",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "eec0c17f-346c-4032-a497-abf717d518cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "d545354d-30bd-4832-8c7b-5f6c6684a8f2",
        "cursor": {
          "ref": "b4bbb33d-0f4c-452a-94dc-bf966dc58ee5",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "f27916ea-45fb-4374-9366-90d4d85af593"
        },
        "item": {
          "id": "d545354d-30bd-4832-8c7b-5f6c6684a8f2",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "d6055f6d-f27b-4dbd-9d43-43a15c7cf854",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6254,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "cc2fb3e8-b8bc-408b-9f9f-de4b5878c68e",
        "cursor": {
          "ref": "259286aa-3d01-45cf-90db-ef51f966ddde",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "6840e3a6-dd9b-4506-b965-e803e5d23591"
        },
        "item": {
          "id": "cc2fb3e8-b8bc-408b-9f9f-de4b5878c68e",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "580bfc39-c3ec-4ef6-8e18-79f68f036b83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 359,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "baf49d8b-83a6-47f9-bb8b-5a7a8b4a1910",
        "cursor": {
          "ref": "04de7451-b8b6-4b01-a3c1-9a91ab192f55",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "bc6c6488-970c-40ea-913c-1d5f9632050b"
        },
        "item": {
          "id": "baf49d8b-83a6-47f9-bb8b-5a7a8b4a1910",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "a39555ea-12d1-4aea-8b0d-ce01a94da26f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "a641cc9c-49cb-44ca-a835-83053a5849ab",
        "cursor": {
          "ref": "6d789af6-3fd9-4036-b458-7b33b9b04eb6",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "ece8d210-a183-422d-83d6-e4ec902746b1"
        },
        "item": {
          "id": "a641cc9c-49cb-44ca-a835-83053a5849ab",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "fc3a1190-4dd3-4d81-8202-a98df1a019ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 61
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "94faec08-f90a-43f1-955c-fd429fc639c7",
        "cursor": {
          "ref": "cf1356d6-fcb7-4550-97c7-aba0c28ef114",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "99d38536-50aa-4f49-9b70-9e6fee67fcab"
        },
        "item": {
          "id": "94faec08-f90a-43f1-955c-fd429fc639c7",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1dfa14d8-bbce-4eac-b3f9-d737ce371177",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "459a0fb3-4fd9-494f-9793-eac073321a5e",
        "cursor": {
          "ref": "b7a29d43-296e-4364-9f80-eac613924550",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "ca521612-e4be-4452-be8a-cda3d6ef1afe"
        },
        "item": {
          "id": "459a0fb3-4fd9-494f-9793-eac073321a5e",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "6f0d5aff-89ec-48fd-ac0f-20eb4ce70616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "e518eb73-08d0-401b-b8c5-9cd21711e194",
        "cursor": {
          "ref": "8d4ba349-85d4-452b-aa9e-676164faf289",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "03d002f4-e7a8-487c-94cb-0f3823a7c043"
        },
        "item": {
          "id": "e518eb73-08d0-401b-b8c5-9cd21711e194",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "82d76ea8-d757-477f-9b69-edf40747ce04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "e02fcfa1-81c4-43be-8ced-0c302ca730f0",
        "cursor": {
          "ref": "e8507eb4-1bcd-4bd0-82f5-3da9b228e33e",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "f627a57e-119a-470d-b104-e788089154be"
        },
        "item": {
          "id": "e02fcfa1-81c4-43be-8ced-0c302ca730f0",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "e9d3d789-daa8-4842-9f39-a8a49465a169",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "cc43377b-5350-49de-8602-edbf107166b2",
        "cursor": {
          "ref": "bb0bde1f-ba6f-4906-8472-4413e4116dcd",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "b7a06236-01a1-48eb-b4a4-cf8fc2a25081"
        },
        "item": {
          "id": "cc43377b-5350-49de-8602-edbf107166b2",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "5d287fb1-110e-4340-b9cc-c0377d5f60eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "f905e36b-192a-44fb-87e9-f1a4250ab6aa",
        "cursor": {
          "ref": "1efae7f5-ba46-4264-88de-732030c3e129",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "1d20c8e9-1aaf-404f-9f59-8546f3ebd4a5"
        },
        "item": {
          "id": "f905e36b-192a-44fb-87e9-f1a4250ab6aa",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "c000a572-1a77-46f2-9ab0-14ee1d3f47ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "41a9ce0a-d721-4205-a0ff-afa98a40336d",
        "cursor": {
          "ref": "88a7ff5a-0583-4d79-afc7-63e8ec1a8bd2",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "9eb7fd69-c428-43ec-a9e2-d01708d5fbdb"
        },
        "item": {
          "id": "41a9ce0a-d721-4205-a0ff-afa98a40336d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "33cd0ce4-d6f7-4dac-a693-5abaee19f0ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "dc32764e-62bc-453c-8287-caeffb692db5",
        "cursor": {
          "ref": "21ca394b-437d-48e1-8f3d-3955c0719f1f",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "88cfb7b2-8057-479b-9a1d-820a96cda248"
        },
        "item": {
          "id": "dc32764e-62bc-453c-8287-caeffb692db5",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "533eaef8-801a-4041-bba6-3320a5c17454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "2dcff10b-9799-4966-bb50-b70b9d49e60c",
        "cursor": {
          "ref": "ecb52b05-3a65-445f-a8c7-d78c30bf5fe7",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "93168779-7949-42bf-9ddf-79e17b1b765d"
        },
        "item": {
          "id": "2dcff10b-9799-4966-bb50-b70b9d49e60c",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "ca615386-a7f2-4f10-a49e-aaeee6d2e01d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "bc2eceaa-8422-4d44-9e82-241f5e2852b3",
        "cursor": {
          "ref": "68d2afe9-5342-4884-b752-cdb6c50ee618",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "62658848-06b6-439f-b8f5-1875f9c144e5"
        },
        "item": {
          "id": "bc2eceaa-8422-4d44-9e82-241f5e2852b3",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "355e4a7b-bee8-490a-aa19-c2fc12a05f9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "387a462f-3d50-4e79-83f9-d4bda01f297e",
        "cursor": {
          "ref": "5199c8ee-9a89-41d9-8aca-24a63537f5ce",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "56e4f787-c210-4c27-bc9a-d6a7b8f09730"
        },
        "item": {
          "id": "387a462f-3d50-4e79-83f9-d4bda01f297e",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "30010108-22c1-4f53-9432-1a9c9dea4f90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "b53b7184-a7ec-4e69-aac9-cbf591b5849e",
        "cursor": {
          "ref": "9b906df0-8830-4381-931e-a5687e0e1ec8",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "9fd31056-3eff-4f82-b053-108f12d32161"
        },
        "item": {
          "id": "b53b7184-a7ec-4e69-aac9-cbf591b5849e",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "7352a20d-7073-4fac-9c66-450051dc1220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "46b19879-4fec-424d-b84e-c513e2ecd67f",
        "cursor": {
          "ref": "e3388a7f-2f13-4a4d-85c0-389ac050b735",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "8953b879-b466-4592-af33-eaa108f304c1"
        },
        "item": {
          "id": "46b19879-4fec-424d-b84e-c513e2ecd67f",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "38295618-8950-4cfc-9424-f38d974645b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "948d3ed4-973d-4fe0-8203-cd4d79bea884",
        "cursor": {
          "ref": "5bea365d-01a7-4b73-9229-139297f305d4",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "975939f4-aefa-4400-b559-aef37120dcc8"
        },
        "item": {
          "id": "948d3ed4-973d-4fe0-8203-cd4d79bea884",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f032c582-7845-4011-8b5d-370ee4293244",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "ae83bad7-f171-459b-9b47-1af65d766122",
        "cursor": {
          "ref": "4b00649c-e635-4c45-a16c-1f19c468f2c9",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "bbcdedd2-581d-4268-9380-f51378405ce6"
        },
        "item": {
          "id": "ae83bad7-f171-459b-9b47-1af65d766122",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "18058593-c1ad-4b8d-80b0-eeb3715af485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "06dc75ed-9e15-4e0e-9927-9b7ecda0c068",
        "cursor": {
          "ref": "b56f2252-ed72-40e4-a4e4-1896de302354",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "63baccf4-dc36-4ac4-b4ba-423f256d21e6"
        },
        "item": {
          "id": "06dc75ed-9e15-4e0e-9927-9b7ecda0c068",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "14690a99-3719-4acc-90b9-b2435bb90184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "7d82657c-838f-4524-ae7a-ba3df8811475",
        "cursor": {
          "ref": "156bf93d-e0c9-46c7-af35-f6db1cb8b476",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "1ed65de1-b9ee-4da0-b6e3-8fceeaa3bcdf"
        },
        "item": {
          "id": "7d82657c-838f-4524-ae7a-ba3df8811475",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "10278ca8-c597-4918-8f63-1e40d4f2c43c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "ff1c5289-fdb9-4b1c-a0a9-112d9ba89f0b",
        "cursor": {
          "ref": "d02d06ec-e523-475e-89bc-4224a77698d5",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "1a10bff4-9d3a-47df-b061-d4868133a0d5"
        },
        "item": {
          "id": "ff1c5289-fdb9-4b1c-a0a9-112d9ba89f0b",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "d2ef5205-107e-469e-9014-393982fab876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "a1aec9bf-78a1-48f7-820c-e26131e66894",
        "cursor": {
          "ref": "0660b470-372e-4acd-a4cc-84c6b5c560e7",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "6e067502-5342-4c65-92fa-5ad773d10eae"
        },
        "item": {
          "id": "a1aec9bf-78a1-48f7-820c-e26131e66894",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "b1e3288c-7e7e-464e-a8e1-52f25f1ab212",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "d1c14275-316e-4857-b9ee-a7d54a57b819",
        "cursor": {
          "ref": "7663c1da-dbdd-4c90-b555-2604b0a0d15e",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "23590b06-bbf6-4510-8385-4f3fa6133a3a"
        },
        "item": {
          "id": "d1c14275-316e-4857-b9ee-a7d54a57b819",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "07675d17-814c-4b03-991a-f022b70a0660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 59
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "f8b373f1-3bdd-473a-98f1-ae86a2e46b54",
        "cursor": {
          "ref": "2fe200bd-2418-4869-998e-9dae9013022b",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "8f4edc9a-2c84-4915-8da1-47e3ce09fe92"
        },
        "item": {
          "id": "f8b373f1-3bdd-473a-98f1-ae86a2e46b54",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "c56dea98-e7dc-4bb5-9439-8d138b4f1259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "a57a55de-9834-47ae-92d4-6820790b5c5e",
        "cursor": {
          "ref": "4a8e4bdf-f1dd-43f6-a1bc-6651f68ed9ed",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "7aac4c8b-3c06-4e0a-be54-5f91d5226c31"
        },
        "item": {
          "id": "a57a55de-9834-47ae-92d4-6820790b5c5e",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "4366aff2-3c6c-40ac-b8ae-128b694145bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "7987feaf-9bed-44c1-ba5f-04c577884dcc",
        "cursor": {
          "ref": "b7903d28-ef3b-482a-9359-8cd208d3df48",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "8e2503e8-4ce7-46a7-bff7-54a7fc5eee49"
        },
        "item": {
          "id": "7987feaf-9bed-44c1-ba5f-04c577884dcc",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "da73a5db-7640-4e1f-bd77-d77cc8ab0c7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "fc803404-94d1-45b4-b3aa-fca2f15dcb08",
        "cursor": {
          "ref": "c092e8a1-80a0-4f72-bcf0-fe5a14103cca",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "00e3f8b8-afc0-44cd-9281-2e9f2e44c2c6"
        },
        "item": {
          "id": "fc803404-94d1-45b4-b3aa-fca2f15dcb08",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "9acc9997-5c0a-423d-99bc-4fba728715e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "a02487ec-d739-4685-b350-6c1b9283de0a",
        "cursor": {
          "ref": "8811116d-3140-4ca4-a30e-8cd6a3126a58",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "88e6706a-06fd-480f-a247-7c9e81b26d6a"
        },
        "item": {
          "id": "a02487ec-d739-4685-b350-6c1b9283de0a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "1dd48142-8eaf-4615-87ae-dd2feca1a8ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "8a453ba1-1ac1-4416-b028-e0165acdea62",
        "cursor": {
          "ref": "72318bfc-aa05-4950-8211-2f020dd9f219",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "e1e3b203-1901-4f7e-b909-8af0fe467b47"
        },
        "item": {
          "id": "8a453ba1-1ac1-4416-b028-e0165acdea62",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "95162193-a231-4f7b-88a5-a5a87872d229",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "68998c45-4656-4482-8cfd-e5170ff38e02",
        "cursor": {
          "ref": "3f33af72-addf-487c-ad06-c0168e56644c",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "bb49e406-24cb-4006-b48c-8af2ea170574"
        },
        "item": {
          "id": "68998c45-4656-4482-8cfd-e5170ff38e02",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "44955f37-f38b-4805-b4ca-5dcf3aaeaa10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "12ff42e2-8c8b-4e20-a7f7-345652826744",
        "cursor": {
          "ref": "b90038a9-5571-4605-9c69-83643cfe87b7",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "f54a749d-41be-4027-a86c-3e31a79e5652"
        },
        "item": {
          "id": "12ff42e2-8c8b-4e20-a7f7-345652826744",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d1ad0845-8f2b-4411-b7d0-4de3559eb00c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "782cf12e-94b6-483a-99d3-0d3c75668bca",
        "cursor": {
          "ref": "2ee84df0-8f8f-4906-8e08-bd0e8df8fd70",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "3aedc691-de0a-472e-9a4a-f9a3e03122d5"
        },
        "item": {
          "id": "782cf12e-94b6-483a-99d3-0d3c75668bca",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "497dc570-9b1e-4d29-a0de-08ca59a485a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "71201dfd-0262-4fe4-8d64-f10d1ab54943",
        "cursor": {
          "ref": "2598f080-fdc8-4c89-8195-edd339d2b30f",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "88b8bf52-a6cd-4e57-b53b-952e039da782"
        },
        "item": {
          "id": "71201dfd-0262-4fe4-8d64-f10d1ab54943",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "6cf4d1ca-ac52-413b-bc35-83fd59fa4d41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "917baeca-6d84-4e15-b013-106791ccace1",
        "cursor": {
          "ref": "8dd0528a-2113-4865-a936-843239b6b7b5",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "fa4e97fe-e80b-469d-9944-05f9d8cfdc19"
        },
        "item": {
          "id": "917baeca-6d84-4e15-b013-106791ccace1",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "0f6a4d2d-dacc-4c05-9144-435a63629ec9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "fbda77f1-096b-44f0-94e9-7c1da45f8022",
        "cursor": {
          "ref": "c9eb3c51-c796-4c1c-a205-e3d8b22bda0f",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "3e1e7b49-27ed-4902-a35f-e2c57157abd2"
        },
        "item": {
          "id": "fbda77f1-096b-44f0-94e9-7c1da45f8022",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "9661f722-f8c1-4ea6-97d9-21271e026e65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "a5332d4f-60c8-49f5-ab56-b3169b243bb4",
        "cursor": {
          "ref": "e15ef844-f236-4b05-92b7-af4a0d2cdd5e",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "5b96f644-7bf2-4d38-8a9e-2a14b7ba2715"
        },
        "item": {
          "id": "a5332d4f-60c8-49f5-ab56-b3169b243bb4",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "de7f09c6-b106-4fae-ae19-1a94c1d7f957",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "144984b5-fabf-4bc3-9b43-f8fdd028c568",
        "cursor": {
          "ref": "8a2d9644-6027-42b5-a4ad-6ac35b28895e",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "0ebc81fe-191f-4c41-8702-477dc2bb9c35"
        },
        "item": {
          "id": "144984b5-fabf-4bc3-9b43-f8fdd028c568",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "dc4f95ea-07c1-4f52-aa7a-195d73a20a47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 32
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "91ca75e8-d428-4f84-94d3-f029490c7b74",
        "cursor": {
          "ref": "4fe497aa-f8ab-4b14-9375-5d1d541a5833",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "84f712ac-80bd-4c65-a8cb-5bc151f7ff62"
        },
        "item": {
          "id": "91ca75e8-d428-4f84-94d3-f029490c7b74",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "747845c2-c9c0-4aac-903e-91a7432a575e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "bc8d9159-1060-49ed-bfa1-7c25f1db5654",
        "cursor": {
          "ref": "454f5918-6361-4c4e-ba56-29483025d562",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "27d120f1-216e-4613-83ed-630d0bb9b458"
        },
        "item": {
          "id": "bc8d9159-1060-49ed-bfa1-7c25f1db5654",
          "name": "credentials_verify"
        },
        "response": {
          "id": "9e687c10-8ca3-4c93-bcfc-002bb169ce11",
          "status": "OK",
          "code": 200,
          "responseTime": 5271,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "2473d783-e944-4e56-b1e5-2d33b465e9a0",
        "cursor": {
          "ref": "47793250-d08d-41be-a910-2eba236d1a7b",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "f5714e82-8760-4141-83d5-a25c608f7f53"
        },
        "item": {
          "id": "2473d783-e944-4e56-b1e5-2d33b465e9a0",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "1698ee38-7c9b-457b-a710-d160d506990b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "7920b478-fd47-4e13-8e05-abcc0dcba983",
        "cursor": {
          "ref": "eef18e84-f760-4998-ac08-e85d1f1a42ce",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "7de6b74f-1f22-4cf9-b437-e23abeefd977"
        },
        "item": {
          "id": "7920b478-fd47-4e13-8e05-abcc0dcba983",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "7920b478-fd47-4e13-8e05-abcc0dcba983",
        "cursor": {
          "ref": "eef18e84-f760-4998-ac08-e85d1f1a42ce",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "7de6b74f-1f22-4cf9-b437-e23abeefd977"
        },
        "item": {
          "id": "7920b478-fd47-4e13-8e05-abcc0dcba983",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "7920b478-fd47-4e13-8e05-abcc0dcba983",
        "cursor": {
          "ref": "eef18e84-f760-4998-ac08-e85d1f1a42ce",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "7de6b74f-1f22-4cf9-b437-e23abeefd977"
        },
        "item": {
          "id": "7920b478-fd47-4e13-8e05-abcc0dcba983",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "5902bc04-7335-47bc-8126-e3393f585f54",
        "cursor": {
          "ref": "fe2af3b9-0499-4c6b-90c0-25f59e612efd",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "617aa068-c5ba-43e2-b369-9efb1c03eb63"
        },
        "item": {
          "id": "5902bc04-7335-47bc-8126-e3393f585f54",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "56581ea6-cba7-46f0-8901-9ec5bec17273",
        "cursor": {
          "ref": "25f2ce31-2233-4efe-8760-b44cad84c58d",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8911b98f-830c-4f5b-a79f-1d7305f672e8"
        },
        "item": {
          "id": "56581ea6-cba7-46f0-8901-9ec5bec17273",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "56581ea6-cba7-46f0-8901-9ec5bec17273",
        "cursor": {
          "ref": "25f2ce31-2233-4efe-8760-b44cad84c58d",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8911b98f-830c-4f5b-a79f-1d7305f672e8"
        },
        "item": {
          "id": "56581ea6-cba7-46f0-8901-9ec5bec17273",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "6fa02988-e259-402e-b4aa-dcc39297f562",
        "cursor": {
          "ref": "59bf0d86-bd44-47ab-8b4d-3f74e703163b",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "bc82555d-6446-419b-9aea-f414ecec3c75"
        },
        "item": {
          "id": "6fa02988-e259-402e-b4aa-dcc39297f562",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "1cbff92a-a230-408d-b32f-1bec31404b12",
        "cursor": {
          "ref": "bdf2a1e2-fd90-41df-8f06-4f34aa0a81bc",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "57b3a1df-487e-4539-b29b-771e39a96675"
        },
        "item": {
          "id": "1cbff92a-a230-408d-b32f-1bec31404b12",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "1cbff92a-a230-408d-b32f-1bec31404b12",
        "cursor": {
          "ref": "bdf2a1e2-fd90-41df-8f06-4f34aa0a81bc",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "57b3a1df-487e-4539-b29b-771e39a96675"
        },
        "item": {
          "id": "1cbff92a-a230-408d-b32f-1bec31404b12",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "d1913ee5-918d-4844-b0d9-290f28a0dc7d",
        "cursor": {
          "ref": "c9a2aff6-8b15-4a89-9ab6-07b9d2e4cc5c",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "961d971c-db81-4531-ab2a-215b821a8491"
        },
        "item": {
          "id": "d1913ee5-918d-4844-b0d9-290f28a0dc7d",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}