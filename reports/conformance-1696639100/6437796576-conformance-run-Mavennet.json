{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "43f25ad6-86ed-4185-b6d6-26484e8a868c",
        "name": "Clear Cache",
        "item": [
          {
            "id": "953d3cd6-2d5a-4624-b9e6-0d94246eea49",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "09dcba07-42b6-4cfa-85b9-ba6de09107e4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5c35d77e-1575-46dc-a963-a29515b48a05"
                }
              }
            ]
          },
          {
            "id": "850138ea-d5b2-4280-940d-ed88254bb4b5",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c6ac9b1d-2682-4b98-a7d2-8d41473a04ea",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ffbc41e7-552e-4117-a544-e415bfa3acba"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "ea1a6c80-4567-4dd8-90fd-04cf74c28ebd",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "f1fb2e90-95c3-4dae-abea-3ddddb3b0862",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ccfa7fc2-0ef3-46f0-952c-76bc4c40e244",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a6bebf3a-7da5-4b90-9ca7-bc3499bd711f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "32b9098c-aeeb-4e44-8c75-c3634f8387dd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "24ca9706-28e1-4efd-b353-f61dab3efb71",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d181fd1f-6b5c-4b15-8c5d-603b98c59921"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d45135af-f04b-4bb6-a255-f157787529af",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "319819a0-5b76-4c66-96b3-cbcc548d4078"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "334ee71e-bcba-41c4-ba03-15866bffe0af",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "7323cbc3-c2bd-4fd1-af82-9eeb133141d0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "22e1b173-5d3a-44aa-bf77-5842e381f255",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "22f8b81c-8505-40f0-b9a7-99715a81909a"
            }
          }
        ]
      },
      {
        "id": "93055e6c-bf7b-493e-a255-52fed13deba1",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "ea0b3339-7fd2-4316-93db-c6609978280d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8337f07c-2436-487f-93fe-a7efcd356ca2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "627a872f-d797-459f-a8f1-02426657a601",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2247240e-f9d6-41f5-83eb-4e76d2b5d204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6c91088e-afe7-4950-9fae-28b4d3b2aee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6eeb840-1d65-4007-b3a2-73f1cb7eb390",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24473841-9e25-4de6-b5d6-46ee7f225105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "21cc78ae-d742-42e4-8f8d-d823b49f8883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e81ac4c-c3c5-4d0f-b9c5-9eec7cce7db1",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2576d73a-5b5e-47d6-af29-c693c8715887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "672fe700-d470-4e13-ad85-a5b83f8d977d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a9abae72-b09f-4728-b992-4faa06c844c3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5140b41f-1be5-40c3-b544-599f4b0d742a",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a011bd64-941e-4130-a922-c989226f9e31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "06f69612-6731-43a9-9708-6711f4b45abf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ebcc437-f9e0-43ed-b97f-22accd460899",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62a4234e-0bde-404c-a3de-2c272dd6a093"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e02287e6-bc45-46ec-bf84-282efc89a828",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8cdffcf4-326f-40ce-b213-5a993b33a654",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fac11faf-6ccb-4a90-8dd8-1158f1225f56",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "44e2677d-c921-4c0c-9e6c-318425729a29"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5db169a4-6fac-4592-ba33-df830d4986d2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "32fcba28-3d56-4963-b626-5f20b24d77db"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "34d7824d-b835-4ee4-a1cf-314f2a803478",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9914bd66-f6c6-475e-8f4b-c091efc1884b"
            }
          }
        ]
      },
      {
        "id": "35742da5-6529-46b7-b334-27fd7df71384",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "58c20c8e-1caf-41eb-950f-874da5cdd991",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6c66e11d-b808-42b1-9753-7603ca979044",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "9b5d8b47-b235-4ddc-8da3-5c58058af761",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eb1d67a-ac9e-422e-b684-81e46b3a29e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "337adb1d-8109-4ee1-8f7b-be336b5f6d7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48d81ad7-85d2-49fd-92b5-1af490c99a08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "beec68a6-b764-4918-a636-471456b75358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dbfe503-a6ba-4ef8-9b4a-d53425571f91",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14bde1b2-9c89-44be-b825-83706edd4bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "477ae0e2-8f20-450f-8347-321e6215d333"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1023d8cc-b616-4198-9ed7-e657e7075faa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7fff0768-1f52-4017-b89f-ddc48970422a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10fa355b-bf29-4d90-b4fe-92bb26c77d14",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cd375b8-e3be-4d36-bf7d-23f155e37fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e85a6d1-92f1-4820-a1e0-cd0f9c9f3112"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1475365c-6041-4596-950d-cfc8563eb21e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3ae057aa-37c7-47a2-a4e1-fd41df79c24c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "731b1a8e-8881-483d-9494-364c4d46fd8a",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb176e9d-80e2-41fd-b2fb-7609f9d36eb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c23b8b89-8a50-4089-a621-6ec645b16ab0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f4f85e-fb60-48d6-88a4-8cbefd8a5915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d23b8866-de69-4d1d-9499-75b6575d3a22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df2dd1d0-8f78-4d2c-b779-cc425be9612e",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81ff0bcb-6077-46de-8914-cce2d6e20b4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24d959ac-dbe7-45f1-b97f-9527de17c026"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9895b4f0-4280-4761-be51-e14fd15e54c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "29080861-4b7e-4cf2-b076-7a257bf2d66d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3a88174-3143-4aaf-be7d-4e910db421e3",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4beada4-5e19-4e0f-8241-eef05cc31ae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2486ccc-c30a-4ccd-b037-24317b5ca90d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2be9ea6f-fc2d-4a1b-9c3a-49aa26d369c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "72c9d66f-4830-43c0-a899-a42387725861"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f19c6050-d718-459d-bddc-1c455fe76ddd",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "622410f1-c45d-485c-992b-30dbae0fa733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e8731e4-f48f-417d-ae84-cd29d9050394"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da559b60-5181-4806-939b-f67219310158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ae29fa8-b7ac-44ed-8de7-b6505aa27edd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "696a888d-3eb1-49bb-8b82-afa59389f859",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "239e6e86-f753-4a7d-bb0b-5ffecedb52e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0202e223-4097-4042-bfcb-1878d60ad14b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e174558-d06e-45ba-b3e6-67a0a0220d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f0b48299-3f0a-4274-beb4-46c049e91f5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f22a9139-4a7f-401b-821d-fa0a0d929b98",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47d2c59c-f2ac-49cc-b478-b7a9f86493be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a5529d0-2c17-4eae-88db-2d99cba1ff7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcd8cb76-5fa0-4cf1-9bb3-636ba31070c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bca5f0d0-2e1c-4a10-970f-eab6ed932b8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "980e976c-16b1-4f16-a433-d92bf538df65",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8499ebd3-f491-4a17-a45f-58972821903e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2000f680-f5f3-438d-b82e-c49ca4764498"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ec24385-2dcc-4360-b392-6efa3c1ef1eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "272fa057-3e3a-41b4-ad28-9f621ece6718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca219cf4-bc18-4d5a-ac7b-88366e5f6de3",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c71fadea-cee5-47e8-99e1-16a82b60aa13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3882477-dbbe-4663-9156-e39213709f96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95d0ce84-269f-4fea-899a-d29534fd1e0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "00b99027-9bd0-4e37-8e11-05492876a9a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b864a4b-1877-445a-979c-1ce30bbf0962",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa1ef6c2-ebe5-4f78-bb2e-67a1b8c033f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "136f84ed-0ba2-47f9-9e70-899235a61939"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b799bd2a-1eeb-490c-98ff-c79dae4039db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "247a8d3a-5983-42f8-858a-1886c4b5c893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9939513-cb42-4082-a134-f1a3d2a1d899",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2058d23-526c-46ca-8851-1b7975c3fa3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9006dab-651e-4d5f-aae9-415ff4f22253"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd3b7d18-6fc3-4674-b6fa-de9e9943864f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "21d22dc3-2fda-4f7d-91c6-445687452950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39ab015c-54a3-41ed-9507-c5ec800c54ce",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38da3ad6-1895-4ed5-9625-2f113e33c5ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c5c78c1-dda7-4bd2-b2de-f268b42256ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87c2481b-b031-45a7-84d3-4d8d0bb35c35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d170e9e9-a9f8-49f4-98c9-3f4c672b6417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22ba82d1-8daa-4bba-bbf0-0df13cc952dd",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c2e7f7a-d01e-49cf-a54c-255ee826ce55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfd114d8-7920-4f2f-b0e9-df21682f6ee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6855cea-aedd-4947-a457-403a7c86592c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3552fc50-3d13-44e4-964c-6f806a6b4761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2938ce3-4f8c-4705-916c-8069f2d4b889",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0b17d23-fbf1-475b-921a-13b6febc803e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67322c0f-570c-40ab-aabf-85765834b049"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a67dbf1f-3c53-48ec-b473-9e04cd7ae9a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a90ba3a4-1bac-488b-a0ef-f6a4919318de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "593431fe-55fc-4e11-9b43-dac6a6215fc3",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69a16e91-5cf9-4b9c-a340-832c0af40d78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c7b5fba-ec12-4e9f-b026-768214e502cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3ea17ec-817b-4d02-981f-36b9be51a642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d004495b-1c24-4d1d-8cea-5f008f5319c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "070c8ae8-48a4-4d3a-a94f-baea90f06261",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "581e25ed-9e44-455f-89ef-5bd5cde68099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eb06a5d-a833-40da-a709-f82cfffd1acb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7493bedc-888b-40bf-96df-dc107143cef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e92763ab-c332-41b4-8d01-08400ce4e4c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3746ea6-6be9-4452-839a-d532305f3a77",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6afddfa-f0ea-46b6-9000-0d9cda688100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5b6abb4-4475-48f5-85fd-9a78ac0c2d20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cf2faf5-56c7-4154-8510-ff34a666b05f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "11c66b4d-7532-45cc-b4f6-372bc2bf6eec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fcdb2e5-295d-4303-91e5-81a679657b02",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9688a785-0695-4c51-99e9-a72c464512a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db96c331-e7df-460b-a2a1-82c45c96a562"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89164b92-730f-45f7-beba-50bc8598fd5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9915a4f5-438e-45e6-8696-065920b4d71f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcbbf57d-e7d1-43b1-a891-0bb88d553584",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09b67a44-ba9c-408c-b862-f837e643de62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "892426a8-47b3-4d24-8546-590b744fc794"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a31ea5f-f4b8-444a-882b-f006ed839ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "86b01d90-3509-4b88-8e16-c279eb9ae5e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccd51441-9eaa-448a-9be3-c6c6b4141829",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5831c3aa-3d59-4936-8de1-e330355c0d20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01483655-fe32-48e2-b0d3-1349833e606d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6f600fc-2d12-40ba-bf6d-a62e52738f72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "43064068-50d6-4768-bba2-6c78acd8dbd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbfc8ce5-ad0d-4094-81e2-fcc8f0ec9a19",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be2b235f-a16d-4842-a545-bc4b90cdd98f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f60972d2-ffcc-4dff-9b27-ef5b8de310b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b819c39-210d-4080-b339-de74531204fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c9c231d0-13b5-4a53-a01a-0fb1c7ea4550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4751a62-c626-4336-b737-8d866903da27",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4087c8b6-d2d5-4c49-9f78-bf05868dfd44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad98147d-8b3f-4c1d-9ca3-c56563192f70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36f12bb8-9284-43af-9b1f-29303ecf19f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1c9ea6c-6a70-48fd-be04-c230110d7016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cee85acf-3ba0-4fa0-b5a8-9fda804e654f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "200436e2-6203-4127-ad42-51f4600e1cdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a753078-1f45-4d64-8c73-008875df7ccc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd8c28a7-db2f-4ee9-b1f7-c9e4f7d68c2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac0c4cc2-3f3f-44b7-a42c-9fb55ee338db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ffa692e-31f2-4303-b6fb-876af696a36b",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8526fffc-0c3c-4bd7-93c4-0a8977dbe44a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8671d8d-d9b0-4b7c-bbca-f36daad0de91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60e14ba3-a259-474a-b213-9851a3d98d36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "82701299-14d1-4682-a51b-3ab37fbff91a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e456f9f6-c590-4fef-8e65-314b128e286f",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cae8a88-2f5c-4881-9a85-bff92e37e53c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a93a88e5-4fd4-4098-b6bc-2ec5d56ff59d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64dc3153-77bd-489a-bd5e-a0750c825b25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3068e2fc-80bf-4ed9-9426-7518ce765675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25006db1-175b-4589-9c91-89b19cab346f",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "477da21d-e5dd-4951-83a4-f74195ebc6a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98499708-282d-4104-9692-355af36e2c4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6adcbbd6-b6f3-4085-98c2-e1f3448c6870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3929f0c6-ebb3-4426-b4b2-218757624b36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a04054f4-bdb7-455a-954a-23cfe5c5e385",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc716d7f-1520-46a4-9623-802a7d0d1cae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2089630b-41a0-472d-b33f-4b80352a0074"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c0d53cc-ae6e-4bca-bd15-bdb48f106ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7858144-55b1-4df6-bcb8-12f9f9a62dd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2895a4e0-e2f5-4a1a-834d-a296b5ba8fd9",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e60bacdb-a920-4836-af31-07f59f6304ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "172d3dd7-6ef1-4beb-8904-3191de221c81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a88ad16d-9e0b-4e29-8e2d-ded2f952ac59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "70a1b9ec-ef24-4ed1-ba63-0ef31dd6aaf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c2f1299-2ee5-4d36-9aa4-0de9c3b903a9",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "680ac811-4077-4cef-b2b7-4e0dd6f26059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b219f4b0-1e83-4564-a3ac-610f72f06976"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a03c41b-bcf5-4c00-8966-c1bc9c2255e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba1885e3-ff56-4a38-85cd-481dfb1d96f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50d10094-3cb0-44d0-8668-2c2e23b10bea",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66dc98cc-aa30-4289-9dfd-053022918098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b053fa28-883f-4069-b482-543f77b81edc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "438e4b1a-c742-41d6-97a8-79b6060042ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "82574e46-fd37-4b7f-91bc-7870ab33b719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3046f8b-530e-4269-8ea8-b1e1f2ef5f55",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "614dcd6e-1ce3-4c97-b0ce-7c7e350d042e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6905ddc-831b-4861-a9a0-993be8f6d878"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1ae5297-2a14-40e4-9697-3d8ba842a814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab4d8a55-2e6f-483e-ad5e-8f79911b3e82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca424125-e447-4e30-a97a-6df02a5da796",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "311beeaf-1cb7-443b-95ff-16fd83c1ba75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16c07f58-15da-43f7-99e7-3435e7c2ff21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf7fbe3-c347-48ef-80e7-4efcfce68be0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1787af0-1ad3-4230-a396-212f5c208b58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2e8de0b-01b6-4ccb-9f65-7c664f90ca07",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8316af72-f842-4d94-913f-fb2513dfd85c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ecf7ddd-8255-4345-8638-f7867a9a68fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f204fff-6d8c-402f-9eb3-27ec594350e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "2f15521f-1d4e-4762-9ad0-24b1f92738c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f0621b3-7836-4920-b676-00dbbb97e9f2",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17aff7e0-c260-4b5d-a21f-b42c43438dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0625a29c-0b89-451f-bc89-16f595474a0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a2c73e4-f8a8-438d-859c-f2861e705560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "709d3e1b-310d-4b9b-a48e-ff7aa91bc767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35025fd3-de64-4388-9193-366abbc6cc24",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "738bfd03-98e9-4006-82db-28a9fd953a16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae1dcde6-67b0-4acb-b53d-e5109a50e75c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "332b3237-2726-4bb3-8351-047bdc1ffecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "91f11737-9293-4d28-ab65-31268260aade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0a3c2df-c49e-4290-be9f-844642ad549d",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3ba1def-7801-439f-8f3b-8ff623689367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c496389a-f110-4887-bb01-38ec99840b51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eaa96ae-7126-4c79-ac3d-66ed805def02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "45637e77-a568-4d43-9520-9007da1d747a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89f9f096-ee7c-4ac0-b4c9-4553469f670d",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da662dd9-3f5c-4f32-b2ad-ac10dad5a427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2636ebb-934d-4fb3-bfbf-e1b5961cc52c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2fcddd1-0645-484a-a2c6-4c498542baad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cbbcb707-a4de-4888-9b16-44c1cc97aa7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "574477ff-c293-47f2-9807-b5005d018a0d",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aff2ddc0-4e07-419f-ae54-f73014782406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "879163bf-eb24-419d-aa6a-0b51fd374395"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f01be02-4262-4421-a579-ca4fbc0cbe44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "071938ba-f3c0-4018-9264-0a85952e5902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9678049b-d1c8-405a-8bcc-2d1923a93f87",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "865144e4-aa91-43a5-9391-da32d91544bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ded4aa4b-0405-4c73-9def-99810b7616b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcb2d6e4-22f3-45ff-9bf3-7fd78b849ea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "14554986-db3c-4662-bb6e-75091566f4d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f8191f6-ad98-4913-98a0-e4cd131cb053",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dcd5447-aaad-4856-a270-afd0b2ddac93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5739c239-08b6-471b-a4fb-a724c62a6bdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f08f151-b2fc-4c17-ac42-56b52e784cc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "a6764568-281d-48ea-aea2-fb28b2fd1bb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0ab8943-94fd-4236-92e6-a9119369f451",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18bbb353-7f81-46b7-b205-4907cb199513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e499966-ecdf-4921-ac67-f1630ebf6717"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3385af7f-1e22-417b-bd20-8bcedf299fba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "49d61e17-5c9e-4735-aa6d-50d440a5add8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "294197e6-56a6-428a-a064-1d088da13775",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05670acf-2a20-468f-b259-3680bb08c926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "628036a4-c3da-4efc-af60-150b66509891"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b70c05c-ca73-4023-8303-9278b04a3baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "aba567f1-a84f-42ec-96b8-711662b6d949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f04a34b8-ce55-4392-b09a-2d7654567777",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1c97741-538c-4554-8690-e73d664e0287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e85ae85-d5a8-44cd-af14-a8247f06eb55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c24b907b-56e4-4be0-99c3-c81406aa440e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "38dbdfb2-459d-4375-b602-862d2d23d573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c193af9-7920-44c3-a174-be5818c9d555",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b18d53b-3655-4788-9817-c2d85eedddf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01061747-b372-4d8d-88e9-5634cf5abf1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16987b72-d36c-4791-a6a8-29b418da1149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7d72a35-58e4-481f-822b-b6666b374bba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8bce7f6-4a0e-4fc8-9e7e-4e6b120c6268",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b53900f6-b8ff-436c-b879-dc97c0849c40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7b6f8bb-f9c6-4a3c-9e4e-2bc603076048"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "623d5008-5728-4a35-868d-69ae31784719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "406de457-f5b1-413b-bbf0-b63b3ede815e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55f42649-6e87-445e-a2c4-441bd6d27510",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a93ef89-ed11-4f4e-9728-6e7d05586980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6bd510f-02a6-48b7-b094-7946c657253c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b6520dd-a589-4acc-86f5-5f08cf73d97a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "28f1382a-bd06-4743-b979-7e004356b0d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61b82d05-6194-433a-a710-683bca683c4d",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f240978b-a5a7-4562-aa2f-20f06b1cc55d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46e07fbf-f8ff-49b9-9c64-7fd540f9496e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f596c4d8-2991-4d01-9331-e9ae94074ad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "10702c90-7253-4422-944f-3cf34226d836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d8bfc39-ce0e-4dc0-ad51-bcc2b78de05d",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dc3df4f-354e-41cd-af87-5dfebd4fd895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab25d761-b39e-47e5-bd69-7fd3ec9e1918"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d244a6ff-b8b8-4752-b56b-70975192a03a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b599b59a-22a7-4f20-80fc-2bdf29005393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ae88746-0a59-41c3-afa4-9f05f5d24f7e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0556f1e7-13f6-4649-b0d5-5efe48bc89d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e8f0511-f8ac-4ae2-b6dc-7616663b23b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eb9bff8-0562-4805-a3cf-47770a62555e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "cacb0e5a-6567-4b22-bc9f-5fe9cb6a242b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f4b9b64-0492-4fc2-89a4-ccf3fa0d1311",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40c7398c-9add-4544-913e-4ddbe432ddd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32b5e675-7640-4206-ab37-36a3e8beb77a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a60c9af-602d-4ac6-85b2-3ed1eaa46d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "077267b8-eb9c-4c5e-8129-1627f8b4994f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7d435e4-6a14-41a7-b7d7-d0b54e5c2730",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0a202ab-903a-40bb-aadf-428dd1dd26d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94fa9bed-74bd-4b9f-8878-c27e959f0d3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3371d0d6-0586-4243-a9db-9d86f47b9d43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6466a993-ed00-439b-921e-118183dbffd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfee6456-6081-4483-9add-6df1b2431fb3",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0afc2636-3a56-452a-814a-216a142a68c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72b93257-1f33-4d74-9398-b916fd425f98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8884fcb-6b76-431f-bf96-122c61302c6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf0a19d2-aafc-48de-b006-70ac7d1504b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aa5237b-cdcf-471d-bc05-3a02b5cefdba",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a440bac2-246a-4622-9502-7fcf31f2ee78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a706dbe-19d8-4e2b-9074-1fe30bb2872c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05d077fe-f6b8-434d-bbcb-39b38a1d4e80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "88064446-b069-44f2-afbe-bc52a8b4b635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7061992-fe82-43bf-836a-80b03615ac2b",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e008ae-e09e-4fdf-9dbf-3a27b30e86d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecbcca69-a472-4757-bfde-b4a40adbb1d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66f6e88b-53dd-4059-b618-e1f510c3e3b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "562d99c6-4675-4056-8615-2f3351ac885f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e84029c-b4ac-465c-bf6b-4f4b2988a70f",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1118e6f6-c530-42cd-b522-b5b6f5e28fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5bed054-06ed-4c5b-84f1-146ef4896422"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f12ef89b-7b7b-4280-827f-b15849791cd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e9f93ae2-7100-4f21-bdd4-741c05bf8fd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03bd1788-83d5-4847-accd-82237c1cbab2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30165125-c4bd-42b5-b1b4-d9d378a09d74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf0f8f9c-7a14-49c7-9029-f24a8d64ee34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9afb797-6631-4ef9-9f7c-12b8abd6fcbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e841e05c-b9f0-426e-9c9c-ddac1a49b4a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f71b376-38cd-44fc-905c-cb40a7674ab0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b7de005-1759-4157-b223-faebb8987bf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2c095ed-786e-4235-b876-110f6670b458"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dff3a180-cce2-4f73-8363-8b09d0f821a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "48f931a7-46e1-44fa-bda4-164fd9a08661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc1416fd-8069-4dfe-afa6-8b91e23d7c1a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41f41c2d-d169-4f28-88a5-8161707e8107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "083358f9-352e-463f-9579-9d5dd72f8f01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "063b72f0-44f6-49a2-87de-6c42c6df43e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "093abade-6967-4d0f-a3c8-ca6056cc1c41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1de7de8-c89e-4383-9f09-687796850c45",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b13b483b-299a-43bb-baa6-17c53090a741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb3e88bc-17b9-4687-b80c-7e07ab74c687"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a4dd8ab-ae16-44cf-8128-4e4ecef2e8d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "00c2bb50-9184-4d6f-8ac9-217f5dd5dd05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7319302e-30ba-4250-8ba6-75e5a73b2b19",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96836003-e2d9-4a10-9ffb-5cb070ebd553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbeb9ec1-86ce-4abe-ba31-bdfb82e80e8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a8c392f-3b6e-4fe0-8bbf-108f22ccf6a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "70306f7c-67aa-4ad8-b85c-838f66281d65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97ec00e4-73f4-4367-9360-3c35f32268d3",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71b36ce0-401a-49f5-93c7-5873f772dd02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d14a7c0-5c08-4190-a1a9-0db52a6125c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8966ab6-88b1-4d84-afb0-1c2a9e34a5f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc83ef35-3c58-4244-89ac-221fb81ce3e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc04c54-5799-47a1-9204-68be72cfe1eb",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33b4c92f-8fa0-4ef0-a3ad-78fdc3035796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "361f0ce0-5852-484c-b1ac-61622f57a7f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f58d69-7749-4163-ad05-1ba97de2dff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "980cae17-512c-4ae5-9d67-4580cf425515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b9fefdd-17d1-4a20-9b6c-d52ba9e0f5f0",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5d8fe4b-eb0b-492d-bfb6-25ee3f377a15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54877af2-01e7-44fc-bbae-39e54e50613c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bb0846d-19a3-4573-b831-cd2897c9fbd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f5bb0c1-7c75-4b31-b3ad-d6d8b8c721e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd2fd8e2-9676-4d03-97f9-0d86963d6fe4",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2f36a97-95a9-4e68-80a5-122f57260e08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e681976a-8904-450d-bc3e-c65276fb8cce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6c78f32-fcd9-47e3-8c78-01d4ae28ca66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fe75c39-0504-444e-9bbd-9a9fb6057bc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33b7628f-f34f-49a2-a5a8-afc41848c657",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "311a6e23-6f76-458d-9c03-5eb2e7e52cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68e9b18d-7327-4888-89c7-7249b30a74c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee081534-6ab3-404a-b83a-53743e751d99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4e55d27d-63fa-4749-badc-118071188e89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76d2f877-46b9-4801-8612-06b7c518b2f8",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e8c5726-bd23-42f0-9897-3f42b23483df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "236bc158-08ba-417d-a75a-f15a8b3188f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa4bbc7-dc05-4a16-ac87-a801e2fe2be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc529958-653f-4e21-b1de-3c91ed3c7ecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "660f34a6-8dc5-4a7a-9b1c-2fc49e9b9bad",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b105afc8-1153-4de1-a39e-aae95753d8f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fb86053-a50c-4690-b31a-f82c82c52602"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feb6d3b9-7b0c-4989-b054-50caaa75e7c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "48f6f3f7-daea-4cd3-9142-6c70d8e541af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87802ee8-af76-4fc9-9afd-1bcc235e419e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "643301cb-ba53-42e6-a55a-fce807648de9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64791052-68ec-4880-a864-49c1a157a6b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f084e2f9-7b64-4517-ac07-ad3e3a440c6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7856bf8d-ba3d-4049-a462-7d536e006d40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef7dba50-e05a-4cae-a1e0-1566388071e6",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b321072-ad5d-43c3-996b-a4cb20391864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dab4aab1-c8c2-45cf-b0ee-b1c73cdf1fdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "917e1b20-4a96-4214-9494-c17d0c808cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f413f53b-f243-4f89-b483-0f2c512369f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2abb853a-fd52-42e5-bfb5-7c08c229bdaa",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d40efde-ae02-4d74-b3ab-636bd2ab9a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b06674a1-b679-461a-a70b-e77d0f500d22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9b1f4af-77b7-4d33-97d3-5e1b7d65e688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9b71ca7-47c6-4e37-bc0b-98c68e3fb610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6f3005b-25ae-4468-8e3b-a4288bbec035",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "087253e4-4dc7-494a-bfc4-29259b758fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f599576d-f558-4768-bc3e-d0eb6a5c97bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef1b2747-e1d8-4c7c-bcc0-044b7757c11f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff74c61c-217a-435f-8297-3c943b165399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4228283c-1ad2-4d76-a281-657f88a07492",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd0efd91-957a-4d9a-acf6-0f29f89304f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "492cb063-8042-477a-a942-64e1e9e2d69a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "904d7c87-b2e7-4755-adbb-f6e857b265a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "06edd759-f6a9-40bd-949c-9819a05e1980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51a117e8-54fd-44d0-a007-f1867fcdb1ae",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba7aa842-fe88-410e-8d8e-dd4c30f75802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8037412-e403-4cd6-9f4e-0c3e80f4f199"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d58e92d-ea65-4f15-ae75-2c93a4e51b76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "65d9ee15-77a6-4a79-a7c3-1c33b8408184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7e8d1e5-d485-4f56-8916-c5be1dc493b8",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "392a16c4-30d8-4020-9ab1-cb135081154e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60265fee-297f-4e5a-b5a6-417dc3dd89d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ebe37c4-bdff-4ad9-a9d9-4c39ac576cb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fadf4a2-3dec-4130-803d-a46fc8449ad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e9a3f03-275d-4993-805f-7859ad42fda3",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff1712b-a791-4ff5-80c5-713a4cf6bfca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dfcc5e1-4243-49ba-b6bf-0bd0886500dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8200c05b-96dd-47d6-93a4-7f7c629985b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1962923-e981-4166-9aa2-ddc8ef2d9f2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf1f0c70-1914-419e-b77a-0f8b97ee5298",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b364173-ea9d-4890-8785-43afdfe4979d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a47c8de7-4a32-4123-bd25-a8e8fdf747ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f37b5ed-1674-4444-82a7-54a3e5266d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "538bd587-aed1-4c64-a070-473536005b5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75f707ca-9726-4a35-8c60-7e05ff4ca783",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80d32a1e-d542-4595-82ce-756155ae3916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7eff9dd1-a412-41ad-9999-fb68ad7db112"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f321d11-a654-4fd6-831b-10201952f078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "064ab6e2-71f1-4e39-a852-56c46c0f59d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc03fe2b-f80f-4fd1-8307-dcff7ae35dda",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2e9d73b-0d09-4077-9f67-fbc7c41d1ee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39f68001-4e3c-43aa-881f-83bbfff90b40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b0f13fa-a177-4405-b2e6-473c20cf3aaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b3e4cd90-fc37-4501-a91f-803041e3c643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36eca775-a598-4e97-b1ab-fe3aba1a52e0",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26808ef0-73c4-46d1-b0f9-84ef608275b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1adbc3d-8faa-4187-8422-1d52f1dcefe4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6719dd84-07bb-4528-9810-1cd07a6ae842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "287d77b6-7201-4b8c-867f-203a703e6438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "171eac35-1a25-4544-b260-16ddae972965",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "091bdd6e-6574-4d1e-8c6d-9cf291d5a2e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f27766f7-dfe2-4b6f-9c1d-989d9f480dc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d7b2f66-f7dc-4079-b991-d714b694d6bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6b65237-35a4-494b-93cf-b92a606b0763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ade0995-fe7f-4957-8682-b990c99c92e2",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "602ec4b6-86e4-494e-9545-ab8a96015716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81bec3fc-7218-409f-9d4d-39dd4d026bfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "201b3333-2d65-4862-a2ad-20a32ad8edfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "571e7295-0012-42b6-a571-23241a7d151f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "400af631-4310-4104-9597-504929b02e17",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bad1af43-9327-4b12-b061-830b9e857d81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9dd7d91-8e9e-44ed-bd01-a086968382cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de1147d5-3302-4a2e-8640-91b036d64135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "649746ce-8abd-436a-b25f-dcb9de465bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "636f771c-adee-4406-9a50-82a297003399",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f70f0115-291e-4948-aff4-5cfb7aaf2146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ceb199b-3e46-4ae6-8cd5-9056efed1c1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17e1fbc4-2ffe-4e08-b82a-cd6b579cbd6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "673d325f-2e54-4a66-ad2d-3a252a98683b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e3aa052-351d-4a5e-9484-45dc18be13d4",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9883bfa-d62e-4e1d-9dbf-90b6d2b20cd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b56a312-c539-497c-a527-c8593f0f3d8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "978d76ec-bdb0-4ab9-9b1f-223d9455b929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "24933b54-2ddf-4ef4-9728-6b3053d87ad0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6db6f217-aa3e-4b09-9b87-f4bfc4296bb6",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1af196f5-7a7a-4222-9536-9150adfcacde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "513db545-7103-4e72-8001-b1c61015cf4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22cafa16-ac85-4583-a959-0568a4cdde7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c5840fca-c255-4070-ac96-0bf6f8c45285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1334e1e7-6f48-4907-a9c6-d9eacb91fd9f",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "735bef83-7be5-44ac-af82-dd0873c1544d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "885d62f7-78a8-4272-8cf5-f85042067989"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cffe8c07-be9e-4341-a6aa-26874cab983d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6aff2f2-e6e7-4c92-a751-a78e7cae717c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96f71d53-e965-4df1-b21d-de566ce8e1ba",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df23e76a-d4ba-4cf0-bba6-1ede27d1c67a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87d6488a-b511-4568-857e-65065a574d5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc36383f-f8a3-4145-875c-09f640fd4082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c1c58bcf-1934-4d5b-973e-1ca39af4b6ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0410c5b0-4776-4ed2-9da3-e5c85b1fd0a9",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eff86dd0-b501-436e-aec0-860d7ccd335c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "956e003b-8aae-43f9-9417-0ece36fdc6af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39caa641-e525-469f-9583-166cd9e3a16a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "43913f18-8c12-4314-a0cf-43d854f10057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f177e41-1b48-41c9-ab7a-cb009c54ab99",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc33cbea-86b6-4158-bdd3-005934078be6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75dafd2c-7174-43b3-8f9e-bab024115497"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30098b4e-e51c-4df6-a89f-88e3e3de07dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8e48215-dd3c-4347-aee9-05f55ade54ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7412d5b8-032b-4655-951e-115db52cee7a",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0fd9691-1009-4147-ab92-cb8627c6f2f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "6f5d59bc-9946-4ad9-9fb9-fa57814f5b25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "622b919a-692e-4f84-b57a-68c782ff76f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "80134ee4-356c-4017-9c0d-a90d20e830b9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "749da4ce-1d94-4069-85d6-c511a367eaf4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d83b0e5d-b299-4942-bf01-eee90c36984a",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8623195a-326f-4801-b68a-68d65a97e368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "48ac5e90-d9c9-4284-bd33-59c0ab0954db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0bd4a6c-8d3c-4b8a-83c2-5fde5fdd091f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3178b5b9-9a07-414c-97f4-f0797f19335d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "71549a8f-2e64-4185-b5c5-75c9fec12ea0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e4c8715f-46eb-41ca-a535-968ad62107cb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "11a442f7-7f36-45e7-a45d-007d0525e9a8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b0257d49-dde1-4ba5-a6fb-89996d8a39ac"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "47f71aa4-3ecb-4416-bc90-b5a8b50895f3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "aea257ac-6120-475f-a721-46dae11f8bf9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "66dddbdd-cf1b-4717-a8a1-137f4aee4cba",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8f80e1c8-4687-47d8-a7ef-8aa96819745c"
                }
              }
            ]
          },
          {
            "id": "d5101485-4607-40f1-a2cc-deb627ebe2a8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bb6394dc-1fb8-4b7d-bdb6-6d7239251664",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e4a97e56-ae13-4799-b2bc-e9fceb507cb6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "11b6aa82-4a5b-4b17-bf50-d8fca2ee56f4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fb1c71c9-69cb-4041-87b6-3a0861bc28af",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2f5d3095-bd86-421b-8807-5fae3908cf43"
                    }
                  }
                ]
              },
              {
                "id": "861d4c5b-7145-48d7-a636-74ff0c208565",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc00ae52-aaec-4195-99bb-dbbc2e36c4fd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1dd6e5af-189b-4537-9a32-dde60d48c83b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "017753a7-6438-4443-b540-8d41778a34bc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ba108f54-a5b2-4e02-9771-ec644e2d94cf"
                    }
                  }
                ]
              },
              {
                "id": "ce4f1601-ec67-4d60-9a2a-a7ae5e63cd55",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dbcfd7a4-8a0e-4d8b-a639-5e7a7cb5f704",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "571af4f4-61d2-470c-909f-bb2d20d9855f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8d8396fe-667e-4e31-80b2-a4865f394179",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "944edf1e-5721-4640-b5cd-f822517e2989"
                    }
                  }
                ]
              },
              {
                "id": "dd0260b5-16de-46fb-a62e-8f55e6a94872",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a91cbb02-8e5c-4c30-b5d9-51640ed6bb78",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dd0cb1d0-ddb9-418a-a259-61c93049f881"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c7dad047-e6ee-4177-81c7-4f3fb5daf667",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "77e31916-3f1d-47b4-a56b-58c2a6fdc8d6"
                    }
                  }
                ]
              },
              {
                "id": "21931c36-c987-4d46-9245-81d32cdf32a1",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d6632070-1cd9-4a35-8e45-23db16dbee8b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "81557653-0f29-4f27-89c5-23bc0dfe4f7c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "18bc5650-18f8-4be8-9671-6fa4635009a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "d1ef9497-dac8-4215-87dd-bc4e316dc12d"
                    }
                  }
                ]
              },
              {
                "id": "b37ffb19-4be5-4561-b2d5-92a3cb43f6ab",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "abf4b70a-ac77-49b2-bf3d-f55cfcf4597b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e2a30b08-1b01-4d51-9d42-6948ec7df2e6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "25fcf1ab-dadb-46df-a663-3f889d15d048",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4c08749d-19ca-4771-b93f-b49901c9b5b3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ecf8364f-dbcb-4f96-88b4-3af3ee574adb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6e892f5c-8369-4193-810f-6e7a65211028"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e68a13d5-82c2-429a-8e74-4aba1d0e31c2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "575ece1f-3c8c-4442-8afe-b524447c34ef"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1c36729a-02a5-4ac5-ac8e-a313985d4329",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "00cccf97-67ad-4e93-8910-3c27ced6e238"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c24486cf-e152-41ff-b7de-5ae81a0faa29",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d51e483c-0bc8-4568-af67-13fbc99e7169"
            }
          }
        ]
      },
      {
        "id": "2a0c46fe-c81f-4069-9b99-bd648c7ec309",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "68d3c807-68b2-4010-af7f-a1b469d445a0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0c977d84-3c61-43db-88d8-ad72a5add11a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5315cdba-5e09-4f89-a3fe-92d9e8569a66",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ee67e55-28d9-461d-93bc-4e3811e8876c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ec6af60-5e75-4812-8bbe-3a199292ee35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2942c68a-edd8-4713-8703-d51c9eba022a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "24852516-3656-4a24-8862-c697feb915bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99719939-a575-473d-a3f4-e8f01c681def",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5721720a-ddc5-4ce3-9111-99d5c915b3b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0158242b-e602-4a7e-a3bd-1ac39781874e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "889b9979-4206-4212-93e6-dacfd949b705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "214273c5-991a-4e5a-986a-419b3d0f72a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c46c8a3-0f60-4972-b7ab-465919e5edd5",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d383237-5d9c-4c37-bec5-706128c4b883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f197dac4-6bb0-4284-8899-c2efcd268a94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5720c7a7-a0a5-46cc-924a-c6f66dd45ec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "15d5915f-e119-443f-9af2-3a756ef47d71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07be8850-17bd-4513-b0e7-2ef032041299",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95b79416-f552-4975-8101-8d6a3b74ed84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6b00962-e401-4bd6-98da-1499ad5b6952"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcaf78c2-24fd-4cb1-a05c-e7f4be044689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9bdf6e3-4d4a-4ab8-863e-d53c71afb8c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c06e19f9-8ce1-4ccb-a688-95ddb8150a8f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2a9825c-ecee-443a-8843-9b46890d5159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0e857db-671e-4b03-a81d-708a97e70b7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4473ee81-b23e-41e1-a873-680d49f4c70d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d0a22b7-f6ee-472d-b29f-e3d50bf6b44d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc90fad6-927e-4e96-a551-3b581d6141f9",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3eb8211-d5b7-4538-8931-21e540a696a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff519bf2-0112-40be-bcba-f1b60db47292"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac2958b6-f2aa-46ee-bbf0-ee4b37fae70c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "86a431d5-cf08-47a7-8932-eda4dee15b60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "129ec815-097f-4e11-8c05-a7ba8faeaa04",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb46de91-8bdd-4c2e-bf66-9a100456e29f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f5c77f7-22a2-487e-bba6-1b57dca645a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4d74bde-aeda-4f94-9371-ce3f3e48fd2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "41eeafca-975a-4376-a333-2eb3c0eca5ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4de6b28-7cb2-4041-b548-0530e78acfa9",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3114ffff-f66d-4773-9999-19631fb7e0ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbf9aec3-17fe-4def-94be-be992041a317"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e9a744d-e014-485d-9396-d787e69c8d00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7d58ee5-208c-44ca-a56d-b8c22e91e7c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7fccd12-2f5e-4fa0-be77-9d6c91706543",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05f3e358-209c-495a-8af9-e24378c677c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41192d0e-4f8b-4059-a0ff-32a72df45acd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb2e72d5-b687-4225-ad7c-5fef62b4441c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fea8173b-e721-474e-8d56-87f0fe150e4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57df3e65-97a9-4d43-9642-220832cf3410",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7ccded3-eeec-41bf-8b9b-e88310d4b39e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cc324d8-953e-4a47-8235-5b42b2c02b5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36f08740-23d0-42b7-86b8-f0082f20a731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fc1142e-ef00-45ff-9d0e-552a019896a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd6937a4-5538-46ea-ad25-bc977d4a8a28",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68ec4d95-eda2-4e73-9650-1a8a5b6db74a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b1e433c-f585-4d0c-8d76-3a9172c9a44d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1338e72-f403-42f4-a222-1fb1f50945c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "6dfedb1c-a49a-48d1-af2a-42f4135eff29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a762307c-0b8a-46f5-a430-8fec14c1bf95",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39bbdef5-f418-48ef-a9c2-30b210490dd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "496b3cea-5a5d-462d-8d86-4488d115e9ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a49ade80-884b-44b9-8212-f46d9a620e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4ea19e09-963b-4a1f-be56-aaf0771cb7ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bb8e6b4-0b82-4259-aaa8-978b10de1332",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0a96d9e-6759-4f68-81d8-89262abc3037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6c96a8f-0085-479a-a729-f9664e3f4a4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae7b3193-4d96-4372-869f-76c63db98d83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "247bffca-624e-4065-aed5-f773ee473f00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "061f5ee1-f691-454a-ab62-87920c991c32",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "039508cb-bc57-4281-b085-2e797dc3ad4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf010d1a-3a8f-4eaa-91d1-831097742d0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5822a968-07b8-4e13-913c-6fdc8a1ab8db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "e660dbf9-4c46-432c-beaf-ecb69278a42c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1385f819-6429-4312-95e1-fe37b8f65529",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69eed8d0-31af-4b1d-8798-3b654cf27330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8bbc550-cd91-4991-b294-b24ae74b9b39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7aac1d2-974b-45a5-8a96-53aee6a6e4af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1d2d494-5073-4ad3-a8b1-f843ccd144c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86eb1b55-b54e-424d-a231-ad14819dc4f4",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52f04d6b-1cb7-4a05-90c6-4be1b80ca88a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00126ab5-fe2e-4d8d-99f0-95fe952ae606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb3dfbe0-74ef-4d12-8dac-96beedd66ca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a81bf2a8-141a-4f1c-8eb9-0b80f4ddce88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12ac3678-415d-41c7-a937-88dc741783a1",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c401366b-768e-46eb-a838-7a298a8c0c44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f325c44-242a-452e-839f-870e1848baa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79e0c345-b6d6-40a3-8b8a-0ecb2b74c929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9a016b9-7a92-44cc-b7fd-2ddc5873a660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fb8cebd-cf95-4741-a577-780039da6c56",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "996a6e5e-56ff-4700-9589-64e612793a0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e65066a2-ee37-4c5d-9b8d-aa285b41c743"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d488aec0-1192-4091-999b-520c48096666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "00bded59-b7c6-4df2-b53e-0f9bcf03bb2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5063ce81-2478-4f98-a4b4-ce43cf46996e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9c2d006-9cf0-4f83-af6c-07b2d92682d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39676d49-8cfa-4790-bc86-7c331df248b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9e4fdc3-1ead-4384-961b-0e00b42577de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "907ee0d4-21c3-48c6-8d76-625d5050a469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58eb912b-8f3c-4d6f-bce9-b40ed154042e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d288652-c18a-4317-8cd2-1df4e80b5f99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23c1fa68-7d51-4e0b-89bc-a6506790a7e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eb01236-bf4a-46db-8d9e-01b167fc072c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1db47fdb-64d8-4aea-ae5b-aa1a8f48138e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37c8c2b2-edad-44e6-8f37-5970c4ebadf0",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43051165-0ff2-4819-b8d5-61ab2e9c915b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec4b5e34-d17e-4b04-af66-ff61319b28b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baa81a10-bda5-415c-850a-db885c8a5afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "87ede346-a281-4c19-8c6f-c56356b6d829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "969a1dfb-3395-4be4-a8cb-5a0e5a1a36d9",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85a1ad51-8732-4b95-86d9-e27d0c006311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7ab67a3-0211-4f19-bbda-74e2c7cdfff0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c1ccb2b-4a6b-4c87-8480-931239b679be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3d3c6aa-beea-4559-acd3-8c8c6fffef76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f9a0386-06d4-45c4-bc13-d154207968a1",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d67884b1-8967-4005-abde-2975826f962e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ca80450-f92b-4f7f-86aa-05be8b0dd215"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd044ed8-a4fe-42c8-ad91-8d222cd5a2eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c8105a2-4e0b-4833-aa2c-bf852cf35d1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44df3313-0c6b-4983-81db-33821dbeefa8",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c87bd99a-d75c-415f-ab88-f256b9549103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42ac161c-cd95-40ce-abd2-9f9bfbb51945"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b5a300b-d8b3-4590-90e3-9b6c42b0ccf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "df63e786-8761-4c57-89ea-e977c0e3543f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b4466b1-0efc-42c2-a649-2d868cd98db3",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be765f14-a35d-48df-bc35-5d0f8fd27936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7467d0fd-ad18-47fa-987e-83cc3bf520f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4538ea0e-b46e-47e1-a437-43030b83667a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3015e87-545e-41b3-9cd1-cb69732ec611"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1369c998-369c-4dc2-8a1f-c65d6ff5915e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba172eae-3382-45bb-b6a5-d56e654ac2be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1acc9474-5b08-4994-8e6e-b0b4b06f425d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "602ea16e-bdc6-4afd-bcaa-154081f75fe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcaa431a-0598-4dd5-9191-e98232b12776"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb3b1373-8d01-4600-8562-fa4adee0e119",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53c65244-49cc-4096-ad8e-44391a454882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0837507-8c3a-497a-b909-c9bcaec603e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ede68471-48c6-4a53-81bf-4623bf39d7ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28611d21-e710-4e61-96b4-7cb53db3c5b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5772df37-b828-4885-af0c-e93536526006",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3bd5d72-c857-4756-95ae-af29a3afc560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1ddcc50-d8c2-4dc1-b330-f1740b53209b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b818a1a-62ec-4be3-849b-70b1bbc2a331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4b3e5f2-69f3-4304-a9c0-1b095d16fefe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98de3efd-75be-4413-9809-5ca09c5f3562",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aec5d247-b002-4eea-9f20-095acdbefe82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0e479dc-ef92-4292-8e59-ff0145dbc6f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1472f380-ae89-43b6-8875-261c0e842675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f51a713f-edaa-42bd-b485-e4f71e5b5096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d5f76ac-e55b-401e-afcb-71fe1b70634c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "308fbde5-a698-4c43-98e1-5313898f5571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64d4b7d8-9c8f-40cc-b861-b39101bd95d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fff8acf-49a1-47ed-80bc-71f51df1d97f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32418b78-2150-45e4-ae85-b77564fabcc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "824887d9-4ede-45ec-b922-21b0e9d1eeee",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e3876c0-008c-4dfd-a990-35a755935a1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "107c214b-ecc2-48e5-bb15-5911f87b246b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb855ee7-3af5-4265-bbf0-e8f015e85e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "439f964f-3868-4e92-9626-df0a8c0b38b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8434cda7-1d89-4905-a76b-71c75cd57f5b",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9921dc70-089c-46da-b6d9-f5c7866dc8ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88d9deae-848c-4b70-8f94-aeff9fc6b9d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ce44a34-4ab9-4ef6-b0fd-6e7b3f00c67b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9270da31-6b5b-49ab-a889-122d392244d9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0bd1ea92-a758-4842-98f5-8cd9aff1569e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e7e0105e-4a28-4452-8383-39b26df581d2",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1374052b-0e94-4342-9c90-075ddec3fee0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "3a78cad0-3f30-4a71-8362-2a13d1a06548"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f42a6e11-b728-4800-87c2-5e8889028615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2267458e-b45d-4b16-9210-316af9967cc6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e10211d8-6ff3-462e-bfea-a35a8a74d520",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9583d55c-b5c8-4591-a75a-afd28e67aec6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9655ee3e-228e-44b3-bc87-99c20a39201b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bf0e44fe-c435-492f-9cc6-91587697fd73"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fa48de62-ff23-4ecc-b444-d0f820747209",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9b45379c-2d91-4d15-9fb8-989238ddc47f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "933edc97-8905-44a2-8835-440bcb3d07bc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "282ba86f-1c70-4d8a-84ca-98f08e84a2a2"
            }
          }
        ]
      },
      {
        "id": "d936fe1a-f685-4f11-a898-ec11e8cf7ebf",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "eade3f7e-65f1-4146-804e-d1bcb5478cd4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a00f9358-06e2-40e9-964a-c420f7fa2b13",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d07b43c3-6a23-4a44-8071-75796879e59d",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76017c8f-8f92-405d-9664-d626cfcc49d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1533576-ae20-44ef-8e05-cb3e3c4cd3c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9937505c-9897-4d76-8cce-bfe12d575cda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "17c566c3-135f-48b9-98e6-1310d889b5e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89d7488c-6aa5-4a95-ba43-25916ae7f947",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d0c323f-6893-4f34-9e47-dd36b195b73e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d501cec-c491-465c-ac6c-865d8356aefd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "085e3d19-74c7-4872-8380-518ee420c30a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "026ab873-b231-4fdd-89fe-b8b091ab2a1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bbbe1ae-b2da-4a24-b3e9-b48288af67b9",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13f3d672-7512-4a53-aa7d-b59cab01de5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fedceba5-eb36-47c4-b5c1-0d512787758d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "140f0a0c-779b-45e1-bf6d-b9282d72de18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5369371-c428-4684-9265-c89de2b5d79e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddc97147-cf3e-4214-aff7-0ebf2e1aaabb",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99054fa6-9866-4b64-a388-10c119403475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2673937-cef2-4b3c-9af4-5af340ae2ab7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cdf6ba5-c9ae-4470-80d6-b63f37cde43f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d5ec2ee-7ba4-4eef-adc7-e885cdad289b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d0fa8c4-f8d6-46ea-8faf-92ecc1b9ced1",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "650b4d08-e50f-439c-b596-16435ddd87b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c6adde8-3496-49c2-b6b3-347d023e6a21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8df76f12-6e4d-46fb-bada-a73f02eb4f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a666776b-5022-450a-9f0d-0bfd7c211362"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34c8d240-aa36-4f7a-b3d2-a142ce9779e7",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8f90120-b162-432e-a5dd-7290e4fbe17d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72da7a6d-7f46-4e6f-a317-577a211952b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48480ac1-55b6-4c74-ba31-5822c5b51677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7df4f2f3-ca47-4bb4-b70a-7b4b853b77a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "220345ed-b8b7-401d-9ef1-90016e2f786a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff3194e6-32b7-4b2f-9cb4-c80eb8288445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "684853f7-4cef-4d47-896d-1bba12f8289f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c28f0922-c320-4542-8565-481796683e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "1735e9cd-ea08-40cc-ad6d-5e99de893254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14bc5958-9460-4c2c-9062-fccc13ca2ad6",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f05ace07-2481-48d3-b906-fc4184e25b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e7003d0-b02d-4b05-a3f2-de46a70a0fb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6308aab-f77b-4678-9e0b-1f2e2b0342b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e28b32f8-d420-44e1-a016-5f2b89f4d9b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "744832d6-2b05-4d7a-b819-e6bfaa246f38",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b152e32-f41a-4a1a-8ecb-82dad1d0302b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d448938a-02f0-4d80-a582-668e34849859"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c1de9ab-3ddc-4ab4-8d05-f1045ed924e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e63d3f6-a77f-47e9-ac5d-faf50ed9cdf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b5a0120-3d7b-446a-ad7d-bd1f78468781",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea651d54-7f93-44ed-854c-82187fbcd20f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd903df8-4ca8-442b-bb97-1a2f1893dea4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebef4172-9d0f-420d-b789-30bdc9f49805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0cf651dd-294d-4656-92ba-15338a9e0e45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a94c002-2b81-47cb-989c-69f3a85cfb30",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db80e3ad-c6b3-4959-a1a3-640fb4235891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48ac7899-7f83-46f5-9ce4-778a863adfe8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db7dbaed-e1c0-4d01-af2c-2d0fca361fdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c6a29813-8c8a-45e2-8f70-04e22e876781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28ebd675-be3e-4268-bc4a-4542e8d7727a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3bb458d-94df-4c26-b372-be44d9527191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb3958c6-e0a1-42f0-8dfa-3f1b9e5eb5ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b03f3d7-12c9-4fc8-8c0a-b72872059e65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4406faa1-5443-42a8-8584-522f6cc0c51e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d501df03-336c-4b9b-8b23-cd6d580d0e9a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6081a9e-27a5-4b98-a4e9-f72121b1aae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e527a2b9-35ac-474c-96ca-7b467b8068a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "061f2e06-5375-444a-8444-d349741a2154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0f60fde-927b-4814-8797-2fdd521d0fef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f49d488-d64c-4091-9611-e36dc68a0516",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43e8d8f9-3494-40bc-af6b-21c9bb044e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ddcef29-a592-40be-9926-5745f289ae20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2d084ea-49ff-4da4-b4b4-a8b5353ce1ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "02ab1b1b-9014-47e4-a9c4-c40b28d0ad24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82aa22b2-af73-4af5-847b-e3b8384233b7",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fcc7add-3a97-454b-ac3d-d79ce583b72e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a060485e-5f69-4efd-bd8a-a42055da50e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12b21fba-57f8-4682-883f-53b37771eb2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d204ecc-4c11-4db5-898a-f3e982db77e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2e0045b-4eb9-4c74-940f-de4d945aed6d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6904f6aa-cb4b-43fe-9118-05266eaeba63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e22c533-e76f-495a-8ac6-007c3fa2054e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce917150-8c01-4c06-ad6b-955e3c495eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "57e69ba7-7e01-423e-8dec-ba569934397c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10474381-c413-4992-90a4-17624827fc74",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7187d1eb-bad9-45fc-aeea-e4c7187a6b5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9347548f-a4e8-435f-a4df-64d0886b44c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8a0fd44-b892-4d06-8bcd-9f0578d1bc47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc08ab71-c141-4742-afb4-6e8436112ac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7efaa774-46b9-48a3-9ba3-a9a8653caee4",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ddd3fa9-5f2e-4753-857f-4c397237ef9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb00af5b-0858-48c0-886e-bbe21affaa74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96bdb11b-c484-4b87-bc81-37970363fd1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f4e49c4-e599-4b6c-9cbb-fa432d8848fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ab17753-9729-4050-b805-804120f258e9",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b878a59f-b06c-4e98-80d7-5f3de9ce0731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e6191e5-6bda-42ad-92f4-c9aa9845ec72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "defca597-ebce-400a-9a4d-d432268522c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60a81e50-2af5-40ba-bebd-1fbf7c428076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e52d8b4-62e9-411c-8249-29c5123684ba",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbdeeaef-5179-432f-8da2-5196b6e8d076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3e7ffaa-8251-41ea-9c0a-33bd491458a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f043252a-a248-4b4e-a66d-493a694c9a25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "69b47f49-fed3-4459-8dd8-fa8e7929ace6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdb0b8d1-1d1c-48df-8fad-145ad6b1e783",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20763529-8914-47cc-bd9c-abe0ddadab4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47f79e47-9796-4936-9ab1-a3b486f3b6da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "562cea49-c277-4481-9aa5-6c3360dccc79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "816a6eca-5c2d-421e-bd68-fd8a61c03f06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51426923-30b7-456b-8f54-ece5090aa854",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5869a94-f791-492f-92fb-0b50730e0da4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e794ffb-f05f-4077-865c-61f0cb3ea9b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e1bc59d-cdc9-4a95-a87f-b0fea22bb742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba86859b-491a-4b23-842b-b4e6b0712444"
                        }
                      }
                    ]
                  },
                  {
                    "id": "130f87dc-af92-46c8-8d87-fd86ce1ebdac",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44fa76ab-8f62-4029-8ddc-da6bbb5a2f3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0c1fe54-c5c6-4b35-9e2d-c48411727d17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0588b4de-05e8-40ed-8eff-4c0cd45405e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5965cd36-1d95-4b09-9c87-2b8b7697abc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5ba3453-1106-4be7-ade8-43e2d7606575",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37486e8e-1425-4ed1-8a51-dccc76bbd0d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cc46ef5-9733-4aac-8aab-24b4391153af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af22e481-1f55-4f18-ae2a-36749320cf67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f81f5fb-ca01-44d4-8035-f6deaebb466b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa25bac6-28f5-48e2-8eca-73a5106d3ee9",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d11d743a-dfc5-4b77-850a-26f42424cc8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb2da105-c6bd-4b6e-b581-319d229b1320"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6df6b534-8b57-4c91-a2d9-675d4ba80661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f70c15e-5b09-4c49-ae2e-81dd93494db2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a25ab965-e192-4a80-9abc-1bad2de22cb6",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33d9341f-f637-4f92-bca1-672ae2ca15a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbeae5e3-ebc5-4693-b92e-09ffe39eb9ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e546965-97ea-4117-8b2d-a2f06e257705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3aa52d5a-a373-4ac3-8627-e5ae34c849f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f135a8b-cf9e-4c3a-8ba5-96587b5301d6",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf603b05-4fa9-4b90-ad4b-89c289a223c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7ab5854-3951-486f-9233-9ca44a7e2eea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dce1217e-b459-4300-8cbb-85eb19a49372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be3d365e-cda0-48bf-a333-95d5f6084a92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0c97bb6-aa97-40d6-8ed6-39233952af27",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72298cec-ef0a-4b4a-ab69-260653e3d8a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df5ad2bc-ae6c-4a99-b20e-b08f74a448b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "046d057c-621c-49fe-835b-2e9a3581d35f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7e6d636-80e1-45d9-8914-51125310ebc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa8334be-debc-4f26-9f5c-32457ada6aac",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fa56fd3-d3ad-44df-9d87-986576d0083d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f58acd9-4d1e-445a-8815-d15356fb97bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e79960e-1056-4749-b424-7970d6edd335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e2bdcc1-776b-4dca-a6e0-046c56962197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "897a3366-e07d-4857-90b1-fd635edc555f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef1abbe5-cdde-4ace-890d-e13333065cf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faee9380-ebe0-45c2-b582-ade56a5c27d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16c8c1bd-894b-4d8b-b20b-540c50780c48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3319b0e4-d849-4d26-a4f8-829be16dc6e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abe86766-00df-43f2-9e76-434c0c3b8b23",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba2f5ba3-43bc-40ad-b488-4dd348f87ea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7bc4499-2d26-4770-9ec4-1efb780db9ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5f8ebca-ba5b-4d1d-ba5b-2addd5627253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8bbe391a-274a-4b27-8929-20772a6c94c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76b0e161-b057-4337-9c69-d1cf631895e8",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd5bfa2-7c46-4c48-a293-9e7577b54df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "634b6b28-e7a9-448f-8b78-4cc024a245ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6545e290-f155-45cd-a897-b793e355f5a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c95259f6-67f0-4872-a5df-69a0ba6d548a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e562cb9-2a41-407a-a292-a1cedb7b4ab6",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e23fc017-d0e9-48e5-acf7-d708bdae0fa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af6347dd-92ec-466a-ad3c-0acfb212d3ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33d93936-38d7-41ee-b705-ace6eecf7d06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7ff9178-8957-43ac-89d5-39a77c0a98f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f65c5c64-d4fa-4f8e-a537-a618a292b6fb",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9a7094e-f120-4ae1-8245-166dfba91e11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08d56e65-39f9-4b10-8285-f6c343057d45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba35ea9c-1bdf-41bc-baf6-044641b3ccf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a929c8a4-6849-41d3-8126-af4abe1384a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebd3b5f6-53d7-4062-a306-fb33f5efcc6a",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "877330bb-288c-4586-b013-0ba425cce49f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b725461e-f7a6-401e-bcdd-d97eec3649b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d677971-7783-4f09-9dc3-ddc9ba33b00b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "054fbf52-d1b0-4100-98bb-1d25d5243b12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5768409d-241f-43c7-b400-c7b2818a58fa",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ac4a121-b7c1-4d5d-82c3-61109e013ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64f929bc-fe78-4adc-b7c2-3c79d0c0a5f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cbdbb87-a5fc-4024-916f-ffaf5acba80e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5526dc6d-cfdf-499f-ba0f-79a93d8970f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac24abb9-e7a0-47fd-a7c8-3201c6e39fb2",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eb948b0-2631-4d7d-920e-2afdd53c597c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4e36bc2-c755-4d31-92b0-5c2a19b7a4a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "709c7676-5185-4f31-bb09-91af1a0201ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b760599f-26f4-4f86-abdc-ed499adb29c6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5657323c-6af3-4009-a327-47821757d360",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f091c791-a3b4-4a3b-a282-cbcb833f3028",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87ef2bc1-271a-450f-b358-71a6d2bae465",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "eb3eb7ca-f98b-4bf7-a314-4888a07f6c7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98cd2672-4a39-4d6d-8888-ad73749abec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ad544e12-59ce-41c3-9bd1-986788b707f4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c9e062e6-b41f-44c5-9ab0-0677d5536322",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "deac4cac-ebba-4f0a-b701-0f5b35862e9a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bc61e2ce-ac97-4309-b8c7-93ce92c8e680",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "376d3102-64c2-44d3-91ee-5029c05632d5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e32561b5-c8f8-4d43-bcf6-48aa030b5929",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bfc57118-c085-4272-b70b-961cc0706e2e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dc0bbccc-609e-4dc7-b5f7-231170b4fb59",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e9c21a3d-3d1c-4d49-8251-2b5bfa7e41d9"
            }
          }
        ]
      },
      {
        "id": "0be5e193-a16d-4fae-a309-f138ac505a91",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "604f9d9a-ee84-4cbe-b88c-5e1d4e31e892",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3c95beee-5153-4352-8e19-2cea5d2eeefd",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "472fd3cb-6b1a-482f-abbc-08d94aa31f01",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a85d5e7-c6a0-4b2e-9a50-f1e6a27e07b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f69f448-15ae-4b5a-add7-73a55249b640"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69218e28-40d6-4a09-9b64-eabde0f57497",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3300fcdc-b07d-4b51-a502-39a45cb82f39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f5117ad-c978-4f30-95ad-717ea3e7da31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22f2937d-98f7-4080-8f9d-70dfa718e7b2",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "526ac9ae-6bbf-47d6-8177-0fb703c68235",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb370289-f32d-46e9-b0ce-6e3532e21620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48fe05f8-6bc4-4812-9429-f92107f24cec",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "078deca0-0399-425d-b1e3-e4e2585251bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8cfea36-4396-4cb1-8bf6-169261bc6abb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4878647d-0dbd-4dca-b4a1-300856eaee53",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e7656dc-d1a5-4da6-a0eb-fba093237d72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb2b5343-e334-4d70-a27c-127b2a78e008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39ac2cf2-7fc9-4855-b80c-6cf377acc260",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec0e96f8-265f-4412-8003-890287c9bd9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00e34edc-6ad9-46f9-a974-9c9aa2deb90d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dd9280a-04b6-463d-bfa6-69451bf49438",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21acef59-f5de-4924-ac89-2dbb843b7b16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70e64ea9-90af-46b7-a375-f5f1d81eb060"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "514bc734-9efe-48f0-8b46-479241d87c82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b470d67e-5c00-4a9b-9228-39844db874c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fcdaf59-0061-451b-bc79-279a30465954",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b37061b-16f0-4e55-a643-0fa1705ecb86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce7d9f39-f3cb-44f5-8ede-321745fd055d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bcb1af5-d06e-47c2-92a7-5955351aeef8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b61e1f52-6d0e-458f-811f-a676e76c335b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec78902d-331a-431a-b226-6abd52af21d7",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2371c6d-4463-48d0-b285-f4653abbf41b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e68e37b-7a0d-4084-8546-e85bd9891363"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afb6dd0f-f1da-4f76-9c9c-e88957d52495",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e29e70e8-63ac-4c26-8676-eb1231e1de55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3114d7c-8432-4461-94ab-f67f19332e6a",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bda0cbba-a4e8-4529-b921-4c393d547ee2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c46f907-f41f-4308-8ace-e7954e2da9be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02aa08a9-7540-4beb-ad4c-06e78a481741",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7467418-35ca-4f32-bec5-b1ae331ed7ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bcc2f7b-c62f-46ee-b607-24b9e76b18c3",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1890c48b-6ba7-4515-9852-891b3b98c704",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6efd8812-a702-4124-bcbd-d380851f33e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a7c5059-1c4b-414c-a122-3b172a998d56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0282749d-f5ca-4f17-a6fc-dcaede4d2bd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0101257e-6b51-4d01-921f-cf8d577b1de3",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96b533fd-7380-48f6-82e6-46ea2c59bd36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cec85403-d631-43ea-ab3e-bb99f339c5d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a7d65c9-f2af-40e3-b729-756e83697484",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b2df873-be67-482c-a30a-2e0b30252de3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad03c1d5-b670-48ae-b838-386e2afbe181",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47beff6d-26f6-4ea9-843c-b115a5bac682",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4102cf09-535a-4184-a4b7-7509df778103"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db62bc15-50e4-45f5-9316-0797f188f6e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf107260-d8d1-427a-804f-3889359ba23a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0680ec75-67a7-443d-9036-f257f77e5d8f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77362ac9-875b-45a9-b0e7-02a83b67402c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84724396-5255-4e59-a298-2d907650f056"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eeac263-628d-4eac-a5a0-77d310352d21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1764daa5-7f0e-44f2-a7ef-bad2d9348686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "132042ca-0c67-4e71-a5ca-82949d303886",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb515fe2-2fa9-46fd-9978-bcce4af53541",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "baaace58-b88d-4bff-b69c-7d1ef2dd9d44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee130eb0-7067-477e-9ecf-162bcffef98c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d257b6f3-7e83-482c-af1d-9e3fb35c6f9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "469b7cee-1f83-4484-be18-ff145b7e0c3a",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d4a4995-86bb-40aa-b806-aae457e546e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0bfa852-d161-43d6-ad5c-5f4bfdc24b9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b0758e1-5040-4109-8025-efd4392ebd50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21d35315-eba2-4c36-9264-9c9ac6cd4198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b1919d8-6e07-4f15-af10-8b4a76be9aae",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35cd2f48-8433-4efd-87ab-8d70adacf08f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55a63b5b-b4ee-4c84-885a-4548ec00341b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9e933be-4d65-45cf-8e82-bace1bea095c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bde7602-a675-41f5-952c-89ee6f284e28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85299c62-afbe-4ed9-9ca1-3140df38c5bf",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68914672-df7c-48a8-8b45-951cd76d83ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bb4206c-96cf-4bc1-a21c-9a57869df8e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "021965a5-b8a2-4521-a74a-79900e1e7ddf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c676bee9-bae8-4a66-b888-14e676b5bbeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6e940ec-1bec-4861-bf81-80da7df7b111",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dce6dd0-0fa0-42c2-a41d-e7752a6d9c98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73e96d45-9f7c-41d3-b6fb-858d2a1a6257"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad9dc9c-d688-4270-ad1b-5955a60d540e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cc00d82-a58b-40dc-b914-f4b062ddeba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb30cb1a-f496-4332-bef9-4562f34ea403",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24e2d5d9-3c81-4f42-acce-7568a3208213",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a660eeff-02c8-49bb-81c6-d423b35e6337"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "819471cb-570b-418d-a0aa-1dcda48150d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "897b9918-0044-4f8c-ba71-ee2543ebf1d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a422eb1-84b3-4720-b68e-7d3f688d08fe",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63267651-f52a-40d8-94f2-00e1369da183",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ba95336-cd73-49ed-8b4f-283718605a98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e13a8946-7554-4124-a08d-96ff7849dd04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acff8222-97e2-4c50-81f6-5a4d8c9007f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "603fa5ab-e46b-4be0-ab87-2114b2030bc1",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "517b3749-305b-4052-b66f-44fc9f768322",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5d0ac17-015f-4b64-98cf-674420ddb429"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "916c5d33-6c5d-4baf-9ddc-a7f0a571cdee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e8be6af-8014-48e3-b291-dd26e848cafe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eacacfef-e133-423f-8272-35174f941dfb",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c405b9be-550c-4d8e-a9ad-1b15794cca45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f023ca8-6e8b-4a6c-a052-e73d838d03ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df5a38ee-2901-428c-a19e-aad3eddfac30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1353e25-7e76-433b-a237-ff343dcfbeac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "068084f6-4a7f-4c8e-9284-bdb29de89ade",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e623b18-4cfb-41d8-a749-60d21a47a600",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fc4d945-4544-42c4-a2a9-27e93d0678e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c99b103-8e81-4eb9-9a13-1f16be7cdc66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43077bca-0fe4-4774-b391-8412888469ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4def402-58fb-47eb-a172-d007ec8871bf",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6815157f-ca68-419f-a918-8809b34197ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "786346ed-3bcb-4885-84a8-62d3909d5278"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ad10a2b-ced6-4722-b592-c5942e4ce1d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eecd0cf1-1957-49dc-a770-cf21f215418d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9fbd594-abe8-46c4-959d-421668e5c448",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8384f79-6cd8-439f-9d32-a2f3b70437d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6793125-c475-4973-8903-bb41a659b941"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a00bb673-8e2b-484d-a6ce-da92ca2126a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41191cdf-1820-4479-971b-c26337edfc54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "745d0c98-43f5-4780-a0cf-02b09afe06c9",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c21d2ec4-ecf5-446f-8c4f-8e97f93734fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7979c17-a267-46b3-b4d9-79049e7284a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c942f427-d973-4614-ae5a-41aea0f8c164",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d6bd0f3-153e-425a-9f48-58970a55f7d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e79c6155-4272-4173-a788-5bf5fbad4bd5",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8b0c4f8-b6c1-465a-9ace-d00030a542c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "300ee79d-8236-4960-b958-0b13e4783bf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c261b7b0-6e35-4bbe-a1be-b627871f3f5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f42662c1-f914-41aa-92c4-a7c71e3c38e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d85f2f1-a8ca-47e0-925a-a53bbbf00ab4",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a485e48-a235-4205-8862-fb4b09ee68a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e18bb62c-7f58-4fbf-82c8-98bac22a818b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc00c6ff-d4aa-4565-ab8b-0af676dd362d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5305eef3-f04c-4f52-9195-6717ed350ab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c729181-f00c-4a9c-94be-ecc2ca243133",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9b63835-3a3b-4a36-8825-a428787aa0bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfca9945-c029-40b2-8a85-841e9c0bcb49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2411b669-8291-43b1-b29f-27ac9f5bcca9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2b0c1bb-adb9-4f8b-852e-375de2e37475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b33e8eb0-1776-49b3-ad17-8929c45c2ac5",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "614465ab-e2fd-42a7-9756-e4ff7bdd8cef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c492f104-18fb-47ca-b822-24bcad3b2abe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92104c82-9118-4e96-849f-e831cf0cb42c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6d78c7e-bb1e-46fa-9b6e-42072f8a8c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e51ec783-dd77-47c7-86c8-bfd9608373b6",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22f97548-74bc-4287-975f-57f0bc7e75c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3660642-ea16-4b00-9653-4d4bb295a6be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dbd81b3-f630-4ee7-9062-7f8b6eb76c15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "052af6d8-7e16-4122-a0c3-6eeda4d98c1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b29f2fd3-503a-4df6-949f-77d97fda5c44",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b300b8a2-60cc-40b9-aba5-52941e9a53b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6eaedab-d260-4929-82f0-c7bd312d2ec8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2003e3c1-57de-4760-b198-848d23c86832",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "380acc2d-d583-4302-b3be-4d45600e5f5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "671752ba-19ef-4f5d-a9f4-54021ad30504",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "084cef97-6ddf-47d9-9293-761d63c01d66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b70382e-242f-41b2-a2cf-eb12185b98c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d4b78d5-b5bd-4243-8308-4751b3781391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28703b49-fdbc-47cb-afca-4b47a2146393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e06222a9-0f4b-4f48-9fc9-f63678074b0e",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fc7a97c-6941-45cc-86ad-27117d052eec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23b91e88-3e66-44bd-9934-b878adcf1973"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "651d812e-e2f7-4137-9298-dc95985cff76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f41fbca-24b0-4c6a-9baa-de9a2b9f8f23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79df8384-dd5d-4eb4-ba5b-5de6fc363f6f",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73d2f333-a4d5-492a-9273-05d56e3543ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b28f0fc1-f5bd-43fe-b01b-42a466e21eb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb0daa5a-ac61-468f-869c-cf372dbb3a8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dd71fda-fb6d-4d57-9147-b70fbf02ea44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15ae1598-57a5-4a79-ac18-f7b7e2cb0f8e",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeac9fa9-97d0-4d7e-bf1e-3555ef98abbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd47ac5a-fdc5-4ea9-a142-eac31783e0c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b169141d-af7d-4f72-b97b-4aed7b9c26e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a95a67a4-97b7-42da-af4a-3801552edd6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c48d943-1da3-437f-ae7a-8488d0495488",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6da05a05-77e6-4ddb-995a-f212065bd1c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e44a6743-4364-423a-abb3-f32c7bfbca9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8992a81-e586-4a03-a1f4-c5b170b53bac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88d5089d-6b46-44b3-ae62-0d88de7a400e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1375539b-9914-4d6e-ad5a-c00c664d300e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "786ad4fb-e4ad-4445-946d-ce326a8298f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01f985cd-c27b-4003-83ba-83fac596e76c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f9aae32-1020-4c81-8e8e-f23c55019947",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8464cca-f47a-4b3d-b134-9e30a5372ae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaaae51b-b0b2-487a-b927-bc66f27bd914",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b9dbe52-88d9-4b10-a97d-f2f97812b0e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2967c6c1-d890-4e53-a822-d9b032767c00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53d5c289-e222-49ca-a55c-491e4fa99f9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6360f90-2dd7-416b-a75c-949a9f8eea5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7d08d7c-cf2d-411d-b265-08fcea238df6",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d26f079c-8494-4443-80da-0e18b230b4e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7a70990-8cf4-4bd7-b7a1-e99a5e3e34bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bd461ec-9deb-4544-9ffc-3248e6d80a12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef52371c-18d0-4c05-b166-7240041e6d84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "601ab15b-cbc1-47f4-8a5e-956dc5d18851",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ddb6779-5766-4e25-8ec0-f51fd932ed31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf150bc4-e5a0-4f88-9298-5e8c514710bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61b4dae5-8f07-4e5f-a522-28beca6dcc6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "393159b3-4f8d-4805-bdf0-282345be2cfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eee6dc7a-6812-4676-b875-95effbd55d12",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bba2727-184b-4c0b-8828-7da901d378bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99e2e1a8-3c19-40d7-907e-dcae242fc43d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aef46d78-c071-4728-9816-46dbec31e1e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce48928b-5b33-4a26-8d52-0e6022241607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d3ed11f-7f63-4338-80d2-944417db0381",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "477f389e-7509-4d68-9414-8519a90a344b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5578092-bee6-46e5-b1ae-fef04c81b8f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dca338cb-6235-44c8-a281-501eddd54feb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "252a3cd8-6a24-4e82-ad32-318d3cba7c96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6c73172-c5e9-4297-8c21-744eb11ce2e3",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75b537ec-d067-4c0a-a00d-fe612553aba5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ed84ecf-9360-4d7d-bdbc-d971e9e474a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26a680bb-5fb4-452e-8bdc-a0afd17a70f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d04527a-0c72-4747-9277-b1b1358e96a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f005de4f-0d32-4e7d-a4f0-3df5f98b2aa1",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55bdc948-2684-411f-a587-804a9e88047d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5272e70f-cb2a-4717-b196-fd132c7cdd8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9614e479-5f19-42c9-9c7f-ab7341299394",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ade37a11-6dae-4689-9633-f78679e81d78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90c02793-4aa2-4104-8250-28e97839f7c8",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64a3828b-5759-4ef7-8e2b-4ad8e74d2adc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddbec771-81e9-4966-824b-9fbd77fd43e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eab843ff-d3a8-4d3f-b701-aad9f132babe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a0dad46-dab3-4dbd-a51c-3a10a6e9cb96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdd1105e-b414-44ae-bd00-00038d62a3f2",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6ac576f-66e3-4933-9951-43638e250e54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5132c774-7049-407e-ae56-4493053f3bd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65bb6066-748e-4a1d-a83d-a3e52ca137a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2430bfc-df61-435a-ac36-4ed56f01d85c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "741dae21-aeca-4f1f-82cb-eb6a471126a6",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50e14760-516d-4289-ab59-4461263651dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c50122ed-4c9a-4021-984f-7dc9c489912d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "281fd4c0-1eee-47bc-b621-7f5e7f0a031e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b9dd31e-f312-4bbd-8351-903daa2e414d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe609edc-0a40-4515-bceb-ee58899c27a6",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4240acc5-5138-4c5c-b727-e210cfb6b28f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0732ca4-c2d1-490e-8ace-15495ca87322"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26697812-4060-4fee-add2-47ee7e2cb536",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37052dde-580b-4c0f-94af-bd84d20d12f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "142b2d46-5d13-40ce-a9c2-e12bf878313d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e243b018-1cf0-42dd-8a46-f918bba12f26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47274174-9400-44af-be4b-00a04276e2fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "997e9b4c-e846-4951-9db3-afb32baed8fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d3b7364-4020-48c4-a7cb-2d147b424b3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6b5e88f-0711-46ec-8e1c-889ad37c8cdd",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa6bd66-3ee3-40f4-b34c-a4f4256e32e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0125565c-525e-4aed-884b-a2bf53771576"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "739150da-afab-4acc-9960-7ed6c5dc3656",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cf169c4-a06d-444a-892a-d541186dbaf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc4f9afe-ca24-489f-ae4b-71d88bf18be1",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d10776e-1470-4b92-80f5-663f0a0a3c61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9850cffe-5aae-4bb8-9f0f-62bdfc0c4215"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "477c25cb-f518-40f6-a7c9-7ba123eb75a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dccda31-b132-4aa4-80d0-2e224f41b80f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a503801d-086f-4eec-8d3f-ae7f4bab04ed",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9372f89e-cf1d-403a-9ad4-3a051e58da7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "768dc0be-a3da-4836-b12a-bb2ef7083c28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8622f132-088a-42a8-9d78-f019fa4c832e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9c6a22b-77ef-47f2-aba9-ad5464143bb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c7c73d0-676c-409b-95e0-8e3bd176b90e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6382b99c-b3e6-4e0e-9ac9-c4cfad0d6af9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff8951b8-8b17-48e9-8720-add868ccbd60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25e94265-06ea-4146-a71e-8b1686936b36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d178d98-a229-4a33-96fe-26525b8f124b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc8d55a-4c43-408f-902b-e2ec3de2f96c",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac4e06d3-59ef-4956-a87b-54a835b032e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bc2eb93-8227-475b-bfdb-eb5bc1b27d0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b77c1736-76cd-425e-9fac-d538f9521628",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d11dee81-6634-4df0-96d3-54b796a128d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa246447-0149-443b-b720-542376519ae4",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d210c8a-fbde-452e-9799-1ea91f233ddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "846023c8-4e28-4958-9f9f-f8a1c6eb0dfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dfeb4de-a554-4bd0-ad1a-bee9fa03b2a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a83199df-430d-43ad-8e0a-9680caaa3f4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94acd0b1-4b07-409a-bc6f-c2f90d94beb8",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8933be47-629a-4b19-a3fb-ebe1d3cbe8b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55337697-89e5-4fe9-abd9-353fcc154765"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fcbde5a-24a3-49d5-8537-25eeccb5b935",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0694661-4368-4caa-8c8b-cf3e9545717e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9fc0b7c-210e-437f-b7b4-d528dd66a168",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbb3801c-39bf-4a8c-985f-f47935268601",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65a32722-49f8-4edf-9faa-62fd0ae83f6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "810ffc2c-66fd-4616-ae29-b3cfabb2a1f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ad67d89-dd28-4fb2-9666-61bd29dcd443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b2f9dba-4154-4349-b1f0-6c1dfa0bc59f",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2957b84-97e2-4ad1-a18e-b0e30751fda7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9203d80-55f1-42ad-bdd3-c4f7d412693a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3934b7f0-54b2-4380-a856-4b54b01688a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e413789-2ad7-449f-80ff-1d7639f60766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47f69991-4483-417a-8093-67acb9f3e4a3",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "563907c2-06d4-47c0-ab23-78b2f4379755",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7baea109-0e6d-45c9-8cbd-6a783f1e0076"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d57d033-f69c-4b7a-b95a-b2140c885dc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc3a64cb-8a80-4d0d-8b5b-46f3fd390f3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23e97f19-a80b-456b-ad68-8c9bb91a0317",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cd5f0a7-9346-4564-a457-7e153cd68436",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02ec7b88-8a2b-47bd-a41e-f54a7e262284"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e03516cf-5dbd-4e97-a11b-89c7fd345044",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd4d4444-dbbe-49d2-936d-a4ba851956ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d9df099-97a4-47b0-b94e-2b6c2a229e6f",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aea347e-ca5c-4302-9f1b-eec45eb757b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1834514f-aeba-4cfb-97d3-e010d297791b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2edc160-9f25-4a76-a4fa-af6ed1ab2a71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c57e7f0-687f-4b42-bfd9-9c9bd683a89e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fd5b3d9-6075-4703-a6cc-c50839f1ff1c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebbeead9-a297-430d-b85f-1625120ea8ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d54c710-9406-4d12-baf7-04ff98165fac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b217fe90-1d84-4457-aa7e-c69e42203ffb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9501ac31-1447-4003-b544-3396813e938c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f59485b-d291-4322-86d8-bedfe08f1a8f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30dac590-8d30-4abc-a894-c68f521a489a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9160c3e0-0a10-4157-855c-2c4794b9b1a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12035dca-0c95-4232-b780-9dac28ff6cdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3be00e94-348c-4df4-9e7a-36da59317fa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc4f8acb-cf39-4a7e-86e2-b8648c58ad2e",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3afc61eb-5a9f-407d-a11b-d7001a1592bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc55c14f-3bd2-41e0-ab36-16ea3892ed6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87dc13c9-a878-4f8a-a000-edfb43350a23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2343533d-1adf-41f9-ab11-543f26c99182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8185820e-110f-4e1a-bef2-89d15bb46f2a",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aeb56a0-9b2f-464b-9d05-608d706111c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a06ba9e-dc5d-468d-8e7d-b81baeb414aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "098cc325-2c09-46ec-aecd-2fbd0e23959d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9f73c97-486f-4d18-9cb4-b5aeb20deee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bdc5e27-0c9c-4220-bb0e-6d0b94c4212d",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c64788da-229c-470a-99c2-623da30c40d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6ddeb1a-9392-47f3-8d7e-b1542fd1d100"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dc1530e-42de-4c9a-8738-40568c8b7329",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0932b5cd-7c30-4ede-80f2-624cec862818"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f85b60ff-e510-484b-9dd6-bd15ccf011f7",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f132d69e-26d2-49a1-a5c9-a95cded7301f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "baa03073-c393-446b-9844-8ba0a32bde9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "712e41bf-a273-4d28-bc20-b4354850b761",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d02a97b-aa2b-4c7c-91fc-a4e35723c9d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74bcaa90-4049-42b1-b4d2-b83044026ce6",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64fbc2e4-cf65-4e1e-8247-9253f245ea2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5bfd414-c94f-4213-a620-542878f1cb16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0e02304-c8e2-4f3a-839c-05f666027918",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d30c9f87-fa50-45b0-827c-ddb203fbe716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53b454c4-6205-4e62-86ab-0aded2b483ee",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd61b17c-4927-4ba7-8258-8bb39cd9ab45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d29f31b-a262-4d37-95c5-1f5cc5865468"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dca1240-fb97-430d-9f13-85a391d8dc6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68eafccc-007d-4d93-9d8d-25e13647c870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecfb2fa8-d0d6-4a6a-9195-2ee9625cca56",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b83d9e67-77dd-45ce-9e9d-8110e6fd9ca6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ae6ff71-227d-4290-a6f9-48b104f816ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "187d1c75-1543-474e-8364-d7c915b16aec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8db08f45-dbee-4ecc-adea-77d3f6a6a390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "132c028c-2949-4784-ad9e-23bc5e4067d8",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aac5de5-5201-451a-8562-2474930ea551",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e6d46ef-c2a5-4e7b-88a4-250a94a91a79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "703c24d4-1307-4e5f-9b9e-97bbe661b501",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d5a9cd0-34a2-4b3b-b653-b20ec87e5d20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8893e1eb-daac-44d0-bfb6-648d4dbd7004",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4851d427-c6f2-4d6f-bf45-f0cf045c9e36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d1f7351-ddeb-4001-9365-b05559d1b56b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6de1eea2-d980-4fd6-81ea-405f87fcdab2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecad558a-ad0e-4ce0-a90b-9738bfbde0cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9889e66-b42d-486c-ab40-9a47babedb60",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eb035fe-cb18-4fb1-b5ae-a7cc230596f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4a7544b-d50f-4653-af71-fc7fbcca4638"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80ea5658-c85c-43e2-a272-be32f4443896",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea8628e5-c3ba-4278-b85f-96ef429dd03f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a048e04a-59e8-4e17-8209-1dfe5131a263",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "485692a2-b1ee-4c65-9448-073017aeb91d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbf6b799-7eb8-4eb1-924a-bfb8c8e122d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "333c1836-55d6-48a1-835c-aa97883d2876",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7f9b8c0-a8ab-4adb-8ef3-afb2ba59c5c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9b005b5-e96c-4f48-b31f-f8d3905c0cf4",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05b114e9-bc0a-4028-80f3-94817af4a46c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e840b64-340b-43eb-ab8d-a53532759b2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70bc170c-be80-45c2-96de-c15ba473a366",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f1cfc7d-5902-4d1c-9c71-9ff7fb1ee062"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18c1831f-1edd-427d-a689-20c34946665f",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcdfe307-b1ef-45fd-b89a-3c10940d6a2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d6ef3f8-fb7e-47c7-aa51-e3655c21f785"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee8547d6-6e17-48e9-b74f-4e243348a348",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f96ce79a-ae53-4480-a960-69f1dde77b47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e0cd1d7-f5eb-41f1-8300-f6fafd9f6a23",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f36b5d-f1cf-42e7-950a-f9adf47c2b44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29682fbf-5537-49bd-9fd1-0548f4fdd7fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce17da4-dfc4-48b1-9cd8-e7c865eacae0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d2c3602-81fb-42f8-a65c-44b186a91698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6735cc3-e23e-4d59-bf36-b6445de42de2",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "529cac15-1d40-4ce8-8106-3418e7433e17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76adc0bc-96bc-41b7-ba62-280bb7ef739b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aa45b45-321f-4261-bf12-c0feda77b36d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae3cfbce-97d4-46ec-b6c2-d85fe852b37d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b399e22-b773-4c5d-9cfb-0f2233a40d5e",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79a43996-6fd3-42dc-8a6b-463bd4497f87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "444ff9c2-6c0e-4c45-9138-b4f5278115aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "721cf3da-d775-449e-9f69-13851c3c0b6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcaea6dd-f8b4-405d-9cbe-44e2c028bcb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2423016b-294c-4030-863d-47f9c1c125b4",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1448d86e-462d-47d2-8619-624ceeb902d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bf7ed2d-21b4-400c-b8c7-13038e0d4386"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f005cd47-b68e-4616-b4ee-40d47425d2ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d28b42d0-0223-4a87-be26-de63dde5a3e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb401295-bde3-4088-80bf-f170cd896dd2",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8ef4220-42c7-4785-812f-63adcfa40796",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b179594a-7334-423d-a737-c9a4d36b791c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56856c2b-c0e2-450c-abd0-ae252660b147",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ad689e6-a2d0-41de-a48a-34256bd887ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51b19a60-ec30-46d9-adde-e94abe40d82b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "232fd6cb-c96f-4c1d-8037-2a5afef25faa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4dc87c70-2d4c-4f0f-a38a-ee7a8be0efa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3b6770d-f417-47f5-afe7-61a9cf45f5ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7894fa3d-38d4-4d01-acc7-cbf14309cdc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3894aaa0-c33b-40c8-a0a0-52b401ef2332",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3580d4aa-6a62-4b44-8fc1-28a2d2411d61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8309954-7b7c-4431-a7b9-b802e08f5fb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "181f18f8-e3d2-4176-884e-62a4edec42ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ed37aee-2d4d-41f2-98b5-8c70a1d88dd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03d12bcb-eb02-49ef-a59f-ff8c677f2fb5",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de9cc899-1004-474a-94fd-b2ece6c0a0e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91260ccc-9dae-452e-8a2e-896317043091"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0f06cd4-c5e8-49c1-96cc-131d8a410337",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3dac8f6-5751-4f37-b414-ebe96ee45bf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d6341c3-7dca-4dbf-9137-05ef5199bc82",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99a04e24-755a-4c61-9e92-56ecf25fba21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d04ac517-c834-4420-8d8b-383f2ae6ec45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "334bacf2-1838-4e16-8e9a-25de97917892",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bb07036-5a0c-4f5f-bc52-a0abfcdcf75d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12b1bb77-b489-4543-ab1d-a3ae9f778039",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "033a5ebe-1d60-4dff-be7c-0b30db9cfc6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "733e1f75-38ef-40c8-9f84-505f50ad61e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4484fcb6-180e-4d8b-989d-8fb3650566e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ce0f756-4cfd-4830-87ba-eeb9ae88c6a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a628740d-cca7-4859-be90-25fef4fc3796",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "193682f3-c6a7-4b3c-b418-1cf9c8165fba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b815086-5157-46aa-9f10-02b6b71640c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "653586b5-d6d1-41f9-8adf-750ac835a77a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1bfb198-6552-4e3f-aee6-153bca6255ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76a74376-41f6-4975-8ddf-28e764ca0737",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48fb156e-28bf-4241-9ec0-533a939821f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e797eea1-fe67-4da5-9a93-394fe3cb561a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b801a76-5184-44aa-b31a-c4d9d5b1472f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cf22c7e-2a1d-4f76-a5ec-09c4481b395c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4fc93f1-d924-4ce5-8ae1-d26425566947",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61cf27e8-9b3c-46cd-b93d-cc4b71573937",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f6a2691-e70f-4499-9edd-062ebc43a588"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "484f0b01-7fd5-41f6-92ac-f522d05a9b78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2e8fef7-0117-4f65-88d9-74706e23ca98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8d817e6-f59a-4b09-a0b7-d34936050efe",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de0f4955-e8b5-4463-8f3f-c74f6ef11f9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98093289-dfdd-481f-926b-92db82288771"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44b74e78-e843-4679-b54a-649aedc6b218",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79fade6c-0e17-4979-b02f-068da5e7a010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f412022-927e-4757-b548-b8315bc38700",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e9690c8-9a55-403e-9e22-3ec14e4826d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bafa318-4486-4b6a-9eac-4008e219504b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f30cb1f4-0fde-468c-9bca-90ceb7877d5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2433f555-0e46-454b-8397-457ea9fc5551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7213623a-6d67-4f7e-8e02-6113d765299f",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6dd891d-cbf9-4693-aad5-870f3c9f9d3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1d08a6d-196d-4888-a3cb-d7297e3981b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f00e1b16-0194-4966-99cb-efafc0f8fc54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43961e0c-b51f-4529-b11f-52168e4def99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87a02442-4e86-4f17-99ea-97e894fbb856",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "391f7242-79d1-4856-a0bf-2d9bd47a8614",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cff6cb3f-ee9a-4231-8147-bd95c5f3cdb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c3c7389-fc39-4847-aa85-c961b44b8fe3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b4935f9-b49f-426c-ba6a-444acbe5fffd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "902c7cb0-30ef-433b-b5d4-8c5b2c2ef1ed",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6f5ba34-12d5-4f4c-8072-72374c2d2c22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd6157e6-b80c-4660-9189-7a248c4bc2d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aac4ec79-3b66-441a-9d37-60dbd396c2fc",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01f59840-b88d-48b3-93dd-902aeadefbd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e665e629-d124-4f1e-aef8-c1e2be003f27",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63f5bc0d-0199-4651-b0a8-8b6e433e0345",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afc509d6-a8ce-4cf3-b734-51b29589aa55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb384882-3449-43f7-8584-9aabf9756912",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8337e97a-24c2-4d39-a200-291df6668552"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ad55b3c-2bff-49ce-a85d-b8f2e55f023b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "354152dd-6aae-49a2-9c26-a27644b75011"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "926921fa-a6b7-4468-bda4-0afa20683d03",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c65a3c8a-8ab9-4b8e-ad28-7ec20a33777d"
                    }
                  }
                ]
              },
              {
                "id": "cd17fc42-4c75-4ee9-a1a5-4e19e77139e6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "55a407ae-78e9-40fb-9d6e-c409f82b834e",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85122bbb-9c38-4953-8da5-3ee2b8a2fcaf",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b5f95134-93ac-47a6-a7e1-348f7b4a47f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc70ca07-0b29-4fbd-80ae-312313d28b9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e5b88bc0-3cba-45ad-b4ce-86853862af2a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5335d1c3-ae53-4676-b27a-6b68ad826c6a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "06ef6052-368d-4001-8717-db37ce3da8fb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "89cf3fcc-b57b-4a13-a16b-4c33c29cd0d8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ad3e2128-f4cd-414e-9891-31a0dd32204e"
                    }
                  }
                ]
              },
              {
                "id": "aa7366d5-2328-44a3-941b-aab725958b88",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "aaafd666-a7cb-447b-a080-084087ddfe1f",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f45ea858-d3db-48cc-934e-9ccd8173344e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "48d99345-4f81-48ba-aafc-9e18c15a9ef5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42ff4c96-8b13-4b6a-bc27-f7c64c27ee62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "788b7a30-f5b7-4481-ab85-cd352c62b81c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a93379b0-7fb5-4e0e-a905-32919ecd3cb4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "19384c8f-4e73-4ced-8614-9bc05f0adc64",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "32b79a03-b95b-4c81-a062-0a8358be8d8b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6772868b-4368-48c0-ac29-69a517492242"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "86e0670d-6fae-43c8-81bd-341954a4a318",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d5490bd-a7ff-42e6-aea1-342dd6dbd395"
                    }
                  }
                ]
              },
              {
                "id": "42e4921d-c067-41e4-a15d-295e7bb622b1",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ba665198-708e-4ffa-9a05-bd38c18c542b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f44cd899-0d4c-4b6e-b423-7595230a429a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b455387d-4005-4cf8-b14a-adab68ba230b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3f0f8624-748f-469b-9373-9a3ac3965807"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "667f43c2-b401-4c51-b268-7b988cf7841a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "fcdf8c0b-ba57-48b0-9914-c74208222262"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "60c7d964-3319-44b4-b3fe-7b5017ef9b6b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3529eb18-fc23-4506-a813-ab6410becd61"
            }
          }
        ]
      },
      {
        "id": "2192c5ed-f637-4e78-9e24-2346206991c5",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "a9c1dc16-54b2-41cb-915f-a5da902af035",
            "name": "Negative Testing",
            "item": [
              {
                "id": "21919ee4-fe10-4251-85b6-bfc60470ad6f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fa46fc0d-ed10-44e5-98d8-1ae618a8022a",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "199e98ad-137f-4240-9974-44b9ead69727",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ddde6736-d649-4cee-910f-851078710b05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "430760b7-1a5b-4564-a72f-705d46c75a72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f1af3ee2-8dac-4ff5-8d74-fcc36fb97f35"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "268a154f-517e-40d2-88c3-ad7e7d4e03d3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d2a126b-d55a-480c-b6ae-3202d69e8ac4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6e49100b-c952-41ac-96b9-bd44e0a2caf6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d3e5bdc4-19be-4709-ba14-d73de59e6090"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "15e0160a-eb9c-43c1-bfb3-c04da3e03b18",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8934aa0d-4d44-422f-a2e2-dc581402bf41"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b4e5f228-a8fc-4f8e-8c68-37b748d8bd69",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1f29cfbc-a806-492c-9de5-a0c9160b6679"
            }
          }
        ]
      },
      {
        "id": "1b53074d-13dc-4cba-b7e7-47e17b8c6cf5",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "4f517c97-a525-4ec6-9c41-1b89cbe61783",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bf1e8eab-e09f-42c6-89ea-6d7b169265ed",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9d393418-101f-44bb-8960-3362e3316ba8",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2db6426-4765-4083-8f49-6c8b538b4da7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6dc2aac8-0e52-4fdd-83c3-729e54e1f996"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6191482e-6afa-4359-8eb5-5b9dd49797ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9e17ffdf-3c80-4859-9512-4184d7622cc1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "db363ca6-d13c-4211-9db7-4d0cdee9dfcc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "21ba5890-71cb-4a7f-9868-1e779955dbf2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ac3b04c-7647-4b54-b0c2-d5f0d5a82162",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a1efc3ec-da73-4204-ba22-591f4cffc45b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a461f885-8e9f-415f-b2e2-970f8f157573",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "73f33e61-14b0-43da-bde7-dc39f7d2505d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "40c44c4e-5092-479d-8a86-0becf9c85fe7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3839cbb0-6c7a-44ae-856d-956461e729cf"
            }
          }
        ]
      },
      {
        "id": "d0130029-0797-470f-b483-bd8c9dec7c2e",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "e7ab3b0f-700b-4f1a-b59b-8806bb25b398",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d407fd2f-ba2e-4618-afc4-ff245c1a1e0e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d107dee8-1a00-4f7a-8998-e87dec774c44",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "811df290-f471-4887-bce2-9952be8132ec",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "de43dac7-8cbd-487a-a2f1-83a91c731f56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dc21161-549f-4c00-914f-e70fe0cdbc2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0567b2f6-71e6-45c6-905c-2ca3f8b0181f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "69817b3a-d87a-4876-a4e1-15815bfd4584",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0dd40a10-bda8-4209-981d-903bb4881973"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cd583456-c595-441e-8812-b9a5cda8ef11",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3484a499-07b5-4e88-a15d-73b9c73c988f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "34d85753-c86e-43c7-bf7b-471c1120753f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1d61b723-d2fe-439d-8792-275a5730845b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cc2f3b90-a7bd-4d23-aacd-4cb8a3eb2000",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "27f354d8-43f0-447d-ad04-4bd233104b09"
            }
          }
        ]
      },
      {
        "id": "f0c578e3-4522-441e-bc75-bad837d2b03d",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1893489d-9283-48df-9d77-623a38a2a2f9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "48f2e761-d3bb-47e7-a8ec-25a5abe2c15e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "d768709e-c00b-461b-81f8-10ab805258f4",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "19b8d092-743a-4e52-b932-8b49e231aa4e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "52ae6cab-f2ef-40a5-bea9-8551556c467c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 3
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 3
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 79
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 3
      }
    },
    "timings": {
      "responseAverage": 82.40569395017788,
      "responseMin": 15,
      "responseMax": 1336,
      "responseSd": 145.95170252298632,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1696638775656,
      "completed": 1696638811138
    },
    "executions": [
      {
        "id": "953d3cd6-2d5a-4624-b9e6-0d94246eea49",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "df67d559-0d21-41a3-808d-0f284502b27e",
          "httpRequestId": "dd834e29-b9f3-435a-97dd-2812a1aa929e"
        },
        "item": {
          "id": "953d3cd6-2d5a-4624-b9e6-0d94246eea49",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "c5f10b09-3e52-4238-a1c8-1b7b0a0636d0",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 0
        }
      },
      {
        "id": "850138ea-d5b2-4280-940d-ed88254bb4b5",
        "cursor": {
          "ref": "fb7fb8b9-6b9c-4b45-af6f-ea8d611410a4",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "233f84d3-b2c2-4f75-bb43-c2ef4075593c"
        },
        "item": {
          "id": "850138ea-d5b2-4280-940d-ed88254bb4b5",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "96ff0bc4-9cbb-4ad7-a27e-d92c6c3996a6",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 0
        }
      },
      {
        "id": "ccfa7fc2-0ef3-46f0-952c-76bc4c40e244",
        "cursor": {
          "ref": "6729fbf6-2f50-41de-81b4-4347329658c9",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a17ff526-98da-47f5-bcfe-187e78a9b2cd"
        },
        "item": {
          "id": "ccfa7fc2-0ef3-46f0-952c-76bc4c40e244",
          "name": "did_json"
        },
        "response": {
          "id": "656482ad-5ae3-49d5-9838-521798d2b508",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 396,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "627a872f-d797-459f-a8f1-02426657a601",
        "cursor": {
          "ref": "d1c44307-1e06-4492-8ffa-d241823d9614",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b7f83e03-8399-470b-b3e3-6105017be682"
        },
        "item": {
          "id": "627a872f-d797-459f-a8f1-02426657a601",
          "name": "did:invalid"
        },
        "response": {
          "id": "035ca455-7d14-4ecd-ab4a-cc3965fd942b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "627a872f-d797-459f-a8f1-02426657a601",
        "cursor": {
          "ref": "d1c44307-1e06-4492-8ffa-d241823d9614",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b7f83e03-8399-470b-b3e3-6105017be682"
        },
        "item": {
          "id": "627a872f-d797-459f-a8f1-02426657a601",
          "name": "did:invalid"
        },
        "response": {
          "id": "035ca455-7d14-4ecd-ab4a-cc3965fd942b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6eeb840-1d65-4007-b3a2-73f1cb7eb390",
        "cursor": {
          "ref": "24ab9b5b-29ef-4024-98c1-ef5c6f4ddb22",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e00e88f1-0fe4-4bcb-b56b-ede0062176d6"
        },
        "item": {
          "id": "a6eeb840-1d65-4007-b3a2-73f1cb7eb390",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "adb98a8a-bba4-4e1b-b7a4-51e930e54b0e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 117,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e81ac4c-c3c5-4d0f-b9c5-9eec7cce7db1",
        "cursor": {
          "ref": "8a726578-15ee-4214-ae6f-39b8453359ca",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "cee0a559-46f8-4c30-96b7-a4baf838820e"
        },
        "item": {
          "id": "6e81ac4c-c3c5-4d0f-b9c5-9eec7cce7db1",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "4742366b-dd4d-42ea-9eaa-4c5de9cedf20",
          "status": "Not Found",
          "code": 404,
          "responseTime": 65,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5140b41f-1be5-40c3-b544-599f4b0d742a",
        "cursor": {
          "ref": "4226cdbe-a8c3-49a5-86a1-47f1c9cbeb49",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c03703ef-4371-4762-ba9f-e76fc8709d7b"
        },
        "item": {
          "id": "5140b41f-1be5-40c3-b544-599f4b0d742a",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "2f8c0b4b-1c28-4817-8615-28234b76faee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cdffcf4-326f-40ce-b213-5a993b33a654",
        "cursor": {
          "ref": "6550598b-47d2-477c-8a76-652c1806dbd5",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "d33f11cd-3c2f-4dd8-b724-9989954a0517"
        },
        "item": {
          "id": "8cdffcf4-326f-40ce-b213-5a993b33a654",
          "name": "identifiers"
        },
        "response": {
          "id": "5c042a2a-b6dc-4f4a-93d9-7dc64be080de",
          "status": "Not Found",
          "code": 404,
          "responseTime": 92,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "9b5d8b47-b235-4ddc-8da3-5c58058af761",
        "cursor": {
          "ref": "eee48566-203f-4022-93e2-88b309363684",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "33a48a92-97ad-454e-a550-139e8f4fa090"
        },
        "item": {
          "id": "9b5d8b47-b235-4ddc-8da3-5c58058af761",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "85b26b9b-de47-4e1e-b7aa-0cb34257e435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dbfe503-a6ba-4ef8-9b4a-d53425571f91",
        "cursor": {
          "ref": "0ff98eb4-038e-4373-9021-34d562987308",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8856ded4-f94c-4225-bcc8-87acaac07e52"
        },
        "item": {
          "id": "6dbfe503-a6ba-4ef8-9b4a-d53425571f91",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "04d772c8-e45f-4323-9908-e9c5d7af9867",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10fa355b-bf29-4d90-b4fe-92bb26c77d14",
        "cursor": {
          "ref": "c35bc2d3-988d-437d-a779-a2a44362b3b7",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "5b6dd732-dfed-4b92-bab9-2fbbabd54212"
        },
        "item": {
          "id": "10fa355b-bf29-4d90-b4fe-92bb26c77d14",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "3a7a6934-0e84-4f10-bdc5-68e9713fc18d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "731b1a8e-8881-483d-9494-364c4d46fd8a",
        "cursor": {
          "ref": "d211e1c7-71e8-437a-9630-aa882b699969",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "3331c49c-ed0d-4239-a993-bd399e9dd81f"
        },
        "item": {
          "id": "731b1a8e-8881-483d-9494-364c4d46fd8a",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "238785aa-e98c-4396-a4e9-fc214315e14f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df2dd1d0-8f78-4d2c-b779-cc425be9612e",
        "cursor": {
          "ref": "f3fce40f-ccf1-4ce7-8b42-2efc156f4acf",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "3eed5802-9c72-4383-a36c-c89e79c76190"
        },
        "item": {
          "id": "df2dd1d0-8f78-4d2c-b779-cc425be9612e",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "abd1f54b-92c2-45b5-a1a5-15a510ba7e0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3a88174-3143-4aaf-be7d-4e910db421e3",
        "cursor": {
          "ref": "89d40a16-c186-4421-a296-89d99872434d",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "637cedb7-c4bf-474d-b592-5a9a8ec7096e"
        },
        "item": {
          "id": "b3a88174-3143-4aaf-be7d-4e910db421e3",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "3e1de7b6-7772-4fd6-85a5-d43009ab9200",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f19c6050-d718-459d-bddc-1c455fe76ddd",
        "cursor": {
          "ref": "51ab00ff-b79c-4e16-af63-2cf8c978a85a",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "e32653a3-0bcb-4e95-be43-208a7db4ce3e"
        },
        "item": {
          "id": "f19c6050-d718-459d-bddc-1c455fe76ddd",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "64995668-5b46-4a8b-a4d0-56d8d5f0bd24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "696a888d-3eb1-49bb-8b82-afa59389f859",
        "cursor": {
          "ref": "c7b0a98d-c7c6-45d0-b19e-f103a03e38a4",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c2eef160-b3ab-498a-9309-0dd34c1505e1"
        },
        "item": {
          "id": "696a888d-3eb1-49bb-8b82-afa59389f859",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "3df04b44-6b7c-4288-9837-753d522791a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f22a9139-4a7f-401b-821d-fa0a0d929b98",
        "cursor": {
          "ref": "fc00e040-cd41-4a1b-919e-a6b7f7d9e705",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "9f744c1e-9db9-4f59-8809-986c234f3bcb"
        },
        "item": {
          "id": "f22a9139-4a7f-401b-821d-fa0a0d929b98",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "5ed350f5-9be2-4da2-89fe-b45f45146050",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "980e976c-16b1-4f16-a433-d92bf538df65",
        "cursor": {
          "ref": "cd3905b1-620e-4ba6-82f0-95ec86c532a6",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b4ab82c5-df07-4e41-8d27-2ff3aa01c7df"
        },
        "item": {
          "id": "980e976c-16b1-4f16-a433-d92bf538df65",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "a4ac542d-3cff-4865-ad0a-783cb36f2690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca219cf4-bc18-4d5a-ac7b-88366e5f6de3",
        "cursor": {
          "ref": "1d024ef9-7e46-40a1-9b2e-6f8c3d355011",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "b1510d4b-52f6-404e-b8c9-a3cfb046b074"
        },
        "item": {
          "id": "ca219cf4-bc18-4d5a-ac7b-88366e5f6de3",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "5e0751da-081c-4e03-a616-f52ed790303d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b864a4b-1877-445a-979c-1ce30bbf0962",
        "cursor": {
          "ref": "975148fe-ef15-410b-ae6b-4e4f60554b46",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "16e1b43c-1c50-4d17-ab74-44d714508cd2"
        },
        "item": {
          "id": "7b864a4b-1877-445a-979c-1ce30bbf0962",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "5318b702-bac1-4395-a044-1fdff842cf5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9939513-cb42-4082-a134-f1a3d2a1d899",
        "cursor": {
          "ref": "393905d2-1f2e-463d-950f-0ba07c6ad5c4",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6b348921-b39d-4a4e-aeac-acc7d906bb48"
        },
        "item": {
          "id": "a9939513-cb42-4082-a134-f1a3d2a1d899",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "d71d2418-3204-483f-96b9-058aac7d70d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39ab015c-54a3-41ed-9507-c5ec800c54ce",
        "cursor": {
          "ref": "074ec488-2c04-4a7b-942e-72257b9a1f41",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "1c1fa229-a063-4b02-ab78-3eed421df932"
        },
        "item": {
          "id": "39ab015c-54a3-41ed-9507-c5ec800c54ce",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "6a50faa3-d4b8-4d98-bd4d-df67eaeb2996",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22ba82d1-8daa-4bba-bbf0-0df13cc952dd",
        "cursor": {
          "ref": "cf6a2f7a-706e-4f19-9566-abe4cd53e9f5",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "9358d66a-a02c-4de7-9b86-fb61dd7504a5"
        },
        "item": {
          "id": "22ba82d1-8daa-4bba-bbf0-0df13cc952dd",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "015fadc0-570b-4a7d-8bbd-08b1640ee799",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2938ce3-4f8c-4705-916c-8069f2d4b889",
        "cursor": {
          "ref": "fce858d6-e1fe-40f1-bef7-9fd39fa8de68",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "6cbb4b4b-2c05-4648-af9e-42e3ac701707"
        },
        "item": {
          "id": "a2938ce3-4f8c-4705-916c-8069f2d4b889",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "889ab97b-a3c3-44d3-b48c-c6eb2f29708b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "593431fe-55fc-4e11-9b43-dac6a6215fc3",
        "cursor": {
          "ref": "093aa047-32e4-4b8b-b32e-d44fa05ccff9",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "6190b367-7cb9-4ea1-a10b-702cd1bd6a06"
        },
        "item": {
          "id": "593431fe-55fc-4e11-9b43-dac6a6215fc3",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "3ff13308-9e6f-445c-83b0-e332a1fb5543",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "070c8ae8-48a4-4d3a-a94f-baea90f06261",
        "cursor": {
          "ref": "483d186d-1787-4005-88ea-fa784114b886",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "af903077-6989-4f0f-94f2-d7bc0105dcec"
        },
        "item": {
          "id": "070c8ae8-48a4-4d3a-a94f-baea90f06261",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a50740f0-5adc-4905-a7c1-ed5c09210a21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3746ea6-6be9-4452-839a-d532305f3a77",
        "cursor": {
          "ref": "8d0bdbb1-bb96-43e3-bf2a-20bf76866766",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "dc1ec69b-ccbb-4d2b-af22-62581ed79007"
        },
        "item": {
          "id": "c3746ea6-6be9-4452-839a-d532305f3a77",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "412354a2-fd02-472d-b488-5ba5960ef069",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fcdb2e5-295d-4303-91e5-81a679657b02",
        "cursor": {
          "ref": "bff13633-42bc-4b13-a387-1ddaee844873",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "80bc79d1-0dcf-45e4-8915-a178356cbf92"
        },
        "item": {
          "id": "1fcdb2e5-295d-4303-91e5-81a679657b02",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "8805ffd2-130c-4cbb-aa7f-7ff50e7a61e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcbbf57d-e7d1-43b1-a891-0bb88d553584",
        "cursor": {
          "ref": "35f846a1-50b0-413e-99c0-e106dedea022",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "b9dcaa44-4a30-43b7-9085-ce03fef89afc"
        },
        "item": {
          "id": "fcbbf57d-e7d1-43b1-a891-0bb88d553584",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "4d7c7667-ca78-4933-ab40-380d93cc2e97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccd51441-9eaa-448a-9be3-c6c6b4141829",
        "cursor": {
          "ref": "ee48f002-3271-4fb2-8e3d-ab9f5ff94799",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "68024053-cacd-4fbf-a635-6270cdfcde13"
        },
        "item": {
          "id": "ccd51441-9eaa-448a-9be3-c6c6b4141829",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "bb6c3bc7-fa07-4f46-ace9-9b4aba50002a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbfc8ce5-ad0d-4094-81e2-fcc8f0ec9a19",
        "cursor": {
          "ref": "e03710a0-533d-4836-9525-b870b8971e5c",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "8c93cd44-301f-4c10-b9c2-5b40337b4513"
        },
        "item": {
          "id": "cbfc8ce5-ad0d-4094-81e2-fcc8f0ec9a19",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "ec42300b-5c0b-4fea-9623-56b2356066b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4751a62-c626-4336-b737-8d866903da27",
        "cursor": {
          "ref": "38847f2c-1203-4983-aff4-195b61b1fbbd",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b861c004-c021-40ec-ba17-a05f3532ffd9"
        },
        "item": {
          "id": "a4751a62-c626-4336-b737-8d866903da27",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "2adef57a-3213-4e54-adf4-dd105944305f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cee85acf-3ba0-4fa0-b5a8-9fda804e654f",
        "cursor": {
          "ref": "fdee57ee-b39c-470b-9f14-a3da7efae832",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "3ca01d3d-3226-4af4-b8e2-41d324c4b79b"
        },
        "item": {
          "id": "cee85acf-3ba0-4fa0-b5a8-9fda804e654f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "63e020fc-7725-484d-8edc-f1ddf76365ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ffa692e-31f2-4303-b6fb-876af696a36b",
        "cursor": {
          "ref": "9ad2f952-69d8-401b-87a9-ed23547b4883",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "4542ac8b-4e68-4d2a-a983-327f0f00e0fb"
        },
        "item": {
          "id": "0ffa692e-31f2-4303-b6fb-876af696a36b",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "2f6607f3-9ec0-4989-86e0-bb24f0fb1662",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e456f9f6-c590-4fef-8e65-314b128e286f",
        "cursor": {
          "ref": "19b84284-40fc-45ff-b30f-2065d70b7510",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "fe223a84-09fd-4c5a-831e-f9a21b7087d9"
        },
        "item": {
          "id": "e456f9f6-c590-4fef-8e65-314b128e286f",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "7f9b740a-29ad-45cc-b3c4-f7f7fc1c9bb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25006db1-175b-4589-9c91-89b19cab346f",
        "cursor": {
          "ref": "a730b4a2-60c7-45a5-a046-5db8067c6109",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "02ded6cf-b709-4263-b033-69a1fb36c4f9"
        },
        "item": {
          "id": "25006db1-175b-4589-9c91-89b19cab346f",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "05119aa4-6aba-43ec-9e20-56409842335d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a04054f4-bdb7-455a-954a-23cfe5c5e385",
        "cursor": {
          "ref": "22c623a9-730d-40be-9332-e7a41c028b8d",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "23cb27bd-d9df-4cc1-a6be-6a0e99d84381"
        },
        "item": {
          "id": "a04054f4-bdb7-455a-954a-23cfe5c5e385",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "37afd7a7-c826-4153-9685-7dc595fad552",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2895a4e0-e2f5-4a1a-834d-a296b5ba8fd9",
        "cursor": {
          "ref": "9c7c9c02-9ced-4b94-b785-6e0e9daf3a07",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "aa24a983-869e-4fa5-a1c0-ec5b7d1b42f6"
        },
        "item": {
          "id": "2895a4e0-e2f5-4a1a-834d-a296b5ba8fd9",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "805b2739-cb19-493c-a03a-401733aa2237",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c2f1299-2ee5-4d36-9aa4-0de9c3b903a9",
        "cursor": {
          "ref": "7da28892-0657-4cfc-aa2c-bc87fe77bde3",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "3b28b68b-5825-4b05-bdbd-8d766698921f"
        },
        "item": {
          "id": "8c2f1299-2ee5-4d36-9aa4-0de9c3b903a9",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "2afa19a8-9ae7-4be3-90de-1db22d6054d1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "50d10094-3cb0-44d0-8668-2c2e23b10bea",
        "cursor": {
          "ref": "521ced2f-324e-45ce-930f-c186d7026dc5",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b4060755-1be1-4c18-87f2-5d66407054bf"
        },
        "item": {
          "id": "50d10094-3cb0-44d0-8668-2c2e23b10bea",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "2d9c1b21-602a-4d60-83fc-c3d2d08eb354",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "f3046f8b-530e-4269-8ea8-b1e1f2ef5f55",
        "cursor": {
          "ref": "989016cc-53b1-481b-a575-9e91239d61a0",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "3fde18c1-b566-475c-9991-defa97aec5d6"
        },
        "item": {
          "id": "f3046f8b-530e-4269-8ea8-b1e1f2ef5f55",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "d10b2a5e-6bdd-467f-9f30-bdb72cccbe9f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "ca424125-e447-4e30-a97a-6df02a5da796",
        "cursor": {
          "ref": "04e10516-c5df-4d13-b3f8-10f320d76121",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "646a8b7e-178b-4454-97fe-ada452c595b5"
        },
        "item": {
          "id": "ca424125-e447-4e30-a97a-6df02a5da796",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "1a68fda7-4dfa-403e-a77e-ee305a01d7ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2e8de0b-01b6-4ccb-9f65-7c664f90ca07",
        "cursor": {
          "ref": "354f8faa-0ce8-4207-9f43-f2e836055ceb",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "46a8fe9a-1f5b-4d37-8d47-71835204c94d"
        },
        "item": {
          "id": "b2e8de0b-01b6-4ccb-9f65-7c664f90ca07",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "4bb9124d-f700-40bf-ad92-a11ee8fbe496",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "2f0621b3-7836-4920-b676-00dbbb97e9f2",
        "cursor": {
          "ref": "1da32c8d-7f6c-49dc-b03c-5123e1535ea4",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c35951e9-6e5a-487c-9425-60883093e5ec"
        },
        "item": {
          "id": "2f0621b3-7836-4920-b676-00dbbb97e9f2",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "0a85ab99-cd26-4791-bfa1-c5a25e59ecad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "35025fd3-de64-4388-9193-366abbc6cc24",
        "cursor": {
          "ref": "bace21ba-1186-4551-8dc1-66e4cb1e8bc3",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "98650820-0b6a-4355-af4a-cc53c9033543"
        },
        "item": {
          "id": "35025fd3-de64-4388-9193-366abbc6cc24",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "556c3d77-d844-4fe7-80dc-4108de6627d0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "c0a3c2df-c49e-4290-be9f-844642ad549d",
        "cursor": {
          "ref": "1c77a59c-4245-46fc-884a-284300ea51ea",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "84e27055-defc-4abd-ba9c-e7024ec9b357"
        },
        "item": {
          "id": "c0a3c2df-c49e-4290-be9f-844642ad549d",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "cb5b01af-b857-47b1-83d3-fab18053a919",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "89f9f096-ee7c-4ac0-b4c9-4553469f670d",
        "cursor": {
          "ref": "1da8fe68-8884-450f-b802-c4f9dcba963c",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "5ca065ac-12aa-4c9a-91e2-6089957f1312"
        },
        "item": {
          "id": "89f9f096-ee7c-4ac0-b4c9-4553469f670d",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "dc9ea948-0912-495c-a7fd-37addab81e21",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "574477ff-c293-47f2-9807-b5005d018a0d",
        "cursor": {
          "ref": "a15dbf67-0d18-4109-888e-fcfef41d034c",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d5ae3edf-8509-4647-9832-119a3fcd38e5"
        },
        "item": {
          "id": "574477ff-c293-47f2-9807-b5005d018a0d",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "0cb5885c-ff63-4844-a9e2-ef85ad793db1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "9678049b-d1c8-405a-8bcc-2d1923a93f87",
        "cursor": {
          "ref": "45ac89b7-fb8a-453b-a75e-5ba52c4819fb",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "71f297eb-8003-46c5-a7af-e7464dd592db"
        },
        "item": {
          "id": "9678049b-d1c8-405a-8bcc-2d1923a93f87",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "02317d8b-95fa-4302-90fa-14d89d672afa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "0f8191f6-ad98-4913-98a0-e4cd131cb053",
        "cursor": {
          "ref": "7981d0e1-e9ae-43ce-b978-6c7b87f478e4",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "142aad4c-003b-4f39-ac04-55864ffc45e2"
        },
        "item": {
          "id": "0f8191f6-ad98-4913-98a0-e4cd131cb053",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "72244006-1a32-4d59-aa58-c33892655875",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "d0ab8943-94fd-4236-92e6-a9119369f451",
        "cursor": {
          "ref": "b10a40d5-0053-44b0-9c9c-6f9555855a42",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "e076d25a-5e10-40fb-8dcc-f0a22e8c41a5"
        },
        "item": {
          "id": "d0ab8943-94fd-4236-92e6-a9119369f451",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "6fbef09c-1f7d-474c-843c-4eacd570d00b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "294197e6-56a6-428a-a064-1d088da13775",
        "cursor": {
          "ref": "60b3f3da-5f23-4a0f-b903-fba418d696c3",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "fd3b17cf-1c16-4466-a5a5-1667f9675763"
        },
        "item": {
          "id": "294197e6-56a6-428a-a064-1d088da13775",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "3b663ec9-5139-4e10-ba76-0fce45c36d68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f04a34b8-ce55-4392-b09a-2d7654567777",
        "cursor": {
          "ref": "fac7cfdb-ab16-41f4-8ee6-fbd22639e6ba",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "2dcbf273-3115-4254-8e03-c3b8c9a3457e"
        },
        "item": {
          "id": "f04a34b8-ce55-4392-b09a-2d7654567777",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "efdfee75-0daf-4e00-971d-65a31e59b816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c193af9-7920-44c3-a174-be5818c9d555",
        "cursor": {
          "ref": "ecfa4a58-5ada-4c36-9e52-d0a81b539baf",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "dbfffecb-17df-4a22-ba9e-fd4795ed5e0e"
        },
        "item": {
          "id": "9c193af9-7920-44c3-a174-be5818c9d555",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "a4f88430-2330-44f7-992b-dce4c90fc89b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8bce7f6-4a0e-4fc8-9e7e-4e6b120c6268",
        "cursor": {
          "ref": "f2940975-5344-4805-8acb-c25f5058b8d9",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "3d40c5e3-bc3e-4542-8b7f-231acd5d3ae1"
        },
        "item": {
          "id": "e8bce7f6-4a0e-4fc8-9e7e-4e6b120c6268",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "ce3977f4-22be-4fe6-a722-5a3fd31685b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55f42649-6e87-445e-a2c4-441bd6d27510",
        "cursor": {
          "ref": "e5106182-1b6e-408a-b017-94a798850ba4",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7ed2ee80-de12-42f8-a729-6f043178e6a1"
        },
        "item": {
          "id": "55f42649-6e87-445e-a2c4-441bd6d27510",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "3ab26234-6b9b-4b2f-9d70-b717e952dd00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61b82d05-6194-433a-a710-683bca683c4d",
        "cursor": {
          "ref": "f8b33187-6fb8-41bb-a09f-ad7d21fe5a97",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "bbd48d89-828c-49f6-8c44-d57d81dda1a9"
        },
        "item": {
          "id": "61b82d05-6194-433a-a710-683bca683c4d",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "943fb36e-cec6-46c1-bc2f-bcd5fdf15b25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d8bfc39-ce0e-4dc0-ad51-bcc2b78de05d",
        "cursor": {
          "ref": "79c40011-6936-4975-9ed1-b737d9181214",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "c3d3b347-9d7f-4f14-afea-8e73b7cf4184"
        },
        "item": {
          "id": "3d8bfc39-ce0e-4dc0-ad51-bcc2b78de05d",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "0c6d00f1-a5fd-4957-b467-037b634a5bcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ae88746-0a59-41c3-afa4-9f05f5d24f7e",
        "cursor": {
          "ref": "28fcabb5-2ba1-42bb-8009-29476b292a78",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "0d5374bc-1cbf-470d-8914-20574079ef93"
        },
        "item": {
          "id": "3ae88746-0a59-41c3-afa4-9f05f5d24f7e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "836461db-b393-4d97-959a-59d0d29e6ee2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f4b9b64-0492-4fc2-89a4-ccf3fa0d1311",
        "cursor": {
          "ref": "29911472-1c31-4e69-bfe4-8e3be3af161d",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "3ab3b10e-1a7f-429d-b695-b48d402475ca"
        },
        "item": {
          "id": "0f4b9b64-0492-4fc2-89a4-ccf3fa0d1311",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ba534bc5-24d6-4157-8ce1-2407bf4d0768",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7d435e4-6a14-41a7-b7d7-d0b54e5c2730",
        "cursor": {
          "ref": "01e901ac-e3c0-4190-a970-3c6cfdec9c3b",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "5f5cabc3-2abe-4dfd-ae3d-2cf05aaeca93"
        },
        "item": {
          "id": "e7d435e4-6a14-41a7-b7d7-d0b54e5c2730",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "ffa7af01-5b50-444e-a8b4-168f7b7f0960",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfee6456-6081-4483-9add-6df1b2431fb3",
        "cursor": {
          "ref": "e1c3b97a-41da-4d52-a9d4-20efc01322c1",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "8fc28f8e-8e40-4691-878b-ff475db4b6a6"
        },
        "item": {
          "id": "cfee6456-6081-4483-9add-6df1b2431fb3",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "0298926c-dc67-4bf4-920d-38e6892daa62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aa5237b-cdcf-471d-bc05-3a02b5cefdba",
        "cursor": {
          "ref": "f54f298c-2cee-497a-9788-ce8b3c71324c",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "8d3bd797-5c4d-4350-819e-c3944348ec46"
        },
        "item": {
          "id": "2aa5237b-cdcf-471d-bc05-3a02b5cefdba",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "c373050f-0577-4b46-a751-0d8ff64bc167",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7061992-fe82-43bf-836a-80b03615ac2b",
        "cursor": {
          "ref": "dc0e70e6-0c5d-4bd5-b220-d39f72c08488",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "8aae5b28-01d6-44b2-9a1e-030fc8ecb6bd"
        },
        "item": {
          "id": "c7061992-fe82-43bf-836a-80b03615ac2b",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "63adf09b-4a15-4825-a629-e6fabd250a96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e84029c-b4ac-465c-bf6b-4f4b2988a70f",
        "cursor": {
          "ref": "e155640c-ceb2-42de-9789-6f9c573d3b42",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "d16b632f-4500-4919-8b17-bf511ab6147b"
        },
        "item": {
          "id": "9e84029c-b4ac-465c-bf6b-4f4b2988a70f",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f25ee237-5cc5-4679-9ebf-f00d09a217b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "03bd1788-83d5-4847-accd-82237c1cbab2",
        "cursor": {
          "ref": "5b5aba63-7cd2-40b8-bbfa-d6cfd7fae159",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "4d295db9-79b4-492e-bcfb-199f92c9e645"
        },
        "item": {
          "id": "03bd1788-83d5-4847-accd-82237c1cbab2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "ca5207a9-5d6c-4b85-8579-91eecd30326c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "7f71b376-38cd-44fc-905c-cb40a7674ab0",
        "cursor": {
          "ref": "438e329e-16df-454d-bd27-8695deb0002a",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "41cda676-aa68-4f10-8064-4331a9e04602"
        },
        "item": {
          "id": "7f71b376-38cd-44fc-905c-cb40a7674ab0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "2361c5be-cbb6-4509-9da0-2ce35da78461",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "dc1416fd-8069-4dfe-afa6-8b91e23d7c1a",
        "cursor": {
          "ref": "fa990b7e-4a03-464c-8a10-235806e802e0",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "5d1c19c1-97f7-464b-9c1e-47aa05cceed1"
        },
        "item": {
          "id": "dc1416fd-8069-4dfe-afa6-8b91e23d7c1a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "0800e36f-07bb-4aee-a718-72b7435eb62f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "b1de7de8-c89e-4383-9f09-687796850c45",
        "cursor": {
          "ref": "061321b2-f136-42f1-a8fc-d5bb5aabac73",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "05e5c502-6d27-49b5-a5a4-357dbf8f1c12"
        },
        "item": {
          "id": "b1de7de8-c89e-4383-9f09-687796850c45",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "c71a7bd5-3c26-43c8-8e26-fd19cff6892c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "7319302e-30ba-4250-8ba6-75e5a73b2b19",
        "cursor": {
          "ref": "9c3d2ab5-2cca-4ba4-b972-8f4bf42f16d4",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c1e0326b-a68e-43cf-8919-f95b6ff3daa8"
        },
        "item": {
          "id": "7319302e-30ba-4250-8ba6-75e5a73b2b19",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "9c4e2edd-a879-448d-bc6a-d65c01da0e3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97ec00e4-73f4-4367-9360-3c35f32268d3",
        "cursor": {
          "ref": "df41c79d-ca84-4f83-85dd-8b8f71a0936d",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "3b0254a5-93a5-4ba0-a28e-86070dc19df9"
        },
        "item": {
          "id": "97ec00e4-73f4-4367-9360-3c35f32268d3",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "4275131f-4203-40d8-96af-05a47c78f814",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fc04c54-5799-47a1-9204-68be72cfe1eb",
        "cursor": {
          "ref": "a3694a91-546a-449a-9968-cc0b185e1d21",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "062f4576-6d06-48aa-a219-eaef7321e916"
        },
        "item": {
          "id": "8fc04c54-5799-47a1-9204-68be72cfe1eb",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "9ed88c1c-c264-40d8-ad4f-6e815e94a180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b9fefdd-17d1-4a20-9b6c-d52ba9e0f5f0",
        "cursor": {
          "ref": "d7c80785-b364-4e63-b3b3-45193f670989",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "b6055864-b2de-4d54-bc33-818f0e1bac77"
        },
        "item": {
          "id": "4b9fefdd-17d1-4a20-9b6c-d52ba9e0f5f0",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "f2a86145-9a82-49d9-bd00-e6db9c999c2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd2fd8e2-9676-4d03-97f9-0d86963d6fe4",
        "cursor": {
          "ref": "1b91fc7c-3845-462d-aee8-362e68ef0017",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "c062459c-68c6-4ab5-b305-65acaaf2843d"
        },
        "item": {
          "id": "cd2fd8e2-9676-4d03-97f9-0d86963d6fe4",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "24243295-6aee-40c4-a4b9-30e4c24b037c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33b7628f-f34f-49a2-a5a8-afc41848c657",
        "cursor": {
          "ref": "0a0bfa26-baaa-4924-93c5-e09b1a073eb2",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "7c81713a-59fc-4c09-90b0-abff5e6975b2"
        },
        "item": {
          "id": "33b7628f-f34f-49a2-a5a8-afc41848c657",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "76b711f0-1528-46dc-a574-3243f4632088",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76d2f877-46b9-4801-8612-06b7c518b2f8",
        "cursor": {
          "ref": "9396526e-e8d1-4a8f-b1bc-7d436b98da2d",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "abdcc403-08db-49bd-8f4f-ceb0d1a742fb"
        },
        "item": {
          "id": "76d2f877-46b9-4801-8612-06b7c518b2f8",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "49b7e37a-baeb-4523-858c-f4a2519e7b07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "660f34a6-8dc5-4a7a-9b1c-2fc49e9b9bad",
        "cursor": {
          "ref": "01f76b7d-df07-4908-85d8-19ea95990ab9",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "028756b0-1e6f-4914-b5b0-2d685e3a8e3e"
        },
        "item": {
          "id": "660f34a6-8dc5-4a7a-9b1c-2fc49e9b9bad",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "b132b664-f0fd-411b-b4db-555b049e5af0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87802ee8-af76-4fc9-9afd-1bcc235e419e",
        "cursor": {
          "ref": "c6936347-5246-4c23-847c-594020b3c88a",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "ec821f64-c74a-4c45-805c-6efb3083eace"
        },
        "item": {
          "id": "87802ee8-af76-4fc9-9afd-1bcc235e419e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "6b87ce8a-0894-4df6-a508-7dbac32ab6e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef7dba50-e05a-4cae-a1e0-1566388071e6",
        "cursor": {
          "ref": "40d0d867-3c33-463b-93ef-1d8a64929422",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "05a1cb64-f510-45f9-a28a-ba3839ddafd0"
        },
        "item": {
          "id": "ef7dba50-e05a-4cae-a1e0-1566388071e6",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "867221d3-99ff-4584-9fc2-86f35df66314",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2abb853a-fd52-42e5-bfb5-7c08c229bdaa",
        "cursor": {
          "ref": "6b9d921e-03f2-4fbd-b5b1-5c9dbbb4e028",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "b69ffeb4-200f-4b44-acca-1d02f0b05cad"
        },
        "item": {
          "id": "2abb853a-fd52-42e5-bfb5-7c08c229bdaa",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "31073e5c-62f5-4770-aa76-cd2d49fcc4bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6f3005b-25ae-4468-8e3b-a4288bbec035",
        "cursor": {
          "ref": "c888c2be-dcf2-42b1-8d29-bb443894f323",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "6abddb22-d4d8-4c21-a1db-8ad5f0659027"
        },
        "item": {
          "id": "c6f3005b-25ae-4468-8e3b-a4288bbec035",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "4382ea10-1aac-482e-a2ec-2fbba48625f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4228283c-1ad2-4d76-a281-657f88a07492",
        "cursor": {
          "ref": "c5759e2a-f9a8-4348-8768-b91f47b1c751",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "0f83fc11-b9f5-49de-9000-161db1e7f94b"
        },
        "item": {
          "id": "4228283c-1ad2-4d76-a281-657f88a07492",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "08d7ac36-bf0c-4f4d-b275-a7584b0bc64e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51a117e8-54fd-44d0-a007-f1867fcdb1ae",
        "cursor": {
          "ref": "dba2fb67-3aa6-4d3e-9127-7f7d786151e6",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "2763c872-d6a8-47b6-a1b4-1e8b9a7538a4"
        },
        "item": {
          "id": "51a117e8-54fd-44d0-a007-f1867fcdb1ae",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "b49a5176-3064-47c6-a944-3dbedd9b4960",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7e8d1e5-d485-4f56-8916-c5be1dc493b8",
        "cursor": {
          "ref": "c17bacbd-8bce-46af-90bb-6c7f5ed26082",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "733d4079-602e-45af-8d9e-a96f580bd8eb"
        },
        "item": {
          "id": "d7e8d1e5-d485-4f56-8916-c5be1dc493b8",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "a23d9c99-42c5-43a1-9215-29179b18fd2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e9a3f03-275d-4993-805f-7859ad42fda3",
        "cursor": {
          "ref": "2acdb018-de88-4021-8aec-3fc523300afc",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "8f97b2b2-e794-48dd-b11c-ab3f9f6ad4cd"
        },
        "item": {
          "id": "4e9a3f03-275d-4993-805f-7859ad42fda3",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "089008f3-c87d-4546-b3a6-ce19bcd861aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf1f0c70-1914-419e-b77a-0f8b97ee5298",
        "cursor": {
          "ref": "41cfe718-fde9-4cf2-b1e2-5636ca655340",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "66fc7826-4990-4be2-9933-9528a498d219"
        },
        "item": {
          "id": "bf1f0c70-1914-419e-b77a-0f8b97ee5298",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "b710c5ff-afa8-41f1-9cda-0b02c2a0f965",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75f707ca-9726-4a35-8c60-7e05ff4ca783",
        "cursor": {
          "ref": "6e65a7d0-c17f-4e05-8cda-663f77e26d1b",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "3937e23e-f51f-466e-af03-1bb4ce5c70fa"
        },
        "item": {
          "id": "75f707ca-9726-4a35-8c60-7e05ff4ca783",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "ecadc4bf-e436-4f78-b8e0-e1fb5b673283",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc03fe2b-f80f-4fd1-8307-dcff7ae35dda",
        "cursor": {
          "ref": "33911980-9508-4d4f-8f71-3b4977bbadc7",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "41c0d0f8-37e4-43d6-bb40-b69dd7c78340"
        },
        "item": {
          "id": "dc03fe2b-f80f-4fd1-8307-dcff7ae35dda",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "2b0d2555-87c2-4dfc-bfd4-5a85a4a16d75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36eca775-a598-4e97-b1ab-fe3aba1a52e0",
        "cursor": {
          "ref": "1c2e43aa-e60f-44f1-ba9f-15f2b520089c",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "ca0184c1-0e4b-4457-ac9c-649a2b908d8c"
        },
        "item": {
          "id": "36eca775-a598-4e97-b1ab-fe3aba1a52e0",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "65bc0863-a3a3-45f0-8eae-348652add97a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "171eac35-1a25-4544-b260-16ddae972965",
        "cursor": {
          "ref": "710cd882-f472-4791-9b6c-838740a881cc",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ef49be64-b706-4b0c-9780-2b604ad7d24e"
        },
        "item": {
          "id": "171eac35-1a25-4544-b260-16ddae972965",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "57c1f6f3-37d1-4c3e-9120-f886ab08f0d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ade0995-fe7f-4957-8682-b990c99c92e2",
        "cursor": {
          "ref": "65b0f310-2699-44ba-9b2a-6addb69b360e",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "40465767-dddf-445e-a616-d93b2a68e164"
        },
        "item": {
          "id": "3ade0995-fe7f-4957-8682-b990c99c92e2",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "67665546-224d-4bbd-a4fa-f50450bd7d59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "400af631-4310-4104-9597-504929b02e17",
        "cursor": {
          "ref": "c2a78b4f-4d5c-4712-8ad1-164c9a63fb17",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "82f46899-ff83-4162-b115-92b0427eb449"
        },
        "item": {
          "id": "400af631-4310-4104-9597-504929b02e17",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "51507d19-b517-4db8-8540-c6526b721611",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "636f771c-adee-4406-9a50-82a297003399",
        "cursor": {
          "ref": "7f1ec4cb-48bd-45b3-a3f4-5a2f52e03ce7",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "b6fd3a15-eee3-447f-88e9-ee345a970bc4"
        },
        "item": {
          "id": "636f771c-adee-4406-9a50-82a297003399",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "1dc65500-d732-468f-b967-5650e8469aa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e3aa052-351d-4a5e-9484-45dc18be13d4",
        "cursor": {
          "ref": "986280ef-4b77-4e9e-9432-859e5f8daadd",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "dcaf66bc-bfa9-4a4c-9135-3f3735de48e4"
        },
        "item": {
          "id": "3e3aa052-351d-4a5e-9484-45dc18be13d4",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "880ab259-a40f-429d-af0f-c84959de87c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6db6f217-aa3e-4b09-9b87-f4bfc4296bb6",
        "cursor": {
          "ref": "b5b50460-4bbe-476c-8170-3c0ccae0bf35",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "acc6c32d-d6ed-40db-8b77-b201f2d89fae"
        },
        "item": {
          "id": "6db6f217-aa3e-4b09-9b87-f4bfc4296bb6",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e9db3a42-f5d4-471f-813a-c0c4b6d88ca0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1334e1e7-6f48-4907-a9c6-d9eacb91fd9f",
        "cursor": {
          "ref": "fa8abb98-4af8-4e66-9091-2e74f69725bd",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "9a7bdd21-4efd-4155-9226-822de9921313"
        },
        "item": {
          "id": "1334e1e7-6f48-4907-a9c6-d9eacb91fd9f",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "786d2fba-81b8-4834-8a7e-2b48ad7b2e38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96f71d53-e965-4df1-b21d-de566ce8e1ba",
        "cursor": {
          "ref": "2f0ab6bc-4e5c-4513-9d59-8a80270379cf",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "504d79b9-2ee5-4e5b-857f-8ec47c61dd3b"
        },
        "item": {
          "id": "96f71d53-e965-4df1-b21d-de566ce8e1ba",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "63603354-41b6-431c-b1f5-839a1d37895f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0410c5b0-4776-4ed2-9da3-e5c85b1fd0a9",
        "cursor": {
          "ref": "7e20c924-11e2-482b-be8a-0f08288b9e0b",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "0aaa0816-8531-4697-abca-93fd8724b463"
        },
        "item": {
          "id": "0410c5b0-4776-4ed2-9da3-e5c85b1fd0a9",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "ace56e47-f9de-44e5-b6bc-b8459c0e024b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f177e41-1b48-41c9-ab7a-cb009c54ab99",
        "cursor": {
          "ref": "9dafd7cc-8d64-478a-9af4-768224347c13",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "d3fd8bfb-5042-40eb-ae68-ecf6e46f81d0"
        },
        "item": {
          "id": "0f177e41-1b48-41c9-ab7a-cb009c54ab99",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "048b5c7a-7d31-4aa0-92b3-5fe800c88e13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7412d5b8-032b-4655-951e-115db52cee7a",
        "cursor": {
          "ref": "8fcec270-0a56-4352-9251-271ef0887818",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "496c42f7-5da1-4069-9449-22d991aa0064"
        },
        "item": {
          "id": "7412d5b8-032b-4655-951e-115db52cee7a",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "d49998c7-8149-481d-9f21-9eed471b4ae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d83b0e5d-b299-4942-bf01-eee90c36984a",
        "cursor": {
          "ref": "9102a05f-87f7-4fbf-9a12-4a55403b7ba2",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "309c3aec-f798-493c-a245-66b8cc6ed9ee"
        },
        "item": {
          "id": "d83b0e5d-b299-4942-bf01-eee90c36984a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "1c721ce6-0107-4b25-909e-bfcfb7a04975",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb6394dc-1fb8-4b7d-bdb6-6d7239251664",
        "cursor": {
          "ref": "a3d4b786-d41e-4299-be31-33e15a03c18c",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "aceb867a-dca1-404f-b184-e4e710486a85"
        },
        "item": {
          "id": "bb6394dc-1fb8-4b7d-bdb6-6d7239251664",
          "name": "credentials_issue"
        },
        "response": {
          "id": "1d31be48-36ff-435d-a9bf-d6e5373687ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:102)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:102)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:102)"
            }
          }
        ]
      },
      {
        "id": "861d4c5b-7145-48d7-a636-74ff0c208565",
        "cursor": {
          "ref": "f4fc3674-6bb5-4325-bf49-c0f63835bf05",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "ef7ad953-1f15-4111-b35d-6a1e8c0d69aa"
        },
        "item": {
          "id": "861d4c5b-7145-48d7-a636-74ff0c208565",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "c5cad366-4f01-42ee-8111-d6e8212f9335",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:103)"
            }
          }
        ]
      },
      {
        "id": "ce4f1601-ec67-4d60-9a2a-a7ae5e63cd55",
        "cursor": {
          "ref": "9260522d-2d78-439f-bdfb-b328d849ac6e",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "47d5253e-9e13-44ec-84f4-d6a211916f7c"
        },
        "item": {
          "id": "ce4f1601-ec67-4d60-9a2a-a7ae5e63cd55",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "05cc8982-103f-46cb-81b2-239cf981b955",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "dd0260b5-16de-46fb-a62e-8f55e6a94872",
        "cursor": {
          "ref": "4daaf65c-a1c6-48a7-8af6-0eda76a1d93b",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ce12874c-019b-4a7b-bd3c-bbd48a2d9534"
        },
        "item": {
          "id": "dd0260b5-16de-46fb-a62e-8f55e6a94872",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e27b17d9-ff2f-4ae4-be61-0d2afda33979",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "21931c36-c987-4d46-9245-81d32cdf32a1",
        "cursor": {
          "ref": "81d90c2f-c176-49df-b954-21313922c608",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "e8afa8ef-2193-4bfb-8f29-75f7db44d982"
        },
        "item": {
          "id": "21931c36-c987-4d46-9245-81d32cdf32a1",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "036497aa-c60a-4acd-a2cc-31f17fe2e9c8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "b37ffb19-4be5-4561-b2d5-92a3cb43f6ab",
        "cursor": {
          "ref": "51ffe3b5-bc89-4ed8-b7e6-9e32134d9219",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "503445cb-8888-4ad7-8617-ea25fe6020c5"
        },
        "item": {
          "id": "b37ffb19-4be5-4561-b2d5-92a3cb43f6ab",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "e54c655f-37c9-41b5-997b-34f1f39610e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "5315cdba-5e09-4f89-a3fe-92d9e8569a66",
        "cursor": {
          "ref": "41522092-3a6b-4084-89a4-9f065d2c7019",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "08112489-bdc3-472a-b4e4-b386f8104419"
        },
        "item": {
          "id": "5315cdba-5e09-4f89-a3fe-92d9e8569a66",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "54349acc-f120-4d3a-b0c8-ad0f11a34c36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99719939-a575-473d-a3f4-e8f01c681def",
        "cursor": {
          "ref": "d0c87ab8-f1b5-42e0-b000-a8ef79ad627e",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "8847e468-e510-41c1-a1ef-3244fe7d6e13"
        },
        "item": {
          "id": "99719939-a575-473d-a3f4-e8f01c681def",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a597858c-e1c3-43dc-b545-9dbddf53aa26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c46c8a3-0f60-4972-b7ab-465919e5edd5",
        "cursor": {
          "ref": "faa09cb0-d49b-4105-a23a-521aedb16f18",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "e9633344-95b8-407b-8be4-de1343698ea1"
        },
        "item": {
          "id": "2c46c8a3-0f60-4972-b7ab-465919e5edd5",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e6e73f47-e2bc-4d21-b9a9-bdb18652a240",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07be8850-17bd-4513-b0e7-2ef032041299",
        "cursor": {
          "ref": "5c07eedf-ed53-4b16-9b0e-2860444b2b01",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "84aa5193-e061-4321-964b-2b17919fdd32"
        },
        "item": {
          "id": "07be8850-17bd-4513-b0e7-2ef032041299",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f68dee70-c0ff-4598-a509-fd3769f435ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c06e19f9-8ce1-4ccb-a688-95ddb8150a8f",
        "cursor": {
          "ref": "4df6b2d8-f437-4bda-8c80-055392c23f51",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "0cef8741-40a7-4a63-bf9f-1f931e5eb802"
        },
        "item": {
          "id": "c06e19f9-8ce1-4ccb-a688-95ddb8150a8f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e1873d81-4ea6-49fb-a8ea-2e9fdea4be5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc90fad6-927e-4e96-a551-3b581d6141f9",
        "cursor": {
          "ref": "87822a14-794a-4834-a382-2179f2eedb31",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "0ff2186a-c425-464c-80d9-aff8437f42d0"
        },
        "item": {
          "id": "dc90fad6-927e-4e96-a551-3b581d6141f9",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b7907d17-eb04-46d6-ae37-97d23607374c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "129ec815-097f-4e11-8c05-a7ba8faeaa04",
        "cursor": {
          "ref": "51cf274a-e1ce-4883-9669-0e052d6bce68",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f1efde13-f4a4-4abb-953b-9386c82ed224"
        },
        "item": {
          "id": "129ec815-097f-4e11-8c05-a7ba8faeaa04",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "11f800f6-a96e-4fbe-80b8-9f53ce39922c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4de6b28-7cb2-4041-b548-0530e78acfa9",
        "cursor": {
          "ref": "65204527-d08f-4545-8442-bf7e5ff25fb4",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "01d0fd6f-c2c4-4597-a57b-89f5e0d3b4be"
        },
        "item": {
          "id": "d4de6b28-7cb2-4041-b548-0530e78acfa9",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "1455c133-3f47-4c80-a509-752c91b106ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7fccd12-2f5e-4fa0-be77-9d6c91706543",
        "cursor": {
          "ref": "6c93073b-fbab-430b-b401-c289ddfb9b55",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "f8783895-a2a9-4776-83fb-13975b91e1f0"
        },
        "item": {
          "id": "f7fccd12-2f5e-4fa0-be77-9d6c91706543",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8d9e09e6-d33a-4e23-a30b-a3786c5d2762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57df3e65-97a9-4d43-9642-220832cf3410",
        "cursor": {
          "ref": "194fa337-b71f-4658-ae30-c9e776790b8a",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "6b14456b-6269-4734-88e6-94a0f8c6524b"
        },
        "item": {
          "id": "57df3e65-97a9-4d43-9642-220832cf3410",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b7a5c8ea-98ab-4f82-9719-b4f0c5accf55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd6937a4-5538-46ea-ad25-bc977d4a8a28",
        "cursor": {
          "ref": "ae170583-d76f-46de-a291-5121db6a6dfb",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "b409cf36-01d4-4ca0-8afd-140058f6373d"
        },
        "item": {
          "id": "cd6937a4-5538-46ea-ad25-bc977d4a8a28",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "bc016e9c-b9fd-447b-9c0c-4bf117600a75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a762307c-0b8a-46f5-a430-8fec14c1bf95",
        "cursor": {
          "ref": "10f355a9-d145-4ec7-9e8f-c3dbab4ef646",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "7f17dce6-daa3-424c-8dbf-9ddc20306e1e"
        },
        "item": {
          "id": "a762307c-0b8a-46f5-a430-8fec14c1bf95",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "25694d13-721d-487a-b51f-c7d6f910561c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bb8e6b4-0b82-4259-aaa8-978b10de1332",
        "cursor": {
          "ref": "413c8714-d233-4941-a99e-8d320bac720c",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "795030d7-3d20-42a8-a8d8-3f86a99a11a0"
        },
        "item": {
          "id": "8bb8e6b4-0b82-4259-aaa8-978b10de1332",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "fb152262-cfe7-4ac5-89ec-c0ab39212043",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "061f5ee1-f691-454a-ab62-87920c991c32",
        "cursor": {
          "ref": "234bc6a9-0d28-41ef-9df3-9053e9619575",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "c811509c-c9f0-410a-9e6f-2d00e1928354"
        },
        "item": {
          "id": "061f5ee1-f691-454a-ab62-87920c991c32",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "266dbb76-06ce-41f6-b8bc-4a2f8e69eb45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 151,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1385f819-6429-4312-95e1-fe37b8f65529",
        "cursor": {
          "ref": "9786fd88-0248-47b4-9175-8586277b21e0",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "c67a6ea7-ea33-4ded-9499-5c9a3a0eafb3"
        },
        "item": {
          "id": "1385f819-6429-4312-95e1-fe37b8f65529",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "7fbdcd95-de25-44a0-b3a6-89743f7410ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86eb1b55-b54e-424d-a231-ad14819dc4f4",
        "cursor": {
          "ref": "3af360ea-3043-4f23-a24f-7b969da49534",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "8b698c1d-f917-42fc-b4f7-4d9b8db93f86"
        },
        "item": {
          "id": "86eb1b55-b54e-424d-a231-ad14819dc4f4",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a6b0538d-fe6c-4ab5-82a5-3dd0a99db748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12ac3678-415d-41c7-a937-88dc741783a1",
        "cursor": {
          "ref": "666be3df-fb55-4b13-80d9-9a6cdc2c8520",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "0d913c12-da15-426b-ae45-8c6faf237084"
        },
        "item": {
          "id": "12ac3678-415d-41c7-a937-88dc741783a1",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b8c0fb42-c503-4e42-9174-77654b371794",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fb8cebd-cf95-4741-a577-780039da6c56",
        "cursor": {
          "ref": "564088c8-a237-42f0-a055-3d4bef497a48",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "158cafa5-f185-4f7f-b6e4-26953be01fac"
        },
        "item": {
          "id": "3fb8cebd-cf95-4741-a577-780039da6c56",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "359e645d-09f6-4ee9-b09d-5df7f48664f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5063ce81-2478-4f98-a4b4-ce43cf46996e",
        "cursor": {
          "ref": "8db8c3b7-f0c5-4295-a9eb-48284cd6beb9",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "736e7e35-2869-4d51-8975-f8e6a8c836b4"
        },
        "item": {
          "id": "5063ce81-2478-4f98-a4b4-ce43cf46996e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "627c006f-7b31-4d08-b93c-66081fdda6a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58eb912b-8f3c-4d6f-bce9-b40ed154042e",
        "cursor": {
          "ref": "c1338b67-3d6c-47ba-ad95-23be1ce384c6",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "c81957ac-1027-4a81-b208-32169939bfae"
        },
        "item": {
          "id": "58eb912b-8f3c-4d6f-bce9-b40ed154042e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e2a3baf4-445e-4dab-a2a1-29c15987b2f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37c8c2b2-edad-44e6-8f37-5970c4ebadf0",
        "cursor": {
          "ref": "85e3b9eb-e6fc-4769-8131-83b761f1d030",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "f186292d-3dfa-40a5-937c-bd7b65eb93aa"
        },
        "item": {
          "id": "37c8c2b2-edad-44e6-8f37-5970c4ebadf0",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4b1b4ffc-67eb-481e-b3eb-d437c5f3a318",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "969a1dfb-3395-4be4-a8cb-5a0e5a1a36d9",
        "cursor": {
          "ref": "cd3ce678-f463-4165-ba33-23180470ec8e",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "f9d3cffb-3d4d-41cf-a967-36a05ce688bf"
        },
        "item": {
          "id": "969a1dfb-3395-4be4-a8cb-5a0e5a1a36d9",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f21e8eac-2fc9-4967-9ec1-b994936eb62b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f9a0386-06d4-45c4-bc13-d154207968a1",
        "cursor": {
          "ref": "8738a23a-8c40-4312-8fc2-111aa54dc9b5",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "4e9bc56c-3e82-4b69-ada9-bed5a23a1297"
        },
        "item": {
          "id": "0f9a0386-06d4-45c4-bc13-d154207968a1",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "0fd8af40-ad1d-487b-aa50-35dc0483ef85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44df3313-0c6b-4983-81db-33821dbeefa8",
        "cursor": {
          "ref": "cc5a3dec-1dc2-48cf-bd2c-6666818b3669",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "a19d0b2a-4885-4bd1-a035-f13a09a53576"
        },
        "item": {
          "id": "44df3313-0c6b-4983-81db-33821dbeefa8",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "beeada78-7aad-4d97-a771-0d0e21d0e27a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b4466b1-0efc-42c2-a649-2d868cd98db3",
        "cursor": {
          "ref": "7b9c2925-2e4e-46cc-8285-09f65e38808d",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "44d68948-ac5d-4ac4-a35d-b567ee8670a5"
        },
        "item": {
          "id": "1b4466b1-0efc-42c2-a649-2d868cd98db3",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "9f522ce4-79ac-44be-9bd9-132ec5357f60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1369c998-369c-4dc2-8a1f-c65d6ff5915e",
        "cursor": {
          "ref": "16601718-80c3-4c37-a8da-633666703ed9",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "497e08dd-fd5f-46f7-b141-1c894311a728"
        },
        "item": {
          "id": "1369c998-369c-4dc2-8a1f-c65d6ff5915e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e87a61ad-7af1-4c47-b788-cb9b24cc9910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb3b1373-8d01-4600-8562-fa4adee0e119",
        "cursor": {
          "ref": "0eb3b4db-268f-411e-bb7a-3a85e5c0f10e",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "84c3aaf1-2d7b-45df-9538-50269f80b482"
        },
        "item": {
          "id": "fb3b1373-8d01-4600-8562-fa4adee0e119",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "3f49472d-be8f-4f5a-b4a3-7e8e9c53b569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5772df37-b828-4885-af0c-e93536526006",
        "cursor": {
          "ref": "a6d15cb9-a7ac-496f-adb7-f3715b7e48fb",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "1016c066-9c63-4150-8c9d-79ac1fb5c98e"
        },
        "item": {
          "id": "5772df37-b828-4885-af0c-e93536526006",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f57e482c-a70a-4d33-9e39-81733993bb73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98de3efd-75be-4413-9809-5ca09c5f3562",
        "cursor": {
          "ref": "b5f79a92-be96-4de1-8cf1-53eb4618ad18",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "70d5738a-0441-4297-88ce-24e5b4e6cdcf"
        },
        "item": {
          "id": "98de3efd-75be-4413-9809-5ca09c5f3562",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "56eff012-cf38-450d-b761-7c94d5cb0fdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d5f76ac-e55b-401e-afcb-71fe1b70634c",
        "cursor": {
          "ref": "edf5d460-4bc2-48bd-9314-e50fd91ff176",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "a8a8025f-d526-4828-aff5-811d2995413a"
        },
        "item": {
          "id": "5d5f76ac-e55b-401e-afcb-71fe1b70634c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f23c3628-6b5e-4bcb-b795-0d519484a0bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "824887d9-4ede-45ec-b922-21b0e9d1eeee",
        "cursor": {
          "ref": "614a95eb-65f8-479e-ac31-9b7cc5a3d43e",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d7b72312-b448-4c38-af69-ae56d7e24316"
        },
        "item": {
          "id": "824887d9-4ede-45ec-b922-21b0e9d1eeee",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b8360e63-3a3e-4fb3-9994-fb8d2b7a34bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8434cda7-1d89-4905-a76b-71c75cd57f5b",
        "cursor": {
          "ref": "c75c1d6c-2ec9-4937-92f1-edfbd50f864e",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "4c734131-2f47-4e69-a77d-f25745179271"
        },
        "item": {
          "id": "8434cda7-1d89-4905-a76b-71c75cd57f5b",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "023cc611-1909-4352-8033-935f499712b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7e0105e-4a28-4452-8383-39b26df581d2",
        "cursor": {
          "ref": "48c9e5cd-67ff-460c-8d55-d8ae96848375",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "83ef3e9e-ad54-45b7-ab46-6ce09e947e22"
        },
        "item": {
          "id": "e7e0105e-4a28-4452-8383-39b26df581d2",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e7a98029-c417-48df-8ec0-e16efd73110e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d07b43c3-6a23-4a44-8071-75796879e59d",
        "cursor": {
          "ref": "9f073418-0efc-4aac-bd5f-b73327da5291",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "394ac8e6-a977-4de3-8cec-6ecb8443a786"
        },
        "item": {
          "id": "d07b43c3-6a23-4a44-8071-75796879e59d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "078dd1bd-77e5-422f-bece-4b8b7790119a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89d7488c-6aa5-4a95-ba43-25916ae7f947",
        "cursor": {
          "ref": "26e6e8f8-d0c9-4657-99aa-c7b0a0d53a38",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f1872eb1-c92a-4c5d-906a-90b27b89814f"
        },
        "item": {
          "id": "89d7488c-6aa5-4a95-ba43-25916ae7f947",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "866d0eda-ba36-43a4-b3c4-fd35e90762e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bbbe1ae-b2da-4a24-b3e9-b48288af67b9",
        "cursor": {
          "ref": "d764c2b7-da9e-4917-923b-16bf522d3137",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "0446d0da-2444-4134-8f62-490ed76e6b0b"
        },
        "item": {
          "id": "8bbbe1ae-b2da-4a24-b3e9-b48288af67b9",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "adf251d3-221d-4fdc-bcb6-5e0dea86d5c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddc97147-cf3e-4214-aff7-0ebf2e1aaabb",
        "cursor": {
          "ref": "10e98036-fcc6-4101-814d-ae76a327e20d",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "1cf49f99-1e8c-4d54-abb5-04e34ade1b71"
        },
        "item": {
          "id": "ddc97147-cf3e-4214-aff7-0ebf2e1aaabb",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b382619c-708a-4103-a7f7-29c9bc078070",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d0fa8c4-f8d6-46ea-8faf-92ecc1b9ced1",
        "cursor": {
          "ref": "2f6835b5-b8af-49c5-8554-656b43ead328",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c953d94d-7c54-44fd-83dc-e6ce1beecfe4"
        },
        "item": {
          "id": "4d0fa8c4-f8d6-46ea-8faf-92ecc1b9ced1",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "22e3606d-821c-4798-a6aa-5a8b3c161fbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34c8d240-aa36-4f7a-b3d2-a142ce9779e7",
        "cursor": {
          "ref": "42dd43bc-ce60-4de7-8b49-96f4d965f4ce",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "63d0be00-9ea2-4811-9db9-e85ffe283db5"
        },
        "item": {
          "id": "34c8d240-aa36-4f7a-b3d2-a142ce9779e7",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "66efc308-42b8-473b-919d-057d7b800bd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "220345ed-b8b7-401d-9ef1-90016e2f786a",
        "cursor": {
          "ref": "833a6890-18a2-4eca-bdae-7e5b3efebf0b",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "af15d761-fc89-4af3-9f72-75a097d3f482"
        },
        "item": {
          "id": "220345ed-b8b7-401d-9ef1-90016e2f786a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "4b90abfa-b44c-409d-9472-b4254fc24bbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14bc5958-9460-4c2c-9062-fccc13ca2ad6",
        "cursor": {
          "ref": "10ded8e6-0f6d-40d2-9f11-91560a5c7d95",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "164736d5-71c0-49de-ac45-cc5b60066598"
        },
        "item": {
          "id": "14bc5958-9460-4c2c-9062-fccc13ca2ad6",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "cc2722ed-dd20-4723-823c-47ca3e1906af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "744832d6-2b05-4d7a-b819-e6bfaa246f38",
        "cursor": {
          "ref": "8c5a825b-bd61-4284-aa51-cd697bf94369",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "00976c7a-3cd8-4e73-a607-3f4992dd253a"
        },
        "item": {
          "id": "744832d6-2b05-4d7a-b819-e6bfaa246f38",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "e69e2287-b2e4-4c12-8a39-a8631811ae95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b5a0120-3d7b-446a-ad7d-bd1f78468781",
        "cursor": {
          "ref": "845ef8a0-f6e4-4adb-8233-e1c79d9018a2",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "a645e27f-e8d5-4fdf-8b66-7f9b8a4f0da6"
        },
        "item": {
          "id": "4b5a0120-3d7b-446a-ad7d-bd1f78468781",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "bfc9bc91-2c93-4074-b8db-30e1bf3c5553",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a94c002-2b81-47cb-989c-69f3a85cfb30",
        "cursor": {
          "ref": "a082a663-6b9c-43e0-a652-40945061dcd5",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "1056ca40-3f33-49b9-bef8-0b252e778f91"
        },
        "item": {
          "id": "3a94c002-2b81-47cb-989c-69f3a85cfb30",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "bc9cd68b-ac23-485e-9e1f-476de1cbf95f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28ebd675-be3e-4268-bc4a-4542e8d7727a",
        "cursor": {
          "ref": "31e6c7dc-15ff-4d58-8438-19b7f816f1ca",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "84ad7a65-9045-4f28-af24-84f441869d2a"
        },
        "item": {
          "id": "28ebd675-be3e-4268-bc4a-4542e8d7727a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "14e923e0-2ee4-4533-a84a-986e7dadc87d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d501df03-336c-4b9b-8b23-cd6d580d0e9a",
        "cursor": {
          "ref": "d01d4ad2-d75b-4e48-90b6-f2a86943ecc1",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "5171ad29-1fe4-444b-991a-d6858b490b94"
        },
        "item": {
          "id": "d501df03-336c-4b9b-8b23-cd6d580d0e9a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "828a50be-47df-46bf-a30b-85f528d90acc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f49d488-d64c-4091-9611-e36dc68a0516",
        "cursor": {
          "ref": "420e4ed8-c5d9-46e1-9bf2-ee5ca9f0fd36",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "c45f30d7-7320-4dc4-ad65-34ff6122d546"
        },
        "item": {
          "id": "8f49d488-d64c-4091-9611-e36dc68a0516",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "71408451-442d-48ce-a5c2-6c60a2f09e1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82aa22b2-af73-4af5-847b-e3b8384233b7",
        "cursor": {
          "ref": "aadd8283-c6de-4b91-8afa-934254922cee",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "611ec8a5-7b1a-437d-a272-2fa8eff4c09f"
        },
        "item": {
          "id": "82aa22b2-af73-4af5-847b-e3b8384233b7",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "0804613d-7c40-4577-b3a3-ec4f194661e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2e0045b-4eb9-4c74-940f-de4d945aed6d",
        "cursor": {
          "ref": "06005ec8-6acd-49d9-a162-dfa821570eba",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "74dae36f-6990-4a31-b99d-867a965d2403"
        },
        "item": {
          "id": "f2e0045b-4eb9-4c74-940f-de4d945aed6d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ad9396cf-29de-4931-9369-22544f95d18f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10474381-c413-4992-90a4-17624827fc74",
        "cursor": {
          "ref": "065f1f18-9cc0-4f52-81b2-1387f7cffb1f",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "6bc27185-a804-40dc-acc1-a07eedfdc2c3"
        },
        "item": {
          "id": "10474381-c413-4992-90a4-17624827fc74",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "a9a01694-cfb4-487d-a67d-6e4d1cd8a5ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7efaa774-46b9-48a3-9ba3-a9a8653caee4",
        "cursor": {
          "ref": "329b2667-3a4a-42d0-ac34-737c8a14cb8d",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "b69f5f38-cd30-423e-88c6-51207b908989"
        },
        "item": {
          "id": "7efaa774-46b9-48a3-9ba3-a9a8653caee4",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "158a6adb-d139-4bbf-a441-b06802f3e092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ab17753-9729-4050-b805-804120f258e9",
        "cursor": {
          "ref": "642bac50-11c6-45bc-ae98-cd17a493a710",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "02776202-3b9b-43f6-bf7b-84638931be1a"
        },
        "item": {
          "id": "2ab17753-9729-4050-b805-804120f258e9",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "be21ba9d-9d39-41bb-8475-beda4900a36b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e52d8b4-62e9-411c-8249-29c5123684ba",
        "cursor": {
          "ref": "57e94590-94f4-4d15-b639-9d1e7a2b1e8e",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "b75380d8-d619-4c83-9535-bb5fc8d6ce02"
        },
        "item": {
          "id": "7e52d8b4-62e9-411c-8249-29c5123684ba",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "d083673a-9a43-4b60-96b6-2973031ad4f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdb0b8d1-1d1c-48df-8fad-145ad6b1e783",
        "cursor": {
          "ref": "169f342d-3a36-4329-b746-29bab71fae1a",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "a41d8011-f84d-418f-bf09-c28434b6ed17"
        },
        "item": {
          "id": "fdb0b8d1-1d1c-48df-8fad-145ad6b1e783",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "49bbba2a-7e04-4fa2-8327-9e9c1c7ac963",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51426923-30b7-456b-8f54-ece5090aa854",
        "cursor": {
          "ref": "e0dbbf3c-b905-4937-afe2-6e9f4f640f96",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "22f2c53e-eace-4b65-97b5-a118de96617c"
        },
        "item": {
          "id": "51426923-30b7-456b-8f54-ece5090aa854",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c212f218-db17-4c51-9bdb-cf1dccd2c5a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "130f87dc-af92-46c8-8d87-fd86ce1ebdac",
        "cursor": {
          "ref": "eb5d322e-3aae-4f42-82a8-a55c0a10441c",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "47d82371-3ddf-4c4f-bea8-b5002931aed3"
        },
        "item": {
          "id": "130f87dc-af92-46c8-8d87-fd86ce1ebdac",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "ae7dd730-95c4-4eaf-8dc3-96eeecfb62ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5ba3453-1106-4be7-ade8-43e2d7606575",
        "cursor": {
          "ref": "616d90b6-328a-4fd2-84e6-d9a3843e79ca",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "78cc000b-837c-4366-b8a0-e68a5172cc21"
        },
        "item": {
          "id": "b5ba3453-1106-4be7-ade8-43e2d7606575",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d4781db8-aaf3-4f83-b433-02d3aeb95aee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa25bac6-28f5-48e2-8eca-73a5106d3ee9",
        "cursor": {
          "ref": "8e4e6c1e-d6ca-4c50-b43c-b5ee922f1008",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "c8359fae-ccf9-4311-aa29-76b51efc7c17"
        },
        "item": {
          "id": "aa25bac6-28f5-48e2-8eca-73a5106d3ee9",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "bdfc0f1b-cfad-43a6-925c-be03484c91a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a25ab965-e192-4a80-9abc-1bad2de22cb6",
        "cursor": {
          "ref": "2eda3fbb-3853-47a5-9244-a7876701372c",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "db33177a-7b57-4db5-99b3-4b5f1cc0888a"
        },
        "item": {
          "id": "a25ab965-e192-4a80-9abc-1bad2de22cb6",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a3a61a8d-e5db-4a3b-a7cb-3b550f554edd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f135a8b-cf9e-4c3a-8ba5-96587b5301d6",
        "cursor": {
          "ref": "2847c1cc-c8a4-4eb3-8ebc-94b025fbf8a7",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "63c5be7c-e65e-4c94-a648-67a6c8c75424"
        },
        "item": {
          "id": "8f135a8b-cf9e-4c3a-8ba5-96587b5301d6",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a580caf3-a1ed-46b4-be22-9f133b352af9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0c97bb6-aa97-40d6-8ed6-39233952af27",
        "cursor": {
          "ref": "f6f34017-2d2d-44ab-a2d4-25513a7474d6",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "d1ab8db4-5b80-4db8-9ab2-0e8484084e13"
        },
        "item": {
          "id": "b0c97bb6-aa97-40d6-8ed6-39233952af27",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4992d9d8-6165-42e0-9ec2-c731942df584",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa8334be-debc-4f26-9f5c-32457ada6aac",
        "cursor": {
          "ref": "92ec0690-152a-463a-9530-91c2df6df6ba",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "05e43ba6-0e9c-4333-9cf0-44f79a672a4c"
        },
        "item": {
          "id": "aa8334be-debc-4f26-9f5c-32457ada6aac",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "af21b15b-9335-415c-8d25-fe9405a8ff36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "897a3366-e07d-4857-90b1-fd635edc555f",
        "cursor": {
          "ref": "8348f628-e526-4a65-8f9a-bb3dd5ef9d13",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "a976508e-798d-4019-9f8d-8c5d4a02fd4a"
        },
        "item": {
          "id": "897a3366-e07d-4857-90b1-fd635edc555f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c677193c-5276-4c0d-b9bb-3ff30923e8c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abe86766-00df-43f2-9e76-434c0c3b8b23",
        "cursor": {
          "ref": "e245dbee-bd03-407d-bbac-83e2c18dd424",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "33c3c48d-f887-4bc1-96b0-4dca93cda0bb"
        },
        "item": {
          "id": "abe86766-00df-43f2-9e76-434c0c3b8b23",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "33f5fbfa-a87e-4388-a923-6be83e5903aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76b0e161-b057-4337-9c69-d1cf631895e8",
        "cursor": {
          "ref": "cebd5bbb-55ec-4ba0-96d5-e32f92befb1e",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "a159961a-2127-47ea-8e5f-24d464d3270e"
        },
        "item": {
          "id": "76b0e161-b057-4337-9c69-d1cf631895e8",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "22b8bb59-b699-4755-b250-b94dc6cfb06f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e562cb9-2a41-407a-a292-a1cedb7b4ab6",
        "cursor": {
          "ref": "047439a0-2916-440c-abc6-a102f8d0bd94",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "120bd64f-9d49-43ca-91e0-87532395e0d6"
        },
        "item": {
          "id": "6e562cb9-2a41-407a-a292-a1cedb7b4ab6",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "1eb46cc5-8217-4d34-87cc-d34024ca54af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f65c5c64-d4fa-4f8e-a537-a618a292b6fb",
        "cursor": {
          "ref": "c764e6f0-fa19-46b7-83e2-0aee2cbc6c22",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "62622724-7f74-45e7-889c-6924e38c5597"
        },
        "item": {
          "id": "f65c5c64-d4fa-4f8e-a537-a618a292b6fb",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "3a2e2db2-e485-45c8-b9c9-3f265f2d4b6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebd3b5f6-53d7-4062-a306-fb33f5efcc6a",
        "cursor": {
          "ref": "7939320f-93ed-4bbf-bd50-c0506fa27389",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a84f7cb9-58c8-40bc-95b5-2138f8196000"
        },
        "item": {
          "id": "ebd3b5f6-53d7-4062-a306-fb33f5efcc6a",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "b792356a-54ea-4921-9adc-8c7002ef18c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5768409d-241f-43c7-b400-c7b2818a58fa",
        "cursor": {
          "ref": "d207b90f-ed4d-4c7a-ba94-44485f5247c1",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "13df8aa9-b112-4fa7-b6c0-0dacfb9cdd48"
        },
        "item": {
          "id": "5768409d-241f-43c7-b400-c7b2818a58fa",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "0c5bcfdf-563f-45ab-8113-7b91ccfbff91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac24abb9-e7a0-47fd-a7c8-3201c6e39fb2",
        "cursor": {
          "ref": "36cc0eed-4699-42fd-b76b-bab393e9eec3",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "7dc014b9-581e-4159-be5d-e35b9f884299"
        },
        "item": {
          "id": "ac24abb9-e7a0-47fd-a7c8-3201c6e39fb2",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "dfeb5972-e9ef-4b2f-8e0f-69c76939e648",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f091c791-a3b4-4a3b-a282-cbcb833f3028",
        "cursor": {
          "ref": "98e480a1-2b89-4270-94cc-8a64a5c78b7c",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "35ea0157-978b-4eda-8773-f656e6734a41"
        },
        "item": {
          "id": "f091c791-a3b4-4a3b-a282-cbcb833f3028",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "0dddde6a-4794-4d70-90d5-bcbcb3966846",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "472fd3cb-6b1a-482f-abbc-08d94aa31f01",
        "cursor": {
          "ref": "2f7f290d-6ddb-4503-9036-19b4ba419e6a",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "b2bb18f6-890b-4cd5-b59e-1c1f8beef7a7"
        },
        "item": {
          "id": "472fd3cb-6b1a-482f-abbc-08d94aa31f01",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "6db97dff-be5f-42d1-a9ef-a8a52f910c17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69218e28-40d6-4a09-9b64-eabde0f57497",
        "cursor": {
          "ref": "8288e044-c204-46af-90c8-39f664d42742",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "d6b10713-cc7f-4c88-89e8-f2be2586df53"
        },
        "item": {
          "id": "69218e28-40d6-4a09-9b64-eabde0f57497",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "0d1d806b-b927-426f-a313-fa4d6735dd19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22f2937d-98f7-4080-8f9d-70dfa718e7b2",
        "cursor": {
          "ref": "add089f4-dea2-4103-ba3f-f94ea85198a7",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "fa44f595-4cbd-477f-9238-816c2a617813"
        },
        "item": {
          "id": "22f2937d-98f7-4080-8f9d-70dfa718e7b2",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "724b0de5-d635-412d-a36d-1233ddda0d68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48fe05f8-6bc4-4812-9429-f92107f24cec",
        "cursor": {
          "ref": "caa4e2c6-d4a9-47a3-bb19-ef0c87814c87",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "d0083801-c870-4782-9f4c-f36adc0e9a66"
        },
        "item": {
          "id": "48fe05f8-6bc4-4812-9429-f92107f24cec",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "0e11d205-84d1-4359-a804-aa75d9d5adc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4878647d-0dbd-4dca-b4a1-300856eaee53",
        "cursor": {
          "ref": "0ba0311c-47f4-4a8d-baf1-079defe1d612",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b3d0ebb1-195c-4a20-a99a-1b5066974e97"
        },
        "item": {
          "id": "4878647d-0dbd-4dca-b4a1-300856eaee53",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "f2330f2e-17db-4d81-a2b8-ea83c42a7e48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39ac2cf2-7fc9-4855-b80c-6cf377acc260",
        "cursor": {
          "ref": "b0beb5e2-1267-4f2a-8472-c4e8d5e1f509",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "23275520-0928-4557-a206-90399ec9a56b"
        },
        "item": {
          "id": "39ac2cf2-7fc9-4855-b80c-6cf377acc260",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "c685f884-2495-42cc-a975-2ffa5cfcaa63",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "8dd9280a-04b6-463d-bfa6-69451bf49438",
        "cursor": {
          "ref": "98887442-6319-4c6a-9f0c-7ecf0a282fa4",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "0f762e16-821d-4ad6-aa44-2ea1c61fc7de"
        },
        "item": {
          "id": "8dd9280a-04b6-463d-bfa6-69451bf49438",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "ec76c81d-550f-43f2-8373-3b02862ffe1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fcdaf59-0061-451b-bc79-279a30465954",
        "cursor": {
          "ref": "08f7891a-a56d-414a-a679-63fb2a17cece",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "927a3ebd-bb95-4c0b-9e86-5e2d3262e052"
        },
        "item": {
          "id": "5fcdaf59-0061-451b-bc79-279a30465954",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "c783f722-35a4-4c4e-8724-51c30395559c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec78902d-331a-431a-b226-6abd52af21d7",
        "cursor": {
          "ref": "3c5607cc-8d1e-45b4-8a04-bbfa8df9ba3b",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "b77239af-3619-47b9-8112-38d06f05e0e0"
        },
        "item": {
          "id": "ec78902d-331a-431a-b226-6abd52af21d7",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "c8651670-221e-41e8-b596-02233783d600",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3114d7c-8432-4461-94ab-f67f19332e6a",
        "cursor": {
          "ref": "0bf6a12d-aebd-4735-a3e6-395639e8bb20",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "90b09331-0a82-4f50-b955-619ff597983d"
        },
        "item": {
          "id": "f3114d7c-8432-4461-94ab-f67f19332e6a",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "f0eeef9f-1fc2-4f6a-8e06-da1c8e1963d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bcc2f7b-c62f-46ee-b607-24b9e76b18c3",
        "cursor": {
          "ref": "dfb68dd2-046f-4e53-bbba-0b1da943fb02",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "44f3200b-5b0b-4c8b-acb6-aff46059a2d4"
        },
        "item": {
          "id": "8bcc2f7b-c62f-46ee-b607-24b9e76b18c3",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "e13dffd2-61a5-4a4b-bf68-8acae47f9dfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0101257e-6b51-4d01-921f-cf8d577b1de3",
        "cursor": {
          "ref": "61e03aaa-1fec-4f52-9674-f45bfa300f3a",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "07027435-f347-488e-a459-c9ffcb998622"
        },
        "item": {
          "id": "0101257e-6b51-4d01-921f-cf8d577b1de3",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "584cdfd4-f764-46f6-8f65-9383b4a0674c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad03c1d5-b670-48ae-b838-386e2afbe181",
        "cursor": {
          "ref": "bd57c6c6-3791-45f7-a556-ffadc227367f",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "c56b8626-e6c5-4fd3-a975-60387c6431b7"
        },
        "item": {
          "id": "ad03c1d5-b670-48ae-b838-386e2afbe181",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "45b79aab-5a97-45a5-b777-5edde05b0b62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0680ec75-67a7-443d-9036-f257f77e5d8f",
        "cursor": {
          "ref": "435fd13d-3d8c-4443-a0c4-fa35aefcb6e8",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "2d0476fd-b1b0-4448-bc90-6e143963b071"
        },
        "item": {
          "id": "0680ec75-67a7-443d-9036-f257f77e5d8f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "bbd2df46-6675-4f9d-bfb8-3af3f6fed533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "132042ca-0c67-4e71-a5ca-82949d303886",
        "cursor": {
          "ref": "7b5bc7f6-64f3-421d-951c-df31bc184f73",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "70bcaa7e-bafc-4623-a08a-2dc554220688"
        },
        "item": {
          "id": "132042ca-0c67-4e71-a5ca-82949d303886",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "c8d1ff3a-d316-4d58-b2b2-511083608bcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "469b7cee-1f83-4484-be18-ff145b7e0c3a",
        "cursor": {
          "ref": "72150991-41bd-4049-8fc6-f8be98d30222",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "5b2bdbba-7daa-4fb2-a64c-5a6fbbfb877e"
        },
        "item": {
          "id": "469b7cee-1f83-4484-be18-ff145b7e0c3a",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ac2d5911-7895-40a0-a05b-78b8961a43bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b1919d8-6e07-4f15-af10-8b4a76be9aae",
        "cursor": {
          "ref": "b68c1dd2-1321-4f51-af16-e45561bbd24c",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "a644985e-0772-4754-8e8f-4909d796e7dc"
        },
        "item": {
          "id": "6b1919d8-6e07-4f15-af10-8b4a76be9aae",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "a6f6bb9e-dbc9-4670-9685-cd57ba3d6901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85299c62-afbe-4ed9-9ca1-3140df38c5bf",
        "cursor": {
          "ref": "0f9be0a3-e2a5-451f-8798-05b4f60a3071",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "0d85c663-9769-474d-a2ec-1b2e3e482b5a"
        },
        "item": {
          "id": "85299c62-afbe-4ed9-9ca1-3140df38c5bf",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "11b4b593-0bbd-4efe-9aa6-0c562d5033c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6e940ec-1bec-4861-bf81-80da7df7b111",
        "cursor": {
          "ref": "e4899fa2-48e3-46db-a363-96c68da51a93",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "419ccad7-efbd-4caf-8cb7-e137b474684d"
        },
        "item": {
          "id": "b6e940ec-1bec-4861-bf81-80da7df7b111",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "989bba39-8319-42f9-8d4b-a647e3b78b2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb30cb1a-f496-4332-bef9-4562f34ea403",
        "cursor": {
          "ref": "abf272f9-781c-466b-b2e8-ecf08cb2fb02",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "fa32f94f-3aec-4de6-bf2d-025bab859bb5"
        },
        "item": {
          "id": "eb30cb1a-f496-4332-bef9-4562f34ea403",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "eebde580-3887-457d-b0af-9dfe567262fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a422eb1-84b3-4720-b68e-7d3f688d08fe",
        "cursor": {
          "ref": "6151337d-edd4-4fe8-a731-2cba189fbbff",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "1aad3df0-b3ef-4062-bd94-e513bbcce1f6"
        },
        "item": {
          "id": "3a422eb1-84b3-4720-b68e-7d3f688d08fe",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "10579b22-0237-47ee-a5bd-8a0ee26ca108",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "603fa5ab-e46b-4be0-ab87-2114b2030bc1",
        "cursor": {
          "ref": "e7b1757f-d72b-49ce-ac85-f39455a88ff3",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "4f3c0e41-b817-4e2d-a369-0bb3f3777a5f"
        },
        "item": {
          "id": "603fa5ab-e46b-4be0-ab87-2114b2030bc1",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "c8d2bd5a-52db-45be-8bfd-1b66506997cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eacacfef-e133-423f-8272-35174f941dfb",
        "cursor": {
          "ref": "fc24a169-8dcc-4a57-8778-7fa01f492918",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "e4df843b-6be3-469b-918f-6927e361911e"
        },
        "item": {
          "id": "eacacfef-e133-423f-8272-35174f941dfb",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f776b16c-f255-4074-9eeb-9e978abcdec0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "068084f6-4a7f-4c8e-9284-bdb29de89ade",
        "cursor": {
          "ref": "eb59d52a-237a-43bc-a297-cfe5eff38353",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "9dfc5fa7-1782-4db0-beee-1f148a7c4d3b"
        },
        "item": {
          "id": "068084f6-4a7f-4c8e-9284-bdb29de89ade",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "6b3d7aa2-3ce6-4a54-94e6-2b447bc77a8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4def402-58fb-47eb-a172-d007ec8871bf",
        "cursor": {
          "ref": "7c728d1a-ee5f-4c56-8737-3a50cf898d61",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "3ed8a4da-e98b-47be-8680-d5bda93dcf6a"
        },
        "item": {
          "id": "d4def402-58fb-47eb-a172-d007ec8871bf",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "87ab3f03-0e5f-447f-b769-7ad642e25171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9fbd594-abe8-46c4-959d-421668e5c448",
        "cursor": {
          "ref": "83e19235-146b-4c4c-82e6-fa8ca891b615",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "01b70b3a-ea4d-4fb0-8d03-a98506dc2364"
        },
        "item": {
          "id": "f9fbd594-abe8-46c4-959d-421668e5c448",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "b77a19da-3471-45c7-9d46-3de7c6e3c7da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "745d0c98-43f5-4780-a0cf-02b09afe06c9",
        "cursor": {
          "ref": "7ad04c56-7572-4935-a610-916879953710",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "0476aa16-85c2-407b-8eb4-07bf6613b880"
        },
        "item": {
          "id": "745d0c98-43f5-4780-a0cf-02b09afe06c9",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "9ea43b5a-398a-4d00-b328-978caaf0a609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e79c6155-4272-4173-a788-5bf5fbad4bd5",
        "cursor": {
          "ref": "eb551b42-5f90-4e95-94b7-33b388b0b4b5",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "fe6f3147-7c3f-4dfc-8082-2d25c59a2c34"
        },
        "item": {
          "id": "e79c6155-4272-4173-a788-5bf5fbad4bd5",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "4946ee29-7ab9-4b5b-92ec-0709dbca88ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d85f2f1-a8ca-47e0-925a-a53bbbf00ab4",
        "cursor": {
          "ref": "bdb7302d-4960-41dd-a1c1-02700bc2665c",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "0c162c53-0c69-4b45-a564-202a1b0852e6"
        },
        "item": {
          "id": "1d85f2f1-a8ca-47e0-925a-a53bbbf00ab4",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "6c59e358-d490-4ada-96dd-2969b8a942b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c729181-f00c-4a9c-94be-ecc2ca243133",
        "cursor": {
          "ref": "679d860e-39f4-40c4-bb66-3751b666d95b",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "7f0f4432-1917-4f72-b9fc-1c10226d9fbc"
        },
        "item": {
          "id": "9c729181-f00c-4a9c-94be-ecc2ca243133",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "29ea9e0a-9945-48c3-9482-7d0e6fb37fde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b33e8eb0-1776-49b3-ad17-8929c45c2ac5",
        "cursor": {
          "ref": "f44e3582-6eab-4f34-b188-caed3f36ca70",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "801d649d-4cd1-4c48-836e-60504e92f615"
        },
        "item": {
          "id": "b33e8eb0-1776-49b3-ad17-8929c45c2ac5",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "d87281aa-d895-4f42-a5fe-480ff011ee4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e51ec783-dd77-47c7-86c8-bfd9608373b6",
        "cursor": {
          "ref": "cfe348ea-97a9-4c39-a219-765219ee8c66",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "95fafdab-640e-48c7-bb0b-8ab3b9b1a531"
        },
        "item": {
          "id": "e51ec783-dd77-47c7-86c8-bfd9608373b6",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "35be941f-18f3-4d7b-9f87-f77c3c72f38e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b29f2fd3-503a-4df6-949f-77d97fda5c44",
        "cursor": {
          "ref": "86c93fef-5542-421f-b1ca-97252dcb0117",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "4277576c-27fa-4768-9972-23e20cc84a5a"
        },
        "item": {
          "id": "b29f2fd3-503a-4df6-949f-77d97fda5c44",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "ca1b0a24-f700-4534-8251-6c685b3a09fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "671752ba-19ef-4f5d-a9f4-54021ad30504",
        "cursor": {
          "ref": "0e80ccca-b12c-460a-87c5-b6b84090b457",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "7d1d721b-eb10-46c5-a36f-191805051508"
        },
        "item": {
          "id": "671752ba-19ef-4f5d-a9f4-54021ad30504",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "447061ef-f798-4fd2-80b4-7b7e939e0b86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e06222a9-0f4b-4f48-9fc9-f63678074b0e",
        "cursor": {
          "ref": "305e8ec3-a040-4a9e-9cc1-f447ca6dd547",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "0778cc10-dcc3-4644-9863-5a5dbcb2df0a"
        },
        "item": {
          "id": "e06222a9-0f4b-4f48-9fc9-f63678074b0e",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "b8599d36-a6ee-4dc7-bc61-f3e550fa1e9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79df8384-dd5d-4eb4-ba5b-5de6fc363f6f",
        "cursor": {
          "ref": "a92f51e6-ddeb-4896-bcc3-75bfea52a7a4",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "13e1b47e-397d-484b-a020-fe40b469488c"
        },
        "item": {
          "id": "79df8384-dd5d-4eb4-ba5b-5de6fc363f6f",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "437dc2b6-e982-4e71-be92-17d69f70e291",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "15ae1598-57a5-4a79-ac18-f7b7e2cb0f8e",
        "cursor": {
          "ref": "8011f64a-2b50-423e-941c-6998e8d4f6d2",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "2014e1d8-a2b5-438a-afec-9aec6b9d8d78"
        },
        "item": {
          "id": "15ae1598-57a5-4a79-ac18-f7b7e2cb0f8e",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d0b6e385-0358-4e0b-9a4c-2a1a6e2ad2d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "9c48d943-1da3-437f-ae7a-8488d0495488",
        "cursor": {
          "ref": "0703d666-4816-47da-9362-9fa25b46d6ec",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "9ddc04e0-3c90-44e4-8530-735fbe077458"
        },
        "item": {
          "id": "9c48d943-1da3-437f-ae7a-8488d0495488",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "4db8cad4-f84d-43f3-b7d8-0d1247e8d01c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "1375539b-9914-4d6e-ad5a-c00c664d300e",
        "cursor": {
          "ref": "5d8ff9b6-d43e-49d3-9037-87659f762b5f",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "fcb732b5-bcad-4312-8706-1597940a5dce"
        },
        "item": {
          "id": "1375539b-9914-4d6e-ad5a-c00c664d300e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "91ca298e-ed2b-4e57-b81c-155d3c8cca1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaaae51b-b0b2-487a-b927-bc66f27bd914",
        "cursor": {
          "ref": "755cb777-5f0d-4e00-8b64-73a5148fd600",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "9da97015-b1d1-43e3-b925-2c36f5859ad7"
        },
        "item": {
          "id": "eaaae51b-b0b2-487a-b927-bc66f27bd914",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "a8ff370d-268e-4aa7-83e5-bcde4d6b71f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "b7d08d7c-cf2d-411d-b265-08fcea238df6",
        "cursor": {
          "ref": "49bfca92-1c26-456f-9d6d-1132684c6e15",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "5c96c0e9-5b8b-4b4d-b5cc-da7472c311e8"
        },
        "item": {
          "id": "b7d08d7c-cf2d-411d-b265-08fcea238df6",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "4a1d5e00-a57a-41fb-b138-593288d10acc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1166,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "601ab15b-cbc1-47f4-8a5e-956dc5d18851",
        "cursor": {
          "ref": "ed6f66a5-e33b-4fe6-8c79-bd0e17dab628",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "91ff850f-4c06-47b4-9c0f-f59211c2c641"
        },
        "item": {
          "id": "601ab15b-cbc1-47f4-8a5e-956dc5d18851",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "2e714cec-8059-4efe-9b1f-1f347ec23944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 216,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "eee6dc7a-6812-4676-b875-95effbd55d12",
        "cursor": {
          "ref": "1d1536fb-06bd-4b87-9801-24b70593ceaf",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "88f48a95-835c-48ea-ab38-80eec9ed3831"
        },
        "item": {
          "id": "eee6dc7a-6812-4676-b875-95effbd55d12",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "a419aee4-0ede-4e64-bdfd-f01c6a1ad360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "8d3ed11f-7f63-4338-80d2-944417db0381",
        "cursor": {
          "ref": "eb7543da-f35f-4e97-b481-b27df8a682a6",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "ca30d3d6-dd85-44f2-9bea-c1230c248945"
        },
        "item": {
          "id": "8d3ed11f-7f63-4338-80d2-944417db0381",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "b4c25cf3-6c70-42b6-89c4-357d2c3f1270",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "d6c73172-c5e9-4297-8c21-744eb11ce2e3",
        "cursor": {
          "ref": "0f40ccfb-6855-4aee-b39d-533839e049d8",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "c649053f-8b9d-46e9-9df6-09a01ecd32ab"
        },
        "item": {
          "id": "d6c73172-c5e9-4297-8c21-744eb11ce2e3",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "ea94e851-31b1-4894-9811-519bb262dd89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "f005de4f-0d32-4e7d-a4f0-3df5f98b2aa1",
        "cursor": {
          "ref": "7a1c5266-4ebd-44bb-bd7b-ba962c88e8e7",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "b8cf3689-6b7b-434a-9eda-57d776a20260"
        },
        "item": {
          "id": "f005de4f-0d32-4e7d-a4f0-3df5f98b2aa1",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "931d4133-6cab-4c15-a140-b3a09cda44f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90c02793-4aa2-4104-8250-28e97839f7c8",
        "cursor": {
          "ref": "3caea394-0429-4a01-8112-5afdae028074",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "991f2b5e-8c60-4118-ab27-0e123a3c84ee"
        },
        "item": {
          "id": "90c02793-4aa2-4104-8250-28e97839f7c8",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f417c459-3463-4af9-bd39-9af2ba66f27c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdd1105e-b414-44ae-bd00-00038d62a3f2",
        "cursor": {
          "ref": "d03fda3c-d9af-429d-82b4-1a55d81989f5",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "953f721a-ad6e-4432-899f-2e79411662e0"
        },
        "item": {
          "id": "bdd1105e-b414-44ae-bd00-00038d62a3f2",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "2ef894b2-e696-4c1d-b3ad-dd31c22caa64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "741dae21-aeca-4f1f-82cb-eb6a471126a6",
        "cursor": {
          "ref": "de4159c7-6ef4-4cdf-b2d9-4b7b542f59c4",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "06fcc844-ab74-4252-8a5f-2a24a016d29c"
        },
        "item": {
          "id": "741dae21-aeca-4f1f-82cb-eb6a471126a6",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "71b31605-cac6-4e11-8cfa-b1c7d5715cde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe609edc-0a40-4515-bceb-ee58899c27a6",
        "cursor": {
          "ref": "3e9f2e9e-65db-4f77-ace8-ac36b5c5abc6",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "7be2f76d-c222-4861-a021-7de958caf60f"
        },
        "item": {
          "id": "fe609edc-0a40-4515-bceb-ee58899c27a6",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "2fa87511-bd27-424d-97cd-e6405fb0aeb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "142b2d46-5d13-40ce-a9c2-e12bf878313d",
        "cursor": {
          "ref": "e127ff04-7322-464b-8937-ea1102cec260",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "24f15c8e-50b2-4d3b-92a4-d86e32169ce4"
        },
        "item": {
          "id": "142b2d46-5d13-40ce-a9c2-e12bf878313d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "ed669eb0-4876-46f3-a0ca-1c38d58e2738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6b5e88f-0711-46ec-8e1c-889ad37c8cdd",
        "cursor": {
          "ref": "584a1c92-d394-49bf-a8a2-4b77447f96ea",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "0f31ef23-2582-444b-b177-ce8a0fce9580"
        },
        "item": {
          "id": "c6b5e88f-0711-46ec-8e1c-889ad37c8cdd",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "19350d73-5016-43d4-9936-109d791fde95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc4f9afe-ca24-489f-ae4b-71d88bf18be1",
        "cursor": {
          "ref": "4eca7b9b-35f1-461f-8951-e86279e5239b",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "7eda90ed-9f3d-479d-b393-8540787077b4"
        },
        "item": {
          "id": "dc4f9afe-ca24-489f-ae4b-71d88bf18be1",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "6db1d41c-8a89-4110-a86c-0cb9c59e95b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a503801d-086f-4eec-8d3f-ae7f4bab04ed",
        "cursor": {
          "ref": "d7952f26-6cea-4638-8dd5-a81b9c5e22d2",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "7fb69fc7-8a20-4988-9b56-32fc1126a9f2"
        },
        "item": {
          "id": "a503801d-086f-4eec-8d3f-ae7f4bab04ed",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "e9164957-b33b-4ac6-be6f-f1e39febf4d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c7c73d0-676c-409b-95e0-8e3bd176b90e",
        "cursor": {
          "ref": "8819f436-ae09-4acc-8121-17b20a5afcab",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "f20ce46d-9567-4573-bf82-e3faabc3db57"
        },
        "item": {
          "id": "1c7c73d0-676c-409b-95e0-8e3bd176b90e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "1f7876cf-e330-49bd-bd21-2fe8aea81d49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcc8d55a-4c43-408f-902b-e2ec3de2f96c",
        "cursor": {
          "ref": "936d6573-c5cc-491c-8079-18958e738d4d",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "bc8942e5-6749-4f77-bfe8-d6bfd688fd9a"
        },
        "item": {
          "id": "bcc8d55a-4c43-408f-902b-e2ec3de2f96c",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "e38a04b0-95a7-4bd2-81fc-16f05240addb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa246447-0149-443b-b720-542376519ae4",
        "cursor": {
          "ref": "c7d1a8c5-41f1-4ef5-83e4-8d281db6b83e",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "2f05ce7e-08d2-4214-94f9-21917b074e65"
        },
        "item": {
          "id": "fa246447-0149-443b-b720-542376519ae4",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "190bf4cf-e591-40d3-8085-e7e7edb87d4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94acd0b1-4b07-409a-bc6f-c2f90d94beb8",
        "cursor": {
          "ref": "e316b7ce-d3f5-457f-b3c7-45eeb8d9fee2",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "0d621563-bf5b-45aa-99d2-8c138c673c9d"
        },
        "item": {
          "id": "94acd0b1-4b07-409a-bc6f-c2f90d94beb8",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "87ed07d6-985f-4248-9575-904491a56266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9fc0b7c-210e-437f-b7b4-d528dd66a168",
        "cursor": {
          "ref": "95ab4294-3cdd-4ef5-9742-eac19e9ea5be",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "bfffcaa1-9bec-4d6f-a753-6cb158b214c8"
        },
        "item": {
          "id": "f9fc0b7c-210e-437f-b7b4-d528dd66a168",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "9c259e13-523f-4e7c-9712-94ab0c48bb5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1262,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "6b2f9dba-4154-4349-b1f0-6c1dfa0bc59f",
        "cursor": {
          "ref": "5630fc59-fa19-4233-a620-a220afa2b543",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "321cfa89-862b-45bd-bf1a-44d1f969324f"
        },
        "item": {
          "id": "6b2f9dba-4154-4349-b1f0-6c1dfa0bc59f",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "8e0c6814-1740-4734-85dc-5cbc6090ae4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1336,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "47f69991-4483-417a-8093-67acb9f3e4a3",
        "cursor": {
          "ref": "da8b88cd-5b20-40d7-93f7-17dc5d6b6893",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "8222e218-d34a-4349-9ca1-84da3df90e63"
        },
        "item": {
          "id": "47f69991-4483-417a-8093-67acb9f3e4a3",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "7359f2e9-d4bc-44cf-a7d8-3c26686022be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "23e97f19-a80b-456b-ad68-8c9bb91a0317",
        "cursor": {
          "ref": "b41be6fa-f339-469f-bfe0-0293f7c62f9a",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "6625f1b3-7cb3-4165-aa79-68767059d181"
        },
        "item": {
          "id": "23e97f19-a80b-456b-ad68-8c9bb91a0317",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "c3eb0c54-9b04-4bf2-bfd3-67413c71e23e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 743,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "2d9df099-97a4-47b0-b94e-2b6c2a229e6f",
        "cursor": {
          "ref": "cbbb7322-20bc-4257-b899-9c9585741c18",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "72d6ab24-9d63-4c5a-b939-8fbd720b0c48"
        },
        "item": {
          "id": "2d9df099-97a4-47b0-b94e-2b6c2a229e6f",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "6326a03f-9e4a-45a0-a260-df38420bd9b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "3fd5b3d9-6075-4703-a6cc-c50839f1ff1c",
        "cursor": {
          "ref": "2d20583a-ee81-4892-bcf3-b22b9c28e641",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "fc57a74c-a088-4fee-a24a-09f6506f89b2"
        },
        "item": {
          "id": "3fd5b3d9-6075-4703-a6cc-c50839f1ff1c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "c1ddc349-7509-4282-b10b-b75b41e9eedb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f59485b-d291-4322-86d8-bedfe08f1a8f",
        "cursor": {
          "ref": "a30c16bc-b715-4924-98af-b29bed184409",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "5e1303d1-51c6-4e33-a14b-60cf098e952a"
        },
        "item": {
          "id": "6f59485b-d291-4322-86d8-bedfe08f1a8f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "bea56503-f64e-496a-9f6c-30baae048c10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc4f8acb-cf39-4a7e-86e2-b8648c58ad2e",
        "cursor": {
          "ref": "69886d29-4d79-42f1-86a1-9e59058bbc73",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "33b82d01-7343-4806-92c9-097e9ac281ee"
        },
        "item": {
          "id": "dc4f8acb-cf39-4a7e-86e2-b8648c58ad2e",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "7b72c391-81e5-4ea2-a183-a05445d0de9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8185820e-110f-4e1a-bef2-89d15bb46f2a",
        "cursor": {
          "ref": "8d278c48-3a8c-4765-90ee-0260d4c746a1",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "9a8d65c1-2d7c-4709-9c0e-aa770e66e18b"
        },
        "item": {
          "id": "8185820e-110f-4e1a-bef2-89d15bb46f2a",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "8072a22e-9fc7-4316-87a0-82e462a3fbba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bdc5e27-0c9c-4220-bb0e-6d0b94c4212d",
        "cursor": {
          "ref": "e0a32fc1-ee1c-488c-8d48-88c8965d993b",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "a73a3e20-37db-46b5-8590-db59be248706"
        },
        "item": {
          "id": "5bdc5e27-0c9c-4220-bb0e-6d0b94c4212d",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "28f63679-cede-4cdf-81fd-0731d875c1ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f85b60ff-e510-484b-9dd6-bd15ccf011f7",
        "cursor": {
          "ref": "3bdae7f6-b033-43dd-82dd-cd49a8cbecd0",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "14a8fc06-f95a-4c58-a019-6a4eeee4c096"
        },
        "item": {
          "id": "f85b60ff-e510-484b-9dd6-bd15ccf011f7",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "e4df3f2c-fbd3-4539-a869-3c222fc37f2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74bcaa90-4049-42b1-b4d2-b83044026ce6",
        "cursor": {
          "ref": "1fdc1cc3-7b4f-423f-a619-1a49eedf884f",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "dc7b89e6-0aac-4361-983d-7e03e4e02070"
        },
        "item": {
          "id": "74bcaa90-4049-42b1-b4d2-b83044026ce6",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "c8035a19-fa27-4ca3-810f-ba34f7ff6ed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53b454c4-6205-4e62-86ab-0aded2b483ee",
        "cursor": {
          "ref": "7a364881-99ae-490d-bc80-358d042286cc",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "bdc10f69-0be1-4555-95d7-215673e60c8a"
        },
        "item": {
          "id": "53b454c4-6205-4e62-86ab-0aded2b483ee",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "f1d2c930-321f-4ec5-930a-13ba50e8c0e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecfb2fa8-d0d6-4a6a-9195-2ee9625cca56",
        "cursor": {
          "ref": "e44f5b5d-5333-42da-a28d-266853ed846f",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "32a2d59d-b624-461b-b2dc-6379b803cfac"
        },
        "item": {
          "id": "ecfb2fa8-d0d6-4a6a-9195-2ee9625cca56",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "522ce0ff-e746-4e15-ad68-1367bc106320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "132c028c-2949-4784-ad9e-23bc5e4067d8",
        "cursor": {
          "ref": "ca228ad9-4c1a-4f0c-842a-8daf8f1d9c99",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "313f96eb-f287-4fdf-84d6-26fcc1e37679"
        },
        "item": {
          "id": "132c028c-2949-4784-ad9e-23bc5e4067d8",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "1973c6aa-1251-498a-8312-87fb4d6daf9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8893e1eb-daac-44d0-bfb6-648d4dbd7004",
        "cursor": {
          "ref": "19e9c8f4-4431-452c-9462-2b4e81d47399",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "143c9cb5-1a89-44e9-b95d-b59c5c8c7026"
        },
        "item": {
          "id": "8893e1eb-daac-44d0-bfb6-648d4dbd7004",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "6ba411a6-5b79-4f49-a212-6236d33d262a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9889e66-b42d-486c-ab40-9a47babedb60",
        "cursor": {
          "ref": "caf54d8f-a94a-402f-b29e-018ad9c2ab6c",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "28810129-bcfc-4d99-8fe1-fd2ca0e68dc4"
        },
        "item": {
          "id": "f9889e66-b42d-486c-ab40-9a47babedb60",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "85f4b7a1-0e0c-408f-b6ec-efdcb910f0a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a048e04a-59e8-4e17-8209-1dfe5131a263",
        "cursor": {
          "ref": "03475299-0828-4cf1-bbff-b39c6f8547ed",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "7fe7d3ad-8ddf-4add-8f1d-03105c987436"
        },
        "item": {
          "id": "a048e04a-59e8-4e17-8209-1dfe5131a263",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "3ddf917d-96f2-48fa-879d-d67c3e789610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9b005b5-e96c-4f48-b31f-f8d3905c0cf4",
        "cursor": {
          "ref": "ec401098-0276-4a22-9b26-a1f88cf15c2d",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "47fe49c2-cbb8-4596-b53e-979e54b52a5b"
        },
        "item": {
          "id": "f9b005b5-e96c-4f48-b31f-f8d3905c0cf4",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "fdbd2831-c360-4daa-a393-b3fb7a044658",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18c1831f-1edd-427d-a689-20c34946665f",
        "cursor": {
          "ref": "391c2753-0858-4c6c-bef2-c8b904e8b794",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "05f98d48-c415-4c50-8c6c-856e5985818d"
        },
        "item": {
          "id": "18c1831f-1edd-427d-a689-20c34946665f",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "054683dc-e4ba-46e3-b9cb-fcfe9da86fa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e0cd1d7-f5eb-41f1-8300-f6fafd9f6a23",
        "cursor": {
          "ref": "96d33554-46a4-439d-b1cf-02239d00b048",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "c5b14f38-3c59-4ab3-a3a8-bf7cf32b9211"
        },
        "item": {
          "id": "2e0cd1d7-f5eb-41f1-8300-f6fafd9f6a23",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "31e985f9-6fc1-4fd1-9f2f-7ca7f95c9f85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6735cc3-e23e-4d59-bf36-b6445de42de2",
        "cursor": {
          "ref": "85a79d6d-e492-4043-83bc-379c3ce81ba4",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "550dfe6b-059c-425d-b845-6dbe4a0019cb"
        },
        "item": {
          "id": "f6735cc3-e23e-4d59-bf36-b6445de42de2",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "7c382b0e-2d53-4d49-a532-5055ca064456",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b399e22-b773-4c5d-9cfb-0f2233a40d5e",
        "cursor": {
          "ref": "c2a1bc68-95d9-44ad-bf5b-41673c758566",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "c77abfeb-834a-461a-b760-f559832945a0"
        },
        "item": {
          "id": "7b399e22-b773-4c5d-9cfb-0f2233a40d5e",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "97883df1-f375-472f-a2f4-186dd80ed478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2423016b-294c-4030-863d-47f9c1c125b4",
        "cursor": {
          "ref": "d6d59070-045d-44f0-a779-584ca6ccccf5",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "a5163547-fc74-45db-8502-b8e816cbd606"
        },
        "item": {
          "id": "2423016b-294c-4030-863d-47f9c1c125b4",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "490870aa-2a53-40a8-b20e-eb7f9f8c64c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb401295-bde3-4088-80bf-f170cd896dd2",
        "cursor": {
          "ref": "533b69c2-6695-40f3-9d70-237b818a0439",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "8e8816ed-b764-499f-8542-da55f670b86e"
        },
        "item": {
          "id": "cb401295-bde3-4088-80bf-f170cd896dd2",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "42c2d73a-c22a-4d44-a6e2-ef0805e97ef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51b19a60-ec30-46d9-adde-e94abe40d82b",
        "cursor": {
          "ref": "4c0db836-7208-4299-b891-1a01a8a7d3f9",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "852da263-15c6-4dcf-8478-d9cbe27289ee"
        },
        "item": {
          "id": "51b19a60-ec30-46d9-adde-e94abe40d82b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "89565aab-da50-48fb-a606-63c226b5d1fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3894aaa0-c33b-40c8-a0a0-52b401ef2332",
        "cursor": {
          "ref": "d17374c8-619c-42cd-ac3b-b3a9222efefb",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "343ccb5d-71db-4a75-8ccf-fb2048dc9145"
        },
        "item": {
          "id": "3894aaa0-c33b-40c8-a0a0-52b401ef2332",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "e1387a5b-2607-4670-8634-8447d3bc6c17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03d12bcb-eb02-49ef-a59f-ff8c677f2fb5",
        "cursor": {
          "ref": "2d29d046-6844-410f-84b3-1913e1937ed7",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "a4679209-87ca-4a8c-a4bf-abd83a2e9db8"
        },
        "item": {
          "id": "03d12bcb-eb02-49ef-a59f-ff8c677f2fb5",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "3c76c670-5d0e-43ce-b34e-8270df1c5ebd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d6341c3-7dca-4dbf-9137-05ef5199bc82",
        "cursor": {
          "ref": "00b7ac7e-8730-4dcd-ad2e-1f483cda3944",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "e2a7a216-12f7-4113-bacc-9fd45568b1d6"
        },
        "item": {
          "id": "6d6341c3-7dca-4dbf-9137-05ef5199bc82",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "1526b7c8-02ab-4e65-9b1b-d6ba8854a753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12b1bb77-b489-4543-ab1d-a3ae9f778039",
        "cursor": {
          "ref": "5753ca3f-0c3f-4d21-8d46-eacb616ecfe7",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "e3daeb5d-dbe1-42f6-bcd6-9f559b02e7fa"
        },
        "item": {
          "id": "12b1bb77-b489-4543-ab1d-a3ae9f778039",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "1450187f-82be-4051-9585-f1c175107d3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a628740d-cca7-4859-be90-25fef4fc3796",
        "cursor": {
          "ref": "6cc9e2a2-5c06-4732-88e3-abe1653c4515",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "dc963834-a304-414b-abaf-d6b9c70ecb5f"
        },
        "item": {
          "id": "a628740d-cca7-4859-be90-25fef4fc3796",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "5bc6fcbf-eab2-4de9-a374-d376e60778a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76a74376-41f6-4975-8ddf-28e764ca0737",
        "cursor": {
          "ref": "3b9f3cee-6cce-4cc6-bd21-8ad4a673d63b",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "4febe9af-eef8-4f60-92d3-6a59b33c25f8"
        },
        "item": {
          "id": "76a74376-41f6-4975-8ddf-28e764ca0737",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "73aaa6ce-ed6b-4b2b-9077-7f9914fd0b2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4fc93f1-d924-4ce5-8ae1-d26425566947",
        "cursor": {
          "ref": "b54bab25-db8f-477c-a6ce-281756541512",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "336cc178-7470-4a59-8a4c-3a1c46f0647f"
        },
        "item": {
          "id": "b4fc93f1-d924-4ce5-8ae1-d26425566947",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "3492eba3-845a-4de5-afa5-dfcb37a012bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8d817e6-f59a-4b09-a0b7-d34936050efe",
        "cursor": {
          "ref": "51936006-8a72-41e5-be65-cb815e28a5da",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "51094237-9625-4479-bcd1-751db16ae1dd"
        },
        "item": {
          "id": "f8d817e6-f59a-4b09-a0b7-d34936050efe",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "b5d281db-d650-4bba-bd0f-c5574ae20b0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f412022-927e-4757-b548-b8315bc38700",
        "cursor": {
          "ref": "3ab522f8-8b82-47d8-98f5-925b45c1074d",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "5e21ca94-0615-4644-b607-bc2aa911b114"
        },
        "item": {
          "id": "5f412022-927e-4757-b548-b8315bc38700",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "afeec759-93fb-4af4-b2f5-1007678ed1e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7213623a-6d67-4f7e-8e02-6113d765299f",
        "cursor": {
          "ref": "798e5595-74be-41ec-a09b-0c204476f94c",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "92f89f46-a9e0-40c8-8996-6e727f0fbf7d"
        },
        "item": {
          "id": "7213623a-6d67-4f7e-8e02-6113d765299f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "4ccc8409-3043-46e5-8056-7fc075ba65da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87a02442-4e86-4f17-99ea-97e894fbb856",
        "cursor": {
          "ref": "2a3a37a6-2a0f-4253-bed7-e576d5bfc6ad",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "16988355-9795-473d-aba6-a22423a96655"
        },
        "item": {
          "id": "87a02442-4e86-4f17-99ea-97e894fbb856",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "0014e9c0-ed0b-4c88-969a-221507a146b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "902c7cb0-30ef-433b-b5d4-8c5b2c2ef1ed",
        "cursor": {
          "ref": "91c49197-bfaa-4890-abf7-edeb903d4c9c",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "7255ffd7-b572-4c31-a9d5-21f9cf7d09c8"
        },
        "item": {
          "id": "902c7cb0-30ef-433b-b5d4-8c5b2c2ef1ed",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "9f52cb88-ba64-4763-a02e-d9c81e6e9777",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e665e629-d124-4f1e-aef8-c1e2be003f27",
        "cursor": {
          "ref": "f5fcfdfa-c2e3-4ebd-83c5-f7f0e8f9fa1f",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "b07950f4-616a-4dc1-9cec-90ce5d2b0226"
        },
        "item": {
          "id": "e665e629-d124-4f1e-aef8-c1e2be003f27",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "64d67398-3a63-4ceb-80dd-5bd4218481e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55a407ae-78e9-40fb-9d6e-c409f82b834e",
        "cursor": {
          "ref": "feb0678c-7981-41af-9eb5-1120fa332031",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "e43b0611-af7d-43e3-b307-4d53f3acb944"
        },
        "item": {
          "id": "55a407ae-78e9-40fb-9d6e-c409f82b834e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "f2bad82c-b14f-4adc-b7c9-e56913423db4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaafd666-a7cb-447b-a080-084087ddfe1f",
        "cursor": {
          "ref": "dfce2fab-0f0d-4fad-8bbc-8e06687c2b6a",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "5bbfc162-ddc6-4113-9d35-ac4f6f91431c"
        },
        "item": {
          "id": "aaafd666-a7cb-447b-a080-084087ddfe1f",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "7192b427-0374-45ba-9d69-19c30f7c3396",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "19384c8f-4e73-4ced-8614-9bc05f0adc64",
        "cursor": {
          "ref": "226166c5-7ebb-4861-80fc-28a2b2755344",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "c452bb2e-892f-415c-b8ae-15baf2465174"
        },
        "item": {
          "id": "19384c8f-4e73-4ced-8614-9bc05f0adc64",
          "name": "credentials_verify"
        },
        "response": {
          "id": "7c0db618-c818-4a26-a6cc-32f35e7d56b8",
          "status": "OK",
          "code": 200,
          "responseTime": 913,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "42e4921d-c067-41e4-a15d-295e7bb622b1",
        "cursor": {
          "ref": "e3f22a0f-3bcd-4045-8b3c-6f2f07301fb8",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "b86e5429-5683-4cac-8822-d7416fdc41b3"
        },
        "item": {
          "id": "42e4921d-c067-41e4-a15d-295e7bb622b1",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "fb28ac9d-deda-4d2c-bfbd-8cf7f8bf3c48",
          "status": "OK",
          "code": 200,
          "responseTime": 736,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa46fc0d-ed10-44e5-98d8-1ae618a8022a",
        "cursor": {
          "ref": "f5efa833-386e-42f2-b7dc-54b55a9109e0",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "1ca801ee-198f-47f7-8af9-40e511edcb05"
        },
        "item": {
          "id": "fa46fc0d-ed10-44e5-98d8-1ae618a8022a",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "fa46fc0d-ed10-44e5-98d8-1ae618a8022a",
        "cursor": {
          "ref": "f5efa833-386e-42f2-b7dc-54b55a9109e0",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "1ca801ee-198f-47f7-8af9-40e511edcb05"
        },
        "item": {
          "id": "fa46fc0d-ed10-44e5-98d8-1ae618a8022a",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "9d393418-101f-44bb-8960-3362e3316ba8",
        "cursor": {
          "ref": "250b89bf-22b7-4149-a18d-d38866325f2d",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "a920b679-f7e4-42e6-9f5d-80130229af50"
        },
        "item": {
          "id": "9d393418-101f-44bb-8960-3362e3316ba8",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:281)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "d107dee8-1a00-4f7a-8998-e87dec774c44",
        "cursor": {
          "ref": "9a2443d4-4a53-413b-82fd-078a637422a6",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "332e641c-344c-4639-8ee7-20d26c4fe007"
        },
        "item": {
          "id": "d107dee8-1a00-4f7a-8998-e87dec774c44",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:282)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      }
    ]
  }
}