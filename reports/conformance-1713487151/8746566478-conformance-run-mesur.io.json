{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "68ab47ef-d8bc-42a4-9f74-7679027e5f57",
        "name": "Clear Cache",
        "item": [
          {
            "id": "cad417df-e0d2-413e-8a5a-5605187fceb8",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8dcf483a-b921-48ed-a553-2f159f823889",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "035384a0-fa4b-4b27-bd01-011588b54f29"
                }
              }
            ]
          },
          {
            "id": "3b34d0d6-b462-439c-aa1b-b0f154252f9c",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5cb1a658-729f-482a-a460-af26ab7126ae",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5fc8604b-cfde-4b17-ad6b-657778f69667"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "2291fbf3-e980-4684-acd4-8e96c25e168a",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "9fd23cfb-f45f-4d4f-8617-f0ab84ff22ba",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4980af81-0066-4498-b883-86591749c2ae",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "140454d2-e302-4e22-a8c4-7883d16da010",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "809fa9c1-e3fa-4bc8-b448-460b8ab7737c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "929a3887-1bef-439f-ad89-acae9e852d5a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b7e20241-85d9-40fc-8532-d06d9d792b34"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d14cc06f-70b1-4a4b-88c6-f785fb34f468",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5d7325a2-ec79-48a1-8d1f-a20f5ee7813f"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "11ecc3f2-be11-44e4-a3da-ee47b889afa7",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "d4fd75f8-8c89-44f0-b401-52154c23347d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cb4fe734-4d8c-40ec-add2-f55a45149bc6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3e04a082-27c1-4689-98d5-ac81ea7cee83"
            }
          }
        ]
      },
      {
        "id": "40ffc6d6-ef6f-41c9-96da-566921358604",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "921f5901-20bf-4432-b6ff-e1d0e9e511c7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "53399838-fd0d-4765-afd9-35def45e6cf5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8d9eb298-ce82-4a3c-a891-ee3269140148",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e22dfd9-b07a-4585-b41b-bfdda0b0ae70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "64ff0525-1f2c-42c9-961b-5ec168fded6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a316faf-3fcc-42e3-8369-779a4391582c",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "754c1d2a-11f0-45d8-b9fa-95e372f7dbef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "108eefe9-0de4-46d7-9825-627927451ba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6592c5ba-a7a5-42df-91b7-67d61f6bbf42",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "383591d8-e7e1-4916-ae5a-bba5069ad9bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1227e568-4886-40b7-969e-efe523d0b4de"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "045c7477-8d9a-4156-b322-baf12c9ca49b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8dad3f35-02da-4345-a6c8-7f3a07b5e01f",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d2f933-d2d1-4291-924c-3920502107ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "01532e77-df91-4d34-9250-c461e6af706d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "658e8a0d-b54e-412e-a38c-090b3ca81941",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae2b01f2-4eed-4d63-a5a2-717707114448"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "20f6cb10-3bfd-4440-be85-152a3593ea6a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "07ff3804-fd18-4fb9-b663-4e122e0af4bf",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f6c902a3-bea8-460b-8569-7dc47367a23a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "bfd40c85-ace1-4183-a3b9-44357e4ca08e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4d4199fa-2e6a-41dc-95fe-c9bd3042e486",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "d79c466c-129e-4aa1-ab9e-d05b4666cd83"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "25f810f1-8feb-48f9-9389-492da9627317",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1fff769e-b043-44fe-b521-a7340c1c05d6"
            }
          }
        ]
      },
      {
        "id": "d0eb9206-2181-4043-bc91-1d9a5a79c4db",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "0fe704b0-8249-4396-8470-fc548d0081da",
            "name": "Negative Testing",
            "item": [
              {
                "id": "55754101-0b70-4ec3-a8e6-3d1327957cf2",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "3bcad746-035a-46f2-bed3-3e4fbb7b65df",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45325258-176b-43da-b1f0-0cdf5ccf156b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a829f229-17f2-4f5f-b512-cdeda6f278ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ea16a05-cf87-4d00-b9bc-a49651e28c21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4d0cc027-5b6a-47eb-a0ca-c8e817f940a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27231eb0-58e6-4090-9b15-a54e35c8ec70",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90aafc47-bd4c-4643-ad8f-968334990f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94dc686e-30c8-4171-88cd-303f60cb1d66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcbc1c2a-a280-4b2b-a0e3-6e6d984eac13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e8f700ad-4e52-41d6-9092-b3a54030adc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65b008f4-d409-4149-816e-d309d8c6fd7c",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba8e1ace-08af-404d-a574-de95ca00b407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bae9650-1dbe-4128-9a3c-13c6576ed5bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56fa349f-7e27-427d-802c-aa6918451f74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cbea27a9-12da-4913-bd27-bd879a528c11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91a8a3df-025e-4e3d-9b10-dcade3cecdcf",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55a72b56-672a-43df-b57d-0529dd1ec892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63c89a1d-c95d-48f9-9fec-0fbec400224c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae394853-781e-44df-bf61-2f0c33ce8178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d38af6e2-79fb-4272-81b9-a216dde418d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2f5b618-a194-4604-beae-f0915fb95de3",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b60cfd-43c9-4baa-83b9-22bd0a160acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a338c54-5138-4ef8-92e5-8163e9ed5e3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4398ce4-5e4c-4441-a79d-2a8cbd2e7f6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "615d449a-1838-42f4-90c6-8e4aff1c62c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dad5fe3-15b1-4d77-9ebb-397a64166959",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2875e421-2a11-4973-b647-6809a11e0911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7d94153-ed80-4df9-b512-e4e2935b4f7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bed2fd63-8379-487d-8e67-7006e984f6bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "86dbf71c-053a-42db-8dc7-7a6538a9d14e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cb6025f-bf4a-46b8-93a1-04f24ed16879",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41d928a3-f639-4d8e-be79-68dc9bc0cb9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7786a66d-27c5-40d2-82b9-6b3e193e48a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "856841dd-f127-4f1f-9468-985149524ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2944ff0c-75f2-4468-a41e-369209eaedd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0400e623-bc5f-4dc7-b816-414848c76966",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff16d33c-184d-45a2-ada8-8887e3decf74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "297b2c76-9916-490a-935f-7d18767deee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4fa640c-00e2-4768-9837-328733a9cec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f1a5b31-ab17-4659-b566-045c8902cc22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6314b990-89c2-47cd-9c82-5217dc00e52c",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd5645d7-800d-4fc9-bbdb-a2d4f01c30cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db68303c-d973-484a-bf11-ce3db445dee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c06bc93-5f3b-44ba-b1ce-b7e210a459bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bb92166c-6b85-4106-9396-8b657b04a857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f378c501-60e5-4f41-b8e8-cb60b435df0a",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dcdb5fe-9f7a-4d87-adad-86655d014097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d68b5be8-00ff-4c9a-9671-27222dae3940"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1d3e634-4f3d-4cfc-8b7e-8bb8e953c102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b2d3b4a-4146-4a16-9673-27664400be2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6415c09e-6115-4c1c-9d1a-fc0acc87fb4a",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d42d8c6-de29-4c99-bc50-425fb7b2577e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a32d5b74-a07d-47f8-9ac9-417a0a753892"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97920f8b-b84e-41ea-9c1e-0c2f2e9311eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c9d99b28-de3f-4875-9a15-e68348dcda99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa442673-404e-41b9-b9fa-407621f721f5",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bfdee32-5ba5-46e3-8415-2802a9a8cdb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18b2a8ca-af67-40c0-8dbb-bc79cda36b86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49b7f64c-162f-4fc6-b041-6a3413e78b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7a433c98-297e-4316-894e-bc0d7fa43819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ee390e-dfdd-4856-bd01-7976bfe17014",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cd54c4e-8a3d-48df-a61d-99d2fe4df526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8996409f-356e-4223-94fd-6d83d5180954"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "150d55f6-0230-4778-8509-7edcffcd6d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d85e6960-4892-4395-bf21-4f33c589b87f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b381d711-1671-46e2-a5ab-2e0c5c37c9da",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6892d18-18dc-4591-9a8a-8255ae2c5a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d437152-d3a3-443e-8857-d10e4f8866bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1296929-0c54-432a-bbd5-baaa57a74582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2d826b6d-a550-4073-ac36-db7ca748e74a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9393bcb5-0a05-42be-98f3-ff85b2961608",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04898c5c-ad62-4e3a-8bc8-a848384d3860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53085ae7-79b8-4602-b32a-04708b661f98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "024c3191-4361-4b99-ab71-7c0c213696ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e68e424-62d5-4047-9896-ef61aa9568cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef0c073f-b34a-4154-a9f0-995df7621ca5",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb094a80-c69a-4ea2-b110-dfc5526b4c8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2fe3d6b-847c-4527-b0a7-f77f2d61c1fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c07726d0-9366-4473-94dc-d8596c089872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7be348e2-d1c9-4071-99e4-c70d7174a504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5240d296-72c3-42ca-a0ef-b96fb53c06ea",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c3f34b7-fbc4-47a8-8097-99e9b68a4df0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68eda836-e537-4cbb-93d2-92ae3c3d1183"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2699d2ef-12c0-41c1-a70a-dde0abda8325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0c7c3b51-d200-4d58-ab57-aaa58b40f5c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db56c083-3079-4dc1-906e-186aefd94bbe",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bd0e59e-48d3-436c-b436-8a9278b687cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13502172-b989-4159-a80b-c8d1105af067"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e50402d-261d-42f3-90e7-1e6697f4c8a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb30dd2a-fdf3-417e-abd6-207277c51ae8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67e901a7-6778-4a56-a296-b8177bdc72d3",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "049936c5-b3b2-4a6a-ab7c-7e7f01768f42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e4bc279-e586-4d17-b396-e90d693e3f68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae040b60-c1ac-4a94-979b-6b1c87eac56f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "30f30103-be2a-48ad-8e4c-66ec8a3a8b48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "904a665b-4066-46b9-aae2-ac30ebd58099",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ef9740c-0fcc-4b66-bd62-0f333134a8cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1114e65a-4f03-4312-91e3-60e1e1eb211a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1df9c8ee-7326-41c1-b148-f44379d55710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3bb02979-6fbf-4734-8697-cfe26f3b0d25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f59d0a4b-511a-4313-afeb-816f72c23d7a",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fd59f9c-8359-4656-ab5a-a623a1da38cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "447af48e-2009-4eec-b736-c861f325a6b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18f97540-e798-4091-bba2-c3e93809584e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "813960a3-57ee-4518-af03-a5d6e65c7800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "545f1242-f43c-43cb-805c-3cfa82522919",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5387e1d2-4bbf-4bb0-a6d0-91c3d5a52bcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44f389fc-6325-467e-aae1-843180b5e5aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd8b9189-addd-44e1-8e74-1455e5148bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f19421e6-4c18-4c5a-9929-69402ee7b511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e8987e6-a8dc-4a0d-bd42-d96fae13494b",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86b17b4e-5959-4728-83ce-1100d009272b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0cbc29d-7b9e-401f-a42e-ee169eeee59f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f16c164-82bf-4c12-8227-fb5be1f93a72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "51cc860b-7890-44fc-9248-343f3aa33942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a195372-70e9-4de6-a378-7ca4adb4b143",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a41f043-52a8-4119-9e6c-201d2b7b7955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a3925dc-3b5b-4546-bf06-3e5236cf1fc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48c55db3-8dfd-4c5b-bb94-d583844a25c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbf3f342-e03a-4120-96aa-d1bded5c8781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7410537e-d4d0-45e1-997b-6464bc54a404",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "474fd248-e2cf-4b47-b86b-dc3eecbdf10f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84d74ba5-be71-4065-be12-4f3ca72f2d2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cccd6ddd-b59c-484b-a699-7d549547d6bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "065d6618-ce6f-40f0-a6b8-d61e8d7996a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13c39c64-3c55-4525-a170-f3edb432a969",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50b716dd-3cb9-4c9e-92b2-316cdc722c95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8cc4ca0-3e91-42f1-9161-6984920d2066"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e0446f0-9fda-4f27-8219-e1027b861301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "91827a49-938b-4960-82b4-810219df9861"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45018439-dba5-416e-847d-459c91d4eea9",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f412921-ba72-4b59-a3d1-04fc8a9863f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29667a01-c8d8-469d-a298-8a9cccd48a9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f0f11a-2edf-44f1-9a6e-ff293ca0a968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "32872d95-32cb-4361-9422-b5cc2e7a99cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9499e50f-f4fa-4bcf-b96e-90b39b8c8444",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df356b87-d851-4247-9d0c-5bf031a17d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa9bd1ee-2e76-4b95-b9fd-bfe069285cc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b1d0e81-3c71-46e7-9869-5642ac353c79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc97d551-a819-4962-921f-f2b5ce3c7799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ad06dc6-e422-4746-82cc-d2e3ce5f517c",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0fb2a2f-85ef-41aa-830c-c620980389bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44452c0d-c87e-4e04-9b86-d2ad2889505d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "359f9307-e368-4540-a008-f031e88aae96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e820e91-7da9-42fa-86f2-fc9b1fd91379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10d736ef-ffec-4206-ba4d-a2efff5a93c1",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08494709-01a7-4484-aa80-5a2d5b6c8c2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e23af1bc-e5a7-4f93-8afa-aa9fbfbf5745"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88765bfc-8308-4bb9-8b34-23ba953f7f3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae81c488-f003-4e60-8ef5-f3f856cf25e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1213f650-b7ff-4c6f-b879-e753aa45256c",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89a67f1b-c806-4296-af52-81dcefebe1cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad20216c-6662-43dd-b7c3-413b37c3ec65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4e4cf5c-2c04-4a10-af88-ad6c6c222f76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ac826cd-2728-46f1-ad74-ee858b603b6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "916e20ad-2c15-4020-a6a6-6398ecb6e183",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85fce501-b069-4ed5-b8d2-3eb6c9085f34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d68201f7-b50d-4bf4-b863-6727eff7c73e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "719d39ce-7c40-4388-beca-36148a4ae760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "90b92bf0-2c3e-49cc-9684-6d1333200a46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c09788ea-af50-4ea3-86c8-6ee42ffdaf02",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "937de729-1a56-44d5-ba5d-ded64479ae86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff7ecf44-ad3a-4ba4-97d6-c4731e87678a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02608a0a-5384-49aa-ad08-9c30ab39bbf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b646ded5-6b73-445a-b3a8-861e01ddbd79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f21bdea9-a277-414d-8642-1da1e29a4577",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db6daeed-d891-46e8-a80e-0a954a6589e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c085bab1-a3a9-4832-960c-03a66cacf7ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b39663d-b179-486a-91bb-34cf21116270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1106898-b508-45a5-b2b3-3c87a3033b36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ea7c1d3-828a-4652-95e3-8b48a1b2f29f",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f75a4333-b514-4f02-a66a-8421d9de87f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16c91c33-4250-4e53-8ebb-251717428c49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e7d0303-fba7-492c-9f5a-ed44fa05216f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "a186d181-b547-430e-a802-96b979e19cfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f5a984d-3f59-4b26-8ea4-f35158ee7beb",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d52fb84-9d85-4887-a2bf-30cbedbb628e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c5143bbe-3057-4b07-b4eb-f69dc6e1ac77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "354afae0-5726-40cc-aee7-679276da83e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "34a75df0-44b8-45de-8e4b-0a4a452793c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4ed5328-6c57-4837-82f2-4f00b49b0be3",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ffa78f2-1607-4557-878f-8710efafc997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2437e8a3-1484-4300-9ee4-96b6cf7fe466"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64355435-b560-4b4a-a0a1-3f237b04a543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b75b3c6e-6fa7-4b29-be32-2157286f2e41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c14e084-be8b-4fc2-862d-a7ce14a87d41",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2021a14d-81e8-4b6d-a386-98d76ae4d761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28e527c6-9441-4633-acda-0c8ee51c1a1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "044f296a-0c56-4a38-8042-c050e146c243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "eaa15a7b-e556-4c7f-8b82-882357962392"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93aa0b01-c8b4-4fc1-8768-3c750829b586",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe1030e5-0cae-40c1-acf2-c5a8d9a5b091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f217db3f-7a22-4717-a12a-e4e45ad717f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e9446ff-cb9d-4990-b678-ef48422abea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e8554ce-8e2c-425f-b25d-1ef513c75157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84ef331c-53af-44f5-8f2f-9575f3661ab4",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc4f4170-645b-400d-a895-fcf361077c5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "455b1170-946e-46a1-bc04-e238e94882d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbb47004-d43b-4714-9adf-f69a8ea55acb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "91628e5f-32ee-4445-9d7f-d753fbb0cbc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb3944c1-7bb4-4426-a505-d565127eda07",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a82bc7e9-759d-429f-9494-664eaf957588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95e74741-7cee-4afe-b7b1-12a570ca00a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d92d050-147e-4ff3-97f6-47392aae345d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8054dda-40ed-4628-a5a2-a59cf8a36fcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1af2f4d-c642-4453-ab1d-86c85c8d7638",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec38e422-9f9f-4b93-8825-e8f7da3193a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cae38c93-3602-4b89-8e8c-eaf88c6cb95e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "443e65dc-2d9b-4f0f-9a0e-a0c331cfead7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "e78bf5d0-ec07-4a34-94dd-76e02478491d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24ac96cf-f8e0-4017-ad3c-ed0c9875a2da",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba22609e-9193-4011-a8bc-a4d86761394e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0d07621-b00f-490b-98c8-8698d6aedee1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b424f17f-89e6-49c1-8405-5218478d6854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc35d77c-6004-4b39-b6d3-57df8eefb2f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14548904-3696-4f77-8eb2-3e02454fd266",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffbf2b7d-656e-4fc4-b162-baf43281ce66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3772a03c-13e1-4993-844f-64dd9dba1e5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e34f242-cd90-46d1-a55d-ce7c069f0835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "136a12db-a712-4d27-8a5b-e996a389de0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5966cb45-ccd8-4140-8e51-1def6b18e58f",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95dafe83-c750-475c-81d4-6330432cbb20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "928743b2-eeb8-445c-9840-d41fb45d317e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fd774a8-2dc7-48e7-86dd-60543a8de5f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b69a456b-1145-462f-aa22-a62f1e47c62c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b949ab4-b3b4-417b-8ca8-bddd7660fa96",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4ff7af4-ad2a-4a41-b84a-694c3636db50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5db723f-e2b5-4663-9954-b1129a234ccc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6081018a-7291-4a50-bed0-9bb781187e10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "85a9099a-f6e4-4e55-9f93-59ffc8842b6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb658e70-a14f-4324-ad5d-95d43ccd958d",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdc5d371-5c75-42db-8d7b-c2f93713ef52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "093344ca-f8d2-4510-9f04-91dd8d65fced"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d0a62a2-a0d1-47bf-ac4a-e20ee8bbc66c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f105ccdf-0367-4ac9-a97d-bf125f51f216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55bba3d9-a62c-4e1f-9b37-c7b3790bbbe3",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5690874-9c81-4d1b-930a-16a6e7c8ed52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a786da19-53fe-41eb-a491-616c3da4783b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7235d03-7f46-4c50-917a-f1c6b04b5c5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "410c739e-f729-4a8d-a63e-eb5928c53244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dfd24d9-7dad-4d14-87fa-e49faf7f990e",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c56a3925-7c2c-42e7-958a-b2a78403eeaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b6f49a9-900a-44b6-b1f3-bb91b8840982"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bd2ed83-cb7a-40ae-b022-59f904458731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d554cc82-b97e-40aa-b4f8-7745823feb20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49803023-0c96-45a7-94d3-28a7fac12d68",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a94e8abb-b560-42c8-9c23-5de6ae7b5cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "468a054a-222b-46f3-87d6-e8222397e8c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba32a191-7d26-46b3-9192-a47c1719f5e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5091122e-4f7e-4e6a-9b1d-bc791e1d2d18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "342b718a-f6b7-4542-9e4a-3651f9ccfd3a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f0c6b15-55bb-4961-a380-4d08eb82517a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49645047-2994-49cd-b03e-dba80abf73a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de639761-0ee1-49c5-8b83-bc3980d2b51c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "07a2b299-2956-4dfc-94db-4f0df8cb6f71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcb49c08-9c44-4121-a4da-904ce5215e6e",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4288563f-c010-430e-9541-0441af282200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d9c31a5-d2d6-4b63-b70f-96675bd9a3de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd39bd43-3513-46b6-8cc7-8cafecd86672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "17f418c5-3396-45f4-8522-8087b0f4bc22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3af6bd9-1e8a-433e-b217-e276e126de1f",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ef36dac-172d-4427-9a5d-fdb4e180dbd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89e653c8-7304-4f84-861c-1c24612a9f51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12e8a44c-e1b7-496e-8c54-b04f1c98abbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c4a960c-196f-4603-9236-ba76eccd0227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32ba73b3-43d8-4cae-9783-45f871d945da",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f2f0727-8a83-466e-927c-921e597eb05e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7714b60-5918-4c26-8e43-2a2e47add444"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1796b10a-c18a-4306-8bf1-938df6795d83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "99704775-7d72-4a6d-8c65-944c5fcfe453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4442ca0f-87b3-4365-90f0-5928e43d350c",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8711f282-cf4f-4137-b288-bb3e7c98a73a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88acd0d9-0e53-4fe1-90cd-314c334cbf6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "524e5203-3396-48db-8216-ef7d7c65be07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc1bfad2-47a2-4432-9a7f-8ba0dd1adb79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2253df3-269c-4e08-93a5-4cfa797fb007",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "435319b8-a419-4eb2-88c5-91e533225ba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e6a9b90-3d36-4f39-921d-18f6194ced67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "410af640-70b4-49d4-99fe-cbbf60a3fc6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5922d253-0352-4f32-a218-01cc7792eeac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c975b052-2ded-4b30-be01-428eee92581c",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "331697ad-d892-4436-b618-3981a773d205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1aace3b5-d58c-41f3-ab47-6f5d7986b2c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3206e2b6-571c-4648-b57b-0a03025f1dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "23ec5129-ced7-4d9a-b088-6bf0890945e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8982c305-98e1-480b-948f-fc4bd1fe047b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90282f7b-b1dd-494e-ae53-7283442a5425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e9486d2-1def-4290-b30a-0f60beb63765"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54085a46-7da6-4474-b6a5-43642a69470c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6fe1f1f7-f050-4997-87bf-a310ee55fd04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6c9d163-dca6-4223-8192-06a10d85d479",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bca7f38-c71a-4418-ad33-a168d1f4b722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b7c2e12-73bb-44fd-b9be-cbf7d5493a4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99cf37ae-4118-4dd2-ba82-5b7c842f449a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "796f7ad6-1a3a-42f4-85cc-be7ae4f24b7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c548770-116a-4ea4-a278-2321dd3720d8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46c96bae-0246-4d8c-862a-b7a3bbcb87a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3fb8359-a981-4711-a63f-3728a19fc3ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be472aec-e549-427b-baab-edcb9a3ce3a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "268473e3-65e1-49fc-a624-6c71f826269d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0fc9670-7b44-4f50-a204-432c914362c0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f78ee841-2470-468a-8843-910aa206caf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f67f2ba0-ce47-42f1-a45b-b3e72bb183ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04803b3b-a7ef-4b02-8cb7-eb56b8113291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "aeca12c5-bba4-4da8-99a4-cb2983aa4e6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d91ea1f2-ca3f-4206-b2c4-3fceff08ca02",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1949818-4a6e-4990-8551-a9299ce8f330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f7377d4-e3e1-4b5d-a1b1-ef7b8435d951"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2142a22d-aa8b-46a1-80cb-13e83d9d840d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f00b816-c1f5-4d26-8789-720033ca97ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e9ff316-db8b-4321-a43a-1662133011c2",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bd4adf4-6648-47d6-a383-a0b760e79350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47018d71-8374-4ed7-9d57-65f44483e885"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23bc6fed-d7f3-40d3-b573-c6873fd230ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "efbb1c0f-e70b-4b26-8697-237d319de700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2ae077a-1ed9-4788-bbf9-6a590f66c5da",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b48cc7c8-a458-448d-838b-a13f2559219e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc36ef5c-cada-4b37-a8df-b39fd844a2df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68d3b46c-6477-4a88-9f86-e85ff821116b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e923e7d-9cb8-4f83-9752-c69b3b0475cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b655179-3cef-4e2f-ab63-5c98cbbdbb44",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d70efadf-fd8f-4ac8-824d-01aeedf7e1d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08a35d85-2f0d-4c79-93f8-bd5a3646edc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d45049af-6af4-4d6b-bf6c-ada5baa43d9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "239d2613-30c1-47cf-ac31-0e40351998e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31aefb90-9fc9-4fa1-9af3-96fb51c44be5",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e2627d6-eb2f-4644-9da0-bd0537ca9c1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b67be8f3-ece2-4742-82da-2dce7bc36e3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3324a9a3-7531-4f92-86a4-e10316f11994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ab131b8-faec-46cd-84bf-0e2d2bed72d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72bdfde1-edd3-48f7-b156-1899ba901807",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c55604c-8e61-4d3d-9619-9a369ec1fb46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af9e8049-6f56-44ec-ad53-f929fe7540f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd08db9a-2e0f-44da-a3ff-dad08220f420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "715657f1-e7c1-4d89-abbb-aba8cb696a86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95ce6baf-ff9b-408d-92aa-eeff89b267bc",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec091c22-dcac-4a7d-a675-244fefba9cda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30487525-db3f-4c41-a0dd-ac1546af04ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aecba7d-490e-4fdc-9809-5c687a5c1e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b52e43ab-dfbe-4635-8549-e3dfe081ea45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32423981-26a9-4160-a2d8-873e691f7549",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf812af0-ad2a-4866-bc73-a84bd6e2213d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92b373a6-6867-4d5f-a2b2-603da2b0cd1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eddedac-2783-47ba-ad5d-d674e1944ab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "08a79a0c-bfcb-4079-88f8-32c334cffe7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4966cd0b-8784-4aad-ab65-ebb8a7d0b5c3",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c406515d-4019-440c-82cb-b8829c8d437c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e2b31b6-6a2c-4e63-86ef-e542e27fea2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f714d8-63c2-4841-850c-aba5b6b9210e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c31b268-fd12-4bee-8abd-4d6928d3ca6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6447d9c-6baa-4513-bb1a-874e32f8c2e0",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "103eea3b-8e0e-4bde-a895-26c8498ab302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d34ea65-2c3c-48b7-9bef-aad6f538aecf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d4fc9e7-3065-4577-9718-966f0d8b6e0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee178b36-09cc-46ad-8d58-05d521e2f2d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d25a057c-1ab6-49b4-af6c-daa4061900d7",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92b977e2-7ab6-4887-9140-5bab5f8226ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75cbc00c-7d3a-41bf-bc4d-3b3f10a67903"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b59f224-12c6-4614-b6f9-346109ef9097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c16f3eb6-ab63-41a3-ac8b-2789b4dc7a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fb7650d-5699-4a3d-8cb5-9495d38d37d5",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2643911-d6e5-42bf-b417-87e36329b8d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d630937-2367-48a2-8556-1dc01605ab34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9aa0b6e-172b-45e3-bff7-8889bbfc412b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "070fb360-51a1-40fc-832f-29cd51fef746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe460cf1-ab7c-4a3d-bbe8-bb14f10974d8",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "878521df-ec32-4b99-89f3-b7b197e57ee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04043111-edd6-4fca-9c3b-102363496463"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc80309c-7de7-4fa4-b4dd-18942f5f31c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f92e924a-8f01-4669-9578-17d1ffb591a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc477d1-fdce-454b-9232-1cd42b34f73d",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afb334bf-c554-490c-a272-e216c3d8cd57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9ba4e2f-255f-4cca-91ed-9d9c53d72378"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "587eeb3d-4c1f-486c-921e-e6276a00a993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8aa4fa7-12df-4f8a-9f94-9299d5feb87e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0151ed4b-828e-4628-b472-e886af4838d7",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25f44154-dd15-43eb-9fcc-6717d30cb9ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f20c314-ed5e-4822-bfdb-640b1dae7096"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "838849d3-f923-49df-b6f8-d3d6aad5f233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb09abf8-c819-4219-b89e-5ad91c047837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "172221d7-7f84-4f43-ad7a-5daafa224dad",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e3f1a60-c141-4b7c-9176-e5300d1b3f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16a944ac-564b-4a7c-ae76-bf38f1500a30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47a7eb00-ef4f-405a-b33f-3d634acf21de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c80ef044-513d-4ca3-b299-cbb37fcf5c88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9bdee51-6a70-4b5f-b7ce-5e869ebdedff",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0456cb2a-9ac0-4f70-9159-4fa07de5138e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "814732b0-9036-43c5-af7b-525995833c72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4ac749d-ee45-4a58-aa6c-edca379f46fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2da9525d-4f4e-4523-85d5-d9b4083f0ade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca220e0c-670d-47bf-bde8-cd706cc78bf1",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba6e78c1-f422-4f74-997c-93dfcaf35c6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d40bc17-544e-4862-95ca-ec718a1e28cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ddb4503-622c-4252-afea-e080380eb4ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2c02cdc-c1ec-4155-8532-93b18fb576ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57d4d9f5-7dd7-4a15-81d4-b0ab00af2b55",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c66879d8-de2b-436f-b88b-1500af7240b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "137515b6-f14f-486b-85f4-2c97012a3a22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4538e1b9-a270-4623-9bcb-726ec38bfb7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b10de671-ae18-44e1-8045-778cf7631831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e05bedb-8ec6-46fe-990a-a6e8cc4e5bb2",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afd2e9dd-0ee4-4798-a47d-8e1658b3bc54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a3bc106-6ee8-4a1f-afdb-8acb15756814"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bcd4dab-884d-4f7d-ad06-e5c264e20b47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3604e30f-da32-426e-986e-df8396857320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32314fe4-c144-4d2f-9bd1-b1d9852b819b",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d317232f-e1dc-451d-92a9-b6affdbd7f5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b1904ca-6925-425b-a827-d15ed4f99b7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab5f6450-f72a-4abb-87b2-8eb9c7505115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2325bb6-8a0b-48d0-a9bf-6049af62ece7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0955abe4-ee29-4ac4-8f9d-d82f95173dec",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d70cd524-3a2c-4007-9159-20ab60f91734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "289abfb5-90e2-400d-a982-d37e4c321b4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "159e3645-0ff0-4f02-a133-22d13862d89d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "45c28f22-a508-4b0e-a634-433d9e1d4df8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4508107a-6702-461a-946b-0108dccf6913",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "084c1249-f79b-4d19-83c9-d8161899138f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30452890-9e14-4d6b-b41e-3ec5c756c4a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f151fcb-0f3b-4783-9c57-56dbd4f0d70d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "35449960-14b8-42be-9b38-40b78f65a29f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1d5582d-e64b-4385-890e-abb8aae2d262",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abacd56e-431b-4514-b3fa-6de571b53c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "151902de-4eed-4e64-880c-f5ffd4ac179a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20b3779b-f85c-4ff8-babb-1e2eb3106d5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b60a841d-449e-46fb-bd38-3c4a75e6b6ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b8f188a-e9eb-41c7-9b8d-6aa71af6c296",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4a06bdd-2bcf-4616-8441-2145d6ca4e19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f22e11e-b1b9-463b-b1fe-bd0e3fd748e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1701d1b-1b66-419e-bb4f-ca57b904304b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6267abeb-9e87-4fa1-97e7-4466d6d51fe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf4e4fc5-252a-40df-85f0-f9530bacfd95",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d5f53dd-13fb-4989-bb9d-8e9b8f4b05a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63a268eb-46d2-43bc-bc5a-10b8a6b0ae3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bcaaaa0-c6ca-4094-b2c2-674b278a14a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "67a23a96-35b8-4f18-b9ed-57cab0727565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27aa526e-cd33-4ba0-929d-36821668c341",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c31b655-0be2-40d3-8e91-da52c67263d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb826c50-f063-4873-aa5a-47d19ef611cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc59628f-25fe-4a13-ba34-5faadecb5df1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "23f7b4f0-329b-4dc2-a8e8-4be3e2cdb043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51ecc717-a47d-49d7-9dac-0a48903111fd",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9867ed7-17dc-49b7-98cb-df0323ccc1c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6154baf-3be2-47a0-b553-88e1ae68f6ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2092fb9-6abd-4240-80e4-a3ab76bea70a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d1cbee4c-3733-4f63-a79a-6bb2b8704165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37127eaf-c058-4140-8060-948652ca8d45",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79e41fff-3657-4c5a-9d59-036c91b58b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97a86cff-1b5d-4947-812f-03dfaacd6497"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a441de7-3135-4c81-bb2f-aec0f56089e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d13cff90-1de5-4cfe-83aa-ff2864cdc716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07c350e2-5486-4456-b695-43af571083e0",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d0a0489-fcfe-4a2d-96c6-bb28ad6d6b61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "203860be-3ec0-4bce-a493-def06391e457"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d5b235-c087-4e48-bc69-1d6ac8e2bb79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4f464db-3446-4e7e-b32a-d7ca4173de9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13dad270-e212-4401-87ba-902ad7c400d3",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f1927c5-39f2-4c42-a393-c83ba2a70f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e001974f-8918-4ec3-abc6-df9b2c1787a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93107166-40f6-4570-b8fd-ba11fe91370e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "2272cacf-0e80-4587-a16c-8cbd1fd55895"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "36e22708-6e7f-41ac-a6ef-418042a36298",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "97a0eac0-d54d-40cc-b340-8f5687036a12",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8bf23ad-b1dd-4b2a-881c-9ca971daba81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9d342e6a-5233-4be9-8b47-87cb6040f036"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6997ed5f-ed90-4468-b2db-453665f5630e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6939a10d-de0c-4169-bf26-ed69644469d5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9722c01b-8528-4331-855a-a8caec58abf8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "26a56f9f-cfa7-4607-9a5d-534157311490"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "845ac44a-653b-4cc5-bd0a-829f1bff2a47",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "28d8279f-4a0a-420e-a412-de66222900ec"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1c4a77f0-a4f2-499f-8bf8-e6cc161a0ac3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9c5b0416-ee4c-4a74-9d29-bfc0b9218c9b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5d3be469-1137-4c83-a810-82c8a209611b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e7dcc8b7-db01-4a42-adcb-2440c34ee55c"
                }
              }
            ]
          },
          {
            "id": "06339637-1aca-47f4-b761-a45632dacd80",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1e6aaaee-843e-452a-a998-16fb5aa1da91",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "c9ff91e0-9b6e-473e-8c62-cef6a397c140",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "394592fa-c022-4be4-be11-eeadef372985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "6e34955b-47df-4dce-aff5-f5ffaa51a2d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "586ac63d-27a8-4007-ba0a-a96d30741767",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "604f0b1c-f6d7-47d2-948a-6d27fcd1b511"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "04656b05-9980-420d-bc69-70751c4ae2b3",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5469e8a4-8934-4efd-b776-2cb6bb7fc1b1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ee6d3552-fcf0-4782-b1f3-0cec6a2fc843"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e5176770-cca5-42fe-8e7a-166eab46cdc6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "67b9ce5a-a018-459b-8b31-4b5d591f09c2"
                    }
                  }
                ]
              },
              {
                "id": "e53cc67c-b0dc-46d0-8024-2c803a078a0c",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a06bda4-adf8-4e44-932d-745486e338c7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2f276e94-f782-4b37-b032-1b41d552d227"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ee01fe18-3651-45b7-8a11-c73a0fcd66b8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "92b2dd4b-386a-4322-85ae-6587f6b70458"
                    }
                  }
                ]
              },
              {
                "id": "c6917fef-9682-4b78-ad18-3d26bda1ea87",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3a1a8d2c-d87a-4f37-9e09-653371f81837",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e1ac109d-1df7-4d3e-8413-6747d4c61ab3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f55a78bd-713c-4162-8ca4-245634ff393c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "52288451-7c92-4c03-a009-2a3cd9082780"
                    }
                  }
                ]
              },
              {
                "id": "877f58f3-d552-4692-b055-f5cad973a9be",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e6d8ba03-b27d-4fb3-a7d3-01bd2770045b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "29b5caf4-12dd-47ae-b077-ff76d662c4d4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f10031ff-81fd-4661-9987-e1cbc3cf14c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "87e1c6ae-7dbb-40a8-a400-db0c905e78bf"
                    }
                  }
                ]
              },
              {
                "id": "fb624c19-244d-472a-8485-872c7ee14902",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7c3571be-7e2e-4521-b753-e30f0c1fe37d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e87d8f52-b017-4dbe-800b-9824d4f1cef7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd523f50-4bc6-4b70-8d80-7b284ee50f49",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "50e64c1c-8409-471a-95b6-8b5d437bc963"
                    }
                  }
                ]
              },
              {
                "id": "2bee1858-a1a5-496d-8d7e-59fd2fcaac69",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b53b7f91-1f5b-4db5-ba4d-b7403c8c1cf2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f361d0be-b7f4-4a39-91fb-ea5890664b2e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5fda6a06-3eda-4049-89a9-ca47f83c3431",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8cbec2cf-47af-4e07-b0e7-338a11471e42"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a9dc03e8-d352-4323-a0e1-800854905a46",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c2034006-f798-48bf-a5c6-acdffd41184a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c08bcaae-e4ea-4815-a488-cf21116cb881",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d9791467-7aab-46db-a74e-f60ee7a76041"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "301d4dd4-af06-478c-9103-37f81fc5704c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "03c0845e-5f7e-490e-8ea7-94ebc2e65c4b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d6d148e1-3e15-418c-bcfb-9586d63b31b3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a33066aa-c3b0-49ae-9d3e-bcf233fec424"
            }
          }
        ]
      },
      {
        "id": "2624699d-40e3-4ba9-ba7b-f9870cf2bdba",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "0ead32ec-497f-4a99-a2a8-95ff73a42e5b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3078b0b3-7432-4573-a4b4-5b16ff1606fa",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "db380adf-564d-4d39-9333-efe1b2060dc9",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbfc4aba-ad90-42e2-80c3-1fbd02ce3a9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdd62924-1473-46e0-81d8-cecb3cd3d13e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a173222-80a9-4c8c-b993-49c0c48a124a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8cff812-f89f-4974-96b5-492371fe85aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaab215c-bcc6-44e9-be19-eabf3ddbb932",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ce660fa-8bd9-4c4b-9814-e0386bdec1b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fad4c433-c3b5-433c-89e5-0ec69d3dea83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a57b8e8-40b9-4475-bfc9-7e0261f9b853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e5ab971-116f-496a-8fb1-de3bd40a138a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a34fd02b-a9f3-4500-98b5-ca40d2728e9f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1336788a-0438-4eb5-bc25-14462306c936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcdf2eb2-946d-415e-86c3-e2d2db70ff5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50908cb0-808c-42ae-a73e-e74f2d337218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d731a65-c075-4ec1-b6a8-37278782a32a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52bdb0c1-1d7a-4897-b9ea-009f734a2134",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be8d02b5-a6ab-42ca-af73-5bd557079c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cba5704f-25d0-405a-8c9f-285e181736cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca2819cd-7769-484e-bdfa-3feaeaaed852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "35431e8b-f397-4816-b401-843c9d94e620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddc48223-bb1f-4670-9631-0e5ed098e704",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05ccaded-82a4-452c-96bf-754b086579ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ca9afa8-8536-445f-952c-c8e6e1495129"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "865e461d-4f73-4152-a228-d561c86cd496",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0492dd3-8493-4004-9f50-42430a8956d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24ddd90d-ea30-4c8a-b33b-131767a27dde",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2d1671b-faf3-4e22-aaa8-39f88ff96e4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e8e0da6-0810-41a8-bb8d-381deea6e20b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cfe7b5c-3ea7-4306-9ddf-e7e34c415d51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e500707d-95b4-4533-b37e-aad2e2b15bc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64669dd7-f4f4-45c4-b300-6b36525af63d",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76410865-f002-4d3c-ba24-60bca78df0f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47f09186-87ea-448c-9cc1-c14df91ede8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfb14569-8672-4181-8038-f5f609528a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a18b005-8df8-4e48-8f64-445272a6eb7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10026ab6-4e18-421b-9ce8-9eb2e27431d9",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee7551b7-2a72-4cf1-9591-8552a2c51895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02198e62-c321-4860-8cef-e51c7a1d5eee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "340f1085-33b6-42f4-8724-e937d52e609a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e96ebb98-ca1a-4c33-b9d3-9e3cc5df043b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85916502-47eb-4dc8-a546-8981d04d8b6a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8b462e3-31fa-4a98-989c-849b1c3a26e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccad140b-ef51-40d8-9db2-9ac960fe980e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00d9dcd8-a078-4efd-bb00-728ce92e32f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "db73c6f8-c07d-44e2-a473-34384086a2e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26321a14-38b3-46bd-8c26-47702ca5f912",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e4f05b4-024d-41f9-be01-1bd0e7444c21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4a2e781-9601-4bef-a871-e771ba364866"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc1d8c13-db78-49b9-8293-07edffad7b76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "94f2bf8c-dbf7-4072-893d-4606ec165a59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1d70394-652e-4eb3-8c53-5f8562358f8a",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d384eb3-8b30-4c00-8985-001fba96e232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38c78133-25d6-41f8-a8a8-9a0092f9282b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bcb655c-4555-4d8c-aa41-c1f21066aa7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "5fac2b4c-c7a3-4fef-9919-6337ec9b5f29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30aaecb9-844a-4852-acd6-e157838dab0d",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f18e8a8c-c98a-4b0b-bbac-4989a3aef5f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f1ddce8-d22a-462a-827f-f9e7a09f385e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8515fbc9-9693-4242-9872-b686aec187c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "df95f8da-8161-455b-b554-5fbe944bf7a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae187310-27c8-4413-9af1-0bb2ed05b7fe",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5b21946-8d4f-413d-a25b-d917f8d15e16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae98de46-0183-49ca-9f1c-61b1230f0ebb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04028a99-7be1-416c-9492-a953965daf52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "220fd069-94ec-4d5d-85c8-4dff0b9a54f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12265f06-6f5b-453f-96ab-c852f3a27925",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b011d5a-a9dc-4231-bced-e3186b39d67b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bb6b4c0-e4cc-4444-acbd-44b3295c38f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36cf8717-ebd5-463e-b7d1-d186fb85ded5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "99567f91-b974-42d3-ae04-f692b86a9452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccef4e67-ce97-4dbf-96a0-81d3ac5b79ac",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbb6a840-a911-48fb-9b11-c892015541d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "063fd013-7d87-4166-afc4-5a9e82c497a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a781ddb-28da-42f9-9ee7-14bd7c18b089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb010bd2-2243-4f47-ae9b-da604ac34cc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e51cc373-75c5-489e-b6c5-e949ec0dfcb0",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3dc4fd6-47cb-4e71-ba85-2df333f200c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dba5719-c8ee-4cf2-a91c-118e4066c360"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66ef66e2-d1f4-4ec7-8117-053f2641ab37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "edfea5e7-526a-4dd3-a8bb-61ddb49dc2a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba0a4c30-6648-459f-a3bb-07f501b30aa9",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a1e8f0e-4aac-4338-bc83-482c8d1178bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6983f5d3-0c1f-47a5-96aa-23a1aeacd462"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d06a70ea-e05a-49b3-8ce9-7efad853b21f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa068ac3-8ba4-4b9e-ae55-b6226f49f558"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31e39c2d-70ff-47f9-a328-734ac9e554cb",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7afad382-14cb-4e90-bf87-54ac00d26660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08ddbb81-0db8-4d10-9af8-d78232ebdb7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e4deaf5-d7bb-4990-af99-80605dd1e0ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6814e9c4-60a1-42a8-a329-47cbed46ab0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d205dd65-3b3c-4ecd-9535-838b8e96d942",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8659907-3221-4565-a149-c693a3685eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39662bb7-6201-4461-9a8e-30eb1002a166"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d532dc5d-59ad-4fbb-8179-a7cf372a612a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55c9c2ed-ece1-4871-bce0-60fe9988bb69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8e79c39-415c-490e-9d8b-44e3945326b8",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "939c26f7-1ace-4941-8edf-fdf8e8e71470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91a8d013-dcfb-49b7-9041-dd07330b835d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b5df5a6-89fa-4391-8942-c9995ee348db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "00220aa0-fc40-4753-ad71-c788e5066e8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4029aa2-92bc-45f1-878c-970bab9be712",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf83bd6-7c95-4191-aefb-9735b2d1971a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dc015c1-330f-485a-970e-c3918acad3ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb7a72fa-741f-467d-8f4e-f957bb0752f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f276181f-d276-4c1d-99bd-a3bcd4703f69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e717a63d-b56f-444b-ae69-adbebaf248fe",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07138532-897a-4b10-a98e-38d443ce52bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c1ecd4d-087c-448a-b31a-6b5304d4425b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c035ccb-721d-4baf-8a24-cb5977d6ba0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "94edc934-b1c4-4838-87e4-2a25fd6c1380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad6c6a99-c0f1-45de-892c-cf03ab84adc5",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e9309a2-5f6d-413a-aa2f-9222c1fc1b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c75793e-1968-4f08-888d-e47bed10d91c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7b9ab3d-c624-48d1-b244-218babca5407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ababd217-171e-4864-bd74-64d7eef9183f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "049a81fe-8121-4e35-a5e7-b6a4c9b2cd07",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63fbc744-65b9-4065-ae30-1d9212167825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a055fb2-5698-4c3d-8c0e-8afcc54444fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4f8f245-b501-4ae8-94e7-d31e889bdcc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b29dd741-4493-43a2-a804-793ac10e6f6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8a7e4c5-a228-4e7f-bd76-07d181fc1923",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "797ee5c4-42b7-46de-b117-318501356359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc168a91-fc43-48bb-a740-4184602e2504"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8927ad0-a4ef-499c-bdac-ba0d30428c84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "94c69001-120a-4dc2-9d62-c7ce4dda84f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec6ce0a9-3c5d-40c9-96f5-5182c7f5058d",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "308f2db7-0acc-46f1-918d-d76f7c2b1454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d730472-9cad-4f10-95ed-1750647bcc82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d24d202-beed-4ede-811f-063370df0aa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d2a5f27-c1a1-4ac4-af0a-fe9030ce51f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50222485-7c82-4676-8a52-7dc3eb89264b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ddbf3db-1095-48c2-96af-dd5b61a0e107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c69d3c10-fb9b-41d8-a9c3-dec53711e77d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c89ea7dc-af3f-45ab-9b84-4dcf02e3f6ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3f0972f-74e1-4b9b-96fb-761190b13c2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41ead6bf-1374-4237-806a-5cace8a2efd9",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "137a7c40-bb05-4342-8cf5-7601730fcb2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1975273f-d94b-428a-a474-b86acdcba561"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6fe88a0-4042-4528-bbc3-c67fd7c4c92e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "37845883-1001-4973-9e96-7e1b809a8849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "890b274c-3926-4564-955d-767f525b90b8",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b752cdd6-66ef-436c-ac08-89cb59242e57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "429f0c48-ec3d-4450-bef0-f81bdccb81f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4fd1ecf-c4b6-400a-b5ed-9bd4060c627b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "03f2ff3d-b3ee-482d-a03e-ef3785dc14e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f61a7260-e8f0-4c0e-91a9-cc69a703999d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d386f95-2714-44eb-aef6-f5180f83b95b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f85c2d8-1951-4011-84c9-6555ebc593db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cab8ac2d-1039-4b78-8ae4-a67ff47db5f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d23a0f7a-79d3-4e4f-86ac-b5c0223cba27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6717256-a52e-4bfd-a9c4-58998a09907e",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "088ea7b7-8420-44fd-b1c4-df16e5a67d3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02c8e632-5a3f-492a-81a0-3b79412d1309"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bce5665-3d18-42b3-8d52-6b7808f0182f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46435d05-a857-48c6-997d-eaad0a845e6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "333d0eed-f165-40fa-887e-50dd0c196992",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa488d8c-bbd8-4c80-b4c6-020c062fb673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5af732b1-bc27-4db2-9bd6-2bb2d188d5a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bf8d4d0-84a5-4401-871d-49c9980b69aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d371095-5b9f-490d-9d81-35b238bd73c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb05d859-31b8-48a6-8b2f-d66e6242ad14",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b5995b8-228a-4a78-b7be-4474f27ec610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e48a1ad4-0e0d-46df-849b-80ab08b63577"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f77884d1-7325-4085-8cad-92938ab2a9f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a26e473-4b5d-4d95-a2b5-e6c2e1396099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0e0da41-5cc7-43d6-b109-5c0120699552",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6df755b5-c836-4fe3-81a6-8b3f6889b863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bec2274-ee93-4440-b534-79fc8cd6d28f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e0a8dc3-bd3f-4df0-8306-0d3acc807b64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de23566c-25d1-426e-8785-6ea146cd2931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dcbb585-b109-4216-85cb-8b2da6392705",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f73335c-07bd-4742-9561-04bc7b778f95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b751bba2-fefe-4fb4-b20c-75a91506d652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6934fcc-af76-4b4a-91b2-536fb7112d6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "35475569-2427-4451-9df1-dbe8ffe67fce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fad578b5-4286-44df-94a0-969f330d5d55",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d116e77-bd75-49a5-a183-dde19c586fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aa8aa23-ec22-4127-88a9-0273b6c01718"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ce4d4de-295d-4b08-b63a-a5ff23434afa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f660f459-f9dd-4524-a019-9afd9aafd2b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fd33efd-e9c6-4b8c-88b4-6be05ee89497",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87162838-18ac-44ed-b052-ed97bda3e4d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6f80ba1-175a-4360-8bd3-0e0ed3972920"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e80f4aa-9f97-4e02-ab5e-8b4b72418df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38dd08df-8a3b-422a-9c37-f22f5aa95a99"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7e7523ed-3600-41c4-935a-e2247d2d1f14",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "21d452ad-b1d3-4498-a691-d37ce77991f2",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35363284-7ea4-4bed-b720-1f0c56f85343",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "66209f04-11ea-4b3d-9339-3d72c913571b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "317b2403-854d-4118-9339-f8d86868a834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "35a8c53f-0d5c-46df-9713-66467bf5fda8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cfed01dc-fd9f-424a-9927-57358da5e7fb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cdc63b5b-defb-43bf-a65d-478e2a8a1d51"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "477d6187-bcb7-45d8-98a3-93280642575f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b6b927a7-119e-40fe-8c4c-c621b6c04896"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6a222ea7-8bce-43dc-98df-9f7f03b332eb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "75df4f1a-0cdb-49d5-ac2a-ad91231decc3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2a3505ea-f15d-47aa-90b9-4630d277c775",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7abf1de0-165a-46c4-a669-917147efc207"
            }
          }
        ]
      },
      {
        "id": "5979ce38-ae2b-42a9-a4f4-e64b9419ad58",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "0831bd1e-55d7-4331-b44f-4d33b2e05de1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a633dd22-5759-4027-8b42-f901c41923ab",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "145fab44-439d-4ab7-996a-341f5d561180",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee89f50-f13e-4dbe-8e5f-16fd8088baf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ced7faa0-a04a-4f6f-ae71-1f0bf0f3dd2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c1dfce8-32d9-4110-8bd8-8d5ba658274b",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68dcf7ea-85bf-4c9b-8b89-20c5891990a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27c4a9c9-6d58-4b61-a4d1-267a3cdc66c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8af0d9f3-2f42-48ee-bc79-49ca1d7bbde2",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5f55316-647e-4632-a413-175325e47ad9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37ab7c3b-28f9-418a-b517-9e8aace3fe3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42f13b66-d94f-4a50-9c62-fd8cd3de62c1",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99f5ea26-4e14-465d-bc26-240526585716",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbceed7f-8e84-4e91-bf17-f546e7059458"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66b3073f-12d6-450c-8f3c-da742adee625",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b62554d-f359-4fe6-99c0-ee714a9d7abe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df5d1885-d776-498d-84f9-413d57215161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7cd8306-9811-4464-aee5-48d76afd2239",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a2cc225-ae31-42f5-9a0e-5156329d1ff9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "839fa629-95b3-4a6e-935d-845fee11892f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61838d44-8230-4040-b721-982135b1fece",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b17abaf-399d-4b91-b7b2-187771b7689b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2e598a3-4cd3-4a6d-96f7-0fdac2b58dc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4ed0cac-05bd-466d-813a-61ea5052715b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9ebd75d-82d4-4f71-a05b-44ce342343fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a01a3bf-5631-41fd-9083-d08e44500afa",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4c49687-bea2-498b-92a9-2bb9f5ac7a3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e3ad269-b4c9-47f1-9571-725491ca9601"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f967542-cf28-4c68-911b-624eff77657f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ee5b09d-a7ac-402c-901a-4a36e27dedad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efe1658a-c91b-4df8-8a1a-aefc55804101",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abfe367c-fc83-446b-94ba-fe948e642a65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf2ce577-7a3a-41c5-a6c4-042a1a38a8a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e257bf2a-397b-4cd4-bff1-e41d730028a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46bc8605-b30b-4416-a6da-68d608733f78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "257711ac-196d-483d-a5f1-2112c7e2ad5e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0f59276-8c9f-48f1-ba73-1d8f961b1a9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4f59b23-e895-4b15-9f22-a5663de878a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5245566b-bcab-4dd5-8739-b76c2b9278b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cf71452-2ecb-49d9-8fce-8a64e3232a9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7ae0216-9124-46a5-9bdb-f46e5ca1bf82",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26bcbf8c-b661-4c6d-8aff-67534556290a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19897e20-961f-4328-8350-8ce1fc31f250"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53318aa7-1a39-4054-a2bf-40277ff0e291",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4011a805-78db-4963-a92e-c5cd702a93d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87951501-dc2b-4950-85a5-af97bdf12a5e",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f8b8070-2a37-4e67-831e-366deffed35a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7812501-3285-4fda-9d66-79a40e11e3e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ed0d993-1b5e-4568-9e47-84e42a2a2321",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "190f13c9-f513-4d07-b6ef-abd9d445095e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d93304fc-b306-4e20-adca-77023c416f88",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b723768e-6b41-408b-8145-afec4a8fc14d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "527e0497-2ccd-4161-b136-89982f619c00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37a75805-b428-4234-a80b-6d41e3552f89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b0024a9-3a21-4fce-9b92-982c12e2ef42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67b67814-7142-4821-a387-489b12cf700b",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f71d695-e529-4ddb-baad-c73af7fc655e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5414aa3f-3d71-490e-8e05-27291d5ea2b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a16decb-d8a2-4a00-aaf0-f385742c01c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89270db7-256a-40de-9266-36bc7c32b082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afe4a9a8-31cf-4609-9e89-c4b0ae213436",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "184c281d-f39c-40d6-8d9f-ff7813bfe53d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74b0ce6f-61e6-4a3f-97bc-4ccab128d5bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9e618df-433f-44c1-bc12-59878e81def9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37fae29c-7625-4e9a-b2bf-39b93263798a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6af88278-2b81-409c-be56-5485fb9f04fe",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d017518-b045-4fcd-a4ee-69ddb4bfc1da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c390f959-7845-436d-92cc-2e89f2ebb579"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6853421-a099-4f6c-ab32-ffed7fd5252d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4806618d-e18c-4e43-a3f0-07de0524753e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f626cc7-98ae-4d28-80ef-f659fdd39a6e",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4499b344-f026-4c87-adb0-b4081d8ce59a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3cac5b0-72fc-4e27-884d-6fdae15d4a1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff0b9937-82e3-46e3-b71a-e8357c907e5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bfb1ed7-4af1-4175-8066-aa81a6eb2d4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f5b6dd5-63c8-45cb-9ac6-3152933ad838",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "623ef54d-d42d-4d72-9147-982755b4968c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f929cbcc-e55d-44a6-b0b4-84950e890050"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93e2d9dd-566e-4392-865e-abe1c269a2e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bedcf8d2-98c7-4848-a9f0-9ca0f0524118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7c64213-6e6c-441f-a410-2b2308c4e82a",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35e54f64-5e14-4f6a-b67c-71af5470db9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45d0e77a-4047-4b21-b148-03ed002fcb54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f94ae4e7-0fe2-46da-be03-ca63ac9fa68f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bca39f9-199c-4fae-9404-5c2ca8d6e56f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db7725ed-f14a-4925-949d-f4f4886915b0",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea08d070-1123-4a3d-b495-7634646eb1c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c49c03d-578b-4199-80ae-89e5a0eab67c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ea9b54d-9135-42e6-957e-c0395490118e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "497de8c0-589e-4df2-a205-dc613890f21c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edfbeb9e-961e-4c76-be9a-4d9426d4b445",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a72e4ec-3484-4679-b2f6-cf0447f69fc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f25c2f8-126c-4f81-96f6-69e283964386"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbf969ee-c183-42e9-bb79-be2bb5df9e02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a12a191-2c50-4233-b5fa-ee43a06873bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8c71756-9f85-4aa3-9cd2-1f9a936d3e46",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beb866d5-2e10-4b81-9e77-f476f73b036a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab456772-ed75-41db-aaa1-fcc52d0f939e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85c7a277-3bc4-4da1-b79e-191b5f8c1e7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "220ac42a-3624-4ee6-aa2a-52cb96c75505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a84cd48-0349-43b8-a86b-de1e14872074",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63b2fcab-1ebe-4a9f-bd0b-c4b03c822812",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75b20432-d7c3-42f6-b4c3-99e5080e1ee5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09042dce-7513-4e1e-845e-1eadfb239855",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5d053a8-b48f-4efb-9095-66574a4cb76b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43e8470b-fe24-4ce6-9ba1-9b1c5c07ce65",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddb41ef9-6987-4797-a776-d358ccd8eed4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fce31a24-b7ba-479f-8596-5caf5a916ee2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a20a759-7faa-4090-ad95-2dada15bcc73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee187de2-6663-4880-bbed-d12cde5dc2c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5833ebfa-0acc-4a07-a05e-c31ed229d159",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aafad650-68be-45f8-8ae9-e52805988885",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2647389c-f238-4343-8b18-4f616ea5a9fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7c714b9-db35-47ca-aa6a-fdcc703d7020",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e7b9816-4b02-465f-984c-ebb7dd51dec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98f38d38-888b-4ed5-a639-ec579fa1e41d",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51679ee1-9284-44bd-8682-2ce615a085ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e6a7745-5e05-488b-9f71-dd8316ad94c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5074b4be-a7ad-4a24-96f8-50f92b077031",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25eeaaa0-de16-45cb-8b65-e767810f3ce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46c0dd85-ddb6-4eec-bfaa-f7965725b2ec",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15ab0af3-315a-4d25-8a28-c57ac715f3c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "606e3a5c-5388-4d20-9be4-09c26fcbf819"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d28e77d5-0b1d-4ade-aed5-f778351c40d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd250c5c-fa66-4291-8f4d-750ea336fb84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "459c33de-f8fc-4619-b7e2-b0e4bc2939ce",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1de9b6a4-f55c-46ac-92c8-5fe34239f3fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deaaa15d-8f6d-4b12-ae91-48a907274a11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76672814-5c6e-4c22-bac8-0e3580c4265a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18407c78-35c6-4ba3-b394-2ee7a4be4cfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53f2121d-6a83-493a-b1ba-fd2427a4bb1f",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d88658b7-21dd-4053-ab93-531a6d05ecb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9451705e-8ec1-4e24-ae83-2532240f07ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2a40390-3904-4ccd-aed4-6212d70563af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e8db4b0-71e4-4b21-8c68-137ce73e3ddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b05c478a-5475-41d2-b454-97c5df2fa64b",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e38a8797-b199-4679-a7de-6ea47252e2d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfdc6712-eb6a-4f57-bc4b-6d2e6726aaf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8110235-b401-4f48-adeb-8a2edb668c0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fbb5e24-d4c3-42f9-8a45-da0e6e0ca00a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c76b8e0-9679-4ab0-bd6b-50a51c407244",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e89fc435-7303-4465-b75f-97aa24e63320",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d303f8b6-5ccc-4e71-874b-d632296506c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7c35031-faa6-44e8-b4d4-22f82654b6f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06ececd1-fbdc-4b39-b539-172736414d1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35b2e717-b3ac-4c77-8663-10c5df15a746",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04a86917-e953-4c9b-bb29-3c22958ffc42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "488f659e-7e5a-4109-af08-a418583d9b19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9020291d-4bcd-4a58-a1bb-950d644fd71f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d432e3f-2ccf-47ab-9768-d4c4f9289fd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e2d86ca-c393-4600-b1dd-36641783abad",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d601e9a8-4d69-4f41-a83c-6a941a9ed440",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "425d989c-2b0e-43b5-b7fb-731468dee4ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d581a05c-387a-46dd-bf14-21fd4109df34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "567e8eb2-92e6-40f3-bf82-82d25c1b0110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b6f8d48-b5cb-4ec8-8c32-3ae9777afb8d",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d95a15e2-7933-4f38-b4b7-bd109562a3e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49cc73bc-5cd5-4641-a895-6070c93bddc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d80b47f8-ba0f-438e-a0bb-7277c659195c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca6246c7-a6af-4512-adf2-abd8c1e9f559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db77589a-5452-4c42-a543-4292380770d2",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04c45341-243a-4660-982b-5a0dfce752d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e076a31a-4fa9-4ea5-8ccb-85c23d2f773b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10293d98-0e6d-4026-b5cb-a535d5adbb0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "106613b9-b23e-4798-86b8-33af56b20a7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f62421e7-32c1-4db6-8c04-a4bd2f644e7b",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "987f0c34-b4d5-4940-81f5-f23f88d1a620",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5756d5d-2c2a-4b20-ad07-bcfda3dbc565"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ec509d4-0eb8-4954-8ef0-900a7ae2e0ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a95f670f-64e3-4848-9175-b863706aeb1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6564e786-5c75-4d42-8013-deb0d9e2dfa2",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2f73784-2641-4336-bf3f-0e744063573c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e362775f-07af-4240-9195-6f07ab5df01a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b0939af-9987-45c3-8015-4a4ea27b269b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe42a820-89ba-4eba-9064-51885b31dd2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "747b79b0-a1c9-44d4-b048-4a1e59cb7b86",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48eafa17-486e-4a4e-8452-ab0e1f7033e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "207ffe22-6680-433c-90f9-51e541fa54d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7d3cce5-4824-4d5e-bd0c-ca0cf7899407",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f545a6cd-3d66-4adb-927e-3de97403f8f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97dc24a6-3084-4d53-b71d-3745f033cce8",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f083d6ec-b2f4-45ef-8c23-c9eb09766d3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "047f6cd8-eca1-467b-b20d-93af5e5a424e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91be19bb-9396-4622-9105-dd6689d3e2eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e82c141-ab6c-42ca-8418-da0b4f8d00e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c36ec9e9-d6ee-4fbe-ba6f-f05a099e6223",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "231279a1-0c12-4a03-8969-7ab64a5cd371",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4392b59-3c1c-46ce-83e1-c89da75aab4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a77a2aa5-2637-4461-8c5f-5131781ec646",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99d92f91-bddf-4be3-87d0-e5a4663fc0a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "247913a9-1447-49b5-ab16-12dfafc96a04",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "696c37db-d3c1-48ad-801f-5f9debacfcb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29e70c4e-6bd9-4f90-9369-5b95aeee4c36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6913cf0b-7eeb-4fb9-9bc9-728da4ab9b59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b641148-e753-4bcf-a1cc-1fb33988f828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7776689f-9a44-42be-bb4d-73588ec93e31",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f38ecb56-4db6-4db2-bcb8-60f6660abf1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7ea5525-5f8f-4ff9-ba95-9f78bf3398cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fcc5f35-d6ac-47ee-bf8f-a4d2c32faf3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eb6e665-4205-4bd9-995d-e87ccb186fe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f982127-fafd-40fd-b6aa-a7572256e3fb",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e93e4109-d93b-4224-bd0b-e5f0ffebea71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ac410d6-b1f0-48e8-ad24-7f0ad7106a9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0340f6a7-3f00-462c-a04d-0577c50d617f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e683288c-0347-4d24-9ae2-9ab36d5de08b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8d6c1ce-d056-449a-abd7-2b988bb0d86f",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3ec30b7-371f-4f4a-b03c-205828f42fce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "048c2148-fa7c-48e5-825f-9d9a68567032"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09b6eef3-a4d5-4936-848b-69f89f48d472",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a36b301-7f8c-48ca-93ca-820c254ec1c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a1691a6-cc06-473a-810f-fd06cb7254e1",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e831e5f-70d1-4cdc-86e6-f4b9fcb5897c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b100223b-dc72-416c-b1ce-d03ccc60050f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f9734ac-90ef-4ec8-b477-e4954b86eff4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20523aed-1443-4d23-a496-7583ae3894d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9395a047-9866-406e-8d46-8e9e41786ba2",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c01a75d-382f-4010-a176-4e204b00babc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cacd1404-47b8-44c6-aa13-37fbeeeb19d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3822c2f5-a0a4-4909-9d16-99c37b90d18e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "370ae587-7a78-4bb1-891f-d85e9060e1d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03798665-7a41-44a3-9654-5488cea32caa",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59666082-a6a4-4ac4-9e7e-92afe2ba43a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20730a3f-e175-4f2c-8c0c-04a08d6f24b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e33f429f-7ed9-49ed-a294-7dce16e3187b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a03f529-78bb-48b4-ac5e-b0daa8567eba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e88543e9-ef5c-4b7d-9130-f83d9ed3fc82",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58edfc8b-42e0-4b94-9905-472c055d2f2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4a78c4a-9ffb-4f41-870f-a436e8ace088"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "070666de-664e-4d9d-96b0-f88c5fce9fcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b5ba006-59dd-4745-b4b3-fc50ac1383d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31097fdd-40c8-4a70-800e-f44fa9f5f807",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dccb595b-0c5a-400e-a82b-09cfbf550714",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed00fb1f-7145-4c2a-bd50-3cd874aff787"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82f28f8f-3ecc-40dd-8a1d-71d9dba90a39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b7142ab-f589-4835-8401-a21a9cc23d8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c27ce08c-1e29-4ed1-a554-b28241e49d83",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3262a40f-bff8-4f86-ae7e-96e894fccf7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ba905f2-99ce-41e1-ac6a-1cf9557cb54a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d37503cd-6bc5-4a0d-8c1f-7892d3dd494d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab779086-8fe0-496b-a107-11287c518ceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "643b3bc2-0bba-46b4-bbf2-b0773d903c61",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c5e4c7f-7c18-4cd6-82e1-39afafb6764a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb411d0b-73a0-4d28-90a9-c1984c09fc96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf008a92-516c-4121-a789-2a4d219df176",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "487e8990-4a70-4732-81c4-fc537e095a6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8405e0a6-9b2e-471c-b3de-c3e20ea09340",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a874508-e588-4dd0-865c-7b4eb0f300c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "158ffece-120d-4a34-9961-24dfc47ebcb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5d91d1e-5bbf-460c-9a38-fc303058b13b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "add67626-321c-4f88-823b-dda6286caf9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "917217e6-649e-4c33-8dde-c4523cfd7fea",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d53ae35-fe05-4cfb-815e-819c26939427",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faf9f57b-d67a-45a5-b363-c5f997d7b268"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d89dc34f-d12f-41ec-a51c-3c1488fba5fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "506ef0ac-ece2-4c65-b5f5-01dacdd4073d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "321a0cfd-a645-4cd4-bef0-0845d91085ae",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efb133ad-e1e1-4683-b93b-e1fdcd10834c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1a0b5f6-843a-49cf-90a8-1bc8878c0745"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f816b4b8-84b8-4a66-899b-eabcccf8b1bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "341ac192-a6d8-4d5d-99df-a4a775fb36bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18835a47-9f02-445e-98ae-4c38288df937",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f04090d3-54f4-4604-97fc-d5254483e0c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dc7b317-99bb-4289-a18f-5c1a3422d367"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2762d92-6c58-4ec9-8476-85dc14f68424",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "272b3412-f840-429e-a7c2-3942bd5fcc00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b47f42a-c9fb-43b0-8988-ba8930f3b366",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a5a7a6d-2484-4d1a-8b63-0ec455a4fdc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04c8172d-5c45-4e3f-9ef0-7f0c20307949"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a43cac85-907d-4fd8-b8d1-59f20c730b64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cb71396-cad3-4e7b-a4ff-4a2d218f4289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8f4bc48-bae5-4fd7-8be7-08a249986fc5",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4190510c-cda7-4228-87fc-1d961b04017f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "260a05d1-ce90-4bd9-ab06-2d0e043b10a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a5aae49-589a-4b51-aa2d-40f6694822c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be746acb-1149-458a-8e9b-57b808879b50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1fa2dc9-039e-41f7-9389-a956a9e11fc8",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b60ed1c-fcc1-4c93-b80e-eb20280c52ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee342ddc-2005-44ca-ad47-8d20aa2a6396"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f138a14e-2674-4593-acbe-2f9333cd8216",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b675953d-f839-42d2-ba7e-053681f5461d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a95a622-1ebe-4d7f-a08e-88225184da34",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfe7516a-d7b7-4d52-bc1d-9ede077b6629",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05d0dd4b-3873-418c-aee2-a5a145f592f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab04ca50-3da7-4c20-bcc5-65fa4fd36039",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e9e40f9-4b88-4aeb-bc8b-dcbd4ec673c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb194d98-79a3-4078-99da-d4c9d9ab904d",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af3324fa-2812-4774-ab17-e1346f908442",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5495fcf-3536-41c3-a21d-87eb1f635ba4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39d368b9-d27f-4047-a406-26e18f5cc2a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fecec420-4492-4b2d-89d0-e7837f3737d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fed8b459-c231-4e8a-bb9a-34cb010893bf",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60455b02-85df-401f-84d0-c77c84b319a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c20d60b-b063-4955-87a8-c00c77ebb2a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b784b04c-c16a-486c-9589-14be8c175f6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cab40e65-fd21-4a4d-b940-d8d7e0568fcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcfcc0a3-dc7c-44fa-a6a4-b4c48ee317c1",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d3639c2-5a42-4589-9857-010564c6f85f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8fb5d6c-8d65-4f08-8283-d73833c0148a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46e6ae21-bad9-40ce-8790-4cd847076623",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b332707-249c-48c2-946d-d6bea21c349b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c35709e0-5fb2-4be7-8306-71751ad63920",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb61832e-ad95-4374-8151-a11cdd5afedc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9724eb3a-e3e9-487d-a3b1-b30b1f354f95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a0c32c4-cd3e-471c-80e4-0e4a5ffe09a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7c70b85-da60-4f9d-91bb-4130939f6b83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59ef8d70-d53b-44d9-a59d-567fb5229bd9",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18440bf0-46b0-46f9-b370-cec33f5cda34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fb5ea2b-8b46-4bf7-87bf-96cba2d2b73f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75a7e693-eace-433c-b5a6-f46a530d0bfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "288beb18-1be9-41f3-879c-c267aa3671c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43b72bf5-4f4b-415e-8bfc-40a423703d83",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b95dd973-7d70-4952-b6ef-f9009e22daa4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "451b2c93-c941-48ea-ae2c-cb662e796388"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59afcdbd-033d-4584-ac16-cc30eb1c9b3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc8924f7-2be7-4135-83fd-8ceed26d2e8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fd97692-f219-40a3-a2f4-b2a268db5b1e",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d48cf1f8-8408-467e-8586-374ff0b70ed6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e94dd246-db07-4877-8240-6d16db2738c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31ad03ec-82b7-4bce-8672-a0db9fa78821",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9e24ac1-57df-47bf-84d6-72f24225ac9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a364e3a-19cc-464b-9472-5f8b31c315c5",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a34141c4-8aba-4500-8ae3-d64df5752624",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18a58c8b-f592-4e24-aa9d-84a98a23c1b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a75b4f5-639a-45fb-9205-a1c7494c9204",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b52d868d-c760-4485-9951-986e8689c54d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6906d50-f738-4a6e-8532-1af20604d9ac",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62f47f2d-28c1-4eee-8bec-ea0e1e8d6b66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b888b40-084d-4dd3-8bef-0d9e7421407c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e56c2c6-ba15-470f-bcfa-0e8fbba645d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bebd1519-ac48-4700-9a9d-701f92623112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c31b18e-7acd-49b5-99ae-6a13c0d29db0",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "588a21c5-f48c-45b7-b695-34c55f5189a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77557d54-4379-4246-8acc-d04fdc1dd876"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0712cd8c-86fd-4ac6-9e5c-b4f9b381bc81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67c43916-a2c9-4794-99f8-91606bc80c36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81b6a22f-42f1-46e5-9f01-041a971aba42",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b91df4a-b44a-496b-87d5-33136505a45c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48523ec5-2b2a-4096-af81-6b38541e97ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "610204e2-e27f-4a9a-b884-ac954a636b84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af1632be-65b4-423d-be86-f9beec7b06c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5613bff-29eb-4032-875e-f74eff958b12",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b0eec20-4055-4644-8352-ad958c6dce87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab5d6dab-e5ad-4f1f-913a-20d6d81760fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6971ff9a-c40c-48ae-a30f-61da6843b4ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4131c22-157e-46f9-93cb-7624100e971b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffdadefc-e949-466b-b35f-a2c760e6a553",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3797013e-2d37-4539-8c5c-30083cc2cbf5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f041060e-4c52-4b8a-80db-a897551652ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "096e522e-a860-4c39-a312-006e28fcac37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2defdeeb-4b14-40ca-8a0c-330e4c046fe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d53197d4-5bed-48d5-8cf9-a93b6cbeee2b",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f5f17cd-38db-4b0f-b779-f16bc81f3f8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c0d3a00-ec50-475e-9bc6-d301162eb61d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6f23308-a566-4fe3-aa5c-b26fc1e985af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3989415-6ff5-4a87-835b-51022e0b2991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5bebdce-178e-4132-a633-bc05622a445b",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6334a686-52b1-42d8-ada7-85fe871ae35f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db8ea40c-59c8-421e-903e-3d619cab79f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c301363c-13fb-4e38-be28-916a3dbe5fac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89b7bbb5-d34d-45a3-a81f-39a9f790a575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "418ad01a-d3cd-4ecc-9ede-0ea6bcf328d1",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be071024-dc67-4135-847b-02474b1300e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49c6d245-282f-41f5-addc-33d20a23e8c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93c18d38-0929-4267-af76-6268591bd55d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3859f5c2-7bb9-4f78-a094-9d6bf31288eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0e669fe-79dd-4e8d-9bd5-3f02fcb130ba",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "480b410a-8e90-4a04-8498-34d23a201829",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f951075-8f85-407f-b81f-a0640f89560d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7511bf6-9b26-4834-b0c1-836771c0d3b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cbe0640-a1cc-4d20-ac31-fc00df28641d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c755cf0a-0b6d-4875-b1e9-11ba472770e4",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cd47f72-e982-4556-9bea-49504f7abf7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5bd01e5-0d91-4401-b0e8-e2423fe3bd25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d93d229-0f86-427f-b76b-f91f62cda693",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd547300-3f65-4275-bf2d-b97439b4dbec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a8dee3b-c455-4bad-8f74-a6c534f7c6eb",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "320ad28c-9417-4b34-a724-39d0043b7a6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48a44e25-0712-4036-9f30-bbac9955fe34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48489c44-d067-4653-829f-c29a2b902033",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9445e724-5231-4555-bf90-b29d80953f1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1affde73-3d94-4589-9b0b-a2fb5250b6eb",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7691f76-13df-41bc-a8c9-8b496ece389f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f4510d6-102b-41eb-9db7-1eed8c10b95c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05261593-c86e-4872-b086-ab3e0aa5f19b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f85210cd-b77c-445e-a861-65a8949cd10b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ee66cf4-8f20-40f9-bd74-452750411161",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6282fb26-164f-4d5f-a5a8-a9fa574efa83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "528d7341-5a31-426d-8176-fc92c1cc3578"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0652ee10-b1d2-473b-8801-93247f9bfee5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2769fa63-52a3-421a-a8e8-889a2a2fc893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "674fdff6-8e46-4c3a-843d-de5dd7b548fc",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad1f3647-0c2d-4a19-997a-7983be4a1ddf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60e497a6-64e4-4ccf-9c15-026f7c18bc94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b7ebd4-ba05-4bda-b3f9-77a369d2677f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0035892-744b-4e80-ad91-989a0ba714d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e563b662-e890-48eb-ac4a-0ad317939784",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c330c356-2c5b-44f5-9335-d5ccf90bbeb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e71fc1e-7cd3-4d6c-8644-6261fcfd80f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad2519f2-5a19-418d-84fb-094c058638ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00df9e76-9f78-4d5b-9845-4e3b4e16510a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5dd02b2-a865-4ed7-8b62-4318df48e93a",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f1e8cee-4836-4e62-807c-ac410e63ba13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16798621-a92a-4efa-bb95-1652f82f7d48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e48b806-a270-4662-91aa-f7061d344984",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc0af615-4d0e-4ce1-9777-926f3604a937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ca5e9c8-a830-4100-8fe9-528c2da879ba",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ec92bc-d59d-4a0c-af90-0cd0af6cf091",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0053be73-5116-4250-9fea-a03f27728376"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3edf1981-59e0-4eef-aa8a-d1a7251ac063",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c14b5dc-d548-438e-9dae-e1af06691f95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40e082a1-1e7b-486b-9f25-3b984670b62b",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e25ac946-a4b7-4427-8a5f-d9f8c3ff96db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "178ac4b8-f941-45c2-9825-8d83acaaeed4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e6139de-6e4c-4191-8395-42b71e1cf35d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9be03f18-d173-4bdc-ba13-512b9d37635e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6fa301a-7d74-44dd-b410-ba40f4aa1a84",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aefd169-1581-4e1a-b8a0-09de2d187e24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccbf906a-e53c-4992-81e4-b4e08910ea9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3cdaed5-4687-49c1-adf1-c000fe3de786",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27e29a28-68e7-4fd8-8b0f-9625502a2caf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1601b96e-b973-42ba-bf51-853aaf0a14f4",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86836935-e9d9-4cda-85be-82a2d7946f47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb656387-2e1e-4c9c-b13d-b943481a2d37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e5f15df-50bf-4c67-9de3-387f8b3fd349",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0488ae4-96c3-4eb8-b97b-7bf641f091c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87283548-b5d8-4680-a2bf-ce228ecae8d8",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "140b30bb-fa2f-48ed-af48-3747cd846724",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86fa2009-404f-4986-92ed-246794fef192"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "089502a1-3e83-4acc-9d60-583898764df5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bf5d7d8-21fa-4f9d-a20b-1a8cdcdbee7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93863f5d-2646-4d91-a74e-3df3b6311365",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31896b1a-11d6-4514-8b2f-9c83d0c47b82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6b4ce2b-a28e-4ce2-a7df-2fc5dee93e9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9c5969c-4f67-4ba0-a916-9a6efc9403a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f587942-2586-423a-8f4f-943ac684d59e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b86ee823-fc46-475d-8b76-32a45d4a27f1",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f6325e9-5325-48a7-800d-7b41b2e92b76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f5ed1f0-3ad2-4fe3-97e8-1352e5f2eb70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0596d8e-e0a8-41e5-aee5-3017d9a26ff0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "578ffa05-4bf3-45e2-bf29-9f9cd06162fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af2f5943-6a41-48d7-8dd7-25ce68c73d2f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "355f0d80-82ee-46ff-9dc1-88403874d0c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "839e67dc-9510-4a31-9e17-0f852a12c961"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f142c51-826b-47ca-b43b-ab37ca0a0914",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5785ba26-72f6-4b71-8807-c5d966923013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6555bab-5e99-4326-a539-f7f6a95f4de6",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5213a719-296c-44c9-971e-d46e36b9ce4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95de1711-e0a8-4795-875d-5148975a478e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d15d49a-f3e6-46f4-b715-881dccf2b14b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfd4661e-96d2-47b4-b890-9584b9337624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80c06492-ee85-415b-b64f-b48d34486c4f",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbb9775b-5ff1-4ba5-8983-e24d556afd1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9250f44c-560e-4924-b3ae-d48c8c0ac372"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a693aa81-f707-43ab-b09f-ec48ed706345",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "139e2f64-02ca-49b2-b7c2-06c898f615be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30847ddb-f0fa-4c34-94c3-8cf296051d91",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce39c457-cdaa-4981-b2b7-6a29e7fec8e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d4dec7e-5533-4564-80c1-9dac0a175dbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4a5cee3-4d74-4ade-b944-dcd02353a8b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ae0bd9b-63a2-4fe7-9b42-89fad5b48686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ce82634-44f0-452d-8910-d58a0a8d21dd",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f01748c-cc0b-47a7-b2fd-1b3538e53310",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af9d9193-4f3e-422c-b766-84344178d151"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8975951-eebb-4e19-a4b7-7e79eef53a8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "168f730f-1364-441a-b653-cd9e3b03cbf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9885978-34c7-422d-a76e-cd1bb857e58c",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14799484-1e38-4bc9-806f-7262bd9e4d83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bcc20fff-b5ea-468b-92e4-3234ad4da051"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a02362e6-69c8-4d15-bf99-6361c420482b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4983f95b-3e03-4bd7-ac08-3edc270af8dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea025b60-363b-426e-8947-fd037f4aa936",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b36adb4-a200-431c-92e0-ba1d9e186b59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65bfb2e3-bb74-494a-8858-853b32699412"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f05d62ee-1d28-4c34-acec-948ebb8477d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd16283f-c2f0-446a-8c5a-1b357c8ec5a6"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "afafe0c7-50c2-4a87-b744-e25ac6510a3f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ccc3e92a-39e3-4197-a985-356d3b784141"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cd6f53bd-86e8-4a16-8893-4e5f4fe6397f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "201d1ef5-542c-4ecc-8402-1ce28baabfea"
                    }
                  }
                ]
              },
              {
                "id": "9f3db440-acfb-471a-a417-c7bc2158dea4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "41fcf599-6abe-4e29-a8b0-c92fa7ba21f4",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94f577e2-2789-4c21-8b4a-9e60341b4df5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "0722acc9-4c50-4ee3-af02-24ff89528286"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8637bdc4-3dbd-4eb9-8d67-3df4c4dd9aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "49f51a43-727c-4594-a4b4-e92b21f2cfb0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9cdcb6fe-141f-4b39-a9bf-7f7cb26215d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7c02a0dc-a7b2-4ddd-a635-eb5b606ee9e9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b0616dc5-7c2f-4beb-ba3e-eaf28e829d03",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6addf53d-ca09-4b7c-8c1e-9667831250a2"
                    }
                  }
                ]
              },
              {
                "id": "765eb4b1-ecff-48d9-aec3-ba9c9ecd87b6",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "44b93fe8-b0c9-45cf-81a0-e2ce6c74f2c7",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2cd2138-1c24-4ae9-b1dc-1156edfcfdf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "5a5c31b4-4d59-4ce8-b185-f0afc9bfe471"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccc644fb-ab70-4064-add3-bb4595219dff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b8ecaa4-d100-43ea-8951-4255ed764c35"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0cf403d3-d521-48e4-8daa-e230331d5add",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e273f134-0f76-4f65-b5b2-9fb1663353f8",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c4abc053-7c5c-4a07-a998-7d2f4010555c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "fe81ca7e-c203-43a3-aa82-b1acfdd9ea4d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "84ff41e4-a8ca-4ee8-b11a-0669607ee199",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8e63376-6605-4017-9cac-0d3998831fbe"
                    }
                  }
                ]
              },
              {
                "id": "0b08f196-42dd-422d-8866-c9be0c7fd256",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d4cc56a1-8234-4bb7-8c39-55e0ced54fb8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2ae239f5-2bfa-464a-a96d-df062ebea3ef"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "55270786-4f6f-4903-958b-5c65c3f8e632",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "19f99e2a-1a4f-498e-9bcb-32692fb5a59c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a4fe0026-889e-422f-8833-385774131342",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "a84cd6d4-e853-498a-8765-426e09d553fe"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9dd51e79-cfcb-48f9-a33a-1733e0e16fc6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "177cd7d3-7615-4a28-a18e-72fff92e6661"
            }
          }
        ]
      },
      {
        "id": "1fd03b85-3a7c-48f5-a9b2-c8197d1c8a06",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "e81f0eb0-1705-443f-af8f-83601158210c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a78cee83-6169-4d88-896b-b6a9d5f4a7d4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "529c59af-bc4e-44f7-9154-4a38b54c6435",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb52c5c8-c607-4dc7-8c01-55c5f029a623",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "596e55c8-6b24-4b19-a9d2-408080c5eaaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f66f7e2d-6130-4275-8aee-5b02b7e21560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "23585c0e-a898-4da5-be4f-1b73c687d40b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8009bced-81c7-43fb-9932-94ad29e80b4e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9118f077-ef12-4b55-8aee-84fd932609a6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b3f8d967-95fe-4a8b-b92b-4b5dee6c1ef7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fb1c015d-1704-473c-951f-e1f47c68bb30"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7ebe0398-38d5-484a-9024-048294d7b837",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e21fdfb3-5eb5-44cf-9c85-20465aca0ac8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7a091c68-04a3-4783-8612-746aa146c3d7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b30f2148-7121-4813-ab04-c746e8424418"
            }
          }
        ]
      },
      {
        "id": "865c1a5e-0a64-4859-9aad-b92ccc2e5fa7",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "598daba7-6405-4ba9-b00f-793d24bd5f88",
            "name": "Negative Testing",
            "item": [
              {
                "id": "978ee289-2e6b-432e-af97-5b41d8707c00",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1860cf71-e9f2-43be-ab52-25e1cae759a3",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c55982-057e-4510-a31e-bcb362ee1526",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c76d0630-f645-4d37-99f9-209c9cd76ab5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cedfd0fd-d99b-4f43-9bbd-582d8fe5088f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "55d41ef7-88a8-445f-a08f-860f31d82b30"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fc31b967-a615-43b8-99de-f0c4110d6f81",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c7b9aaa0-e348-474e-84ac-0a239ac92128"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b8f91691-9656-4ee0-92d6-1772719e4c24",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "24a7fde8-2264-4dc5-b258-0ec459921d15"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "22862eea-76f5-4284-af2d-d078cafa6923",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4685bf58-7f58-4d66-b6ab-ba5ed3110e76"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dbf8df41-27e7-4363-a0d9-0ce988bdd55a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bd6efa4d-4ea2-493a-96b4-2fb8cea1216b"
            }
          }
        ]
      },
      {
        "id": "84ea7412-0d25-4a66-b82e-7fc63f9e58ef",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "250afa78-9494-45db-8144-6f19bb592690",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8463cd0c-4306-40b8-addc-e35cfe345c0e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "76e76afd-fd1e-448d-ab3c-07e4cf077b2c",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "841558ef-3478-49db-8757-b15dd41c0a47",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ef3febed-0285-4278-9318-fa68e47087e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7230da70-1873-40bc-857c-ca1b8e691e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a6af51dd-de85-49d7-8dd2-847fecd6030f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2f01808c-e5e9-4d0a-ba08-e4e15789c144",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f95d0a0d-5dd2-4513-8e87-e1b65fbb4443"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1d8eee7-6ea6-4489-a94f-dd8753335c96",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "121e4adb-4ad3-42bb-a0c3-3301f0f60d75"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0dffcc5a-3ab0-4f23-a304-04cca04837de",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bedda29f-2f84-433b-bd4d-a41e45ab3eaa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fa511581-7d10-4fd3-8997-4920124af883",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8e76b137-806d-4791-8450-8b7c07d57982"
            }
          }
        ]
      },
      {
        "id": "b5e4d869-a814-4ebe-94e4-153070031675",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "51b43300-609c-4006-8047-4959d0792472",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6c36de85-84c8-464f-bb32-20148a05b037",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "3a96c7ab-e934-46d8-9b51-b10c500b5abf",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3851ef9c-09a9-46fb-987a-739545627c57",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a30cdbd1-349f-4053-a0d7-afe731cf0594",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 263
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 12.384920634920634,
      "responseMin": 7,
      "responseMax": 404,
      "responseSd": 32.52201102613698,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1713486914267,
      "completed": 1713486925841
    },
    "executions": [
      {
        "id": "cad417df-e0d2-413e-8a5a-5605187fceb8",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f5d15376-5f3e-4923-970b-81cc6f19dfda",
          "httpRequestId": "ddd40a2e-9630-40dd-b128-72c33c3dfaa6"
        },
        "item": {
          "id": "cad417df-e0d2-413e-8a5a-5605187fceb8",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "60f261a5-7752-4447-8671-ef407cb5871d",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 0
        }
      },
      {
        "id": "3b34d0d6-b462-439c-aa1b-b0f154252f9c",
        "cursor": {
          "ref": "2a293459-1586-4393-bc34-183d6db7dacf",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "c3f597c4-adac-4578-83d3-2da641ad6207"
        },
        "item": {
          "id": "3b34d0d6-b462-439c-aa1b-b0f154252f9c",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "69d33488-9468-43f2-ab9e-12edb24bdf75",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "4980af81-0066-4498-b883-86591749c2ae",
        "cursor": {
          "ref": "692e153b-e354-49bf-905f-dad4f2aaa5d5",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "7923273f-f6a0-4eca-8d43-863ae09854b7"
        },
        "item": {
          "id": "4980af81-0066-4498-b883-86591749c2ae",
          "name": "did_json"
        },
        "response": {
          "id": "2944790d-420f-4f94-ad74-f795e684245a",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d9eb298-ce82-4a3c-a891-ee3269140148",
        "cursor": {
          "ref": "b8d5ca45-ce09-48d1-80a6-4170a4755fea",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0f1523c5-a451-4750-a59f-9d333fca4372"
        },
        "item": {
          "id": "8d9eb298-ce82-4a3c-a891-ee3269140148",
          "name": "did:invalid"
        },
        "response": {
          "id": "04ee0b60-aa8d-4d06-be16-8bb641271038",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d9eb298-ce82-4a3c-a891-ee3269140148",
        "cursor": {
          "ref": "b8d5ca45-ce09-48d1-80a6-4170a4755fea",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0f1523c5-a451-4750-a59f-9d333fca4372"
        },
        "item": {
          "id": "8d9eb298-ce82-4a3c-a891-ee3269140148",
          "name": "did:invalid"
        },
        "response": {
          "id": "04ee0b60-aa8d-4d06-be16-8bb641271038",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a316faf-3fcc-42e3-8369-779a4391582c",
        "cursor": {
          "ref": "d75adf5b-2604-4efe-8263-5b157d4419f3",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "7421834b-d672-4a4f-be96-0ec1cefa8eef"
        },
        "item": {
          "id": "5a316faf-3fcc-42e3-8369-779a4391582c",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "07b2ad39-c053-4b5a-aef0-94185c46c079",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 165,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6592c5ba-a7a5-42df-91b7-67d61f6bbf42",
        "cursor": {
          "ref": "13ebec6e-655a-45f9-83a3-e0862c4232f0",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "1b118e7b-82b4-43f6-aa69-8c8d515afb9a"
        },
        "item": {
          "id": "6592c5ba-a7a5-42df-91b7-67d61f6bbf42",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b1335ccc-b65c-4bd6-99d2-8a31283ce378",
          "status": "Not Found",
          "code": 404,
          "responseTime": 8,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dad3f35-02da-4345-a6c8-7f3a07b5e01f",
        "cursor": {
          "ref": "0dc8b7f4-cf18-4cbd-9532-d439f44a4524",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c7960fdf-2d17-495a-9a1f-3537b96bd367"
        },
        "item": {
          "id": "8dad3f35-02da-4345-a6c8-7f3a07b5e01f",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "1c00faae-4ff8-4604-9b4e-ac77fbdbbda1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07ff3804-fd18-4fb9-b663-4e122e0af4bf",
        "cursor": {
          "ref": "c82c722b-af05-44f5-af62-dfc894c4149f",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c8f2a741-0124-49c9-a92e-1dfb61f05d88"
        },
        "item": {
          "id": "07ff3804-fd18-4fb9-b663-4e122e0af4bf",
          "name": "identifiers"
        },
        "response": {
          "id": "005f3513-efc7-4b1d-92df-57c87666021b",
          "status": "OK",
          "code": 200,
          "responseTime": 404,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bcad746-035a-46f2-bed3-3e4fbb7b65df",
        "cursor": {
          "ref": "624bc53e-a64c-49fe-b3d7-c5f0ca13e317",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "0eca6994-141b-4c74-9ee6-43ff2b85ea66"
        },
        "item": {
          "id": "3bcad746-035a-46f2-bed3-3e4fbb7b65df",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4358e572-76f7-44dc-9d92-1b597af80196",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27231eb0-58e6-4090-9b15-a54e35c8ec70",
        "cursor": {
          "ref": "b4d009c2-7a1d-4be8-a7d0-0b46451d911a",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "67589d50-5ce6-4103-a7eb-f7b99b99c30c"
        },
        "item": {
          "id": "27231eb0-58e6-4090-9b15-a54e35c8ec70",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "6fa9535d-61fa-4619-bc5c-db427efd7d7b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65b008f4-d409-4149-816e-d309d8c6fd7c",
        "cursor": {
          "ref": "969a86a0-3d72-41d6-99dc-0a76eca432cd",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "56b2ae9f-2a20-4c0d-bd79-98efc64eb051"
        },
        "item": {
          "id": "65b008f4-d409-4149-816e-d309d8c6fd7c",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "62d1bf3d-b3b8-4f69-9cb6-bf15ab3e8c4a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91a8a3df-025e-4e3d-9b10-dcade3cecdcf",
        "cursor": {
          "ref": "cac6e17b-2152-40e7-b39c-722fa50b8183",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "906cdb45-2994-4d93-a51f-3ee10c1fc89e"
        },
        "item": {
          "id": "91a8a3df-025e-4e3d-9b10-dcade3cecdcf",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "3378f1af-207d-48e3-a8ae-849746a00a92",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2f5b618-a194-4604-beae-f0915fb95de3",
        "cursor": {
          "ref": "74eafd0d-0ee2-4ce3-975d-939db019bb82",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "ca0dcfb5-8877-43d5-8e05-d4da4c06ab83"
        },
        "item": {
          "id": "f2f5b618-a194-4604-beae-f0915fb95de3",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "fa9cc491-82d3-48a4-a3d3-3b821a8b8db2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dad5fe3-15b1-4d77-9ebb-397a64166959",
        "cursor": {
          "ref": "b38f4765-b38d-4453-9d17-c3d26ec81ed4",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "cc13fac7-0bdb-4938-a4ba-b737478fb88a"
        },
        "item": {
          "id": "3dad5fe3-15b1-4d77-9ebb-397a64166959",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a5e28a9a-61a3-4d62-9ff3-d2ee48632fa1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cb6025f-bf4a-46b8-93a1-04f24ed16879",
        "cursor": {
          "ref": "bc9664c0-e85b-41c3-bc3b-31dbfcbcd9f6",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a24474f9-6c9b-4a0e-ac3d-09ea0c2d2d75"
        },
        "item": {
          "id": "6cb6025f-bf4a-46b8-93a1-04f24ed16879",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ee6b47e1-60b1-46db-a224-cbdcc4811bf2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0400e623-bc5f-4dc7-b816-414848c76966",
        "cursor": {
          "ref": "5ea81d77-42ed-40f4-970c-5238df70be35",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "29ce9074-86e0-43da-9fcd-cceeac2cfe41"
        },
        "item": {
          "id": "0400e623-bc5f-4dc7-b816-414848c76966",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "acc3f6f0-73e5-455e-8ead-e7f3aa9a0624",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6314b990-89c2-47cd-9c82-5217dc00e52c",
        "cursor": {
          "ref": "44278865-b366-4d2b-bcba-72d781e16578",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "f2ce6623-13b8-4316-afcf-2415dfce08c1"
        },
        "item": {
          "id": "6314b990-89c2-47cd-9c82-5217dc00e52c",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "5fde41c1-ea9f-48f4-81d7-a8b4cbe87026",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f378c501-60e5-4f41-b8e8-cb60b435df0a",
        "cursor": {
          "ref": "946f51d4-6459-4e77-87ea-e5fc69e97b85",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "5f9b7739-d191-4f0a-8ce1-dcac3968a4d1"
        },
        "item": {
          "id": "f378c501-60e5-4f41-b8e8-cb60b435df0a",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "71e60a9c-c7b7-4d7f-b9e8-3304c00bf570",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6415c09e-6115-4c1c-9d1a-fc0acc87fb4a",
        "cursor": {
          "ref": "6fbfd2d6-7e03-455f-80ec-d9346b77026f",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "87a91789-c82a-455b-8d2b-8afc39b0cb88"
        },
        "item": {
          "id": "6415c09e-6115-4c1c-9d1a-fc0acc87fb4a",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "d3d91494-6fc3-4358-9490-8786a491e5e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa442673-404e-41b9-b9fa-407621f721f5",
        "cursor": {
          "ref": "4314fe55-06de-4a03-abdf-d037da04f313",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "fafb94a2-cdb1-4823-a7c3-07aa57a75d72"
        },
        "item": {
          "id": "aa442673-404e-41b9-b9fa-407621f721f5",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "2285d1a4-79bc-44bb-b4c7-fa265a942b6a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05ee390e-dfdd-4856-bd01-7976bfe17014",
        "cursor": {
          "ref": "a4b6b64f-b729-4104-9c00-eb402b4970f5",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "371c47a6-46e1-467d-8195-5d944137dcb2"
        },
        "item": {
          "id": "05ee390e-dfdd-4856-bd01-7976bfe17014",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "bd8f2185-dea4-4d85-aafb-b61bf1a1e3c6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b381d711-1671-46e2-a5ab-2e0c5c37c9da",
        "cursor": {
          "ref": "176e17c7-090f-42eb-9211-59419630212e",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "02b38bbb-3e8c-49b4-9649-ff8320808e54"
        },
        "item": {
          "id": "b381d711-1671-46e2-a5ab-2e0c5c37c9da",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "2a31baf7-b29f-4649-bea0-5e7eebc4eba2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9393bcb5-0a05-42be-98f3-ff85b2961608",
        "cursor": {
          "ref": "1e09170f-2a9a-46cc-b928-5d87a5f7c0c3",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b6ab6a46-4259-4240-9d02-299bf74a1931"
        },
        "item": {
          "id": "9393bcb5-0a05-42be-98f3-ff85b2961608",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "1cdcfac3-21f9-43fe-b90e-1c307fc43d28",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef0c073f-b34a-4154-a9f0-995df7621ca5",
        "cursor": {
          "ref": "4b2c255d-4fe1-4d1f-bd33-a9707c858590",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "618c570b-fb15-4a7f-8e82-d71c0ded95fa"
        },
        "item": {
          "id": "ef0c073f-b34a-4154-a9f0-995df7621ca5",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "9803ae1b-689b-430f-9ccc-059e32c173f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5240d296-72c3-42ca-a0ef-b96fb53c06ea",
        "cursor": {
          "ref": "998ab4de-9846-4a24-a8f3-560fbe91db3f",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "647b19c7-4ca4-426b-b7d1-bf1f071974d9"
        },
        "item": {
          "id": "5240d296-72c3-42ca-a0ef-b96fb53c06ea",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "91990475-a178-42b0-bf7c-eae5d9ffc5ae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db56c083-3079-4dc1-906e-186aefd94bbe",
        "cursor": {
          "ref": "3ff5e5ea-b59b-48fc-933d-0657e63bb47b",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "0a0bb55f-9f1c-4d73-92ce-963b9fc66c72"
        },
        "item": {
          "id": "db56c083-3079-4dc1-906e-186aefd94bbe",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "f6992084-00d6-4903-87c5-ff7e828a149d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67e901a7-6778-4a56-a296-b8177bdc72d3",
        "cursor": {
          "ref": "adc5ba23-2689-437e-9914-f9b07345d496",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "8b06eb97-3087-43e7-bbb0-8f6f6c790f8b"
        },
        "item": {
          "id": "67e901a7-6778-4a56-a296-b8177bdc72d3",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "7e2f3749-0062-4f96-9206-4c0f8fa01372",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "904a665b-4066-46b9-aae2-ac30ebd58099",
        "cursor": {
          "ref": "3aa638a2-3a51-448d-8711-3fbe79af571f",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "87047de4-a867-4610-af4e-a83b2635b5d3"
        },
        "item": {
          "id": "904a665b-4066-46b9-aae2-ac30ebd58099",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "b1721118-c2b9-4886-bf26-3ee88f30549f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f59d0a4b-511a-4313-afeb-816f72c23d7a",
        "cursor": {
          "ref": "b6c0a88d-d159-4331-b397-2b631816be7d",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "8a6bff72-35bb-4069-be4d-eb6723356243"
        },
        "item": {
          "id": "f59d0a4b-511a-4313-afeb-816f72c23d7a",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "0970a055-3060-4e04-a157-cfac9550a331",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "545f1242-f43c-43cb-805c-3cfa82522919",
        "cursor": {
          "ref": "bdc44995-c24d-4d30-8c64-1413e555e7e4",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f2831d10-98bf-44b3-a577-347634a3673e"
        },
        "item": {
          "id": "545f1242-f43c-43cb-805c-3cfa82522919",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "af2d7236-9d8d-450c-a9b8-81bbebac1042",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e8987e6-a8dc-4a0d-bd42-d96fae13494b",
        "cursor": {
          "ref": "aeab13a5-1d98-4197-b6fb-1f342c997189",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "38f55c23-a15f-4622-9cbd-fba207e3283d"
        },
        "item": {
          "id": "4e8987e6-a8dc-4a0d-bd42-d96fae13494b",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "5fb0082f-3be7-473a-b7e2-a54ad4f94177",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a195372-70e9-4de6-a378-7ca4adb4b143",
        "cursor": {
          "ref": "d49a0ae7-21c9-4d26-9791-f75ad862308f",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e8c1cfe8-55f3-4251-ad11-32e9634640d2"
        },
        "item": {
          "id": "9a195372-70e9-4de6-a378-7ca4adb4b143",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "acbe95df-eaa8-4f90-ae16-866d5a1059db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7410537e-d4d0-45e1-997b-6464bc54a404",
        "cursor": {
          "ref": "74db7ed6-5491-4d5f-b64d-4b2559fd5bdc",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "aa239e02-d818-4b11-a0b3-1ad423bef9b9"
        },
        "item": {
          "id": "7410537e-d4d0-45e1-997b-6464bc54a404",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "3dfe05ef-142c-481e-aed2-6d91c782dfbb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13c39c64-3c55-4525-a170-f3edb432a969",
        "cursor": {
          "ref": "8a447a21-8046-4b0f-bf94-9da43eebb19c",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "269e3854-5320-4918-81ee-840d641b8c1d"
        },
        "item": {
          "id": "13c39c64-3c55-4525-a170-f3edb432a969",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "795ffb1d-381b-4320-8c72-3be127da761a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45018439-dba5-416e-847d-459c91d4eea9",
        "cursor": {
          "ref": "a13a269a-6c4b-4211-8ce2-8ba41f8f8120",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "f55eed33-ec01-401c-a2e5-5c161af3aba8"
        },
        "item": {
          "id": "45018439-dba5-416e-847d-459c91d4eea9",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "8f186aaa-d9f5-4dfb-aba0-524843614b4d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9499e50f-f4fa-4bcf-b96e-90b39b8c8444",
        "cursor": {
          "ref": "054712d9-78f6-4319-9fce-7cb246810ea9",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "61dd672a-3efe-42cf-913c-8ab06fc98507"
        },
        "item": {
          "id": "9499e50f-f4fa-4bcf-b96e-90b39b8c8444",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "770f4625-a029-40ae-97c8-d70afce491e6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ad06dc6-e422-4746-82cc-d2e3ce5f517c",
        "cursor": {
          "ref": "312e2c12-efb2-4305-a6f4-cd0321f039bc",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "611a79f5-a0cb-4af8-9333-f0159a0f96b2"
        },
        "item": {
          "id": "7ad06dc6-e422-4746-82cc-d2e3ce5f517c",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "b6239472-3ea1-469e-bd36-8b1ab6cd16a8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10d736ef-ffec-4206-ba4d-a2efff5a93c1",
        "cursor": {
          "ref": "4eac15c2-1781-43aa-9f39-3c05341af4de",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "389ae330-7e71-4f4f-b67c-bfb0de9b3c31"
        },
        "item": {
          "id": "10d736ef-ffec-4206-ba4d-a2efff5a93c1",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "7bd73e41-9306-447f-8752-743c6e43635f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1213f650-b7ff-4c6f-b879-e753aa45256c",
        "cursor": {
          "ref": "a9c93109-dca9-4bd9-b9fc-7e3e498df740",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "c4eaf1b0-90cc-495f-8f59-c4c3b85fe50c"
        },
        "item": {
          "id": "1213f650-b7ff-4c6f-b879-e753aa45256c",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "3612b9cd-7509-49dd-86a0-4d2644708c5d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "916e20ad-2c15-4020-a6a6-6398ecb6e183",
        "cursor": {
          "ref": "3de8eb6b-5b4e-475f-8aef-648f7312b216",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "c91cb1ab-0bd5-425f-a198-b81bb9d118d9"
        },
        "item": {
          "id": "916e20ad-2c15-4020-a6a6-6398ecb6e183",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "de2d32d7-4325-4a3a-a08a-a5b386a16732",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c09788ea-af50-4ea3-86c8-6ee42ffdaf02",
        "cursor": {
          "ref": "61424030-ddbd-4bb5-ad37-c28738400e7a",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "ab45df6a-7eb7-4976-ab81-b27b4ff3adc8"
        },
        "item": {
          "id": "c09788ea-af50-4ea3-86c8-6ee42ffdaf02",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "7454d6e5-9ffb-4692-b9c7-b661f0e56816",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f21bdea9-a277-414d-8642-1da1e29a4577",
        "cursor": {
          "ref": "bb4e2eaf-59b9-468b-8a35-a2e2721312af",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "bcab580d-a285-4438-8760-fa3861c3a9bd"
        },
        "item": {
          "id": "f21bdea9-a277-414d-8642-1da1e29a4577",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "862dccef-b08c-4c7c-af96-582c9eeb6e5c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ea7c1d3-828a-4652-95e3-8b48a1b2f29f",
        "cursor": {
          "ref": "1623d3de-996e-4f86-9081-4b738df9c222",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "47d4985e-6cb6-496d-a341-ed9239b5f8d9"
        },
        "item": {
          "id": "6ea7c1d3-828a-4652-95e3-8b48a1b2f29f",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "eae895c3-f504-407e-9709-52dab57439b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f5a984d-3f59-4b26-8ea4-f35158ee7beb",
        "cursor": {
          "ref": "d5065040-0025-4f41-b2bc-cb7c766a57f4",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "9078dfff-8422-430c-8b9e-9c7f21a816c5"
        },
        "item": {
          "id": "5f5a984d-3f59-4b26-8ea4-f35158ee7beb",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "beacf91a-bbc5-465a-bd05-471885ef0016",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4ed5328-6c57-4837-82f2-4f00b49b0be3",
        "cursor": {
          "ref": "6bcbf9b8-1083-4f29-9222-f684aaf132ed",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "a90d876e-8faf-4d4d-b833-302b4284929c"
        },
        "item": {
          "id": "d4ed5328-6c57-4837-82f2-4f00b49b0be3",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "77dce327-04c3-482b-8a52-cd01fbef7a71",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c14e084-be8b-4fc2-862d-a7ce14a87d41",
        "cursor": {
          "ref": "3520cba3-e1d2-4d42-8b6d-d9880fe506bb",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a3c95f2a-303e-4f16-a8f5-b51e12c7eb1a"
        },
        "item": {
          "id": "0c14e084-be8b-4fc2-862d-a7ce14a87d41",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "b46d7c59-c2d5-4720-8ab3-3f9be6b3fd68",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93aa0b01-c8b4-4fc1-8768-3c750829b586",
        "cursor": {
          "ref": "119176c1-902e-4998-b6e4-a0801adffbcb",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "239732ad-d3b8-4bc7-86c0-a6c440fe24b8"
        },
        "item": {
          "id": "93aa0b01-c8b4-4fc1-8768-3c750829b586",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "bc0e3761-0672-4b00-bc2e-8850c95a6e10",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84ef331c-53af-44f5-8f2f-9575f3661ab4",
        "cursor": {
          "ref": "6dc33340-c16f-4809-9bae-d8ae1e40f16e",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "36986ab1-7012-46f8-9050-9a0359eebaa1"
        },
        "item": {
          "id": "84ef331c-53af-44f5-8f2f-9575f3661ab4",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "f16b7e51-f1c4-496e-b20e-0de5d9db73b9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb3944c1-7bb4-4426-a505-d565127eda07",
        "cursor": {
          "ref": "bb9c95b5-557c-434b-bf5b-22f836529ac4",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "58145835-254f-46d1-b16b-08986ed33216"
        },
        "item": {
          "id": "cb3944c1-7bb4-4426-a505-d565127eda07",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "01fa119f-8823-4e5b-90b5-cf56b5fe0024",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1af2f4d-c642-4453-ab1d-86c85c8d7638",
        "cursor": {
          "ref": "e3a44ee5-05f0-402f-b689-301da685fc1c",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "cf4767b9-bfdb-4791-b8b1-0df0818a777e"
        },
        "item": {
          "id": "c1af2f4d-c642-4453-ab1d-86c85c8d7638",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "56f073d8-9017-436a-ad35-69692fa5884d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24ac96cf-f8e0-4017-ad3c-ed0c9875a2da",
        "cursor": {
          "ref": "1eaf6a6b-7247-4b66-b843-f2d1d4d4d87b",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "1434fe08-6d22-4325-bf6d-cffaf8712691"
        },
        "item": {
          "id": "24ac96cf-f8e0-4017-ad3c-ed0c9875a2da",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a894b54e-3182-463c-92f4-91086596263b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14548904-3696-4f77-8eb2-3e02454fd266",
        "cursor": {
          "ref": "dc3cbee3-f840-4b2d-aaeb-62f9c1e105c1",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "031f0f0d-6f5f-4162-8394-924d63783506"
        },
        "item": {
          "id": "14548904-3696-4f77-8eb2-3e02454fd266",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "22c0682f-d0d3-4dba-b40c-3df2acb46d4d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5966cb45-ccd8-4140-8e51-1def6b18e58f",
        "cursor": {
          "ref": "f6ac2707-368f-4d95-bbf1-b3a065c17740",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "97006626-28b7-468e-b9f4-0c8c72810a37"
        },
        "item": {
          "id": "5966cb45-ccd8-4140-8e51-1def6b18e58f",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "fd3795b7-0b9a-4e56-a4e6-8fe63ad8f553",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b949ab4-b3b4-417b-8ca8-bddd7660fa96",
        "cursor": {
          "ref": "7b864f03-26fe-403c-b799-d6c4bc0f5e04",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a5609eea-601b-415c-91c3-49b837b1ffe8"
        },
        "item": {
          "id": "9b949ab4-b3b4-417b-8ca8-bddd7660fa96",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "e1b21b07-8407-4eca-a666-34ba9c9fcbd3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb658e70-a14f-4324-ad5d-95d43ccd958d",
        "cursor": {
          "ref": "e34fff80-b061-4bd6-a054-792f6f279e3a",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a4694d5b-010e-4f6d-82c6-24dea3428ec4"
        },
        "item": {
          "id": "eb658e70-a14f-4324-ad5d-95d43ccd958d",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "4118a146-b90c-4692-ba45-e955c6906eae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55bba3d9-a62c-4e1f-9b37-c7b3790bbbe3",
        "cursor": {
          "ref": "932bb5f8-b07c-4f37-a627-02a2550d8a40",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b4ea3008-efa0-4905-90c5-2f735c221860"
        },
        "item": {
          "id": "55bba3d9-a62c-4e1f-9b37-c7b3790bbbe3",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "98624acc-6f7f-4196-82a6-6375d43bba20",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dfd24d9-7dad-4d14-87fa-e49faf7f990e",
        "cursor": {
          "ref": "c4ad0741-8aa9-45f3-a833-4114f76eab6e",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "05910bb6-2927-4d00-8224-800af4c66f4f"
        },
        "item": {
          "id": "3dfd24d9-7dad-4d14-87fa-e49faf7f990e",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "6b2dabc4-28d2-4ca9-9326-88b22cc1d9ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49803023-0c96-45a7-94d3-28a7fac12d68",
        "cursor": {
          "ref": "0f9d7bfd-9811-4148-ac20-460a7b35008a",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "2ce9e295-5073-431f-b52d-ccbfe92bce01"
        },
        "item": {
          "id": "49803023-0c96-45a7-94d3-28a7fac12d68",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "9a96725a-2c60-4313-acc8-d20d1ac22a16",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "342b718a-f6b7-4542-9e4a-3651f9ccfd3a",
        "cursor": {
          "ref": "3e5c64e0-71c2-406b-96ad-858eea95adb9",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "03f4ab1a-8a8a-4765-8fcc-8651b8a1c458"
        },
        "item": {
          "id": "342b718a-f6b7-4542-9e4a-3651f9ccfd3a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "7b717757-f812-4b8d-8d7d-ce1e5d6a24ae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcb49c08-9c44-4121-a4da-904ce5215e6e",
        "cursor": {
          "ref": "8f5e9a47-dcf3-49b0-ad8a-4dcfb2cc4f35",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "3d6b4960-0eb6-4e82-8d00-f190505b212f"
        },
        "item": {
          "id": "fcb49c08-9c44-4121-a4da-904ce5215e6e",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "28464c83-0e25-4dcd-91ab-94b733d8d387",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3af6bd9-1e8a-433e-b217-e276e126de1f",
        "cursor": {
          "ref": "888a9a9d-0794-4f98-b32f-0a42d7346a37",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "1e89f7a0-1971-46c9-a12c-264c4809ce48"
        },
        "item": {
          "id": "f3af6bd9-1e8a-433e-b217-e276e126de1f",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "9c3e9c87-a723-4a96-a323-00ea1a7e999c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32ba73b3-43d8-4cae-9783-45f871d945da",
        "cursor": {
          "ref": "8341a5ca-db77-42d7-88c6-d776a286b5b8",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "63718c34-152f-4a74-9cc3-59a30602fb23"
        },
        "item": {
          "id": "32ba73b3-43d8-4cae-9783-45f871d945da",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "391588c4-00a2-40fc-ab51-c86f6f7b8153",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4442ca0f-87b3-4365-90f0-5928e43d350c",
        "cursor": {
          "ref": "fa89fd59-bf96-4878-b633-91d66526b47c",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "33106f72-eb15-4aad-8456-e39159054835"
        },
        "item": {
          "id": "4442ca0f-87b3-4365-90f0-5928e43d350c",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "17a1fcae-0b67-4a2c-ad18-a498f1e58eec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 11,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2253df3-269c-4e08-93a5-4cfa797fb007",
        "cursor": {
          "ref": "5e052b46-e865-487a-995a-a6c442b2d82f",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "73e5fa9d-b160-49a2-ab82-91de29719f26"
        },
        "item": {
          "id": "f2253df3-269c-4e08-93a5-4cfa797fb007",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "005e96de-8525-4c13-8782-6d1dcf725067",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c975b052-2ded-4b30-be01-428eee92581c",
        "cursor": {
          "ref": "8556ae1e-8c2b-4e48-8886-313336cd7419",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "da0f66c9-0cc9-49cd-95c9-650075bd6cc2"
        },
        "item": {
          "id": "c975b052-2ded-4b30-be01-428eee92581c",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "aa4bc214-2084-43f8-ae46-d6b161346e3c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8982c305-98e1-480b-948f-fc4bd1fe047b",
        "cursor": {
          "ref": "51a2d91b-0b29-4180-adbb-d059ad9e28d8",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "0105e062-41b0-4a1c-8497-3cb992f9cf64"
        },
        "item": {
          "id": "8982c305-98e1-480b-948f-fc4bd1fe047b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "c66d235a-4344-42b9-9ef0-a3563e106fa5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6c9d163-dca6-4223-8192-06a10d85d479",
        "cursor": {
          "ref": "79ae3975-6660-446d-8345-486a273e109b",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "a681a91f-a420-4b73-915e-0d9a34f255a7"
        },
        "item": {
          "id": "e6c9d163-dca6-4223-8192-06a10d85d479",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "e8671923-0ecb-4770-bfab-688f524a594b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c548770-116a-4ea4-a278-2321dd3720d8",
        "cursor": {
          "ref": "ac6ae8aa-e5bb-449a-93ba-cfd8640dd432",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "cf7edddc-2b2b-4fe2-964a-2334808b11b9"
        },
        "item": {
          "id": "4c548770-116a-4ea4-a278-2321dd3720d8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "9f085b74-d93e-40fa-9a7b-19a0baf720e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0fc9670-7b44-4f50-a204-432c914362c0",
        "cursor": {
          "ref": "d5e5bfe3-53ac-4faa-884f-e1aaa8cc8aaa",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "dea23bdf-18e5-4166-9b15-01bedf3faacf"
        },
        "item": {
          "id": "e0fc9670-7b44-4f50-a204-432c914362c0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "2a7d1ee5-a914-4560-be89-9b8b054d772f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d91ea1f2-ca3f-4206-b2c4-3fceff08ca02",
        "cursor": {
          "ref": "d223df4b-5aa0-4328-acb3-64ac9ca241b6",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "43954c42-fc20-415f-aeec-88d7c856d7bf"
        },
        "item": {
          "id": "d91ea1f2-ca3f-4206-b2c4-3fceff08ca02",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "40604205-2b5d-463b-b124-cea7cd6840b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e9ff316-db8b-4321-a43a-1662133011c2",
        "cursor": {
          "ref": "b14561f8-1850-4ba8-af2f-ab0902563530",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "3cf701c1-4d2b-487d-a522-a5b0f33a3a0b"
        },
        "item": {
          "id": "7e9ff316-db8b-4321-a43a-1662133011c2",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "1fc5d31c-22eb-4213-800f-83bb36a82e5d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2ae077a-1ed9-4788-bbf9-6a590f66c5da",
        "cursor": {
          "ref": "d06172e9-489d-4ae3-9166-c452fff8ab54",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "fa41539d-f388-4ebb-96b1-29aff44d9378"
        },
        "item": {
          "id": "d2ae077a-1ed9-4788-bbf9-6a590f66c5da",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "38e92621-3d4a-4c38-ad18-42a2720b25b9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b655179-3cef-4e2f-ab63-5c98cbbdbb44",
        "cursor": {
          "ref": "2713b99f-028a-40ab-be58-23e2d38708ff",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "a6947b0b-c066-488b-80a0-16d2120a7e48"
        },
        "item": {
          "id": "4b655179-3cef-4e2f-ab63-5c98cbbdbb44",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "3fc65f45-9e70-4649-8fda-40b25abdb33f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31aefb90-9fc9-4fa1-9af3-96fb51c44be5",
        "cursor": {
          "ref": "9e190b7b-573b-4820-96d8-bcf73e3f7238",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "7b92216e-33d8-45db-a2af-88f1357ec2aa"
        },
        "item": {
          "id": "31aefb90-9fc9-4fa1-9af3-96fb51c44be5",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "8ca1e8d4-3322-4bbc-aa29-a8e59a7eec95",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72bdfde1-edd3-48f7-b156-1899ba901807",
        "cursor": {
          "ref": "031c110a-e536-4b8f-a115-deae0ce4d313",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "1f051205-9c4f-469f-ac08-c70f9e085ea1"
        },
        "item": {
          "id": "72bdfde1-edd3-48f7-b156-1899ba901807",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "30a23a69-f056-41a5-9eeb-d039e420e857",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95ce6baf-ff9b-408d-92aa-eeff89b267bc",
        "cursor": {
          "ref": "6be7b4f4-2ba0-4a8b-8aaf-13300a7fc448",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "b9809cb7-78bd-4f18-ba53-bf5250d62f15"
        },
        "item": {
          "id": "95ce6baf-ff9b-408d-92aa-eeff89b267bc",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "2c495caa-1eea-4569-a4a1-f24a2af48069",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32423981-26a9-4160-a2d8-873e691f7549",
        "cursor": {
          "ref": "f90e7b42-459b-48d6-bcd5-9b713c6f1d3a",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "89f24f4a-dd6e-4f2d-a5db-961d319a4c96"
        },
        "item": {
          "id": "32423981-26a9-4160-a2d8-873e691f7549",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "b19b2b9f-087f-42a2-8f0b-900bf83054ab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4966cd0b-8784-4aad-ab65-ebb8a7d0b5c3",
        "cursor": {
          "ref": "caced873-8191-4c9e-97a4-e1f8fab3e791",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "1c7a5eb3-1357-4372-a3c4-19b3e8b0360f"
        },
        "item": {
          "id": "4966cd0b-8784-4aad-ab65-ebb8a7d0b5c3",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "c5d4b53f-0ef1-465a-9b30-b4cca9cf9346",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6447d9c-6baa-4513-bb1a-874e32f8c2e0",
        "cursor": {
          "ref": "6108108a-6455-4f3b-9464-72433d339578",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "4df29244-9f7e-40d4-b4e6-39e60324287b"
        },
        "item": {
          "id": "f6447d9c-6baa-4513-bb1a-874e32f8c2e0",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "3e033645-dc95-4039-8345-8a86bafbcfab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d25a057c-1ab6-49b4-af6c-daa4061900d7",
        "cursor": {
          "ref": "d472b6c0-21c0-458a-8197-1ce3874e8e4a",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "87cb1f6b-f6e0-4b1d-b275-80099f99cb97"
        },
        "item": {
          "id": "d25a057c-1ab6-49b4-af6c-daa4061900d7",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "e2fdd669-b29a-45fc-9716-6239be367d01",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fb7650d-5699-4a3d-8cb5-9495d38d37d5",
        "cursor": {
          "ref": "bbb0c401-3bc2-4b8f-a707-c46f6a98527c",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "a2a6545b-a042-4374-970b-cd61dcbf4db3"
        },
        "item": {
          "id": "1fb7650d-5699-4a3d-8cb5-9495d38d37d5",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a5ec1070-875e-4576-975d-4e2a8db6b665",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe460cf1-ab7c-4a3d-bbe8-bb14f10974d8",
        "cursor": {
          "ref": "aed54065-afff-4f04-a1c0-562472b80e7e",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "ab9e6c55-b525-41d6-893f-07f6769f1008"
        },
        "item": {
          "id": "fe460cf1-ab7c-4a3d-bbe8-bb14f10974d8",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "c67a56c8-1b8f-43db-a2bb-9d234acafbf3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cc477d1-fdce-454b-9232-1cd42b34f73d",
        "cursor": {
          "ref": "7da88ecd-b16d-459a-9ff5-7ede8589c3f4",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "0e091aad-c26e-45db-a9d3-0cd4486b5837"
        },
        "item": {
          "id": "0cc477d1-fdce-454b-9232-1cd42b34f73d",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "d03b90de-3f5f-487e-b302-c808830af15e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0151ed4b-828e-4628-b472-e886af4838d7",
        "cursor": {
          "ref": "933ae76b-3bdd-462a-9674-5f11241355a1",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "de92f051-a62c-4fd7-aec5-33ea01f67ba5"
        },
        "item": {
          "id": "0151ed4b-828e-4628-b472-e886af4838d7",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "42b7d25a-647e-4409-b73d-08ad4a587c88",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "172221d7-7f84-4f43-ad7a-5daafa224dad",
        "cursor": {
          "ref": "21148ec3-4163-4cf8-ad9c-0d8771e23890",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "de34bede-abff-486f-809c-8e401b475695"
        },
        "item": {
          "id": "172221d7-7f84-4f43-ad7a-5daafa224dad",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "9683d4cc-0f96-40e5-a0f4-cb1b1c95c162",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9bdee51-6a70-4b5f-b7ce-5e869ebdedff",
        "cursor": {
          "ref": "0c9f25ec-0667-4697-ae68-a705643a10f6",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "f8f4f305-453f-4dbb-a7f6-88e80f267810"
        },
        "item": {
          "id": "d9bdee51-6a70-4b5f-b7ce-5e869ebdedff",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "1d13069d-8ed1-4ce3-b619-0e41b79a8224",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca220e0c-670d-47bf-bde8-cd706cc78bf1",
        "cursor": {
          "ref": "2402b1b6-72e6-404a-85aa-5cb83fd653c7",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "5c91d7e4-4956-438f-bfcc-2fc5287f8c0c"
        },
        "item": {
          "id": "ca220e0c-670d-47bf-bde8-cd706cc78bf1",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "93e36b33-f22a-4f6c-bcc4-23012b736b94",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57d4d9f5-7dd7-4a15-81d4-b0ab00af2b55",
        "cursor": {
          "ref": "5c929969-b603-42af-bccf-16c1c24687c1",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "f7a3c327-cac1-41b4-b1b5-cb84b2d94395"
        },
        "item": {
          "id": "57d4d9f5-7dd7-4a15-81d4-b0ab00af2b55",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "05ca29c1-e43b-4442-8373-bc9bd4d27d19",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e05bedb-8ec6-46fe-990a-a6e8cc4e5bb2",
        "cursor": {
          "ref": "c76b94c0-d3ae-4e08-88c0-882a5f87e1c7",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "5f13b7a8-dfd2-4e8f-a485-5e8494d9b8c8"
        },
        "item": {
          "id": "6e05bedb-8ec6-46fe-990a-a6e8cc4e5bb2",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "311aecd5-1c09-4bd3-aece-c49894ca0a21",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32314fe4-c144-4d2f-9bd1-b1d9852b819b",
        "cursor": {
          "ref": "40dd5953-3fc1-4fe2-acf3-b61a54af109b",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "dd45c95d-cf53-4e29-9c56-35488123724c"
        },
        "item": {
          "id": "32314fe4-c144-4d2f-9bd1-b1d9852b819b",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "b9543910-cbb3-449d-972e-1ee2c9d5e36a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0955abe4-ee29-4ac4-8f9d-d82f95173dec",
        "cursor": {
          "ref": "e3b63dc7-ea6b-458b-b15e-c226ad06a41c",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "005aa36e-0eb7-4895-a46f-71101d008b2e"
        },
        "item": {
          "id": "0955abe4-ee29-4ac4-8f9d-d82f95173dec",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "66f88c63-f1cd-43eb-badf-e18be6574845",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4508107a-6702-461a-946b-0108dccf6913",
        "cursor": {
          "ref": "b9bf9b9b-e70e-48b4-9bb8-3a759b7b2b9c",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "6451c913-cf36-4704-ab3f-b7fccd14e8ad"
        },
        "item": {
          "id": "4508107a-6702-461a-946b-0108dccf6913",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "60179232-2fa4-485e-b1f2-8c0afbdb197a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1d5582d-e64b-4385-890e-abb8aae2d262",
        "cursor": {
          "ref": "7f80ae79-ae2f-46e8-ab77-9dbcce297122",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "1d953d1a-ac7b-44ca-87c0-67502155bbb7"
        },
        "item": {
          "id": "e1d5582d-e64b-4385-890e-abb8aae2d262",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "2c974d1d-01bb-4b65-b519-12aab6225fe9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b8f188a-e9eb-41c7-9b8d-6aa71af6c296",
        "cursor": {
          "ref": "4c3a615b-1fe5-4971-9b94-65d098898512",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "f034ac47-d338-4880-ba5f-22004cef329a"
        },
        "item": {
          "id": "9b8f188a-e9eb-41c7-9b8d-6aa71af6c296",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "5a84a898-3dd3-4783-ad7e-642088dd69cb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf4e4fc5-252a-40df-85f0-f9530bacfd95",
        "cursor": {
          "ref": "a55f8adc-3144-4376-8d5f-d236e65e52d9",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "b62b4db8-5a13-4805-a961-1f6e9a910644"
        },
        "item": {
          "id": "cf4e4fc5-252a-40df-85f0-f9530bacfd95",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "fcc651b9-b43b-4753-a59f-a1662bb4ab73",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27aa526e-cd33-4ba0-929d-36821668c341",
        "cursor": {
          "ref": "5b0e2f6e-1c00-4882-a7e6-42407dcaeb94",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "6371f0b2-e304-4a74-8843-f6490a7b31d2"
        },
        "item": {
          "id": "27aa526e-cd33-4ba0-929d-36821668c341",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "45df2df8-113b-4cad-823e-7a69b03429d6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51ecc717-a47d-49d7-9dac-0a48903111fd",
        "cursor": {
          "ref": "7de8ed85-4f86-4833-a31b-d215225b9fab",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "2cf1e35a-1bfa-40f6-b362-ad1537a8886c"
        },
        "item": {
          "id": "51ecc717-a47d-49d7-9dac-0a48903111fd",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "7bf9d280-8a5a-454d-9894-f30037b69d86",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37127eaf-c058-4140-8060-948652ca8d45",
        "cursor": {
          "ref": "ffa8df83-9204-4f85-8b1a-e03ed0d719df",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "b7c59249-e895-4b45-82b4-d9ee4a2fbbf3"
        },
        "item": {
          "id": "37127eaf-c058-4140-8060-948652ca8d45",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "1b001f07-f9c3-4302-94f8-7ad862f7216a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07c350e2-5486-4456-b695-43af571083e0",
        "cursor": {
          "ref": "e41024aa-870f-4350-88ce-f414f7729071",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "34c13715-a910-479d-b3b9-8b63a4a7b6f5"
        },
        "item": {
          "id": "07c350e2-5486-4456-b695-43af571083e0",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "fc7cc1a9-30ee-40bf-83da-c445560e0efa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13dad270-e212-4401-87ba-902ad7c400d3",
        "cursor": {
          "ref": "212e42ca-fe1e-44a6-8e54-0628771daedc",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "61df0260-29da-4c1b-bf6f-16efccb7c134"
        },
        "item": {
          "id": "13dad270-e212-4401-87ba-902ad7c400d3",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "5f7e8236-7784-47fb-85f7-967e8acff215",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97a0eac0-d54d-40cc-b340-8f5687036a12",
        "cursor": {
          "ref": "0f516909-0e34-467a-885d-5b8e383e3eea",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "fb1202ae-bf97-4c4f-b5e6-25f4731b8711"
        },
        "item": {
          "id": "97a0eac0-d54d-40cc-b340-8f5687036a12",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "c403f36c-1bc3-4ea8-b516-19f79749383a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9ff91e0-9b6e-473e-8c62-cef6a397c140",
        "cursor": {
          "ref": "0723ddd8-ab5e-4f38-b850-adda51ffca54",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "633ed523-eca3-43f1-9ef2-5a8bcb56dca7"
        },
        "item": {
          "id": "c9ff91e0-9b6e-473e-8c62-cef6a397c140",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "6b1429a8-2eb4-44bd-8709-151fb68d831f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "04656b05-9980-420d-bc69-70751c4ae2b3",
        "cursor": {
          "ref": "d12ee129-de92-4b8d-bda2-911ca356fa55",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "c3ca4b2a-2eda-449c-93d3-d5f0339400a4"
        },
        "item": {
          "id": "04656b05-9980-420d-bc69-70751c4ae2b3",
          "name": "credentials_issue"
        },
        "response": {
          "id": "7f31b4d5-5552-450a-83b9-27220751b7ae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 160,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "e53cc67c-b0dc-46d0-8024-2c803a078a0c",
        "cursor": {
          "ref": "c84cb45a-138b-44f3-9e52-6c6eb7c4a3d1",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "ac6ac0eb-48ee-4f8b-9d61-6b2f2350e0f1"
        },
        "item": {
          "id": "e53cc67c-b0dc-46d0-8024-2c803a078a0c",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "e8c52457-b718-406a-a70f-2858eae9944e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "c6917fef-9682-4b78-ad18-3d26bda1ea87",
        "cursor": {
          "ref": "db5a3414-7d02-4ba3-b398-99db1d77a0f3",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "475a84e7-108f-4fd7-9b8e-4fb946ae48b2"
        },
        "item": {
          "id": "c6917fef-9682-4b78-ad18-3d26bda1ea87",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "a9ae0588-0619-4922-9d9d-fdf9eeb9cc2f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "877f58f3-d552-4692-b055-f5cad973a9be",
        "cursor": {
          "ref": "202f362d-8270-45ff-8852-9bc7d78ef498",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "bd713d4b-7bea-4a5b-96e2-f14d04e4392d"
        },
        "item": {
          "id": "877f58f3-d552-4692-b055-f5cad973a9be",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "7821c3dc-4d3d-4733-8aed-2aee717ef27f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "fb624c19-244d-472a-8485-872c7ee14902",
        "cursor": {
          "ref": "05051686-ecef-4f19-93d8-f47d208fa60c",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "98bce45b-3509-4943-9ec0-9d6e58213d53"
        },
        "item": {
          "id": "fb624c19-244d-472a-8485-872c7ee14902",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "fd64f6f1-1351-4c48-832b-26a086ad952f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "2bee1858-a1a5-496d-8d7e-59fd2fcaac69",
        "cursor": {
          "ref": "71b7b7f7-b090-4bbf-ada9-e139b83bef85",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "f3fea054-3aaf-4654-8d0d-1afa89bd86c5"
        },
        "item": {
          "id": "2bee1858-a1a5-496d-8d7e-59fd2fcaac69",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "592da3bf-0994-4c2f-bfd6-4b187e0574bf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "db380adf-564d-4d39-9333-efe1b2060dc9",
        "cursor": {
          "ref": "1b7402bf-73e0-4240-a0cd-9a5dcf26dbc1",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "ea285db7-0f4a-4d8e-9f28-4dd932187bfe"
        },
        "item": {
          "id": "db380adf-564d-4d39-9333-efe1b2060dc9",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4b26785a-9c41-4e0e-978b-c8b003d34b7a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaab215c-bcc6-44e9-be19-eabf3ddbb932",
        "cursor": {
          "ref": "8d4e7a27-baf3-4022-bd90-b9020d317a82",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "43ae146f-5926-45fe-9925-33c68c7489e5"
        },
        "item": {
          "id": "aaab215c-bcc6-44e9-be19-eabf3ddbb932",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c04419a0-e7c5-41f2-8879-d35e211727ef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a34fd02b-a9f3-4500-98b5-ca40d2728e9f",
        "cursor": {
          "ref": "f7817c7b-57d5-468c-8547-d5b5e49608cc",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "b0f2b639-3eb2-4e55-b4cf-bd4e0e5e5653"
        },
        "item": {
          "id": "a34fd02b-a9f3-4500-98b5-ca40d2728e9f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b066b8e8-98a1-4a6d-83ae-60cfba41df63",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52bdb0c1-1d7a-4897-b9ea-009f734a2134",
        "cursor": {
          "ref": "ce3f1278-1da0-40f5-a205-6fead82383bd",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "895c9af2-1500-43df-a615-d97d53180559"
        },
        "item": {
          "id": "52bdb0c1-1d7a-4897-b9ea-009f734a2134",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "74ffb04d-9a14-41bd-83db-ab3c5192f38a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddc48223-bb1f-4670-9631-0e5ed098e704",
        "cursor": {
          "ref": "79175162-46ed-4904-bc7c-d4f5eca1e60e",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "cd9cc221-ee38-46be-8606-4f9d3900e9a9"
        },
        "item": {
          "id": "ddc48223-bb1f-4670-9631-0e5ed098e704",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1db45e6e-32d4-4d89-a344-d79833e4c687",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24ddd90d-ea30-4c8a-b33b-131767a27dde",
        "cursor": {
          "ref": "a4869f0d-5345-491d-aa87-6cd007777f85",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "de805bf9-d022-4d3e-bdbc-a91027255606"
        },
        "item": {
          "id": "24ddd90d-ea30-4c8a-b33b-131767a27dde",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e0ddbf49-172a-4b35-8fc3-dd6fe42dbccb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64669dd7-f4f4-45c4-b300-6b36525af63d",
        "cursor": {
          "ref": "6732b510-298e-4f95-826e-9e8e4ab18011",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "1bb6eca7-0af5-4ab0-9014-f57e7df228f9"
        },
        "item": {
          "id": "64669dd7-f4f4-45c4-b300-6b36525af63d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "28649001-91b1-4782-9328-41b489030dcb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10026ab6-4e18-421b-9ce8-9eb2e27431d9",
        "cursor": {
          "ref": "7c2521ce-87c4-4acd-999c-f5bb181da148",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "1b00bd3d-4713-418f-8272-409901fc6668"
        },
        "item": {
          "id": "10026ab6-4e18-421b-9ce8-9eb2e27431d9",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "93f1c6fe-7acc-45b7-85f1-942c25322ba9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85916502-47eb-4dc8-a546-8981d04d8b6a",
        "cursor": {
          "ref": "f9ee7757-4a55-419f-a356-ad9d64524c0f",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "042550e8-2e93-4d43-8eef-d16d4c2f566d"
        },
        "item": {
          "id": "85916502-47eb-4dc8-a546-8981d04d8b6a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "3fe7e15b-1994-4640-80db-52e8fbdaadfd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26321a14-38b3-46bd-8c26-47702ca5f912",
        "cursor": {
          "ref": "957bd663-6cc6-4ef9-93e8-3482d7a29d24",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "bac3c85f-fa7c-45ef-b49b-a8bdf13ad1f0"
        },
        "item": {
          "id": "26321a14-38b3-46bd-8c26-47702ca5f912",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "0a34bde1-c4b6-418d-973c-a80eb3fe6f51",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1d70394-652e-4eb3-8c53-5f8562358f8a",
        "cursor": {
          "ref": "ed589b4b-3685-44da-8758-d3d5c2748387",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "d1c3b786-b2dc-4663-99c0-5787d97c938e"
        },
        "item": {
          "id": "e1d70394-652e-4eb3-8c53-5f8562358f8a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "84826097-3cb2-4758-a467-22b138ecf3cf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 12,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30aaecb9-844a-4852-acd6-e157838dab0d",
        "cursor": {
          "ref": "cb54a41e-2999-4bc9-8b49-fde6e23dc850",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "3405147d-9af3-4a94-847a-2ceab79463e7"
        },
        "item": {
          "id": "30aaecb9-844a-4852-acd6-e157838dab0d",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "99ab56f6-1870-4a5c-947e-a9d078422b4a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae187310-27c8-4413-9af1-0bb2ed05b7fe",
        "cursor": {
          "ref": "e9ad103c-ba3e-486c-a835-e05e030b7b34",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "99f303e9-5a99-4758-bb87-145facec62b7"
        },
        "item": {
          "id": "ae187310-27c8-4413-9af1-0bb2ed05b7fe",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "620fb37e-7034-410b-a5ba-870de813a93b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12265f06-6f5b-453f-96ab-c852f3a27925",
        "cursor": {
          "ref": "c9635138-2a57-4166-b6e5-715648da84cc",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "7cd839fb-5d9d-437e-a767-07b5c9d30440"
        },
        "item": {
          "id": "12265f06-6f5b-453f-96ab-c852f3a27925",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "da7b852a-3d8c-4f12-baef-dd53791af30c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccef4e67-ce97-4dbf-96a0-81d3ac5b79ac",
        "cursor": {
          "ref": "ab84e3b3-7341-4796-9989-509a38389b59",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "ae638eee-467b-4f44-ad5c-1a2efd809479"
        },
        "item": {
          "id": "ccef4e67-ce97-4dbf-96a0-81d3ac5b79ac",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2822ec0b-deef-42ab-8e36-b421d30ba4f7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e51cc373-75c5-489e-b6c5-e949ec0dfcb0",
        "cursor": {
          "ref": "e47b67a0-083a-4d5e-a568-9d0d614c6999",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "b05af328-66f5-4319-abb1-7349e70bd100"
        },
        "item": {
          "id": "e51cc373-75c5-489e-b6c5-e949ec0dfcb0",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "da5078ec-6502-4615-b703-661917da7db5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba0a4c30-6648-459f-a3bb-07f501b30aa9",
        "cursor": {
          "ref": "13e53a6c-8e53-49ff-a93d-7d0eb5c14128",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "bb82da0d-d646-426f-9638-74d788c252ad"
        },
        "item": {
          "id": "ba0a4c30-6648-459f-a3bb-07f501b30aa9",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "71af56a7-0e54-4fe6-997e-ace0632db2b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31e39c2d-70ff-47f9-a328-734ac9e554cb",
        "cursor": {
          "ref": "590c6b61-c84a-4fcb-b4e3-5041b6ae869e",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "edb582e3-7f96-472a-9757-2c8cd3af60ad"
        },
        "item": {
          "id": "31e39c2d-70ff-47f9-a328-734ac9e554cb",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d89d820d-4b1b-4f2a-aa56-bf4884156d20",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d205dd65-3b3c-4ecd-9535-838b8e96d942",
        "cursor": {
          "ref": "6b1eabff-552e-4557-843d-e636e2f644f7",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "5e2901bc-0401-4d9f-a400-b548c6f234d9"
        },
        "item": {
          "id": "d205dd65-3b3c-4ecd-9535-838b8e96d942",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "6161823f-2fbe-4713-81ef-80bc390bea87",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8e79c39-415c-490e-9d8b-44e3945326b8",
        "cursor": {
          "ref": "1dc15b30-2d74-49ff-b8ca-8434860acde5",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "f7ed5f03-a7d9-4f65-bc7a-5212feac6181"
        },
        "item": {
          "id": "d8e79c39-415c-490e-9d8b-44e3945326b8",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "47819d94-984a-404e-8ee1-54ff8619d751",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4029aa2-92bc-45f1-878c-970bab9be712",
        "cursor": {
          "ref": "ee79e5eb-32d4-4473-a24e-86036b490449",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "f4895d42-981d-4d83-b31c-22628f075256"
        },
        "item": {
          "id": "c4029aa2-92bc-45f1-878c-970bab9be712",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "6a2fbc37-9bdf-44a2-8ca8-1ddbdfd46422",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e717a63d-b56f-444b-ae69-adbebaf248fe",
        "cursor": {
          "ref": "df223052-b399-41c2-9aed-90c310f2d9f3",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "f7f0a386-0fd3-4795-8c89-2ac615c82066"
        },
        "item": {
          "id": "e717a63d-b56f-444b-ae69-adbebaf248fe",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "17c752db-55e8-4182-b6db-0458b8c7471d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad6c6a99-c0f1-45de-892c-cf03ab84adc5",
        "cursor": {
          "ref": "9b3a4a4c-6407-409f-b6bf-78b47ee7649a",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "3eab39b5-9826-410e-8915-efdb038768d5"
        },
        "item": {
          "id": "ad6c6a99-c0f1-45de-892c-cf03ab84adc5",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "aa0a497a-d395-48dd-b356-edfcdcfbebdb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "049a81fe-8121-4e35-a5e7-b6a4c9b2cd07",
        "cursor": {
          "ref": "a4c67a6b-e566-4ada-9d7b-bc4b1d929f3e",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "03dab936-7a5c-4191-82f2-df04245d5f8f"
        },
        "item": {
          "id": "049a81fe-8121-4e35-a5e7-b6a4c9b2cd07",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "afa37273-1eaf-4be5-b5d7-02997c9e5d53",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8a7e4c5-a228-4e7f-bd76-07d181fc1923",
        "cursor": {
          "ref": "59852d1e-211a-48ca-a568-5d7a357d91dd",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "b8125991-b996-46fc-b9f1-34fc1e154e80"
        },
        "item": {
          "id": "e8a7e4c5-a228-4e7f-bd76-07d181fc1923",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c3576203-4523-4642-bdc9-f33ac6f24d89",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec6ce0a9-3c5d-40c9-96f5-5182c7f5058d",
        "cursor": {
          "ref": "e079e5a1-c026-4fae-bfa1-68c833b69a65",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "aec70e76-986d-43cd-b25d-4370b7e10596"
        },
        "item": {
          "id": "ec6ce0a9-3c5d-40c9-96f5-5182c7f5058d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e18fd559-2b9f-4adb-9490-e7cd4da3984f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50222485-7c82-4676-8a52-7dc3eb89264b",
        "cursor": {
          "ref": "6bf2f863-ce3b-48c3-b6cd-85a1ee7469ed",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0d2f99d7-285d-4fd0-9ed8-d2576d45bd54"
        },
        "item": {
          "id": "50222485-7c82-4676-8a52-7dc3eb89264b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "3b57591e-dd1b-49d0-94c9-1b0dc1bff039",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41ead6bf-1374-4237-806a-5cace8a2efd9",
        "cursor": {
          "ref": "41250a40-90ca-4651-88a9-fb019dbc3a88",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "a2c6fb05-c6fc-45e4-8569-8f91da6e6c4c"
        },
        "item": {
          "id": "41ead6bf-1374-4237-806a-5cace8a2efd9",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "dd857535-1c0e-4c5a-bb62-f6a39cbffe47",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "890b274c-3926-4564-955d-767f525b90b8",
        "cursor": {
          "ref": "df5d3d8e-1286-4676-86e0-c3894ee03cc9",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "de4c00eb-b9b2-4fa3-abaf-ccba4fdb7663"
        },
        "item": {
          "id": "890b274c-3926-4564-955d-767f525b90b8",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "3332d001-898e-4709-be1a-dbdb5129a652",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f61a7260-e8f0-4c0e-91a9-cc69a703999d",
        "cursor": {
          "ref": "60d5e721-8046-46e0-b38a-d2a142433193",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "1e28c11d-cfc9-4283-b75e-61e172bcfbc4"
        },
        "item": {
          "id": "f61a7260-e8f0-4c0e-91a9-cc69a703999d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "9e92f6fc-e17d-46ec-a266-a1e848aed53c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6717256-a52e-4bfd-a9c4-58998a09907e",
        "cursor": {
          "ref": "dd2bbc3e-31a3-46dc-9c64-beb4c6be513e",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "12cd05b0-409a-4cdd-a345-24d4ef50a768"
        },
        "item": {
          "id": "d6717256-a52e-4bfd-a9c4-58998a09907e",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "98d3351f-0a9b-4334-97b2-f2b5454b6308",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "333d0eed-f165-40fa-887e-50dd0c196992",
        "cursor": {
          "ref": "3bd681d6-bdb9-4992-a7ed-47a7c403c829",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f83f6332-dece-404a-b7c6-a5e60190f5b6"
        },
        "item": {
          "id": "333d0eed-f165-40fa-887e-50dd0c196992",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "355a90c8-68bf-4414-9338-150c49bf6b05",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb05d859-31b8-48a6-8b2f-d66e6242ad14",
        "cursor": {
          "ref": "5d167d44-4907-4e67-aa64-bf92b0a2fe1b",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "5bd6d1b8-2b83-41e6-af67-a4c308f012b4"
        },
        "item": {
          "id": "bb05d859-31b8-48a6-8b2f-d66e6242ad14",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "d1432779-e0c2-42f6-a2ae-46e9eb4c1c43",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0e0da41-5cc7-43d6-b109-5c0120699552",
        "cursor": {
          "ref": "fdb5d80a-3649-4513-8d1b-99d00b217a74",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "2dc7bdcb-ebef-45be-b5c3-3c519685c6f4"
        },
        "item": {
          "id": "b0e0da41-5cc7-43d6-b109-5c0120699552",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "ae7a2c2d-d1aa-4e8e-8cf4-89caf6c76920",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dcbb585-b109-4216-85cb-8b2da6392705",
        "cursor": {
          "ref": "b713ea8a-9855-4dc5-8c8a-d1fe6ed2f246",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "6e2eabd7-e3f6-400c-9441-9de2a4c35691"
        },
        "item": {
          "id": "5dcbb585-b109-4216-85cb-8b2da6392705",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "f56c5dd3-043f-45d2-bed7-0dfff3974a69",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fad578b5-4286-44df-94a0-969f330d5d55",
        "cursor": {
          "ref": "bc34acec-73ac-4abd-83d3-60ff4c08ab3e",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "7d7d1388-03dc-4e8b-ac3b-35d1cf02bbc3"
        },
        "item": {
          "id": "fad578b5-4286-44df-94a0-969f330d5d55",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "950c3967-1eb6-48fb-9a0f-f75ca309d56c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fd33efd-e9c6-4b8c-88b4-6be05ee89497",
        "cursor": {
          "ref": "89716f39-4873-40b6-aeb8-bbb5ad5c84af",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "1ab453f2-adbd-4ae3-af5a-4df6a1d90efb"
        },
        "item": {
          "id": "9fd33efd-e9c6-4b8c-88b4-6be05ee89497",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "45635898-ff6b-4051-8f7e-716f595af693",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21d452ad-b1d3-4498-a691-d37ce77991f2",
        "cursor": {
          "ref": "6f8cab69-8efa-461b-b1d0-c9f539043db9",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "2921b24e-c0a5-4602-b2de-d956c9f2dfa9"
        },
        "item": {
          "id": "21d452ad-b1d3-4498-a691-d37ce77991f2",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b9eb1faf-594c-4268-b463-77904940f9ca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "145fab44-439d-4ab7-996a-341f5d561180",
        "cursor": {
          "ref": "2f4c3d98-a4a1-4f86-9ab4-ba0be338be88",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "72dcef24-322c-45df-88a8-6d42bda98e4f"
        },
        "item": {
          "id": "145fab44-439d-4ab7-996a-341f5d561180",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "1ed50bf9-8bee-4272-990f-4db1551d4691",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c1dfce8-32d9-4110-8bd8-8d5ba658274b",
        "cursor": {
          "ref": "93be96d3-a2eb-41a6-ba9b-6fdd88ce6588",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "5d0a316f-bdf1-44fb-967e-f1d2f9630419"
        },
        "item": {
          "id": "5c1dfce8-32d9-4110-8bd8-8d5ba658274b",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "4455b2d9-5e56-4f9b-9990-dea4ca7ab474",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8af0d9f3-2f42-48ee-bc79-49ca1d7bbde2",
        "cursor": {
          "ref": "309b609f-1b1a-4ff6-a703-74f4f9e2be4f",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "16006743-36ad-411a-871d-d351a05e8d7a"
        },
        "item": {
          "id": "8af0d9f3-2f42-48ee-bc79-49ca1d7bbde2",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "1cadc5cc-6ede-4bbe-a261-7f99bea4fdac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42f13b66-d94f-4a50-9c62-fd8cd3de62c1",
        "cursor": {
          "ref": "e1b0edf3-0f8b-40c1-8ebe-6e4958f6fb85",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "a844a4f0-d4c3-4a9d-9526-5f1da9969a20"
        },
        "item": {
          "id": "42f13b66-d94f-4a50-9c62-fd8cd3de62c1",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "123a09f7-c249-49f8-a30c-a0ac8332435c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66b3073f-12d6-450c-8f3c-da742adee625",
        "cursor": {
          "ref": "2731d1ca-ed4b-47fa-9598-b1ded5be6e64",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "81323bbe-41b4-4012-832d-28507dbfa664"
        },
        "item": {
          "id": "66b3073f-12d6-450c-8f3c-da742adee625",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "ca38b420-1d1e-45fe-8d80-959df1b06630",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7cd8306-9811-4464-aee5-48d76afd2239",
        "cursor": {
          "ref": "1329a147-179a-4ddf-aa07-b89e232fdda7",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "128d8e55-2eeb-47d7-8266-184b8112ac0d"
        },
        "item": {
          "id": "d7cd8306-9811-4464-aee5-48d76afd2239",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "3a8e757a-cec9-4b47-8bb4-00478fa99099",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61838d44-8230-4040-b721-982135b1fece",
        "cursor": {
          "ref": "a655dd96-20f2-46e1-af6b-a133df8f574b",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "9544c6e8-c08d-42a0-ab03-fab2a57167b1"
        },
        "item": {
          "id": "61838d44-8230-4040-b721-982135b1fece",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "1eae4df0-2931-4655-88d7-e26b4560f3bc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a01a3bf-5631-41fd-9083-d08e44500afa",
        "cursor": {
          "ref": "f2d35ec2-67ca-4053-a3c0-8f3bf380a90c",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "70294330-0964-4b27-880c-126d4ee63d8c"
        },
        "item": {
          "id": "4a01a3bf-5631-41fd-9083-d08e44500afa",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "6f026f54-8719-440f-8fa8-3fc2b62ec256",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efe1658a-c91b-4df8-8a1a-aefc55804101",
        "cursor": {
          "ref": "779990ee-111d-469a-a552-a56c053f3599",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "96f8eaf4-a114-4c58-8e90-36ac156a2b13"
        },
        "item": {
          "id": "efe1658a-c91b-4df8-8a1a-aefc55804101",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "61ceb3e0-56b9-4a78-8e9a-056747973bad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "257711ac-196d-483d-a5f1-2112c7e2ad5e",
        "cursor": {
          "ref": "a3c361a7-c620-41b4-8cf4-cdddb1abf0d9",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "b4254379-b6eb-4888-972c-9d7f679511a3"
        },
        "item": {
          "id": "257711ac-196d-483d-a5f1-2112c7e2ad5e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "c39bf982-fad2-43a3-9887-5f52e6912acb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7ae0216-9124-46a5-9bdb-f46e5ca1bf82",
        "cursor": {
          "ref": "3239f534-2ab6-433d-bd4e-6aefd5d4b631",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "cae2b0fb-6a66-4e70-93d1-8717b03127e4"
        },
        "item": {
          "id": "a7ae0216-9124-46a5-9bdb-f46e5ca1bf82",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "6a3b977c-5543-48b6-9825-035fb53e152b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87951501-dc2b-4950-85a5-af97bdf12a5e",
        "cursor": {
          "ref": "6b07d310-869c-4a29-8293-7bde52a90a2d",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "a8b5dc3c-c96d-4a31-9766-e5de65bb936d"
        },
        "item": {
          "id": "87951501-dc2b-4950-85a5-af97bdf12a5e",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "31c5ab9d-b4eb-465f-83e6-b3cfc744a14e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d93304fc-b306-4e20-adca-77023c416f88",
        "cursor": {
          "ref": "1bfad0cf-e3c0-4a2a-ad4c-3f6cde2260da",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "25547a12-67da-4555-a9cb-726946ef41bb"
        },
        "item": {
          "id": "d93304fc-b306-4e20-adca-77023c416f88",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "22c77400-f15c-45d4-9468-1e8e4534d3bd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67b67814-7142-4821-a387-489b12cf700b",
        "cursor": {
          "ref": "4c49e55e-dd49-4398-a011-be5c8a597829",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f4504cc8-5f7f-4ba6-bf0d-5b055a327edc"
        },
        "item": {
          "id": "67b67814-7142-4821-a387-489b12cf700b",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "2c3abe9c-36d5-45fa-8119-0cf797f5e838",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afe4a9a8-31cf-4609-9e89-c4b0ae213436",
        "cursor": {
          "ref": "ead2456c-5a70-40cc-9c54-b1825abdd94b",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "9b4ba299-8fdc-4df0-9374-2b5ef5040783"
        },
        "item": {
          "id": "afe4a9a8-31cf-4609-9e89-c4b0ae213436",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "05cf3a0a-5749-419f-bf94-a48065b35679",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6af88278-2b81-409c-be56-5485fb9f04fe",
        "cursor": {
          "ref": "51e05255-6384-45f0-881b-76c859672966",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "ebf7044f-6604-445b-868b-01061afa188c"
        },
        "item": {
          "id": "6af88278-2b81-409c-be56-5485fb9f04fe",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f0f4501d-bed1-4f24-9347-a3f35f149cfa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f626cc7-98ae-4d28-80ef-f659fdd39a6e",
        "cursor": {
          "ref": "c61d0a0a-4575-4b9e-afb4-1aac72a15802",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "4b2c91ae-ddc0-4220-8aa2-3b37a7a355bd"
        },
        "item": {
          "id": "9f626cc7-98ae-4d28-80ef-f659fdd39a6e",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "74af9734-1332-44b4-8aee-69a1d0922847",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f5b6dd5-63c8-45cb-9ac6-3152933ad838",
        "cursor": {
          "ref": "06e178bd-cdb0-4ad0-8ad5-8b1a7fabbe57",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "5e854fab-21d6-46f8-ae0e-37179f6643d0"
        },
        "item": {
          "id": "5f5b6dd5-63c8-45cb-9ac6-3152933ad838",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "5c4ed3ea-1122-4dff-ab81-607151784a21",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7c64213-6e6c-441f-a410-2b2308c4e82a",
        "cursor": {
          "ref": "2eb4bd86-4f86-4a83-a8b1-90c690b5198e",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "6d69c110-310b-48a4-a950-1e661082b3d6"
        },
        "item": {
          "id": "f7c64213-6e6c-441f-a410-2b2308c4e82a",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "902b9e24-eef8-4ad7-b7b2-9b49fb9a6553",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db7725ed-f14a-4925-949d-f4f4886915b0",
        "cursor": {
          "ref": "6799bc19-75c0-4af8-90a3-c75b6f429a97",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c8f76cc0-81ec-463b-a37c-a045a7626d95"
        },
        "item": {
          "id": "db7725ed-f14a-4925-949d-f4f4886915b0",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "0863e51d-9afa-4330-80df-cdce56cc762e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edfbeb9e-961e-4c76-be9a-4d9426d4b445",
        "cursor": {
          "ref": "9a668633-7ede-42d2-89f7-6385e99dfe15",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "cf4fce9c-c53f-4b26-b7bb-ed551252d80a"
        },
        "item": {
          "id": "edfbeb9e-961e-4c76-be9a-4d9426d4b445",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "a69500cc-2ba0-4924-b53c-16d8ff56c86b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8c71756-9f85-4aa3-9cd2-1f9a936d3e46",
        "cursor": {
          "ref": "95ad8abf-f5be-420c-b054-581492c2abc1",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "0794d9ee-80e8-46bb-975d-9ef5c709c5ce"
        },
        "item": {
          "id": "e8c71756-9f85-4aa3-9cd2-1f9a936d3e46",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "9a0f2f1d-dcbf-41a7-906a-e10c6c215371",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a84cd48-0349-43b8-a86b-de1e14872074",
        "cursor": {
          "ref": "c5c00f8e-5f5e-487b-8019-050a5d802585",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "d0c3b2ba-ecfd-40b5-901a-a2915a48ecf9"
        },
        "item": {
          "id": "2a84cd48-0349-43b8-a86b-de1e14872074",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "13821e67-f20b-4ad6-9cba-972d470349f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43e8470b-fe24-4ce6-9ba1-9b1c5c07ce65",
        "cursor": {
          "ref": "67864239-b0c5-4d9c-8a88-e23d612f1b7a",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c3c41fa6-7b65-4f3d-ba08-38f06b8adfef"
        },
        "item": {
          "id": "43e8470b-fe24-4ce6-9ba1-9b1c5c07ce65",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4530f15c-4fed-4bc3-9048-a76868544586",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5833ebfa-0acc-4a07-a05e-c31ed229d159",
        "cursor": {
          "ref": "d51e93db-e97c-4b81-806b-cd4e59d3bf5c",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e1115223-37cd-48a7-b8ce-e631ac15f117"
        },
        "item": {
          "id": "5833ebfa-0acc-4a07-a05e-c31ed229d159",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "b75f7688-e90c-4ae0-b269-68e9a47a22f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98f38d38-888b-4ed5-a639-ec579fa1e41d",
        "cursor": {
          "ref": "0cf7c3c1-fee8-418a-9973-397919ad0a28",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "3ef4382e-ec60-4179-913c-3293f6b3e95a"
        },
        "item": {
          "id": "98f38d38-888b-4ed5-a639-ec579fa1e41d",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "0c94c839-1579-48ae-9123-530b46bcb0f3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46c0dd85-ddb6-4eec-bfaa-f7965725b2ec",
        "cursor": {
          "ref": "67f3905b-9ac4-496b-9a20-9a1d8818295e",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "d22b5c3c-1f05-46ed-883d-1665cc2cd234"
        },
        "item": {
          "id": "46c0dd85-ddb6-4eec-bfaa-f7965725b2ec",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "0a2fc930-6e51-478a-9b85-0fa72bb84673",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "459c33de-f8fc-4619-b7e2-b0e4bc2939ce",
        "cursor": {
          "ref": "026b7c74-c04c-4fbf-a6cb-d213f5e847e7",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "61f1dd0e-eb3c-4277-ad3c-7ae3d2b8647c"
        },
        "item": {
          "id": "459c33de-f8fc-4619-b7e2-b0e4bc2939ce",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "c0061c42-d3c7-41c7-812b-696786d81dc0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53f2121d-6a83-493a-b1ba-fd2427a4bb1f",
        "cursor": {
          "ref": "8ff6cbaf-4b68-4994-86c6-c8d76e2468b2",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "b1f5fa84-d42d-4819-8a9b-a0a2842bd5e0"
        },
        "item": {
          "id": "53f2121d-6a83-493a-b1ba-fd2427a4bb1f",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "fd1412da-594e-4df1-96d3-7f9bdaad76f1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b05c478a-5475-41d2-b454-97c5df2fa64b",
        "cursor": {
          "ref": "67f34e86-41e7-4652-8fe7-5f5a53ad08dc",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "431d4e0d-63ee-4783-ac7b-b8d02396f552"
        },
        "item": {
          "id": "b05c478a-5475-41d2-b454-97c5df2fa64b",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "98c966d6-9c18-4b28-a8dd-5d462c4e7637",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c76b8e0-9679-4ab0-bd6b-50a51c407244",
        "cursor": {
          "ref": "35fbad4f-a412-4fdb-bb58-4d130e1284cf",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "91591df7-fa9c-4789-9e8e-48d64cee0829"
        },
        "item": {
          "id": "6c76b8e0-9679-4ab0-bd6b-50a51c407244",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "6a6762a2-39ca-4df3-9759-1162f23ff948",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35b2e717-b3ac-4c77-8663-10c5df15a746",
        "cursor": {
          "ref": "bffac2b8-6f44-4f85-a86b-5715f5447913",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "62a9255b-9366-4e4f-a03b-9c96dc931e0c"
        },
        "item": {
          "id": "35b2e717-b3ac-4c77-8663-10c5df15a746",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "a982f1be-9875-4784-9333-5d9f9dfed1dd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e2d86ca-c393-4600-b1dd-36641783abad",
        "cursor": {
          "ref": "e17df958-bbd7-4411-99a2-64b8bf33f964",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "a60c0738-f3ba-41ff-aa19-c8688718fc0b"
        },
        "item": {
          "id": "3e2d86ca-c393-4600-b1dd-36641783abad",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "d5f7ab30-4829-4a97-84e9-2519b4e50ade",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b6f8d48-b5cb-4ec8-8c32-3ae9777afb8d",
        "cursor": {
          "ref": "da35a6b2-02bd-4dd1-987d-932bfa4da227",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "a2db40f8-7d3d-4be5-bad1-3cc62e6cc15c"
        },
        "item": {
          "id": "9b6f8d48-b5cb-4ec8-8c32-3ae9777afb8d",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "db51814e-7b4c-4a55-9f51-b39e119e6e01",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db77589a-5452-4c42-a543-4292380770d2",
        "cursor": {
          "ref": "14a4452f-4c4d-449c-be21-97bca3b2ce34",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "6d044d35-4c82-4255-a5fc-f25024cc1e84"
        },
        "item": {
          "id": "db77589a-5452-4c42-a543-4292380770d2",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "49aa5ac1-80eb-453f-9faf-e98777057f00",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f62421e7-32c1-4db6-8c04-a4bd2f644e7b",
        "cursor": {
          "ref": "8896ff20-60c4-4efc-965d-74930250e4c4",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "2332c22b-c4a5-41e6-a5a0-f41f734ea45d"
        },
        "item": {
          "id": "f62421e7-32c1-4db6-8c04-a4bd2f644e7b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "27265720-ba8a-45e4-9ff5-9a239507ff3a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6564e786-5c75-4d42-8013-deb0d9e2dfa2",
        "cursor": {
          "ref": "0dff7751-b292-4830-bf11-d88cccedf5dc",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "5af4a221-1d9f-489b-8e25-e845001b6b4d"
        },
        "item": {
          "id": "6564e786-5c75-4d42-8013-deb0d9e2dfa2",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "35798060-b773-47da-b838-e04d8060fad8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "747b79b0-a1c9-44d4-b048-4a1e59cb7b86",
        "cursor": {
          "ref": "cf741cdc-b67e-4497-a820-878ecfac5004",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "70bbfe5e-4f3d-4a07-b37c-a556dd9631d4"
        },
        "item": {
          "id": "747b79b0-a1c9-44d4-b048-4a1e59cb7b86",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "1d8e1a51-5e7a-4bbe-8f72-4caa034b91f1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97dc24a6-3084-4d53-b71d-3745f033cce8",
        "cursor": {
          "ref": "ef0437a7-27e0-43ea-813b-affcdbaa7d07",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "be603345-74f8-4c7c-8c69-b64abd108641"
        },
        "item": {
          "id": "97dc24a6-3084-4d53-b71d-3745f033cce8",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "eee6f537-3793-4af6-8dc4-932bb4719731",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c36ec9e9-d6ee-4fbe-ba6f-f05a099e6223",
        "cursor": {
          "ref": "db37483b-d65c-4afa-a093-d2845a5cf4ad",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "a333a45f-2a27-49fd-9be9-53b4a12fa95a"
        },
        "item": {
          "id": "c36ec9e9-d6ee-4fbe-ba6f-f05a099e6223",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "41482386-8787-4df6-9ed0-67d9451ffe0b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "247913a9-1447-49b5-ab16-12dfafc96a04",
        "cursor": {
          "ref": "f694aab7-4f1a-4226-a9c2-de8e346e8858",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "b5fce243-2460-4e24-ba85-1eac49805d54"
        },
        "item": {
          "id": "247913a9-1447-49b5-ab16-12dfafc96a04",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "9d568b62-f9c4-4cb2-b9be-d37a7876040b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7776689f-9a44-42be-bb4d-73588ec93e31",
        "cursor": {
          "ref": "bab5966b-dfec-4021-aa52-8ba03d902b8f",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "8f820663-58f1-4008-87bc-43929df1897a"
        },
        "item": {
          "id": "7776689f-9a44-42be-bb4d-73588ec93e31",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "622faeb8-0f43-460f-9228-5b786ba0f0a7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f982127-fafd-40fd-b6aa-a7572256e3fb",
        "cursor": {
          "ref": "94d18999-9ee4-4767-b46e-b6dd12859ff1",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "34060d28-23f1-4b76-8d59-959e963958ae"
        },
        "item": {
          "id": "9f982127-fafd-40fd-b6aa-a7572256e3fb",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "51088bed-ded8-479e-abc1-74b30168c80c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8d6c1ce-d056-449a-abd7-2b988bb0d86f",
        "cursor": {
          "ref": "061e8219-3fef-445c-8548-f06bf086024f",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "b04b7999-fc80-4b6c-8993-4c29baf3daf0"
        },
        "item": {
          "id": "a8d6c1ce-d056-449a-abd7-2b988bb0d86f",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "54e9db81-41bc-4f46-bfe5-0308b9a79be0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a1691a6-cc06-473a-810f-fd06cb7254e1",
        "cursor": {
          "ref": "b4f9f1e4-3b61-45ee-9a1a-7f84ac4fe467",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "ab846124-708d-4f12-b58f-530ec186cc59"
        },
        "item": {
          "id": "1a1691a6-cc06-473a-810f-fd06cb7254e1",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "cfa72856-6277-4b2c-ae2b-fd5800371aa0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9395a047-9866-406e-8d46-8e9e41786ba2",
        "cursor": {
          "ref": "4073d21c-75b1-4866-923c-3da69112fe71",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "ef6a19bd-f6c1-448b-9f89-88da8f6f8b15"
        },
        "item": {
          "id": "9395a047-9866-406e-8d46-8e9e41786ba2",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "c3dcea54-6186-4df1-bc7d-2478b1135fd0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03798665-7a41-44a3-9654-5488cea32caa",
        "cursor": {
          "ref": "ef707623-2c0a-4d3d-9648-75b981d0392f",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "0fff3850-3bc2-4c15-b34f-5d08a18d20db"
        },
        "item": {
          "id": "03798665-7a41-44a3-9654-5488cea32caa",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "7928ba56-f189-455a-a6a7-ff9264d8d9eb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e88543e9-ef5c-4b7d-9130-f83d9ed3fc82",
        "cursor": {
          "ref": "7ae79184-e0a9-4659-99b4-f6934b01bd09",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "28ce8c62-42d4-4eb2-a9f1-cd3c1664dcf9"
        },
        "item": {
          "id": "e88543e9-ef5c-4b7d-9130-f83d9ed3fc82",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "44b3d8fa-9312-48b7-9b09-5081646e25f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31097fdd-40c8-4a70-800e-f44fa9f5f807",
        "cursor": {
          "ref": "ff0c2188-d1a4-43b9-bc46-955419965f5c",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "ea6af98e-068b-4b50-99c3-b2fcb3852a89"
        },
        "item": {
          "id": "31097fdd-40c8-4a70-800e-f44fa9f5f807",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "8787405e-778f-49cd-ac70-9d11b83157c2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c27ce08c-1e29-4ed1-a554-b28241e49d83",
        "cursor": {
          "ref": "dced2ded-979b-4839-be5e-d677a4902825",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "3377f0a3-6d87-4991-b353-0b9befad9017"
        },
        "item": {
          "id": "c27ce08c-1e29-4ed1-a554-b28241e49d83",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "decbebad-1f21-49ca-a6e3-5db8aafdc4a5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "643b3bc2-0bba-46b4-bbf2-b0773d903c61",
        "cursor": {
          "ref": "3c25c775-e7eb-4fb5-b830-c9dc29247455",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "51ba8d27-4e50-47f1-9f35-6bdd1d5465b7"
        },
        "item": {
          "id": "643b3bc2-0bba-46b4-bbf2-b0773d903c61",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "7880bf87-100d-4cb6-b16e-5fa7b09fcab2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8405e0a6-9b2e-471c-b3de-c3e20ea09340",
        "cursor": {
          "ref": "ded1c9c6-dafc-4999-91ef-846586b8ca07",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "ecc4d523-3b7c-4843-8ca7-d71b25f46b44"
        },
        "item": {
          "id": "8405e0a6-9b2e-471c-b3de-c3e20ea09340",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "8579ee35-f584-47fb-a339-73b7fd39c67f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "917217e6-649e-4c33-8dde-c4523cfd7fea",
        "cursor": {
          "ref": "1042e269-94c3-4294-ac79-cb83e693623f",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "c0e4574c-aed0-457a-81aa-537738cc275f"
        },
        "item": {
          "id": "917217e6-649e-4c33-8dde-c4523cfd7fea",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "9028a5dc-8893-4286-82ea-a67b54a896e2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "321a0cfd-a645-4cd4-bef0-0845d91085ae",
        "cursor": {
          "ref": "38d6995f-a440-46db-aed3-bf77bddf3604",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "e393943b-5da3-41fa-9600-39af79fc2481"
        },
        "item": {
          "id": "321a0cfd-a645-4cd4-bef0-0845d91085ae",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "47dc5528-64d3-4b8c-abe9-56bd825b016c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18835a47-9f02-445e-98ae-4c38288df937",
        "cursor": {
          "ref": "afa890d8-90c7-48de-9f83-cd6f5df7c415",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "ce52f782-330c-4f6d-8501-a5cc1df30735"
        },
        "item": {
          "id": "18835a47-9f02-445e-98ae-4c38288df937",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "e48149b5-19d4-4afe-82c1-ec698c89c28a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b47f42a-c9fb-43b0-8988-ba8930f3b366",
        "cursor": {
          "ref": "01d9debc-b5f8-4985-8a66-29cb40ba9be2",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "3ad9a836-5ee0-41cf-9495-698791823b10"
        },
        "item": {
          "id": "2b47f42a-c9fb-43b0-8988-ba8930f3b366",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "122b67ce-6ab8-4686-a576-12ba67aacf95",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8f4bc48-bae5-4fd7-8be7-08a249986fc5",
        "cursor": {
          "ref": "002ad955-e141-421d-919d-ad958a98b196",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "9c84fb93-a9d3-4be1-b31a-bf20ca09ed65"
        },
        "item": {
          "id": "a8f4bc48-bae5-4fd7-8be7-08a249986fc5",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d757b2d6-9e1a-4eda-9aa3-c60e8ac35f70",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1fa2dc9-039e-41f7-9389-a956a9e11fc8",
        "cursor": {
          "ref": "a8041b02-d14e-4b27-ae07-35ede975eadb",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "8f1e15d0-2140-4ffe-a0b7-649afc27452a"
        },
        "item": {
          "id": "f1fa2dc9-039e-41f7-9389-a956a9e11fc8",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "e24759d4-c75a-480c-9203-991427ada5e1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a95a622-1ebe-4d7f-a08e-88225184da34",
        "cursor": {
          "ref": "de03ca4f-449e-4e4e-b284-71b04a59f698",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "d546bdea-9527-44d9-b524-830e4139bbb7"
        },
        "item": {
          "id": "9a95a622-1ebe-4d7f-a08e-88225184da34",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "a3598777-bd77-474a-91dc-e4f42a7dc498",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb194d98-79a3-4078-99da-d4c9d9ab904d",
        "cursor": {
          "ref": "38e1041f-5096-4a51-8bbe-dd4fca347561",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "fd99848f-e624-4736-9eea-1aa518a417c7"
        },
        "item": {
          "id": "bb194d98-79a3-4078-99da-d4c9d9ab904d",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "41f91413-871c-47c2-aff2-4c4ae024ddd4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fed8b459-c231-4e8a-bb9a-34cb010893bf",
        "cursor": {
          "ref": "574574f4-9fa8-4104-affc-441c87d958de",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "7ffd5e94-5e0b-426c-a3ef-6ea1a859bc8b"
        },
        "item": {
          "id": "fed8b459-c231-4e8a-bb9a-34cb010893bf",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "e8c91a5f-f94c-42e6-8acc-c30aee4b26e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcfcc0a3-dc7c-44fa-a6a4-b4c48ee317c1",
        "cursor": {
          "ref": "3a86d6c8-9ca4-48b6-8880-96c7c0051e0c",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "65782f6e-3508-453f-97be-9c9855a159d3"
        },
        "item": {
          "id": "dcfcc0a3-dc7c-44fa-a6a4-b4c48ee317c1",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "7c2a3ee6-c8db-47c1-8e51-cc114cb36b31",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c35709e0-5fb2-4be7-8306-71751ad63920",
        "cursor": {
          "ref": "6cc30825-bf05-4d75-aef3-1f2f59debe1c",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "5c8d8e92-f8b2-4f71-b908-747c8adeecbb"
        },
        "item": {
          "id": "c35709e0-5fb2-4be7-8306-71751ad63920",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "b0f11af6-f1ae-4acd-b41c-19cfd818f15f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59ef8d70-d53b-44d9-a59d-567fb5229bd9",
        "cursor": {
          "ref": "8dbdaf21-700c-4d0e-be52-8c42b6a0e517",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "20b89c50-ed68-4331-bc03-8357bf586c28"
        },
        "item": {
          "id": "59ef8d70-d53b-44d9-a59d-567fb5229bd9",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "b24d1a64-21ba-4947-9f5f-a5eb9721bb98",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43b72bf5-4f4b-415e-8bfc-40a423703d83",
        "cursor": {
          "ref": "ee81991c-68ee-4dc4-a7b5-27f3c1446a36",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "96085302-d3c0-45e9-9e21-c437438cda44"
        },
        "item": {
          "id": "43b72bf5-4f4b-415e-8bfc-40a423703d83",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "d068ebd4-f763-48ad-857c-f8c813965902",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fd97692-f219-40a3-a2f4-b2a268db5b1e",
        "cursor": {
          "ref": "e93ad57b-a37a-4dc6-a861-0dca037c6352",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "54828f2b-984d-4c76-a81d-83c9bde5d4e6"
        },
        "item": {
          "id": "8fd97692-f219-40a3-a2f4-b2a268db5b1e",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1bbea8e5-a9ac-48bf-8184-6b9ce886b7cc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a364e3a-19cc-464b-9472-5f8b31c315c5",
        "cursor": {
          "ref": "a1819dfb-1266-459f-8b69-297f3b3bc852",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "76147328-2877-4918-bc8e-45f73f458212"
        },
        "item": {
          "id": "5a364e3a-19cc-464b-9472-5f8b31c315c5",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "455de60a-90e9-486e-b566-54285ee93b6d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6906d50-f738-4a6e-8532-1af20604d9ac",
        "cursor": {
          "ref": "c5cf1951-f5b7-4faa-88c5-e0d3663e45dd",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "d1831660-94e6-402e-8557-4fe642e29d00"
        },
        "item": {
          "id": "d6906d50-f738-4a6e-8532-1af20604d9ac",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "a5379f77-0d96-45df-86c2-aa8f2f32aed5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c31b18e-7acd-49b5-99ae-6a13c0d29db0",
        "cursor": {
          "ref": "606f0bc1-6234-4e68-9051-e0b76742e66e",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "0921e606-9f1f-47fe-bdf4-fbbe311d1110"
        },
        "item": {
          "id": "0c31b18e-7acd-49b5-99ae-6a13c0d29db0",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "e205004c-0560-494b-ba0b-6b5986d81a4a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81b6a22f-42f1-46e5-9f01-041a971aba42",
        "cursor": {
          "ref": "498df96f-51fe-4667-83aa-b2dd2497d055",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "f162d3f2-5691-4d4b-a31e-52a21701f93e"
        },
        "item": {
          "id": "81b6a22f-42f1-46e5-9f01-041a971aba42",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "ed71670f-29be-4ffd-9bb9-5b2e9d501657",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5613bff-29eb-4032-875e-f74eff958b12",
        "cursor": {
          "ref": "252f2780-72b8-49ef-817b-552602f60118",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "7076630b-0a23-4065-b83c-4ccc8bf936c3"
        },
        "item": {
          "id": "e5613bff-29eb-4032-875e-f74eff958b12",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "c06c9b1d-4836-4a6f-8ed3-0bcaf8708070",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffdadefc-e949-466b-b35f-a2c760e6a553",
        "cursor": {
          "ref": "c4726a7b-4cee-4c30-9494-853a189a378f",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "55b3dd0c-63dc-471d-bdd6-a6884295bc05"
        },
        "item": {
          "id": "ffdadefc-e949-466b-b35f-a2c760e6a553",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "7f663e8e-e7d7-468d-83b2-271994ae1896",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d53197d4-5bed-48d5-8cf9-a93b6cbeee2b",
        "cursor": {
          "ref": "0ba88b83-b3e6-41f1-b0e5-727d2849e41e",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "ac9b4d38-8a68-45c1-b723-48a9efb80e7f"
        },
        "item": {
          "id": "d53197d4-5bed-48d5-8cf9-a93b6cbeee2b",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "b33a339a-1419-4eda-ae45-8d53c38fd75b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5bebdce-178e-4132-a633-bc05622a445b",
        "cursor": {
          "ref": "66081454-4f56-4f52-a550-853638ab3c5d",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "4fa68291-4e5f-438a-8b1b-919cada7cb86"
        },
        "item": {
          "id": "a5bebdce-178e-4132-a633-bc05622a445b",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "87df5242-c7bb-459c-bc8b-00892c816578",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "418ad01a-d3cd-4ecc-9ede-0ea6bcf328d1",
        "cursor": {
          "ref": "6e3649c2-9bc0-41ea-86e1-b61e87d04dd1",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "e07fac88-8c2d-45f3-8a2b-a28c3c75947a"
        },
        "item": {
          "id": "418ad01a-d3cd-4ecc-9ede-0ea6bcf328d1",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "ce03e97a-fe13-496a-9b7c-6b937dda5d8b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0e669fe-79dd-4e8d-9bd5-3f02fcb130ba",
        "cursor": {
          "ref": "b19a1495-5545-4288-a147-475613f3607a",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "e807c205-0748-4361-b4d6-462c86e45fe7"
        },
        "item": {
          "id": "c0e669fe-79dd-4e8d-9bd5-3f02fcb130ba",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "8e891a6b-54d5-4d85-8fd8-ee875c99e5ff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c755cf0a-0b6d-4875-b1e9-11ba472770e4",
        "cursor": {
          "ref": "0ba6e213-1061-49c0-8866-d3ecd765519c",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "2836c79e-bbcf-4fb1-b278-b948df270af6"
        },
        "item": {
          "id": "c755cf0a-0b6d-4875-b1e9-11ba472770e4",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "d6138537-3e88-4ff2-af39-1c70d4ad9e71",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a8dee3b-c455-4bad-8f74-a6c534f7c6eb",
        "cursor": {
          "ref": "6b591339-2cc7-4964-884e-58ddaafbee08",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "b8f3591b-4bda-44fb-9082-1085cb5e1f23"
        },
        "item": {
          "id": "0a8dee3b-c455-4bad-8f74-a6c534f7c6eb",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "0521f21c-3278-48ed-a765-1f2948087939",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1affde73-3d94-4589-9b0b-a2fb5250b6eb",
        "cursor": {
          "ref": "cd089044-5278-4e47-8805-e0dfa917125e",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "0bd4a063-5227-423d-9cda-e006a3308118"
        },
        "item": {
          "id": "1affde73-3d94-4589-9b0b-a2fb5250b6eb",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "64c03a26-c49e-4db3-8dd4-631927c7e973",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ee66cf4-8f20-40f9-bd74-452750411161",
        "cursor": {
          "ref": "7df0ac61-53fe-4021-ae9d-fd3840c02cbe",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "03d36ab5-35d4-4dd0-88f0-6af1ba8de9e9"
        },
        "item": {
          "id": "7ee66cf4-8f20-40f9-bd74-452750411161",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "c421583c-572a-4334-a758-6ff36188bdcb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "674fdff6-8e46-4c3a-843d-de5dd7b548fc",
        "cursor": {
          "ref": "f915f645-e56c-4c97-b3c9-86508e894103",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "33ed6b73-0086-4b1c-a936-11076a76b64e"
        },
        "item": {
          "id": "674fdff6-8e46-4c3a-843d-de5dd7b548fc",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "5c22086d-d2a4-48bf-99b4-ba8a9ce494d6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e563b662-e890-48eb-ac4a-0ad317939784",
        "cursor": {
          "ref": "c2ea6632-d832-441f-824a-b3177ff20797",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "929e4305-dcd2-41c3-a3a9-51b2094d5829"
        },
        "item": {
          "id": "e563b662-e890-48eb-ac4a-0ad317939784",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "e9d9941b-2b22-48fb-ac91-29a500489861",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5dd02b2-a865-4ed7-8b62-4318df48e93a",
        "cursor": {
          "ref": "61879ece-5fcc-4b82-b42e-ea56a1e172eb",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "71e2222c-5b83-4f0a-b427-567156a72407"
        },
        "item": {
          "id": "b5dd02b2-a865-4ed7-8b62-4318df48e93a",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "34628617-9682-4720-8f1f-8c0875c8df6b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ca5e9c8-a830-4100-8fe9-528c2da879ba",
        "cursor": {
          "ref": "27970fc9-2b43-49a6-85ac-b6df3be4e7d4",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "7ad76256-b4cb-40a1-846b-c09a0c3a0f35"
        },
        "item": {
          "id": "9ca5e9c8-a830-4100-8fe9-528c2da879ba",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e34da696-1727-41bb-8752-b14b34ec578e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40e082a1-1e7b-486b-9f25-3b984670b62b",
        "cursor": {
          "ref": "e4d485b2-4800-46cf-aec8-51e1e90e9e20",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "3fe73268-fc33-4952-8ca8-b53579198956"
        },
        "item": {
          "id": "40e082a1-1e7b-486b-9f25-3b984670b62b",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "7ed19ef6-e1d0-4028-9607-e2a70e29c06e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6fa301a-7d74-44dd-b410-ba40f4aa1a84",
        "cursor": {
          "ref": "9b749656-45ee-47b1-b030-6d232f0c62cf",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "616effae-ddcc-42f1-869a-5d2e8415be48"
        },
        "item": {
          "id": "e6fa301a-7d74-44dd-b410-ba40f4aa1a84",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "ab200e25-c1cc-49d3-93ed-e519af97b2d2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1601b96e-b973-42ba-bf51-853aaf0a14f4",
        "cursor": {
          "ref": "38fec4c1-da29-4dfc-ac40-7c3ff87c7c2e",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "c8d822d6-c23e-47dc-b884-c0ad458bbca0"
        },
        "item": {
          "id": "1601b96e-b973-42ba-bf51-853aaf0a14f4",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "a79627af-e445-48bb-9ef9-78ab92fb7df7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87283548-b5d8-4680-a2bf-ce228ecae8d8",
        "cursor": {
          "ref": "b0d0b00b-e879-40b9-be06-0298ce8c1b3d",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "4b682b26-6e1f-4b4a-ad76-152e87d425ef"
        },
        "item": {
          "id": "87283548-b5d8-4680-a2bf-ce228ecae8d8",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "539dc79b-b079-4eef-8842-48c4831b4d43",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93863f5d-2646-4d91-a74e-3df3b6311365",
        "cursor": {
          "ref": "a0e90a5a-a8ea-48cc-8485-65b086110812",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "7d687a83-7f73-472b-b90b-d3891eb912b6"
        },
        "item": {
          "id": "93863f5d-2646-4d91-a74e-3df3b6311365",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "b9de9362-e54d-44aa-9523-a5cc182af33f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b86ee823-fc46-475d-8b76-32a45d4a27f1",
        "cursor": {
          "ref": "f659231a-cfcb-4cf4-8d35-66a870cba4af",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "0017fa40-e22d-49cd-aeec-daff62459ba6"
        },
        "item": {
          "id": "b86ee823-fc46-475d-8b76-32a45d4a27f1",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "e23df401-aaca-4102-86a0-d14a0942a606",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af2f5943-6a41-48d7-8dd7-25ce68c73d2f",
        "cursor": {
          "ref": "3dec4746-b0b2-42fe-af9a-d2cda9336b20",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "7e9e026b-4d2e-4d74-9118-effb6a6760b6"
        },
        "item": {
          "id": "af2f5943-6a41-48d7-8dd7-25ce68c73d2f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "aa877e52-92ba-4bba-95c4-27682f5c6cdd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6555bab-5e99-4326-a539-f7f6a95f4de6",
        "cursor": {
          "ref": "c005365f-fd8c-4fef-b823-05dbc1ffb31c",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "69d6d4d0-832a-447a-a55c-1667a50034f0"
        },
        "item": {
          "id": "f6555bab-5e99-4326-a539-f7f6a95f4de6",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "aa46293b-3028-40d1-9b24-2ac6bfeb8c43",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80c06492-ee85-415b-b64f-b48d34486c4f",
        "cursor": {
          "ref": "b2abbc68-68f1-4ebb-beae-1c0f5c95a23b",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "959374a9-67ce-4831-8b2a-13e0191cfeae"
        },
        "item": {
          "id": "80c06492-ee85-415b-b64f-b48d34486c4f",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "c5dc6e07-b9b0-4019-96f4-fa107f2513dd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30847ddb-f0fa-4c34-94c3-8cf296051d91",
        "cursor": {
          "ref": "dad8cd97-c883-43c7-8a66-50ba5cb0da77",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "d93f46d2-6803-4475-a259-7d126a9051b5"
        },
        "item": {
          "id": "30847ddb-f0fa-4c34-94c3-8cf296051d91",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "35b1bb8e-bc89-4aca-b5b2-18e976ef5237",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ce82634-44f0-452d-8910-d58a0a8d21dd",
        "cursor": {
          "ref": "49c466c2-30d4-41b3-bb79-27689f549ba0",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "cbbbd2b0-b35f-4a0c-afb8-d2db89f2b7bb"
        },
        "item": {
          "id": "6ce82634-44f0-452d-8910-d58a0a8d21dd",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "347eb51d-ce41-4bbc-9d58-9e55a6a886e4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9885978-34c7-422d-a76e-cd1bb857e58c",
        "cursor": {
          "ref": "d9af3f23-980a-4264-b0bb-9c0afdbe8950",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "014c1fda-47c7-4004-95da-0fe5b890f1fc"
        },
        "item": {
          "id": "f9885978-34c7-422d-a76e-cd1bb857e58c",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "dd730c20-1316-4547-aa70-163802bc43e0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea025b60-363b-426e-8947-fd037f4aa936",
        "cursor": {
          "ref": "8e99118e-e1e6-448f-a367-46c3122ad057",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "037f64c6-c70c-424c-9a3a-e246e7b81ad1"
        },
        "item": {
          "id": "ea025b60-363b-426e-8947-fd037f4aa936",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "38f4f8c1-cc67-44ac-80b0-1f99805db058",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41fcf599-6abe-4e29-a8b0-c92fa7ba21f4",
        "cursor": {
          "ref": "a2cbcfeb-2f40-4c30-9964-86b7d2bdc6cd",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "a4047893-f528-45bc-94aa-688dac1c41c5"
        },
        "item": {
          "id": "41fcf599-6abe-4e29-a8b0-c92fa7ba21f4",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "4295ba33-efdb-41e0-b5f2-0ed3e7ba2261",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44b93fe8-b0c9-45cf-81a0-e2ce6c74f2c7",
        "cursor": {
          "ref": "a3bd6e30-f0e0-43bc-bc4f-ff678fec8c04",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b8c3b285-2bfb-49e9-ac3e-a163f41a6b30"
        },
        "item": {
          "id": "44b93fe8-b0c9-45cf-81a0-e2ce6c74f2c7",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "e4b318e6-dedc-45e3-b7ee-73bec8f658b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "e273f134-0f76-4f65-b5b2-9fb1663353f8",
        "cursor": {
          "ref": "7d1ebbfd-d51b-4338-849b-5e30b7514f21",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c5636552-e319-48a6-b705-a713a4e14046"
        },
        "item": {
          "id": "e273f134-0f76-4f65-b5b2-9fb1663353f8",
          "name": "credentials_verify"
        },
        "response": {
          "id": "bbc163d4-b134-4432-963f-fbe42c755927",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "0b08f196-42dd-422d-8866-c9be0c7fd256",
        "cursor": {
          "ref": "b4a2341f-6e04-4599-ae72-e852c76f2ccd",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "f2fb3f0c-8ad9-4c13-8d5d-afff2ceb062a"
        },
        "item": {
          "id": "0b08f196-42dd-422d-8866-c9be0c7fd256",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "8e8eeaca-6aa0-454d-9a8c-fca020cafbe2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "529c59af-bc4e-44f7-9154-4a38b54c6435",
        "cursor": {
          "ref": "83594bb5-53c8-4292-886c-0e77e79aa5e1",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "5e105a93-47ef-48ea-92bd-317356c70beb"
        },
        "item": {
          "id": "529c59af-bc4e-44f7-9154-4a38b54c6435",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8167d1aa-f5b9-4427-8446-33074f69a5e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 8,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "529c59af-bc4e-44f7-9154-4a38b54c6435",
        "cursor": {
          "ref": "83594bb5-53c8-4292-886c-0e77e79aa5e1",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "5e105a93-47ef-48ea-92bd-317356c70beb"
        },
        "item": {
          "id": "529c59af-bc4e-44f7-9154-4a38b54c6435",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8167d1aa-f5b9-4427-8446-33074f69a5e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 8,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1860cf71-e9f2-43be-ab52-25e1cae759a3",
        "cursor": {
          "ref": "2a68c907-f9ce-4663-b518-f873f4cc4aaf",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "46a20c86-87ca-42f9-a271-11879ad3e81e"
        },
        "item": {
          "id": "1860cf71-e9f2-43be-ab52-25e1cae759a3",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6fd3c534-d9a1-455a-b7fd-89d716ffbd52",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76e76afd-fd1e-448d-ab3c-07e4cf077b2c",
        "cursor": {
          "ref": "5cf3b458-c0b3-4a5f-9397-6d8a834cc081",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8590d0a4-091c-497c-9ab8-7873a56d1b23"
        },
        "item": {
          "id": "76e76afd-fd1e-448d-ab3c-07e4cf077b2c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "0a467421-f1d7-4ff3-872b-0bd4dd68672d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}