{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "a9583d89-9bc8-4f0b-91e9-593543fe39ac",
        "name": "Clear Cache",
        "item": [
          {
            "id": "22def4a2-0601-45bd-8119-671a5b30965c",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f4881f7e-9a74-4e2d-b37d-a8c12df83b7f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0f53de8d-b4f9-45b3-93ad-81bab9ec896b"
                }
              }
            ]
          },
          {
            "id": "f9ca5585-d9e9-4c0c-86ae-446d75ffd56b",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c010de78-e69b-4335-aca0-eb0387b3cea5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0d0a6176-051e-446b-b73e-fc54f5cb7d14"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "f12d8f29-025f-409b-a35e-c10c9f4669ee",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "49429428-4f34-4707-a04f-073944220de1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1c9e91fb-b3df-4453-8b59-dcb2420cd8e5",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0c4cbf99-a1f2-427d-8ad0-9a0ccf4ad226",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bd49e6ce-58fb-4dce-9b9e-9a59296afbe1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "08d6560d-d6dd-4d66-982a-210cdf9b371e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "894cb561-442c-4113-9fa1-21bdff22514c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5a0be249-2374-40a1-a740-5549bb221e7b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2884b25a-3fc0-4002-887f-bb38350020d2"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f106dde5-58f5-4f14-a730-81273033a791",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "e51d34c2-d824-4d47-98d9-8ea5bdc0bded"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cdd4dfba-00b9-4991-9489-24b4f28349d8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fdeb7ce8-2f2d-4b14-af9a-eb1b725d1f28"
            }
          }
        ]
      },
      {
        "id": "0404ad76-eac6-457c-9100-e52f08d861cd",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "790b0b1f-7c6c-419d-9395-cc58ec53cbfb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bdcb9b76-5ca6-4e44-9af3-38a871b68f6a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e448a2d9-d1f6-46a3-af0e-db34315cc048",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59e9515d-2347-406b-9f76-073055848bfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "34106352-5b0d-4702-a774-85253c825bfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "193ed49f-e121-4f9c-ad03-59b63b46bdac",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "616e3ece-b3a0-41a7-9da1-e76350462b50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4ae621a6-438c-4fbc-850b-d891ba3e49e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c105ccb0-d402-4aa8-9682-8de01e76b881",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd8929f-b3dd-4951-8978-38e4df5564f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4de320d3-178d-4454-a47b-6f148796e564"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9c455e06-42a3-4088-bf13-514f46d1195c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "21cea95a-e6ea-48bf-8034-2ec0f9e10052",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03c1efde-a268-42fb-acd9-8c2a3be68dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8373e19d-7a51-4363-87c4-fea3d86cdb09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3531af5-c1ec-4027-be62-9ad94f8fb9ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44f625a3-9956-4256-a5fa-8598472f1174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36f88656-ec96-4a83-af15-c0afc013ae8f",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "424f1eb9-e4cb-4d80-8b99-9daf1cf7d799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ffd51f66-4023-4204-9862-40e465222ba2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4aed33b-24bd-460e-9933-2f5dac83f7c9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "8dc0d558-1160-44bc-98de-c7632af1a841"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f460ef8d-5673-4d54-85a8-f3dc34eb000b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "dcd5cac8-56ed-4081-bc6b-f3656f1ef227",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4dfc18e6-b1f9-4f83-9d33-d3f5698e657f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "6a7f31b5-cf0b-4c40-8438-97d1fa3498bc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8818482b-353d-452c-bd2c-f92453a3fb4b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "25e78704-5275-4719-b429-3f83b85c3e85"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bc3020e0-4a14-4cc9-9e36-1121caf21103",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1dcad530-1ed0-4069-a7e3-d1a2055f8c2a"
            }
          }
        ]
      },
      {
        "id": "0f46c20c-7348-4b87-a7b2-453273468893",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "55a22119-68c1-4377-a96b-8f618785abec",
            "name": "Negative Testing",
            "item": [
              {
                "id": "87983f0e-97ff-494c-8890-7c26aa69175a",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "7d56f8f7-743c-4f3e-b3a5-332d99d37411",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2453e88c-c2fb-4584-9889-4777177c563f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32dc54be-0597-4b48-b055-a49e38793b10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffb87059-4b67-4ed4-a8f3-38bfec04f90a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e9eb4a13-64e3-4e7d-a8f9-84e892deef78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6658b921-ce72-48cb-9408-956dca58cdce",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb840b1e-2fa0-4657-8024-3d1656614968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b03f356-e387-4e3c-83d9-4cbc8489a568"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e6dfe66-4737-483e-8587-6d36afb4c517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f67adcb-ebb1-441b-b576-1d2a92687e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3136a7b0-a263-4fdd-9c0c-888f118d0568",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9224cb22-83bb-4c9f-830e-43bd2fb42f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae8e9553-4231-4a79-aead-7337a369505d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "876fc731-4493-4f2b-8036-77d37d3917e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "250061e7-43f2-4252-a6e2-39cee9d499c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "850bd9ef-fe56-4fc8-9e5a-a4c8ca0f2893",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "909360b9-5cc8-48f4-a783-4688b22533ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "925c0b6b-fd24-4aaf-aaf2-055f36362593"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28f7c2cf-b25a-44c6-ab7f-5372ef7dca61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6753b862-e90a-422d-b8e5-ae0934f14c02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fe7cbba-6924-4537-aec4-63b30c9d4ea5",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba126f26-4ec9-40e6-b368-fa2c580230c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da9c277e-54cc-41fb-a0a0-0fd861033c8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81e7ffb0-055c-406e-a26a-daeac87ca8ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f01e8451-7518-45c7-b163-8ee878537c8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0755a126-a26f-4202-b98c-85b8c196ca6a",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e017c2a-0bfd-462d-b990-d21f28ac77a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b87459e-70ed-4c74-a22b-4aa6d461ca77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59c18fa8-fd92-4b73-9fa3-9d87849f58be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "934995ae-55ae-4245-98cb-238467040ce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f7749b-b7cd-44fa-9252-a701983361ad",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52dee2f4-6a6d-4c2f-9ac5-33b667b0f5cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46b26b5a-2712-415d-958c-32dfbf3a6842"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20e2f96f-ca94-4465-b51d-98c870d69763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f5cf68e-6eea-419f-b8ae-dbdd55e165a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "039ade2e-e4ee-4055-9106-939f0e6b0a49",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "953aca04-e30c-48a0-af25-24adb1a093c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c36793f-b1c9-4979-84df-01145bcf4c0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcb1f116-33f2-41ca-9abe-9c4820e933e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1cb7f857-a247-4312-9d1f-8735821a7ea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2a3c2a4-6b4c-4c0d-b616-f15c3106e2ec",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11497d27-02b8-4331-a52c-2b2fb28b56d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b32ceaa-76a0-409a-a7eb-80d6770c75c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92bb6bba-dc00-4c02-85bd-23914d7801f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "797b6cad-4c4e-416c-ab91-3c1575d3bfa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d953c1a-1eea-411d-9000-b4d1f9b9d28a",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d289167-7db7-40a9-af52-6955953dc2fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5daec9b2-8f93-4b3e-a210-a57635c28596"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceb2b4f0-9ed0-409b-82ed-8af48bdf7a49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "741f3430-f5f6-4490-9bc2-6c2c02f8c7e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd047e4d-6b1d-4060-abae-9906844225cc",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dcc15e5-271d-45df-bc1a-c240c984e687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a1ab94c-5324-4814-b44d-fb7aaa5e3988"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "274ceae0-e0bc-4bfe-943c-97b672b820c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9733fa16-6199-4833-a37e-c61d21b03cd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd22f087-417e-4941-acd8-3a8c1d6648bb",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c76c6c24-de81-48d0-b755-0df652bd7ce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58684dc3-0b79-433c-be3a-703f5cc84c6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9372a31d-3a4f-4023-bc93-6afc701126be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "26e2ba62-b52e-4dbf-bfe7-ac6b97b02ef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "551ab8b7-cdf6-4404-8fc6-30bbefd948f1",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25795020-c735-4740-9cbc-f7b12aca1477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a33c6f5d-b43b-4550-be77-ce498805abc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f119fc4e-b614-4524-8bf9-b7aeead7b2d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b61b4c81-bd6e-402c-ae20-56ff49b9573d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd1aa9f3-8fab-4ca8-b662-0185cbf4ad11",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0674bcdd-208d-4728-a5f9-3ac423ebfd2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5183b21f-02f4-4a1e-b6bd-9451aa72829a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "925ea30f-50a0-4d21-b930-9ae93fe6672a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d597a0ae-9c5d-429a-8d38-3236cbf3e9ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34394563-4481-4413-986d-12aa741d1c1f",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d23a1d8-2778-476b-9d6a-cf2026ab6654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a11c73c5-643f-4a64-98af-aaba11f883e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "737995b7-afbf-465c-81e1-a99d46ff4a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "36eb486a-e62d-4e28-ac8a-73a1d951b824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c8b93d4-917e-4346-a231-195ec1045ded",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "023706d0-aa2b-4f5e-8d4c-380c513d9f30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1254a9bd-2e78-4427-b579-521c76f90fbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a6e0fe2-9b38-42d7-bda9-7a8fd4322549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e61e19d2-f739-42c9-9de9-bcf96a80fd96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c60b184-a135-4b10-9eb5-313f5bb7fa22",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "895fc05c-6729-4bbb-8c4a-b643f8ab7e8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "935d187e-443a-412b-9bf4-fdbd12d6945e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfb5d215-148f-493f-b3b2-c3021690326d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "868997d3-6ff9-41de-bbb3-b064f0b95f9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2abd91ea-f9ea-4fcc-9231-92cad2fc556e",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cabce1a-203d-43e4-9cc9-2825d0eee8bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db96dcdd-74bf-42f5-92cd-3687591c363d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4395412-22d5-4de4-af8b-63d358377fcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff2936b0-f842-42ed-b946-061c72851377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e2852c3-1d12-4357-b067-baff9e065976",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "030ba546-7a6b-4030-8506-53db64daa70e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00231d7c-5294-4e87-a242-b67aa52e01bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7d642fd-c87f-45a8-8a14-941d8175f285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "650f13ce-c4dd-4cdb-b33b-14215f8c8a72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b913c57c-3d63-4499-8cd0-623e577c63c1",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f0fa21b-62e7-47d1-bbe9-494cbdf5ea98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c90c84a-1b8e-4dc7-82cd-d8a493730f38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad2c20ca-0f49-42d9-af19-dbb67316b270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "726b00e9-ef25-47bb-a2c6-15afebe1be70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9850b70e-103b-47b6-af76-088e785f2353",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1399c78b-951b-43fe-a469-e37601d46483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "390bdc27-e446-443c-8e77-ab397dba8c76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92d56764-256c-47fe-a6ba-0ac1d362325b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd40cb58-e2b0-44e3-a4e8-185ef6326ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7cfbafb-faaf-48b2-b3e3-59b7beb48d66",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deb52490-6029-4193-af72-c784236ea547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f565564-1730-418e-8a10-4b8c1a83f41f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28ecb7e3-a512-4d81-a7f4-3436624d92cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5690779f-d8ce-427c-8085-1e271fde88a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55bafb0a-1fa8-4595-b6dc-9fac3e8251cf",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62fb9a47-1a75-4b6f-ab12-4ec57871eb7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ece4b56f-667b-4dd0-a431-9b76431e9297"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8848674c-21e3-494f-8dd6-25d0e0bdcb2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "28e934f0-9a25-4add-9824-6789164ed217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f6fd0b6-fcac-43c7-8b4f-fc1a205283ae",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8323d5a7-cc0a-42db-b235-296e98b00986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d0e03ae-fbcd-407e-b538-cf91e0b3d823"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acd244f2-a576-4fa3-8dbd-d57e1835bedb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0cd1072-a8b5-4e9e-9aa8-ca7742884284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f594a80-189d-4bc0-a751-b7e9567e2924",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6096ee9-2476-40d4-8563-4d7a3bb53272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba37e253-a3da-4176-9a9c-d52f1294134b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69d0196b-0657-4ee2-b929-674ebf98d113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1e70139-5d34-4491-9987-8ad9398744b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "318ffa85-36ce-48a0-b9fb-9bbdcbb0610b",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15315709-86c6-40da-ac36-bef12fb4eb7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1859f18e-0920-4ba6-95b5-8c1f4932a47c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "222cd6c0-19d7-432f-80c6-9b468f9dc8cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d8799d6-e347-4d36-a850-ee09c6e47c1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d628982-465f-489c-8e83-6dccc672a2b9",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a847876-0013-4659-ba37-1668d65a9b8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deb14fe3-e5f5-4091-9add-d7c83a5c0ad7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "675e2164-6b64-4e98-bcf0-21ebe9d66bd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "84deec82-9f66-4064-9846-bb93f9819b78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c83aff3-fb6e-49cf-b671-aa9bed54717b",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "945e6c9f-81b3-4579-86d4-3fe8bf1eff56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51d71a1d-c9b8-498b-b375-f476abf86e49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe25b86b-6b66-49d2-a08e-3175db13ef2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d30f202-72ad-4512-b904-e1454cecd456"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d03d3b3-48ce-423e-ab5e-221b31f8d9e1",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "067910b3-7900-4147-bc6e-33dac2bc1984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee63005b-42c7-458d-8709-7df94496d72e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcaffc3b-82d7-45e0-931b-94645d1123e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e49c3451-7c73-4f66-82f0-032c1c6faff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8251843-1305-4dd1-9293-795b20d0eed7",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b98389ab-dc0e-47a7-8e3d-4d26489591b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9bb1d4f-c390-4ced-b4dd-8600a35703a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4587e6f-7997-4b86-b488-97a041593fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4a92b2b-b29a-42e3-8607-b8ab105d7c1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb7d359f-9ed1-4631-b4fc-845e622a7e36",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd591eb9-8800-4a81-b170-a93f2db3de64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a138d3f5-d5b4-4132-b797-6d833e7a8c51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dc51992-f9cd-4e31-b54f-75b64bde6140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6f34026-d6ea-4f8e-a25b-a25e8d1cb13d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3f2adf5-209d-43bd-888c-2a1fcdb54549",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67bdb861-0f66-4e07-aba4-ca7e1ad3f107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78dfa8c0-8d72-4510-8f8b-ac2b9bd7cbc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d623a49-7fc9-4149-8664-1b509a7a596f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f36558a8-4218-4e8f-bdef-ddf40e851a57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e1e4eb1-b5a0-4a53-8161-4e826e479586",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11f0d9ee-e4b9-4945-8cb7-650aa631fcf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1af0b6b0-fb37-44d2-9f7b-60196cc4a3dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20703fa1-773a-49af-9e5d-e15badfa8ea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "19f0813a-06a4-4d44-a95f-a6befb7455fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab9082e9-295c-4da7-b5d5-53d7a0f19459",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc77a0c1-09e5-4b7b-b559-c4ba8aa9d8b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7566aad9-7b72-492b-b09f-2347701a685a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1950268e-f749-4a40-aecd-1ff9958f8cac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "543dbcc3-e5fb-402c-bb06-43c26b0c4e8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f833ea9e-b8ca-490d-a6a8-91948e99d5c9",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70be22b1-4a42-4ab5-a490-f52e61aa9398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b78931d-a6a4-477e-92c3-389f72c3694b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18a55d0d-0947-4e25-8eb9-09df178088f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "f30fad6f-a9df-4732-aba9-f9279e0a5256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00b495e7-5a40-4e52-a745-c426e2de9a44",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17c9d485-eebb-4c04-8113-bb8655a7a942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "afdefd19-884d-47df-b809-66db61f3524a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8002d0eb-d9a5-427a-b4c2-ef90f86080e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "14459463-25d8-4b2b-9526-136306112dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f87a46e-f852-42c1-88bb-5ffdb4eeea99",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a6b3fd7-e3f2-4124-b591-485f65f0c52a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e52b8ba5-4e7f-4092-a712-e7d1c471d583"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dba3f736-6843-491d-92c9-59e337bf52d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "05d421be-1de7-438c-a04e-d7bbf752475d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "979a06d5-9eee-4040-9a69-c278a097e640",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db30a2d-ecf5-4ed9-bf4e-60fcd6155ada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed2bc821-75a9-445b-92ac-1ee9358033d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56934870-78bf-417b-961f-247ea52ed56b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "56990512-c940-49ac-8d98-dfec0094f375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da281562-ed53-429b-b92a-d6fea8cacd46",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55f6205f-51a4-41f7-a83e-2372f9edabb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34ae1e9a-fbc1-412f-a25b-a4e4c2ef4b3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f079666-4bd0-4616-9d96-637963b0ccb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "aad26db2-04e8-4de2-b5f0-6a87fec1d062"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0afc8862-b0ae-4618-a41a-b146e0988549",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "702e80a3-1f69-413f-a2d2-b1130cf82998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "903b8d5a-6847-49e0-8967-ca992dc8b621"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0295f226-764d-4fdc-9fe4-196702fb4648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c50a50a2-e069-4a81-b570-2e58b3e1ce47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c2a5969-8bb2-4e5c-94cc-0e45e5952e45",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45541bc0-18b3-4cc3-be62-b0ce7cce7388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d049d1f-2cd7-4ac9-8b8f-b185fdcbc014"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5920f3f8-1059-4888-bb52-7f224919a838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "78ac262b-be8d-4fe9-b8bb-c9e109e1da15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "949ffeb1-189e-4b7c-9b36-c67090b19808",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae7a4794-fa12-4935-b908-197818a3f58b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "378fb1a3-641d-469a-ac4d-11498d59078f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9c671f5-2782-454d-ad39-8cfecdfa8b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "597da6f0-0174-410e-8695-543cf0d9f6b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67b9bd9b-0ab6-4eb4-9a7b-23de1ff55192",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4df065f-e259-4b6d-8857-6b5f3c9a6c1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62395c29-8fec-4d3a-b55b-d9f471a7a3fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92309cc7-b42b-4d3c-8746-0ae070632b92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb2af619-3781-4608-acfe-a1d6d3300b67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e9c373e-6b5c-4074-ae3f-9e2c1ad22c57",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30f7f1ca-de5c-47ee-aebe-6f90ae07906f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cb600c1-085f-4a8b-b7d7-ead76f19d0f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f8cf29c-9cd6-47e4-ac78-67080afc5dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "89eb98fb-7372-47f7-9dc7-60c3a1abddc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e6cc7a5-01cd-4cb0-9a77-287a64abaddd",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79b1b731-e823-43bf-99bc-92ac4d12e9ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd49173b-1753-4370-a185-8163744e3a2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f8482b3-80d7-4946-a20e-bb6fdb566465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8c71f3d-c2c1-4373-b4e5-35ff225e64dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca354d00-9b40-48e2-87cb-99e71c83ce82",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58cca242-895e-4883-b643-9269d3195507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5b50bf3-a102-4c9a-8869-3a7606cc2f23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d44587f1-1547-48be-9e4d-60e7f69cc5dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9064411b-6f3e-49ba-a9aa-b50bcd6476f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "557783ae-8b2f-4edf-a904-c3d201c10414",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b73157-4373-41af-b622-1a57d803b2ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4f545fc-6a57-482c-a62e-01c46bcbdc2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2098df5b-1303-45a2-926f-41faa8d96855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "08d88e47-316f-4200-8641-d9dbb2393749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97cc3739-4cc2-41ae-aa64-50a37d653d26",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18ae5668-102d-45fa-90a5-d4c2ada066e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43a8d2f0-e4ec-4e4e-997e-382a8f27b96c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29b2a257-75e0-4847-9209-80ec8f2eb9c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "42854ad7-4aa9-499d-b7ab-eee615422a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dc456ae-0a9e-40d3-a91e-412dfd4a3a3f",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f4feeb5-40a8-4250-87cd-a704d10ae5a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10e997e2-af42-49c6-a68f-d6057f06e625"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c649c190-f0ee-4132-8ff6-74a76f78e17b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ce60f71a-af61-45d9-8b5f-6943f4243b54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "163eb9e4-ed9e-49df-b110-ea1e1bd60b27",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4bf9eb3-b20e-4998-a897-0d2b9215c534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d42eb12-d025-4729-9fe2-4dca045a6e20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce3e8640-cc54-48e8-a3da-3d73dd288ecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4beec7e6-6739-4bb9-a358-8087896c3d40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75b43a85-5d17-4e1d-8045-bd52d459e17d",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab9c67e4-716f-4631-862e-6d7565ba8995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "074ece8d-fdbe-4ce4-891e-72df85edaa3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a0c2668-dc4e-4aa2-8957-c1889ccb0432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "7571ec95-f4d8-486d-bc70-e4f56775d37e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48f1e832-7fc8-45f4-9e40-aa411635c5aa",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4469688-10d7-48e3-a091-dffd55520b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af4beb35-782d-4f39-87a8-ca50b8e889c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43d5a9e5-94f5-4b8f-98bb-4025958bd100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b813ce70-385d-4a87-a7ce-b3db96414113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a2301fc-d6c3-4cf4-9552-370197e23372",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31fa0681-fb7e-48eb-ae30-f0b7c3487401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff190117-4740-4bcc-aaed-c024e938a622"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa7a3be2-52c8-4a3b-9a00-49be9977a436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "650d98c8-bd51-4986-9ee0-7ee004a71dde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce707919-0104-4acc-8003-4d92691cf146",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ecfdf62-847f-48c3-a6d5-53e7ea657c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b64a667-d9f2-446f-b50a-e113bb58410c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49697a69-1ff7-4fb5-bc7e-960089047052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d78e814a-f8f6-4659-a635-27e205fa09d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e66c999a-7652-4f73-897e-5aafa5effc42",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d4d40c0-2828-4d89-b608-26666c8e7713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df2ec0d4-e5a5-4418-a2af-6ebd63749385"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83d47d6f-789c-4fea-98dc-394d721e08e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad3d33e0-5b03-4283-8a1d-196a66e58dec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34896b5e-c23b-4657-bcaa-bc071642a2ea",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "670501ee-edef-4100-ae51-0ac38db70b9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d06ee8d-2e65-467d-a85d-04e7b490ffc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "764ed34e-db87-40f6-bf19-ccb510ebbeef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "8773a363-8f40-4816-831b-d52fd97c3ea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f79c4189-757d-4534-ae71-817f4db347a5",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "717d3474-8fda-4520-bb3a-36d22ee40d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccfd7b6d-fdcd-4d72-9b36-c1e3e37c1866"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5155f11e-f701-40cb-a98d-dced3c8f6ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f07a85d4-a8d0-43c2-a721-9f09775fca1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "746204d5-97be-4c2b-8549-c510e48939e4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b84e4d78-3d86-411e-a51b-205517a971ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b07bf460-a70b-4738-9ba0-9ebf957ddcc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcf21c24-2ab9-447a-83ad-589d19f19819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a1996f9c-23c3-4887-9f14-e3be9fe1203d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec20edc2-2637-4748-9c41-3d2999cd74d9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54d1d203-aaf5-4f14-892e-140f52e84b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d62f912a-8a75-4c19-8fc7-cdab49ef4193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0454bd60-51d4-4054-a73b-9d8204f713ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e0b8d07b-b3da-4879-83af-86d857902094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df80a372-8264-4628-aaf7-155510afd468",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "477168ac-2c60-41a8-bf48-b5a28cc7eb60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97dd3031-fb02-4670-b776-1c8c2955e4ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da666f35-f807-4526-89dd-2d94c19ee37d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "803b224d-66f7-4f19-8a50-bbd32c2663bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c96134b-9e0c-4271-945f-7c8bf3614c9a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a6c3623-2032-47e3-8a52-f99792875f80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9684f84-c888-4413-8061-5f39c2e75146"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89ba1635-2577-483d-a3e5-cd01e55e18ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3788f08-54a1-426b-b882-f4b553c17678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a7eeca0-3ce1-4d27-bd74-fb3008d18894",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f89f37-3157-42cf-a802-f8f524691182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "132afd38-5128-4159-9bef-b56e26247f32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "147edcb3-5eb4-47c9-ad5d-1f9c8649bbcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "5dccee3f-153e-4772-87cf-5ff544cea221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc0708be-dfcc-414c-8fc0-87f7c35f9af7",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3dbd7e4-f39d-4c09-98e7-f1aa787163c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29c4cc0f-2338-4b04-a0fb-b15f017c24d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f60b83f4-0911-4d31-b3c2-d2475d550781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2df3eb6f-8baf-4a36-86fc-94c54c8c1c84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca2c2c0f-40e4-427a-84ff-f8429df7a6ec",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56162a3b-47e2-4c6f-b696-c8c9cc445d42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6dd34a2-81ea-492c-81b9-0282e460b853"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e3ded94-c890-4142-a8cd-7b1fd78c2271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2192aa70-6e27-41c0-a890-7d18c9a51518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d9cffdb-e6b4-49f2-84fa-f2d510f3b438",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f8fb36e-3889-4170-b148-f488a2ed539c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1994252f-74b8-4513-b6e4-1e1315b7c440"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8881e140-294f-448f-8a8f-79fe72244ac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "efd7639b-46ce-4a1f-bd5d-7e4c0ab07464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d97c2c44-6e6b-48c3-997f-032afaa8694d",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a99bfcc7-2570-4d4e-92a8-adec74bc70df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a01329d-6df2-4cfd-9ecb-cc451094e048"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fb58068-e0c9-4510-8526-bc9c1b8ee0c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd2ebd02-aba6-41a9-a48e-65dff87d3d3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b631e7fc-d5eb-45de-bfd8-823a737a14ac",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "025e81c3-c89d-4167-b33f-fb24acc7f5d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f2f9e8a-ecca-4e25-ac59-a4b2c970315d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "905e3c37-2fbc-453e-991b-6efbe063ab35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dda14957-b04b-421a-9b39-b8a2e476ed65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd276ecf-31cf-450b-8fe6-720a10981467",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19835b47-bd01-4e15-8bd3-8d68f97801d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3d0e582-4e24-40a0-a70d-f8ec23c143ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2103ea57-d2a1-4014-bec3-9d6d103d1551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b038a4a3-1343-410d-a1c1-a162efac68a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef4e16d1-16b5-4ccb-9cc2-f3b09f1567ca",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5541179-988d-4b02-becd-7900ab8223ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31c974d0-b871-4c73-8e4e-bdfde657fd40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be497b2f-8891-41fa-b7a2-5e223d0d56e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8786b029-94de-40d2-846e-719187601c35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bccbd819-1e1b-4893-88e3-9f0e4fab607c",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "890720db-0526-4e00-a93d-087b1267fcee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66f1182c-6feb-4495-9742-fcf5733616d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "939c3fd4-8d8d-4b46-a842-87210cefd735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8409a15-ac7d-441d-83b7-bc9da9851b8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b70592d1-1898-4e8e-a3ce-1021c249a5f8",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f5c1a78-3198-4b76-9507-f313db59092e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfc9bd0e-a0d9-4848-85da-716175200a48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4767876b-e972-4724-877d-d4c0faf83355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "386cd029-ff4f-4fa1-9d36-6684d2549bb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a34105d-550e-4b53-9aea-db65d95594c4",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d1eca5e-ae38-4697-bec9-ac6b2cee81c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d6c3416-ea46-4996-8b95-fcd2ac3410bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "259c501e-afaa-4b62-b90f-59eed5e5d969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d56e0f4-fcbe-4b58-9291-b1ff36d809d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b1cb1c4-d90a-460f-abd0-0ad91c81a4a8",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "504b7607-5fda-4dc4-8735-f0d836ffeb73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0b305a6-3b34-49e4-8273-8e7e3684c0af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52e557d5-52f7-4219-9e3f-c6c7b5893a18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "714db803-513b-4e9e-9a8b-991b59434151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "337f5927-659a-4d16-951c-29d0d37c255d",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bdb7d46-bfa5-4749-aa3c-93a96843a459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8091be29-3c75-4dea-b837-1a700dac7f51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90c15245-f5e8-41fb-a20d-a8fa2b94b2ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3e5dd61a-d022-4b52-95cc-62942f91f8d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9913e97c-13dd-40fe-9f9d-b5d7c8b27e8e",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e471606e-8d2e-4e74-9059-5b7b924e2468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3619b512-b5e2-4f4d-8afb-3a8c1720e2aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62a524c3-5857-49d8-94b8-81f7bb1bc4d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1daca06c-b5b8-41a9-8957-0c35758bfbac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a820b05c-8fa1-40fd-9541-fa8ba765ef6c",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9799e7b-05d3-46e7-8105-af718cae47fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1df720e-9871-4c0a-8916-dd7eff557d63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e646968a-a5b0-45c5-bfdc-a2a89ae8e96f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6aca27d8-ffa3-45b3-8762-3d55cadb033b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "092626ed-d363-4d0f-9b12-1f9ef4486e57",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fc4b330-9941-470f-a2bf-96d3282d1440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a529947-96f7-475b-892b-01c781e596e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a277b500-759c-46ab-8126-7b001f808db0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f420b460-95cb-4a44-ac8e-3b0c3136b244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6044c915-d457-4424-b7e6-5c41a845c1c2",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d409bfe-47bd-4fcb-b7aa-d39f3c0c30c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1d6d380-6fe6-4f5b-89fe-49f774c78362"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e751ece0-7aa8-4bed-8b0a-6b811b2b3ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "797445d3-bb4e-4309-afb1-7a13a52bf533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16a60a7d-5996-4de7-b1a0-643d1a3240dd",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38854c24-c25a-4eb9-b293-1886e10ea54b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fdb3879-7a6b-4679-8338-934fa3697588"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "582f3375-0232-475f-a7fe-6395bbdc419f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e298011-c74f-4f06-bede-dd606a66cf7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa497b8d-4d5a-47ed-ad8f-17222e016cfa",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c66f7a46-a3aa-43bb-bdb0-ae9cd0c7dedb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56f68908-db2f-47ae-8344-b9b778fb8870"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5695b3a6-1120-47a9-b3e8-0096dbcba193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c1e48cde-24b6-4fd6-a88d-f36631caf4bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "021d34f2-a845-4f6b-95c6-d10d9f1eb84c",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76d9759d-bdbc-43af-9a2f-00a6ae1655ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "350d709e-00e7-4c97-96fa-681b6b6113fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c0bb408-830a-4e56-9682-89d70d83e8a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3518e3b1-e139-4d95-a179-b32439e556b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ee46a8b-394e-44dc-936d-2a21e7e5bd73",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77ddc3e1-ca72-4a7d-b7d1-3edfe8fb4613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca480bf4-0a53-4af9-b8ad-70d4e1cda025"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8a42b66-ddd2-441c-ad28-2cb3b024706b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5545d4c9-39a6-4dd9-ac43-17c03224420d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "976e97d0-5bad-458a-86c7-084dbef3b467",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59951e1e-a63d-44b7-8e2b-314d61338f0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "492b7b74-eec2-4e40-b563-d144f3793e21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4583e359-46c4-4a5c-b4e5-ac27c1f39983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb2846fb-8c04-4185-b329-648196b20794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72a0f066-9ddd-4541-896d-e691c004ccf3",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c6fe0a1-03dc-424d-992e-efab2a0e3844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00fd1bfc-5a9d-4847-94be-3a056db351d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a0c994b-4f0f-4446-8bb1-f9b6f4dd0cb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd8a3892-2168-417d-9b58-30e4a519803e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07e8d5b6-635c-4fce-b0f8-d2d7ee8b183a",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95b1beac-1905-475b-9ddb-71330e15ce5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e0c2de8-c61a-4451-a7f2-3ca89387e5e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e33a2049-c70f-4418-8dd9-c7625b7997ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e41c4b3d-583c-428e-a054-b36ca8f15bc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "611f184b-28f6-4626-bb25-8a98c0b6498d",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acd02963-9d5e-4f5c-990f-92b66c6f4960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc2cae31-e3a9-4a34-8aed-9bb9e381ecac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6db167a-4a65-4c24-80af-2e4cfe8dec3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f56d1c29-c69f-47b4-82b9-791387d855c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efe5ec02-153d-4972-99c6-d265ef7afbd8",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "088a35b2-f694-4c9c-9d40-b9f55a8c0726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78762e8d-582b-40e6-8cfe-d00b3128bc3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91b62145-b971-43af-b3e5-6cc58b26d3b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "30b9abd2-5c40-4b45-9905-21965bdb4dbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b2248f7-17d0-4537-8a74-0de43afa4861",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e6a5192-2dc4-4dfb-8a5d-92b9799d7a69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebe4ca4d-c702-4446-8c87-a8741e646b97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "536e818d-cdc2-4a89-8f8e-53cf749b190c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "693fed66-409c-4468-abb0-34cbde8727ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd6affb9-c830-4489-b413-cad072f073a2",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b112f8c-633d-4758-8ef2-196a1b899555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b68d453f-07b4-4b83-ab72-390b2a19935e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86e6caa4-83d7-4a89-af0f-e960297c9e32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3742df93-db98-42d8-b9ab-29aae40d53c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95d0c925-ec97-4994-81cc-45c48f19f9ad",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58fd5e55-0015-46f3-a6cc-a3f35b934d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f353dfef-3237-4b34-917d-ae8967e23632"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37d44da3-5d8d-419e-8263-f12594e6827b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "76d7e9c4-42b4-48f5-8f65-36a0772bcbb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59137c79-f651-46a9-8fc6-5f9f87165a30",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f46ce275-987a-463d-891f-5cc4aa80e5d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66fa0002-9e31-4c7e-8cd0-e34d7bd1b772"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e83e16dc-752d-490a-8932-36ca6b662195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1adecddb-501c-4c55-865d-4433aed53c2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be80ed04-b595-4b89-8a0e-e9447c4dc393",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da28c885-4633-4e2d-906d-a47c2e951b17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "16131228-446d-43d3-8de8-3f2636d89178"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "871a36ca-aa8c-402a-afe9-1b5793bb3877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "063ade91-b170-40d1-8241-ccf464c3a0e0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d7a358e5-360b-40bf-bc24-0be76318e03f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "390955ac-7d36-4f7b-a62c-e9fc954e0ae3",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c478585-aa36-49d7-8104-896395161d73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a1f060d5-8383-48e1-b77a-fdfe98b55e2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7d99700-434a-4a9e-86ab-88f54b2fca14",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ac602526-9fac-49b8-a795-185822828a8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0052551-bece-4135-b0e4-46b4a71770b9",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20e217eb-befa-49df-838e-bd8ff441471e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8b01c3e0-adaa-45a9-98a7-496e1095f6b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cb5c147-8fab-46af-b5ff-c2ffaa06da85",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ccbc09d1-bc85-4297-8142-c324cea29877"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2288159c-e727-4d13-9cc5-49e3586a0585",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "914424f6-47e5-4f9f-a776-aa8393a7f1f5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "68417b35-13a9-47e5-83b1-d90bb809bf6f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d775984-a8cb-4e99-868f-e884ddc128e7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3a90f25e-5b55-4441-a5d6-3aa1a10f4744",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0d820ee2-f5ea-4f20-a91c-7cdfaea73ad9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "892bd3df-2cac-4708-a9e8-ae5c31e6dafb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "61a9320a-3f0c-44a3-ac24-51ed93add385"
                }
              }
            ]
          },
          {
            "id": "23395cea-5c4c-4286-a2c3-9a03703edd87",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7bdc2e06-6e66-4d2d-953e-9fa7693fce0c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0b166f56-724c-4e85-a519-90a8d8b06f6c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1af80f79-e21e-49d8-aa04-d149ee915957"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a51483c8-7276-4203-bc55-03b6fc83c3c8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4809e063-86c6-4116-b1a9-fd618a2c2dc9"
                    }
                  }
                ]
              },
              {
                "id": "ff5be02e-f095-47d0-95a6-053b5ff2991d",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f151cb50-8ba0-4194-b6fb-95a8fa45b027",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a155b15c-1817-4fa2-8ca8-af8543429bd6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a6182da8-e766-4ba6-b1a4-0d1ab1d755ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a093e78f-74fc-4bbb-8d42-348c88c7a7c0"
                    }
                  }
                ]
              },
              {
                "id": "32d531a8-463a-474c-8c47-9d7486d5e31d",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "67b59298-7c34-47c4-bfcb-960f564b5e0d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "867a7550-c3fe-4934-a773-ebd842c51d0e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3f7607d8-c6eb-476f-bfa7-e924fd84e8a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f9172f9e-ea53-4348-bd17-5ebae8c1eefe"
                    }
                  }
                ]
              },
              {
                "id": "dd4b4a4a-f08f-46e4-a2c2-184aeb3f21e0",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5cbe2119-f0e9-4e54-a9e4-38951b806ee8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "93251dd1-9277-4da6-a885-e97ab9e44bc8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "900a73fb-9293-45bb-8ab5-6aeab8df3a92",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "aa52e2d2-4f3d-4c72-bad5-b37811ebcdda"
                    }
                  }
                ]
              },
              {
                "id": "4fa6ad63-5013-49b8-addf-c49f67969ee9",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "725fe49a-ad70-4939-b53d-bb97eada8524",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8affc841-603d-42c9-895e-2055ddb1ccf6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a25f0906-168f-4168-ad78-b7c72e3ad3be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "f023559a-2b32-496a-a6cf-47de0d5e1166"
                    }
                  }
                ]
              },
              {
                "id": "58fdf74f-7f81-4ece-90e8-4cbb5415881e",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "55f12a4e-fa76-440a-8002-33d28bfa3ded",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "90b7ac86-17f3-42db-aeae-8fb8aa103002"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "01af74e8-7664-4dc9-bc0e-20ab150b6dd7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4fdc60a1-aa53-4828-a00d-18b090d516c1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d374079e-d975-4b18-a165-8ddf1b0ba9e5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7ab6042e-0411-490f-9650-e225d1351a4e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "26ac1d7a-3af0-48cd-ad58-6cd4a3f060ac",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c1639b75-c001-49a8-bb8f-c926838d2a2a"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "81b53f01-d702-4ad3-b848-e2e3a1b2798d",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "91846d16-96ea-4f9f-86ba-0db2a0b16edf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b091e57b-84fc-4809-bafd-1807610fc78f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ccfd9b54-3c5c-4c15-8aae-ea0f6b8acde5"
            }
          }
        ]
      },
      {
        "id": "bc105848-e056-444e-9098-698e676f8017",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "e2168c59-fd0a-469c-b8db-1b79f3fb80cb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "05377b4c-94d3-4202-ac98-8671a340405e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f8be541d-f810-4e9c-9549-8abc8ff9fb60",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb28d690-ce0d-462a-bcc3-5c7112319916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5239dbc3-ed75-4727-b1a8-03dcccdce9f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d154695-95ca-43d2-8987-bce821148e08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1af56ac-707f-42b9-9a6f-e55b72feba61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e010332-2fbc-4dd4-bfff-a0562794a3a8",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47c1bb6b-bbbc-43e4-8866-0accc6668b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9c0318f-b8c9-4675-93ee-b9a9ab1a1d2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6d898e2-602e-4746-8628-d0fe2c78310c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3167506f-48a6-41de-bf7e-8c15d8c98bd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bd07adf-c6fe-46e7-960b-a66ca7e48e36",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08765e04-faac-40ed-83ef-e586053549a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9adf1bb-2425-4daf-8fb3-b1c10d1deb0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a148ef93-c708-4f85-b1e6-fcc4be57dc51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "65e56c63-3b59-493f-b574-49d77acf2665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f7acfef-6c23-4d09-816a-37e7f96a3c52",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4c586a6-00c2-4b38-9ff2-6e50701c4d94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "172e8c4d-760f-429b-b35c-6881d6fb28bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f04c5d06-6286-466e-b936-e466875992a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "52c3fbf4-3969-4767-a15a-3327b3f1e920"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfb5b0c2-2780-42c8-9d95-22f9739e0c04",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f93e09f-12db-4e49-bbe1-8eb014dcad89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3d35c56-d63f-43a3-991d-6a41e28dd7bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aab7d27-f29c-430d-8e5c-6989397fca47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b2a283e-9e79-4060-925e-0df1c5199d63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ced847a-9642-4663-96aa-51c817866841",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b568fbd3-75e9-412d-8a0a-f300cb58191c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "023481ce-34ec-4e67-a5de-6bbfa3d47c39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79a7c366-288b-45fe-be34-3b7339cacf1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "60b9c25d-1794-42b4-b923-1642e3717565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a18044b-5329-46ec-998b-cc7ff8d91c44",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4598458-a34a-497c-bfd2-fea9baa2ef4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d530caf-9a8a-4950-82f4-ea1128cd09e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0380916-437a-49a3-8884-9dcc9d818374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "18a96837-ab51-439c-b72c-612f41f3bebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8c966f6-e2dd-42c0-b4a7-17a9a8400ee4",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2effd14b-1e15-43a3-b880-45a1aad57050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ab9e700-8bca-4943-be44-9a7eae31a3f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee5c7dc9-de39-422a-8ae4-38239016cb95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "01dd80e6-ae3d-487c-be53-1b69bf45c8a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6a10ce7-e9d0-4188-b0de-701660ed5d85",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5b99eab-4732-4bad-a931-d87e8e11d04a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18355119-c789-4f4b-ac6e-166017d8f3cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f14edabc-b405-4c95-aa87-2c71cca7122b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4cbfed5-a058-4a34-a60a-b5f03301a528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "057f8dd9-09fd-49c3-9fc0-4560c719fa32",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe50409b-3b17-4b17-8200-347cb83ff967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe21203b-e035-41e7-b7b5-2a85ed9c654d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b3eaf3f-3f2d-422f-93e8-845ee8268436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b171b4a6-89b4-452b-bcb8-ab0326b6ad13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91c2fb64-586e-4bab-b2bd-9e98ddd0414a",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0299ebdc-45b8-420a-aac4-9f4b86233887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b40c294-9f2c-4802-8676-8fac6dfb9cbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c0897b6-2f5d-42b0-a2ba-fc107965710e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "7e75fab0-8360-4b36-805f-93c07fc3bcaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4239472c-38c7-4cb0-a242-a9b541e16376",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "affe31d4-48c7-461a-9652-7713d76b18fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "100623fe-2b5a-480d-b797-d1c0a2c8b474"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65687a93-f9c5-4750-a2a7-1224c5a7f01e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b1e59aed-3dae-481f-a47f-915b34dad510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcd771f5-3e0d-4e41-b2ab-48ad56c41fa8",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33196268-9be8-4e6a-8880-7d72f072a760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ad758ee-b897-4785-a9d9-93f3d695e304"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdc2340d-ffa7-4275-8ddf-6d56a2edb27c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "acd16d6f-7bba-4bca-af43-78a492fe4192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5a0139d-48cc-44a2-9878-976b49ed2aa5",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4238eeba-6c24-4506-921c-2627d41fd503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bf933b6-785b-48da-92e5-7b0c58f8a2e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fbf6823-44da-47e0-be10-7adf5db920b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "59cbe1fe-7f80-470c-aa95-d8103326a3ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f34faa35-e989-4b38-b2bc-c54148b2bc91",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6055490b-7820-499f-b61c-32336dfd0c61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a67daec1-3c8a-4773-93c9-5f06b47680e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ae3eca8-9dc7-4f0f-bfa2-b67a802d8e1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a0e4352-43d7-4a85-882c-ce462f5b47c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46ae1131-60db-4ad8-ae6d-8c48134e3c7d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7860b9e1-06c8-437e-8abd-efbe90aeae3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c4700c3-c55c-494e-bde7-27825418c434"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e33f8b6-a1aa-4463-9efb-0f3383bb80e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f81ad3c-7124-4fc3-a562-3953317346e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d5bdf29-2d4f-4997-9701-be14876cb437",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e548519-1244-41d9-bf5c-bc3bb0a502ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3d3dc92-ed15-42ae-90d4-2d59ec902c46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cdf5b38-8858-49b7-81a2-97803b770fbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c098398a-b28d-4c88-b079-fdd31f5d98c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e86c223-620a-49ec-b784-770d25262ec0",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1431751b-2284-4f4c-b876-d4c47fb14e2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "721905a7-7592-4986-bb2c-060518147af0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17f4a520-83e5-493c-8312-1bd7a395f4bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "76ede975-7687-480a-8e43-2b35b5624931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abf84ffa-d84e-4fbc-95c9-25bf6a188705",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27ad3daf-b7cf-4316-8a3a-8699c5cd45eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8582b8c1-673c-4f72-a726-1e17d7f3aa7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21aea394-e6e4-4d7d-ab5d-b55f8d34cb53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "389be092-f9d6-4fbb-b01b-151062bda159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "604a34ef-2754-4ddb-a534-fadc866e9571",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "146fec2c-e003-481d-80e5-407fe9ee09b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3204bbf-1fac-46a9-bf1a-9d18b10b0e2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df7810f5-5bc4-411d-bbb3-23e05924211d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f789955-5cee-4b00-b82d-a749975d272a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70459c8d-21cd-44e8-aec7-ce89a5bcfe51",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "083528e8-8633-475a-9267-a1a6b4d1f816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed251e11-8dc9-48a6-9f56-92bd0a7ec61b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c018f882-e62f-4e0f-b9e3-cb4fa3b40566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2aca0adf-a9fe-4b1b-a7eb-7bf4c1187c04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf96a97c-1fe8-4a0d-b00c-46d4c8081888",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42c77eaa-10e9-4114-abca-ded4b8cda15e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dae356df-bdf8-4576-9c91-4e2fb6ddb5e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15261649-f7b3-49e0-89e5-a8b5d940e6bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74466d92-748d-480a-82f6-97fca491727c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eb38fd2-f96f-466d-b4ec-78d3004adb80",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8f803ac-f3d0-4512-a447-e3af72baa867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dea36f84-511e-4965-87fd-645e006ef486"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60aa9757-bd50-4db2-b793-f85c8ce793a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ed3198c-02c3-48bc-8506-3c8f06ec33ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e40e7c3-1ecb-40bb-a324-0036588f2871",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12d4d561-27a7-4620-b465-c29edfab218e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e73c4242-0e74-45d9-847d-cfb9435ace3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65ed8190-5a40-4667-821f-7ec8f934ab4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fefd1b08-e170-468e-9440-4087a9092159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4af32cf1-6710-470b-8e13-872df5341a55",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66075182-d26a-456f-b9be-276d9a973cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "340b7121-4d4b-40d8-a9b6-489714621fa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c171ac2-5c6c-497f-bdc5-04173aeae5ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "accc1eb0-7d9e-4e1d-b56b-28c5727ff3bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a323c58-b374-42b5-8d32-aab9438e029a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f40e0e46-3cf0-4eb3-b015-8eb5891a61da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ccdfee0-7b54-4a45-8696-9f39b7e9330a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00496c53-559a-426b-8dd8-0b39278ba5da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "56270aac-f827-417e-890e-61d3be3cb38f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67f3ae93-6857-4f5b-a4de-84e253f253f5",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a953bb1f-9936-495f-bc08-ea6ddb8aefdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f64d53a-defe-48b5-9a50-094219acdf11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5be4942f-f0dd-4a88-8cc5-626b72c722f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9af91633-bd82-439a-b683-aa01003a8a0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2aa1292-53da-4b66-bb74-b4b91cd5c0bd",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b9dfb44-9abb-4133-8bad-83f85904d441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd556a6f-da79-4891-9b45-9c9989025f64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "252976db-4363-4d7b-97ad-85abc8cd98f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0179b52-15e9-4ff1-938c-cd9d072272df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b6c2ceb-66c1-4695-bc72-3ecf0aaa4014",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72a8f379-c440-4f10-b1f0-f93e3dc5c8c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7837eb3e-2a95-4faf-ab7c-619293ee4c03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fed54d0c-54b2-4962-ae72-f83a0cf5fd97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4761c06c-f6ed-47c7-9b37-80d1eff91724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f89cea3f-615c-4984-8af7-2a86f6a22399",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1df02f15-46e4-4c54-942e-724e372989ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d880ac23-c07f-45ee-a90e-b54dbf5ae541"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "865419dd-847a-4823-8070-9f47de1587a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f17fe411-a7b1-4903-ba9b-50c100dfd90d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c337301-b464-4b50-b28f-2534d8e24f53",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf28bc7-0c39-42c0-bbbe-ef339481d65e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e22747b5-3dd6-4e83-af99-1ce9b47473cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6db166ad-6ae5-404b-8cc6-59429622a198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d1db257-c9b2-49fd-a50e-f3a589767688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4397a876-17fc-42c0-a6c0-77dc139229e2",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce4ad779-a46c-4292-8c35-d031aa4a6891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23d82407-93ad-498b-b4f7-f8007c5bedf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9455bfa5-6734-40c3-af37-fce9f3daa956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "51b15bbe-0f1e-44a3-8a57-dced39032cbf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fcc4e4f4-6519-4cc4-8ed2-bcff3128bda5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "00ecdfd4-93f4-4328-8998-9738476a80f7",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "800abf4d-4841-4e8f-b384-b47bc714ba88",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "91ea8952-60d6-44d5-8dc4-06ddeebbc672"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9fe7e5a-c332-400d-8ffa-7ae632d37c2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e5d7f53c-fe51-43ce-a136-5588f8c27815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9033a02e-1555-4a6b-8af7-85d0da71912f",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e9f4f60-aa0e-4cf4-b9cc-f24d5297c78d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "75ba1f54-fab9-4092-85c0-77b7c8a445fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ad39f03-712f-4577-abea-dd197981eda7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b0d1ac3e-09de-419d-9ccf-420804299438"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8fdc0521-675f-4ff1-b230-51284d022cef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5812ff88-e1af-49f1-91f7-d7d91f0ad24d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cfc368f2-942b-4340-916d-82549b16868f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "94bdc29f-d4f1-4ac0-8af2-ba8fd3ce6f8e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5f0beb56-1650-4dd0-b748-f128ce992758",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b51e654a-9159-49bd-b56f-88fd2656388a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a17f7066-cdbc-44d3-ae1e-a390cdf450d3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "035afe21-f70c-4309-a0f1-7e09df1e3326"
            }
          }
        ]
      },
      {
        "id": "1810dea3-0247-45ab-8c0d-3d85d7e3baef",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "079aae78-1388-4460-9644-0100f15b344d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c140e349-4df2-41d6-9b1b-1f40658265ae",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b24961d7-e04e-49e6-b3ad-6511d086c12f",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8014cc29-2361-4a65-85f5-99fd6ca29df5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06c97d06-65f3-454c-ab9c-c3a7f2ee4b6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c86f5bd-c6c0-4553-a452-1fa3f3edc00d",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7e393ad-5220-4ec0-a4ca-ebfabae1d542",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d5dd77d-5a1a-4db9-a9fc-e69eb212a956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae2bf32e-c3fb-4e9a-b94c-66ba1dca7d96",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38d40cfe-190b-44ca-9abb-dc40a52c5963",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05faa0d1-14bc-400d-8cb3-4a6fa96cfb48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7088a2f-b037-463f-a4ba-b80af4aad2e8",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce094d94-9b15-4b8a-8a4e-7b76934202e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ba3c3b0-ca34-4673-88fb-2023245ac8cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "180b5e2a-17d0-4c98-ba6f-25b45bc5111e",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d205f4-8dc4-4588-9273-831afce0268d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7ca3c2b-f278-4d72-9af4-cf42f7d1c30b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42122ca3-96c5-4a06-a79b-a8881fb870c7",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b235f90-2078-4f62-bd8d-b4fc58842e61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12119112-2c27-4d8e-a921-65f5cf7c3e8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3735cee5-c8e6-4e81-81ad-281d2f8f40d0",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ffddef5-a459-4d1f-b28b-efa20a7ab3be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75a6403d-bdd3-4d96-8104-79a4bb1b6f44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "413fb0af-c306-4396-a2cb-b72a2eef703e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef23760d-cb4b-4889-82a6-bda738a55541"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b857f5e-58ca-4bda-ab1b-38716cd9a651",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b5462a5-2474-4f50-b206-75928113fa0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85ee939b-495d-45bf-8259-b409d2932716"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc844d76-dba4-46c3-85c1-0c95e25f3947",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9203364e-dc5f-4491-8094-360e946d8521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bea985c0-fb59-482a-9960-ce54ab1f2d54",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebad4b69-17d1-4150-89ab-faab0f64a955",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c481ca01-3f94-4e7b-bffc-3f5459a3bc5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c5362a7-3894-4a26-a8a9-85a908f3a8de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70460b40-7215-4c4d-be41-91e68d85ba76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abf27d28-8f52-4089-92bb-86dffd9e1b14",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6354bc65-1fe2-47be-8ad4-b3b0995da730",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e8ad58c-a72f-4b86-9f2d-efab982fa4dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fab75969-b0f6-4ead-bee1-689784547808",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e59f8683-9fcd-492d-b9ca-44599e75e200"
                        }
                      }
                    ]
                  },
                  {
                    "id": "218c91c2-9e20-4592-9ab6-5add87ebf222",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56aa8271-5624-4780-878e-a42ca9a58ad1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c673aab6-9241-4add-a2ef-c301f83ceac9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8b6d2a0-da5f-4334-9d89-b483486bae42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cca7acc9-4f9d-43db-bce1-aa6b98dc2c8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faf8de4e-4035-4e64-b978-db266b58da74",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aa2135b-97c4-4633-a63c-018ce5779476",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d66563e8-4be2-4176-95e6-f25fc38eedb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac0364e-bd19-4b76-8e41-ed7e11914b26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fedfac56-60a9-4cb4-b726-11668b8b8ac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10240f2d-968b-4b62-bd77-bb58b21fc10a",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb0cefb2-a4a6-42c7-a8cf-8b3608e368a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54ed7118-7cc3-430d-bd6c-5ba274accf69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fb50666-6aaf-46bb-8b6d-178afd67734d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56ddf411-a32b-4e98-898e-e15c2db558ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e169841f-7be2-47aa-a23f-34a23bea3923",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "065d727d-ff55-4697-9a73-bb3ad8fd0930",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "866ffd48-ce3f-46da-8505-5053aa4bd310"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ebc8036-e981-4c99-85cf-6396362aedd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "606bded6-da71-4639-9e13-aeeb396591df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a83b0245-5418-4f42-83f0-06530bb3eb25",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ae53f5d-bfc4-4c5b-b478-87eb9579acbb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa196b4a-ffea-4d7a-9bf3-7950deb66464"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd8094b4-82ee-4522-9fba-7afa01341936",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d81e9e4-e164-464e-be4f-29c4e8d40420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab36c17a-dfcf-4a54-8491-bfe6e19437c5",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba82d09d-fbb4-4465-9484-d7fd96af8fe4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0bff758-abd7-43ce-8a01-a3d53f724a6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c0db193-5f8f-48a1-ae39-a045cf034785",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28f7c62e-0d24-4701-ab99-2b26a7a1b2a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47f789c2-1e2b-49f1-8c72-543b330629b5",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5248168-0a3a-4761-be0b-2e7c59e1fded",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3c6f632-ab75-4c8b-b8f2-614189077a4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f19be8-20da-4732-9115-2371b430c788",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e588a8c2-d252-4f5d-bbb4-3063f8ae42ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "358d670c-d306-4ce5-b2c1-e3cd90d728d2",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab8cc3a6-90e1-4d3c-b114-bd4e9def4a57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78ea166d-bd3f-431f-a507-afe2c434d217"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab6ec2bb-8083-407c-a4f0-4934831b12e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "812f81fe-b9e4-4ee9-8bc2-c86475eb6972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7ee94e8-d4e9-4201-a867-c13ddc02c1aa",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e692a8f9-3819-415d-bf6b-6fa7d0fcde6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61fd2e46-6999-4554-8571-26e059107d7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "308cc811-c72f-4e9f-960f-acfaefae503f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e88e40e9-ccb3-47f3-87ad-bdfca15b0996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d218747c-c1ef-4f74-a6e6-0a0eaf353861",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bff5ade-99ef-4df6-8e01-4dc62f5ae5dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1bd941b-552f-4dba-923a-ecd7c667734d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50e038e7-2d93-4f18-9083-d49252fd324c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2792e2d-0b99-403b-b31c-b9e67bb31c1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0092427-69fd-46a2-9235-294fc1b648c9",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dda80083-a786-4ea2-94a5-2aee920691a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5d3bb8a-a73b-4ae6-90bb-1af20848f271"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a643d94-38d8-41b5-9431-9277009ff10e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6414f906-be7b-49cc-99b1-f79554cfd1d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a2e598b-f729-4dd2-a33a-d2703114ac71",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7535ebe-7548-4f4a-aba1-209070792e81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39851766-1108-49f6-8fec-50925b7665d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56ef2aa9-5206-4fab-94bc-5f892cd60a2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acef27fe-a05c-40fc-b32b-dd7d12a980db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b3ebae5-e3ae-4e36-b58a-675f7a4ac9fd",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0385edf1-1803-43db-9ba2-39e1b9dad7e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "309ed4b2-5ce9-47d2-a63c-618885079c0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbe5cd53-4960-421e-bf4e-1dc9ec5497c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06d298b7-3db0-4be6-b80c-54250be8d11f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c92ebe05-fa7c-489f-8e78-93d5df2692bb",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b9e295f-750c-40d5-90eb-ff086a9372e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a47d90ec-6cea-4407-9ca5-c620eaf72096"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "767d257b-c983-4e21-8189-ab8c43730f47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "395b4824-12b2-4e39-88af-bf489694eab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c4f387e-56cf-4ce1-9660-2fbb14a9598d",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af4f6ae1-1f96-4b60-a427-e33d42b58068",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c34847c-7680-4e78-a21e-254ff8d0128f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04fed684-f5a5-4bd2-8c27-9be91ebbda36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6888147-2a99-46bb-9be5-4dfa72604754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b49925d-a04a-4cf3-8d26-84486d4efc60",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c268b003-faca-41cb-8004-e4da79378793",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dab407af-a77d-4e46-8064-520e4c759140"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73753b66-1740-4a4a-b464-bfd8ed61ca19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e34ea2a1-5181-4b78-bae7-c02f1090a146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfc3965c-04f2-4f27-b83c-7a2bbfa6c328",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38dc62f4-519b-4824-a765-be4face0f31b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3163fe2-6d50-4af3-bb5f-24cbca724ad7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6dfe78d-ae95-45ed-a36e-0c45614f8d08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9d2ea1c-2053-400d-a71e-bf35bed98cc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0e18df0-e508-4140-9fd5-e3fd44e347bd",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0fc32cd-cec3-429a-9dce-8a28bce0edcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc6e465a-165d-4712-9d15-ce668bb50278"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db7ea279-c00e-43b1-90be-7fa14eddf2ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69124058-d704-47dd-8c8f-e7dcda666522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0044441-9542-4d8d-9726-dcb4fb4cf909",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90c9c8dd-883b-4ba9-8da4-623264cf1fc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43492fae-fad5-4a41-83c7-4dbdb3606f5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11437bc1-1399-4976-ab5a-ae9a9963ed77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b1c4072-04cd-4e3f-8da4-db8f6479fafd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1290d7d1-64ca-4100-ae27-ac6dad82a6b3",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "682e2fef-234a-4f1f-8811-7f95e313bcee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e250f1a-2e3e-4ce4-897c-01e5ad706893"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c38ef5dc-7bcc-4a83-a854-554e2c4da201",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2697f9f-7893-46d8-994e-bcc6b3eaf310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1679e01b-b067-4036-8d65-5eedbac7c9ee",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1674e9c-31a8-4684-a403-3c2dfde99ee4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09ac6ca0-99dc-44b6-9621-4056fbc2abb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fd8d8e0-f918-4de2-a703-22413075b29d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "363c1ff4-4b63-49ea-a6db-ac4d3cba47b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89370fd0-441e-4112-8a88-28cc459b243c",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aa840b5-d4a4-40df-997f-581b56ec31f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "adcf03c3-3e61-4560-a248-21bd24256e5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ee216a5-4d61-42cf-8576-1a702524931c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c78a38d2-4a86-49e4-93d9-4f4ec0e4a5d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fb43e95-a1e4-4c7d-8781-8c8b336e55e5",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a56be977-5526-4f95-a13f-7eb901cbd218",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b0921a0-e5d5-496b-8294-0eacbb77db37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "047b31cd-8d5b-405a-a5b8-30819a09e475",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b84c4a6d-e08a-4dcb-8ac6-f6d7db88adfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dfe17c8-0c84-4364-a89b-5d6670286a7e",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01954b25-03d2-40cd-8a64-680e2d816daa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bff88961-9325-4d16-b8be-069c93b39122"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ef1cd24-9410-4d7f-89f7-a7819de0cdb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a6d66c3-3b29-4639-bb7e-d3ff9d60c32a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f337ab0-92cd-46fe-b992-c19cb0741c1a",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a8e8091-2bbd-4081-98a2-ef4391e0dfa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d35e8ab8-2f5f-4ab8-8cfb-d7f4e9257768"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb52080a-9010-4704-a290-1e4de13aa0c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "088b865d-0c0a-4992-9dc7-4373c8a84321"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba6f91d9-fd0e-4612-9fd4-7e181d6476fe",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eca33cc1-f962-4d5e-9f54-af363677cdb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "502f7f72-47c3-4c85-9a9d-1c8e5ef8fb45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "172220fc-486d-4f2d-82bd-f01ca0a1468e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8bdae5d-07a9-4cc1-814b-bb832e59ef35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03a48e5c-fc58-407c-a157-7fd320f8646a",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd364ec3-4856-4282-b012-41cd30bde8a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89a2b4b7-9300-42bb-bd44-b8e262e3cf87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52e7dfd9-e3e8-45c5-9b5a-41cae7f4bd64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b21bfd6d-6442-452f-be27-e525452968a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de175f8e-468a-47d6-b8b5-67104228ee1c",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d31c71e-8c07-48be-b718-8d9ac433709d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa0b3bd4-b5e2-4456-a954-13b52c69bd93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "111b7945-a612-498c-ac49-d780fd6b22eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f7cd82d-5d3f-4301-8a69-a9ab5fa400c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a1a7190-8dbf-4b5d-b837-f7c23fb56bca",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afb51a9e-f0a4-454c-933b-0c7c9826dde2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48d30e71-2aaf-4f69-be26-1586a563a8bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3006fbae-3893-421d-b63c-fbbe08ba0d53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a057037-721e-4b81-953f-c4d0f073e362"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a40fd651-77ad-4d60-81db-d10da3030c13",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f16a2e9-2c95-4b42-9fb6-fb3bc64a037c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50f58669-f163-4c75-a9e9-ee82e438eaa7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bf2713b-d2ed-4fb2-86e5-a857f8e5d271",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52c3a614-0709-41ab-9856-503c61bc97f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "296f87bf-916a-4b02-9570-7a4a2d553072",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48da780e-aafd-4d5e-90ce-f1ea90da91df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e226bc57-cf91-4ed9-9781-90261e1dbc00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2659b338-0a42-4d53-b7ee-99d2404c0028",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d44b1b5d-06ed-4090-9fa2-8dfade3b7554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "784fcbcc-a293-4d16-b1ca-1bc06726ddf1",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f75ad1d9-760c-4bc5-afa3-ee4ea9354489",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2db5a7c0-8e18-4f16-a18f-f2fbc7d6b6de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b34229e-55d8-43b5-91a0-ba36840e83f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c928cd0f-035c-46de-acbd-c82cbd52e953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae356a1-ddfa-4525-b6e9-4800dff48dac",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66f418ae-5a1e-4b32-b995-a5bea87262e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5d79e30-e13d-4a39-89a7-cb6f68f41b6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40e31a5f-10fb-44af-a118-49f85fc2281d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28337b41-3b54-40d3-b437-4beffd97ed9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43cbcc91-9d40-44fc-8819-dba1fd360cf8",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18423829-6725-41c0-a7de-979f1214b60c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4fc81e9-2215-45e2-b37f-9443662b1a8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a63640c8-dcf0-4fdd-9aa8-200e6c793ad6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3a5e3d8-01f0-4d4a-a0be-14a849b7fb58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be19218c-21be-461c-87c8-edd3e7a9bb7a",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bbd2287-af33-4308-a228-29b9bc396ba3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24c3c8e4-721c-4bb5-b185-f9be4033995c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cadfb41-05c5-4187-b396-73b5d3af2ca6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "237de9bf-9119-4766-b2a3-fc71767770d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a64c4dd-b22a-4ba4-b423-8a75ad4ee566",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5986af0e-306d-45c5-b7a4-21a2082778f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfc45a70-5caa-4dbb-b1f7-dbe327280dcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29958161-6d1e-4335-8c31-ebe036f941aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0903174c-2cd1-4b22-95b5-f1119262575a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e092954a-71bf-45f7-8e2a-c0ad5fe7a9df",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ecfe002-5817-4e72-bc64-127ad59a4cdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8cdcd6c-0ae5-4f19-a9b2-a5a316aa5914"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99779bf9-52ee-40d7-a358-1971b2a40fec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88f58081-e74d-4105-926c-8ab76325dc0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "477cd20b-2b54-4a87-b02e-4a818db6f8e7",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1670a802-cec9-4e58-88ee-6b52d16731ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "696b1d66-bc3c-4741-a547-d74218c47ca1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94be09d7-625e-4217-9d30-af60d3e2e59e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b3db0e1-c833-4eaa-b62d-211ee57fbf63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "973d0e93-a4c6-4756-a3e5-08632dddde41",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cad8cf15-89c6-4f54-9726-1697addebae8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3f952c1-7b46-4442-8d68-653602bc48f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d3d8fea-2397-481d-ab3b-641a148b1741",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74e9be3d-76c6-48ba-bbef-d5589e1c5b04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ed4e18e-5c78-4c9f-9c8e-e202d24379cc",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d0f4b0d-fc96-41d1-be58-97180d341c86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87045f2b-7eb2-4fce-9805-a3d6dbc20a15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffab9681-3e9d-4daa-9a9a-4efbc88334fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfb7349a-3358-448a-9e21-a0c439d3d052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9f792ef-08ae-42c5-baf8-b919d3a93adf",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c220f1a-2abc-4f1a-bce5-701a4c7a23bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d64bb38a-7a0a-4add-a100-dec31f10926b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "465526a7-b411-4eae-97ca-de8ef0124c92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4233ab7a-b561-4a93-905e-b7d3002a437c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02159069-d558-4498-8223-e581799dc95a",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17f05003-fead-4948-9933-de3219112c63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95aebb2d-89a8-487c-87b5-55d4022addcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e17fc00-0970-413e-a7e3-4d6d79fc0a39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bb7df5c-22b6-429b-9582-31be5af75588"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e79e6ee-88e2-4d36-9263-2321d4361881",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "991bfe5f-019f-44c2-89fd-2b2f4351349b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efe7fdfb-a68e-4b68-99d2-64edf0db14ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c157b08d-d5c7-4012-9552-90c1f14130d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dd486eb-c84e-4bea-8818-dac6d7d5e167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "698b7c6a-6413-4466-98ea-c2c7e2a028d6",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9eb4144-b83d-4cb1-8d1f-2bf7acf78f03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e0be4ea-39ab-4a65-bc8d-2066bfdec83f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d4794bc-a973-434e-80e0-8673b5ce5192",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f9127b6-c122-4ed0-8493-bafc63abf1d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "551c8d0e-f893-480f-877e-f3ca850ccba6",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55c88fac-4dec-42aa-9c0c-a3c440b8dc7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "150a6b44-2bca-416b-bfa8-7ed60ba86bf7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "877760e9-b40e-4899-ba17-f61b32d25a41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ea5554c-055b-4f40-8f8f-afbf21163b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a95c093-46de-4737-90e6-e8604735160b",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c013d77-26ea-4ee3-a88e-5108e888aa68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b31b4fb8-9e04-4747-9539-83ee23342a6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44d8b024-57df-4d2d-9cdf-5980c1f90df4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d4909e8-57fa-47ce-9a5b-37a150c2d7bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65894192-f9e7-4b11-ae46-ebfd17eff115",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df31408a-0471-4ae1-ad1e-50216c558443",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4479d831-11e9-4441-a6e2-d00e6cbc0556"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d18958e4-f7e7-41ac-9fd8-658f334a7026",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a24989c3-875b-4275-b856-22601078cfb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beb625f2-c47e-4c96-b0df-dc8509ccdc67",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3799db8-1fef-40cf-8870-d674fda11c09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3007b95f-f707-48b0-afa0-8aadea94962a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4add624e-5fe2-4357-bbcc-3d1d38c6571d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf64d84a-f3aa-4125-afbb-6b95ad75a82d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1be590c-2f67-45ad-951f-4059611b718e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3d21c4d-bbcd-4320-a7cd-10502d5e3980",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "158ea684-191f-4aa1-bab6-df224faaf4f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2cb7cce-11ea-42b9-b4b1-91837bc915c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3417701c-c743-43dd-8125-e4bbac87e67a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35485935-15ac-4a24-b22f-ca8a720d6844",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "535c661a-e14d-443b-a083-944529ba9e07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26211806-d5fe-44cf-b583-9e81f1bde2f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00f5679a-241f-451f-b78f-5fe20074caf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "395a3ddb-a32f-4173-948f-6a75bbfaad27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e35daf0-e8cb-484a-bb45-960f28ae12e0",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1d09f7b-93f8-4f44-bd76-bb56c69d0b59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34e1fa32-65ff-40f8-b09e-d4471737c6ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42d8cc7d-512c-46dc-bae7-bd27c2783b8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "884e8390-0d20-478b-bc41-4d63d1944314"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55bb2d3f-c879-4039-89b8-82ff5a371b93",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d04d5fac-2bc6-4c6e-b309-f309b2ad7d31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f96649f6-c68b-4f42-9ba0-d28c89166373"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b0b3f69-565c-429a-b2bc-c92cc63b01ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57abcd94-aa37-4f4c-b86a-08442b04c0ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4c0b037-5bd5-463a-b994-8c469e39c031",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70b9e6a1-bab2-4d3a-a3ed-7f2171f3140a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba13831b-aa35-48fd-b8cf-345048e1e605"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d169a364-de89-4f2c-bdf1-5750d98efab1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e6c2516-e6d3-4a81-b1c0-5e28947fa1b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "120d6e4b-194e-4ab8-a1c2-f924a8298356",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a7eef4-c59b-43d6-a2ad-58e7099ed5ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c271279d-7060-4321-86d5-d5d43746b585"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8289c90e-43c6-42a9-bb45-7a4987500936",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e46171e1-f1c1-44d8-a315-05a65c7d2262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "064d5a7b-4676-418c-9ef6-9c2ff6f1f7cb",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16aafa10-0e7b-4c78-8794-b6b3bf4d7849",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75fb780f-b7d1-4044-9241-55b6d70b35cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31559bc2-3c39-45f3-9cb5-4b4aca5fe112",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25182aa1-df59-4d61-bc48-ab9d319d5f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad6f2a41-8122-406f-9d43-d34337b80740",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac1bcef5-90b9-4034-bebf-bdb48dc7c18c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "257814e2-e7cd-44b3-b8f5-8fb6ab0180c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a95bdf08-b4a4-4e7f-adee-b6b68c5b19e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d0736b5-e1eb-45df-a41f-d4e0ae9e7fed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bffab159-268c-42d3-ba5e-712b6a8ee15c",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3059066-d324-4669-a873-716c31ce1c3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f101c51-01ff-4797-b296-853590fd5531"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4963e8e8-7bcc-48aa-a507-ec6906584097",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e828cd9-19ea-4663-b56f-f1f679d1bb71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31ff8b6c-e8c6-43ec-94ec-e5938e91ad82",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe8c6f6a-c835-4ef4-973b-21e6aae579b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8888e301-0bf5-4f0c-968b-10d61ec5b4e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c6de854-99fb-4f78-b3f8-f7a1efb6f7fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af723c98-6300-46d9-82d7-ad9a23744d8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6217b20c-2afe-4280-801e-39c552874c97",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "342825e3-cbe9-4e84-810a-74a64494f136",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "add93eaf-8bf7-431a-adae-95b27e477e48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6369bc42-48ff-4dea-9d3c-85f79742a30f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63831079-715b-4c91-bf03-99d83e47027e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "203488d1-130b-4fc9-8a8e-21524e1f17c7",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f10c6bb0-3aa5-4297-b818-4d58c7e6f7bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a125889a-2068-46bd-8a92-2d4ff4d991b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39443713-2b83-4f6e-9612-f7cff01fe98a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ac936c9-89e5-442d-ac3e-b8c37ba08bab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfd2cd98-4911-4d5d-8a07-541f64d3ff6f",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ee4320d-328e-4c35-a2fb-bb3d31e21d8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c5d21fd-0a21-451f-a172-20082b4873e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb58554-88f6-4d1c-b8b2-465d35ed0bab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f6b583a-154c-4311-a969-2dff283e3242"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb0417cc-cb61-4914-9711-b1a230efd6b2",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7078aa1-1cc5-4717-ae3e-7d2789bf0bde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08a3cf9d-c772-4583-abc4-c30894e3fef6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "717d0f0d-c95b-4854-8d17-f2bf00e5b99b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b38fb9f-4ea9-4c06-924b-3b2000c05a8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11d048a0-c0d1-4274-a911-a63089af6775",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7221ca86-1847-4dab-af97-fa33e823ff0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "449ac555-85be-4a80-98e7-79eb00266015"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f559bb55-8f2e-4a10-b36d-486517f243c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b5aa7ef-d31b-4109-a5d4-f816c885f8e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba236d98-d170-4aca-a13c-08fcaee98c88",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "001ec8c7-cb93-4265-a765-7c143574c99d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9eb6461d-3ed5-41f4-b3b8-01fc214e119d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "779dab46-19cf-4d62-885b-869fc5d873ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b337581d-1bbf-4f36-9063-95fffacfa0c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00af71a7-17ce-49ac-b10d-4d1c659b0bb3",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "532c3091-7029-44c8-a884-38d5f12dcacd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "466978f1-97b9-416b-84e1-61dae415beb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e81e9d8-ec02-461d-96ca-f189745afde9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25139136-abe8-431a-aee9-b8f84fd1198e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f427b7-5de7-4024-bec0-dc8af74f6821",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88e56151-26ae-44c6-8a6f-9eaff284c1de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a27a3b08-4889-4b20-b915-94aabea10902"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "713c0d28-8ef9-4d8e-8892-c570498f7108",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08f9c6f9-67da-40fe-bab5-5c8b482b2c94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a12230b-bf07-4e7f-91f3-a8e3d12f970d",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b56184e-4e29-4159-a999-193b234826ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6a66f0e-8ec0-4161-8ba0-872a857200a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f7248c6-63ed-4537-8446-5d55111972b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ddf1aea-cba0-443d-a5fc-d5edd16b9ab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e2a257f-1ad3-4d48-b622-478e800003c2",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b9c304c-e662-4309-ab2d-54f1f99a3c40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4cb8842c-a7d1-48bd-92b2-372c11f70a88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f44f1c2-bbfa-4e3c-8b70-6305a38ed301",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf686e78-4b04-403f-b6c9-cbbec03a6ff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8712c30-9d33-4af1-9d5d-0501d187987a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17abf588-2f71-454e-b026-a9387d077e3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7685825c-12f0-4187-9a4a-3b9bccd5b24f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77e90b5e-7aae-4de4-b0de-ff74ab4a7007",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "142ea2b6-e4bb-49ec-8e52-eefe6758a159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e488122c-fb15-4cf9-ba01-08286e8f4f48",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "012e04f6-f2b3-4412-9205-9130e59d90db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1dfc479d-250f-4ed4-bb65-a06086f67053"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "085c2a03-cd70-4caa-9966-b6f241110a39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4332c59a-824f-4876-bc50-6dd2b9ab3258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d75c6ac7-a083-41e9-9583-d431dbfa3e5e",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a88d41f8-2299-4d06-845f-1f3184d68edd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0b6c5d9-50cd-43fa-8586-7cc3c26d26c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92dfee24-d0e9-4e9a-b1da-2210e691224b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48da4510-558e-489c-9e0b-262106fc49ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e37d2b9-bd57-436c-a078-c4d81cce0562",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85eaf05e-aff2-41ba-b79a-8cfe6590ea0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e98d2184-5b2d-465b-9375-4916127eef03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "040a8587-07ba-4153-bc67-c046a2045220",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcdaddd2-2caf-4b2c-bc39-3615c0410560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30d7e0b5-9d91-4c0c-8c32-0e67e4e31a25",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48596c68-5ab3-470d-8ef3-a5ab3f49a5e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43161a5b-98ad-4b89-b372-657506448872"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7982a83d-48b0-46ae-b8dc-eba8804a90bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09d36a5f-e60d-4e93-80a1-4e06e5222b09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6457bbb9-d5b3-4029-959c-a07b7c6310d9",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ec14780-3e90-48bc-bcc6-2d317316a3b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "691eb167-d386-4fa0-9397-dc4dd35bcd3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "690f5c84-ad36-4125-ab3f-f198ef37df5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3199e239-f825-4cdf-80a8-59e40d98a354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57dbb774-40d1-4e4d-89fa-918cae62fd06",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f871c411-69ca-4520-adf1-df62478d2faa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c95181b2-6bf0-4d12-977f-e13e0a0828f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "416803f9-4667-43fa-850e-fb21957f910d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97ef5a4a-ec25-4d7f-8a06-ebc18f7073ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71a30b9c-6f08-4f30-b779-44fd5fcfcfc8",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db0dd1d6-f1d4-4be8-afad-feb639a817ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c7f2888-e0d1-40bf-9c3d-4e457aeb3da8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9574d15-5dee-4770-b572-fbf283d12cff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "803c220c-5235-4327-80b7-e3ee0e3056ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a7c4c03-4ea5-428b-9438-d102528dbfcc",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d20c61a-f9f5-478b-a9bc-247d38d27122",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92b7f52d-89e0-42fd-bee9-4e47d05559eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc2d4dc7-8b4c-47ae-a0dc-4e80ef48584b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cd34b4d-da1b-4c60-92b2-202dc6e2af38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c633876e-7e42-49e5-b351-b5cf7f5845bd",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02f3487f-74da-4ac2-8d38-534ae17c8f33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78af6354-e771-4055-9d8b-6623e43c1c97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbdee98c-a882-4d4d-89db-5831585710a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f651021-ea69-4b63-81e3-0d585503a918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1530ea20-061d-46b0-818f-19a8db67c708",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f2472b9-fa60-4c05-99c5-01476cd49366",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "814f164e-3813-4809-b2d4-96f7450a2b47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e3cc158-81a3-4499-9b62-02dd11dc8b93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e2d3a88-d129-4d76-8eb2-9da735645819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5258b4b-9d1e-4812-821a-6dd89c07da89",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a261da6-d2f9-4c0d-9368-80f67373f008",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c07de27f-54ed-424a-8013-0f07f1a58b03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42af57b5-9b05-4892-b7ba-1bda068ec7db",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0621daf5-10cd-4863-a66e-f0a75f9f37bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c809b534-345f-4c76-bc89-eb5ffe9eec2f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ecbb779-ddf8-4f03-a267-3ed0116ee9fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea9adcb3-d498-4d72-b80a-c8faf35176f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d1d9113-b003-4b04-9391-bc8964b491d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50372729-e34c-4a1a-9541-296bba7d511b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc4f20f6-e239-417b-b69a-fc77e8bbdb85",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a191d6d-9f1e-4124-80f9-f538d2400b9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "736639df-5f5c-46fd-9c39-6915b14aeb0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "affff7d5-b511-48b0-b4a2-4932159a636e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e33faece-1f9d-4d2e-8815-6c7df26cf9f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "462c54ba-dee2-4dee-98a0-3c94dffdd49f",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45f44d14-2294-4bf6-a886-d70d268f3cc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eed05dc4-0578-4c44-b6a7-6cc3e95c1588"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce68ea4-5d80-49bd-bbe6-5bdcfcca6d77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32fab326-0c48-4932-a4f3-f531be66b1f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "189fc3f8-f52c-4a57-a35b-597ae46e1844",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c5a76a5-46b7-4c6c-8fb9-92befe52db7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5417486-c9c9-4557-af90-c24392cfe055"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c37fc89-86bc-428b-ba45-bb6fe8a98bba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4366955-a5d7-4172-865f-523cd39de30f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9d2d111-64ed-4783-87b2-a3a839778013",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2e1a7eb-4aa5-4fd9-a6b9-0fb1c85376bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6641787c-e3ad-4548-acd1-e89aaeee4d46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "167d4d26-4376-4938-b394-ea7e2accebe0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16fe2c4d-609e-42e4-8fd6-42a97ece0b08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "267d1652-e39e-44d3-8aac-fd4fcd3fb1fa",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b0d22b7-9719-4509-ac40-335eab4c95e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7974cbfb-0cd0-492f-8314-e455710c6336"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d031d47-204b-4c7a-b9b1-3d4b035645f3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63684e57-8148-4f7a-918a-354b0cbf02b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4162decb-dc00-44f3-b631-5ce69bf8fa0b",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdac55f5-d924-4aca-9794-11e43668672c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0be53745-7610-4c64-b1c9-4f63d3326d5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f1f037d-4d16-4a57-b373-a6860f7e42a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86c8ef07-d91a-4305-9e10-500a7ef266a1"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2f2ed3b1-02fd-4e8f-8872-bfc2daf82842",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "45a09add-0b5d-4027-a474-b0c2a71e291b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8870e4ee-7d66-49d5-918f-a66c261cb539",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "518d6831-22eb-4b6e-840f-6a018d5d06d3"
                    }
                  }
                ]
              },
              {
                "id": "ea6ceecb-484d-4bf5-8bbe-4cd70241ac2d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "eecdf1a8-b192-4ea8-ac2e-f105d52d8eff",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "543bad40-5183-4ff7-b9ad-513879edaffa",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "7d5a5d95-ffa2-40ad-97ad-f7d1ba1cc470"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f966bf41-9461-4c44-9445-75597503a3cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "17c334cd-dcea-4aeb-9bfe-0a5f9203f193"
                        }
                      }
                    ]
                  },
                  {
                    "id": "623218a8-39e7-49ed-9011-95be981f12a7",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e00fce97-d14c-446a-b1b1-b7b995fa38f7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "77e40efd-dcd4-411e-8fc2-cf4095874a53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9f6bccb-78b9-42d5-9387-b1a07e013f59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2f48db09-acff-40c0-9c88-bb9f649a0b86"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e9da07f7-f418-4328-b582-9ca6ba48c5e9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a51b5ff0-77ce-4fe6-8b6e-cb3d679909b0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "93f55065-c8ec-41c4-b44b-a086ddcb6e35",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ab3858c8-4aae-47a1-8c4c-43ac4fe654e0"
                    }
                  }
                ]
              },
              {
                "id": "82736f60-89be-4e51-8552-0954fac46723",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "8f064d71-6b81-4869-a338-cd91a09969b4",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faa0683d-b891-4f34-b88c-67ef7e3da16f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "ee1f974e-16f4-4cde-b907-5a34ec315b04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8a880f7-10a7-4ba1-9e56-3ddb8c3f6fa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92e703a1-a198-48b5-9142-a1c48f0d5005"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "160b851b-1405-47a0-9a04-14a15615c620",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ac11ac88-ddcd-4d23-99ef-64a6eff0aca4",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1df6afa6-28b0-4f85-8f82-8eb04a796eb0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "03ba3e90-53b7-4e9a-9d0a-0492f8091825"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "595d4d3b-2ebc-4330-a4d8-3943b4857028",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de6a92e3-73fc-42b7-9851-cde8bda77b7e"
                    }
                  }
                ]
              },
              {
                "id": "c585d751-d528-4597-8f28-6cefe775d3e0",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "86db7c7f-7057-4c31-aea6-cd3fdae81518",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ce50e5c8-f98b-499e-9429-65ecf9552b3a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f5a80020-18ad-486b-89c3-63224ee603ff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "17d2c8c2-eee9-43f8-b35f-788de40f16ee"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "742f0468-6e8d-4676-ae4a-921b9eb00e91",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "55e5f399-f1d5-4c6b-8a57-ec2a8c746595"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bf1d2539-e821-4f85-bf49-78df5903b126",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "deb043dd-9723-4361-89e6-542d36e1a268"
            }
          }
        ]
      },
      {
        "id": "ce536509-d3d4-49b3-8f32-6b83396b9da2",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "83efae53-825d-46ca-ae5e-5283fa097a4b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "80db3e9f-49d3-4c6d-97da-63a88481fa5d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8257a193-36a8-48b9-9fbf-cb62d1f66b09",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5d524ab-595d-47fe-a041-7077aa2fa467",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5b59fab0-d8f9-4901-a592-71a0c12f39dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eba7fe6-c799-47ea-b60c-aa80c88a76fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bf25cfde-7a19-4dbc-a4dc-8bdb373dcef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e518c3fc-cf0a-412c-8e1f-5a9b59e064d8",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "615e403d-da27-471f-937e-302b69c54736",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "26c0394e-af4d-46f3-baed-5f9281504124"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf098962-d9b9-4baf-bfd8-f440f7c7f4d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "33078062-aa7d-4aa6-b7c2-41c19f930e3d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cf1bffbc-ca06-4a66-8171-3784ae924dc5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3031cc54-adc4-4301-8ec1-f8f7131c5f4b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f92c6856-f43b-4a33-88df-7976227a038c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eb468dd8-6ec8-40e1-ad5e-780bf5496c64"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "223fc576-d416-4ebe-ab64-5479afd086be",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "df512a14-8a2a-4294-be95-3cb9706cecd6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fe10168b-0e4a-4c3f-a813-5b66487502a0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7b70a304-0838-40db-8124-bfb141c76e33"
            }
          }
        ]
      },
      {
        "id": "a6d44c2a-0001-4afe-9c81-90f4f3efa33a",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "0ba657ce-f98b-4627-b6e5-a3894564cca0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c073e366-daa3-4eb4-83dd-c2953c4de654",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0c2b680e-13dd-4728-9912-681308c8e954",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd570a43-efa0-4cde-a53d-cbc0a58fa200",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c749ebba-54a6-4298-9113-4941b4fb280f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44b74925-a685-4cd3-844d-6ee802ba4cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e2ff550f-464f-45f2-b180-db98da7fb12f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f4fce08-f9ab-424c-945b-241326dba138",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7826950a-01ec-489e-9686-f9bab361eaea",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ddd551b3-13f9-4f3d-a4b4-64c428614f85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfdad086-fcc0-4c1a-8004-1795c63b7e8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1587dbe0-34a9-4cf2-8867-690a8f3863ab"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d0ccc4ce-bc1a-4d50-a0f1-80323242fe36",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1930ef11-0fdc-4cfd-8f10-15e0b4f1a23f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "70d8e0e7-1dd3-47e4-a033-fe70782b2e3e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "11a7c946-f55e-4783-8e05-e5cdd2b5f79e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eca88b33-2017-45d9-a779-2dfc6b38f65b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "15337632-5ae3-4b02-9b31-a60c8533d9aa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a31918d1-10cd-4070-baf1-682fbe3fe8fb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "299a4e87-d7b3-4758-b25d-ca800e844998"
            }
          }
        ]
      },
      {
        "id": "2bac1d32-0f27-462a-982f-449f7f201f9e",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "89943992-8afd-4b55-8a8e-956c5300fc17",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0ddd3052-b799-432a-8ede-f39204c60cd7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2459dfce-29e0-4f8d-8d94-6a8fa2486622",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acd5b927-dba0-42fe-bc3d-572d56d7941f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b5bb6284-827d-4aa1-9db0-fe90aad99f17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e5fb884-d2a9-4a82-9c15-aa75b094dbab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "49a96690-d4af-4709-af27-bed44b1165c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a8224c8-bee0-4da7-8ea0-72169d617fe8",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbbb4f67-da49-4118-92d8-b50b12d83d29",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "f6aa2a3a-ef9c-4e75-a104-d1737b181bec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28580666-c0e9-4976-9938-4ccab5287ee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e16bb9ab-c433-45b0-9ac7-cdba16530548"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8edadaa4-d549-4c24-be7e-d0e8eb55ec70",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1c1a38d9-6c15-487b-9b76-18bb857961b6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c1bf0a20-962f-4e20-9bb9-2b794446e3e5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7c2dc6fd-af92-4ac7-b648-e625fd3b7058"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6971c9c2-192e-4fb3-91ca-6fadb957ed38",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f54fb607-326b-43bf-a390-9ee319b1f99f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "86da2d5a-9f13-453d-a925-4b5ad8855f4a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ee05b872-f69a-436f-bf44-8b4e0439254e"
            }
          }
        ]
      },
      {
        "id": "b531ba3f-ac74-4c80-b6d1-774d70272c58",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4351dcb5-b000-472f-b260-4e658ced3543",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2d5f91a1-2a56-439d-baf0-cfc980b94011",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "225c386f-df7f-4f5d-8237-0be1f1762e46",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "154a6d46-228d-4def-a986-9444991b8288",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "52f7bf3c-e713-4798-93c6-24e5bf19d018",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 311.3730769230769,
      "responseMin": 7,
      "responseMax": 15124,
      "responseSd": 1104.0679375897164,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1682383036007,
      "completed": 1682383131322
    },
    "executions": [
      {
        "id": "22def4a2-0601-45bd-8119-671a5b30965c",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "94587de5-a720-4f0d-82be-77174e5fe5de",
          "httpRequestId": "065aa75a-af9b-4c86-9330-e1c52066f8e9"
        },
        "item": {
          "id": "22def4a2-0601-45bd-8119-671a5b30965c",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "2189de0d-3c58-409c-b12e-afe80e169983",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 0
        }
      },
      {
        "id": "f9ca5585-d9e9-4c0c-86ae-446d75ffd56b",
        "cursor": {
          "ref": "42762a0d-7327-4632-8a78-e62111cf310e",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "9bad7684-c738-4d32-9de3-6e346cc8ac0e"
        },
        "item": {
          "id": "f9ca5585-d9e9-4c0c-86ae-446d75ffd56b",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "1387bf00-d331-4bfe-95dd-d2f659499960",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "1c9e91fb-b3df-4453-8b59-dcb2420cd8e5",
        "cursor": {
          "ref": "2bb0a836-42ca-44e0-88ed-8762053f904f",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1975e4a9-2ea9-42dd-bf23-f9aecd7a1564"
        },
        "item": {
          "id": "1c9e91fb-b3df-4453-8b59-dcb2420cd8e5",
          "name": "did_json"
        },
        "response": {
          "id": "5242296b-71a1-4a86-b6d9-63f83f6de186",
          "status": "OK",
          "code": 200,
          "responseTime": 1181,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e448a2d9-d1f6-46a3-af0e-db34315cc048",
        "cursor": {
          "ref": "76495139-5816-41fe-9971-2e2cb948867a",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "488d5046-8332-4c7f-bc09-20ce62d2848f"
        },
        "item": {
          "id": "e448a2d9-d1f6-46a3-af0e-db34315cc048",
          "name": "did:invalid"
        },
        "response": {
          "id": "ab3646d2-4bb0-4ee0-a9bf-2e0069e6c078",
          "status": "Not Found",
          "code": 404,
          "responseTime": 818,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "e448a2d9-d1f6-46a3-af0e-db34315cc048",
        "cursor": {
          "ref": "76495139-5816-41fe-9971-2e2cb948867a",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "488d5046-8332-4c7f-bc09-20ce62d2848f"
        },
        "item": {
          "id": "e448a2d9-d1f6-46a3-af0e-db34315cc048",
          "name": "did:invalid"
        },
        "response": {
          "id": "ab3646d2-4bb0-4ee0-a9bf-2e0069e6c078",
          "status": "Not Found",
          "code": 404,
          "responseTime": 818,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "193ed49f-e121-4f9c-ad03-59b63b46bdac",
        "cursor": {
          "ref": "dcb5c012-8a65-419c-a1c7-7ac02f0ae0e7",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "6919f811-b878-42a3-a188-0645cbc3b884"
        },
        "item": {
          "id": "193ed49f-e121-4f9c-ad03-59b63b46bdac",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "e43da9e4-cff3-455a-9d14-ebe2caaf19d5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 64,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c105ccb0-d402-4aa8-9682-8de01e76b881",
        "cursor": {
          "ref": "d6f5c4a9-e443-4cf6-a72f-da0b5eef81f8",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "4f824ac8-912a-4f9d-b1ea-aa97e00b0838"
        },
        "item": {
          "id": "c105ccb0-d402-4aa8-9682-8de01e76b881",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "5b3a5a07-9527-490e-9fdc-e879be45cc6e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 65,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21cea95a-e6ea-48bf-8034-2ec0f9e10052",
        "cursor": {
          "ref": "37242de7-fb32-4248-9872-b3a964da5480",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "2d081e02-7a6b-46bc-b72a-b7181762873c"
        },
        "item": {
          "id": "21cea95a-e6ea-48bf-8034-2ec0f9e10052",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "18d44366-cae3-49cd-9a11-9a69fc63b787",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "36f88656-ec96-4a83-af15-c0afc013ae8f",
        "cursor": {
          "ref": "903d3f68-5952-459f-9fb4-176b3cbfa938",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "02c6317a-08ab-4937-89e2-ac9786d0d966"
        },
        "item": {
          "id": "36f88656-ec96-4a83-af15-c0afc013ae8f",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "470519d8-b0a4-47c4-8cbc-3eedaa44ef76",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "36f88656-ec96-4a83-af15-c0afc013ae8f",
        "cursor": {
          "ref": "903d3f68-5952-459f-9fb4-176b3cbfa938",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "02c6317a-08ab-4937-89e2-ac9786d0d966"
        },
        "item": {
          "id": "36f88656-ec96-4a83-af15-c0afc013ae8f",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "470519d8-b0a4-47c4-8cbc-3eedaa44ef76",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "dcd5cac8-56ed-4081-bc6b-f3656f1ef227",
        "cursor": {
          "ref": "0c4f5ec1-b5b0-486f-9920-3fc0acaaaa4e",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "3385e8af-4591-43d4-a7a2-ce8ee01e60b7"
        },
        "item": {
          "id": "dcd5cac8-56ed-4081-bc6b-f3656f1ef227",
          "name": "identifiers"
        },
        "response": {
          "id": "c5eda075-889b-4a21-8312-4e001a4aff37",
          "status": "OK",
          "code": 200,
          "responseTime": 175,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d56f8f7-743c-4f3e-b3a5-332d99d37411",
        "cursor": {
          "ref": "9add70ec-dbb4-4a1e-87ba-bdbc29ded24a",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4567e8e5-80ac-475f-a5b2-6bb840eaa4c6"
        },
        "item": {
          "id": "7d56f8f7-743c-4f3e-b3a5-332d99d37411",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2beeb79c-a7cb-49b4-80fd-ce44a0e1dfb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d56f8f7-743c-4f3e-b3a5-332d99d37411",
        "cursor": {
          "ref": "9add70ec-dbb4-4a1e-87ba-bdbc29ded24a",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4567e8e5-80ac-475f-a5b2-6bb840eaa4c6"
        },
        "item": {
          "id": "7d56f8f7-743c-4f3e-b3a5-332d99d37411",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2beeb79c-a7cb-49b4-80fd-ce44a0e1dfb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6658b921-ce72-48cb-9408-956dca58cdce",
        "cursor": {
          "ref": "52cf1790-5793-4e14-850a-64b37ff71b94",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b92dd584-3424-4aa4-abcb-030df4f9b369"
        },
        "item": {
          "id": "6658b921-ce72-48cb-9408-956dca58cdce",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "f83d7780-e853-4b1e-88d8-e6108f607341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3136a7b0-a263-4fdd-9c0c-888f118d0568",
        "cursor": {
          "ref": "54248f1b-19f9-4767-866b-4ce42966b7e1",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "cd75509e-d7e5-43ef-8d66-a24cb23cb2fe"
        },
        "item": {
          "id": "3136a7b0-a263-4fdd-9c0c-888f118d0568",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "b724dea7-425b-4c76-af26-de0b3679d63f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 230,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "850bd9ef-fe56-4fc8-9e5a-a4c8ca0f2893",
        "cursor": {
          "ref": "ee7d7f01-dfa1-48be-9217-56f294fb26ab",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a05b512d-3965-4745-a77f-560fa36c4aec"
        },
        "item": {
          "id": "850bd9ef-fe56-4fc8-9e5a-a4c8ca0f2893",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "41db4819-8ac2-4358-84d8-e5ea6b14eb0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fe7cbba-6924-4537-aec4-63b30c9d4ea5",
        "cursor": {
          "ref": "af7a3a58-dd8e-49bd-a397-966d085fc909",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "db29c3a9-be10-49fa-99d0-801778dc3bb2"
        },
        "item": {
          "id": "9fe7cbba-6924-4537-aec4-63b30c9d4ea5",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "455332d9-b880-45b7-9e01-ea21638d118d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0755a126-a26f-4202-b98c-85b8c196ca6a",
        "cursor": {
          "ref": "9e076237-509e-44e3-92c8-f3da8c2605b6",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "2a10c8d9-803c-4816-9e41-8ae11255141c"
        },
        "item": {
          "id": "0755a126-a26f-4202-b98c-85b8c196ca6a",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "28b19ed4-b106-4b39-a1b4-05f7e207dddc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97f7749b-b7cd-44fa-9252-a701983361ad",
        "cursor": {
          "ref": "2f2bdbc2-d816-4357-9925-d5ceff59443a",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8a97a96a-69ce-409c-a2c1-02176e506432"
        },
        "item": {
          "id": "97f7749b-b7cd-44fa-9252-a701983361ad",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "da005b78-da6f-4785-9fd0-18fb17cb5bc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "039ade2e-e4ee-4055-9106-939f0e6b0a49",
        "cursor": {
          "ref": "5875d87f-4c8c-4c1c-9e9a-85858ed6872a",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "76b2c365-1720-4873-b958-64c657366be5"
        },
        "item": {
          "id": "039ade2e-e4ee-4055-9106-939f0e6b0a49",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "f9ae059f-4109-49a6-98f3-e2722710e9cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2a3c2a4-6b4c-4c0d-b616-f15c3106e2ec",
        "cursor": {
          "ref": "c425a7e6-86a3-412b-98c0-8cbb4964cdf8",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "2539c96b-e3a2-4ed1-b359-cf5d9cd11a10"
        },
        "item": {
          "id": "a2a3c2a4-6b4c-4c0d-b616-f15c3106e2ec",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "6198c30e-0245-4b56-a15a-4210b6474714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d953c1a-1eea-411d-9000-b4d1f9b9d28a",
        "cursor": {
          "ref": "01414b98-b2d4-4cc0-b6db-aa0251189001",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "9761f563-32c5-4b22-b269-c057c6aa0a0c"
        },
        "item": {
          "id": "4d953c1a-1eea-411d-9000-b4d1f9b9d28a",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "2beaeb91-f62b-4458-9dd4-63b9ebbfc76b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd047e4d-6b1d-4060-abae-9906844225cc",
        "cursor": {
          "ref": "4358bb49-8a64-4b89-9043-a07ede8da881",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "e7619aea-1caf-4302-941c-19d23e26ca70"
        },
        "item": {
          "id": "cd047e4d-6b1d-4060-abae-9906844225cc",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "a44bca47-a407-4a81-ba5a-5180f45d3a8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd22f087-417e-4941-acd8-3a8c1d6648bb",
        "cursor": {
          "ref": "949f501b-259e-4ec1-b860-9252492a74aa",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f73addc3-4dfb-47ee-b838-18c704cb77af"
        },
        "item": {
          "id": "bd22f087-417e-4941-acd8-3a8c1d6648bb",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "7223b571-b23e-40dc-a5a5-20c71404d4ce",
          "status": "Created",
          "code": 201,
          "responseTime": 2003,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "551ab8b7-cdf6-4404-8fc6-30bbefd948f1",
        "cursor": {
          "ref": "beff6025-4a06-4c23-90de-6340de60aa39",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "baf63f0f-84e5-4762-8c14-a87fe8904e30"
        },
        "item": {
          "id": "551ab8b7-cdf6-4404-8fc6-30bbefd948f1",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "1a4525f3-db23-414e-9204-db390b9fe48b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd1aa9f3-8fab-4ca8-b662-0185cbf4ad11",
        "cursor": {
          "ref": "53c0a87d-36e5-438d-a6c9-8cbbe654308f",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5ba38b6e-8020-4053-a127-72c6e7ff2701"
        },
        "item": {
          "id": "fd1aa9f3-8fab-4ca8-b662-0185cbf4ad11",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "39437527-7fa0-43df-b6b0-27c770a7148e",
          "status": "Created",
          "code": 201,
          "responseTime": 15124,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "34394563-4481-4413-986d-12aa741d1c1f",
        "cursor": {
          "ref": "c4a31316-3874-4c0c-a409-54bf1c63ec56",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f728292d-0ebc-408c-9632-59a865b2bdd9"
        },
        "item": {
          "id": "34394563-4481-4413-986d-12aa741d1c1f",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "7f552752-528f-4c38-ab03-ca18d6177464",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c8b93d4-917e-4346-a231-195ec1045ded",
        "cursor": {
          "ref": "5f644084-7884-4e7e-8fac-00360b98796a",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "339593d3-cb4f-473c-bfb4-619d1db2bb17"
        },
        "item": {
          "id": "0c8b93d4-917e-4346-a231-195ec1045ded",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f5dc8f56-bfb4-40f2-a887-575b7ae8e337",
          "status": "Created",
          "code": 201,
          "responseTime": 2334,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "3c60b184-a135-4b10-9eb5-313f5bb7fa22",
        "cursor": {
          "ref": "49a1f9c9-0b3e-4a98-b5df-834bad7a4784",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "5a1dacce-ba89-41ae-8287-0d3adaac1181"
        },
        "item": {
          "id": "3c60b184-a135-4b10-9eb5-313f5bb7fa22",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "9341a457-6749-411d-80e6-986325748973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2abd91ea-f9ea-4fcc-9231-92cad2fc556e",
        "cursor": {
          "ref": "d02b62a4-ce10-4ba9-a960-c5170009bb2c",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "7380abf8-2b29-4778-9bc2-3b37fa1461ff"
        },
        "item": {
          "id": "2abd91ea-f9ea-4fcc-9231-92cad2fc556e",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "4c574a91-7774-4218-af87-2ac87c4ac944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e2852c3-1d12-4357-b067-baff9e065976",
        "cursor": {
          "ref": "dcdeea9d-90ac-4aff-a61d-feeb88dc2995",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a5669442-9734-4365-9587-c8575435d984"
        },
        "item": {
          "id": "6e2852c3-1d12-4357-b067-baff9e065976",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "00c4792f-13da-4d90-8607-1541572475fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b913c57c-3d63-4499-8cd0-623e577c63c1",
        "cursor": {
          "ref": "b56d9f27-2342-405b-a6ad-02166214b381",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "fe1cf801-55a2-4264-833e-306b07c2c771"
        },
        "item": {
          "id": "b913c57c-3d63-4499-8cd0-623e577c63c1",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "17fe0407-7ac7-42a1-ac35-81da6c25e971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9850b70e-103b-47b6-af76-088e785f2353",
        "cursor": {
          "ref": "6ffb3b12-02b0-40ab-930f-647b7923d391",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "50202cf4-e15e-4e4c-8767-d74db8414d68"
        },
        "item": {
          "id": "9850b70e-103b-47b6-af76-088e785f2353",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "82f30e58-0915-49f3-a769-56c90a969cbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7cfbafb-faaf-48b2-b3e3-59b7beb48d66",
        "cursor": {
          "ref": "8385b0b1-53be-4f15-9bfc-33a09698684b",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "8b3fd6f8-f884-4dd4-9573-9a1f532d0a5a"
        },
        "item": {
          "id": "e7cfbafb-faaf-48b2-b3e3-59b7beb48d66",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "348dd2f3-56c5-4d95-b96c-9bb6b32cc3fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55bafb0a-1fa8-4595-b6dc-9fac3e8251cf",
        "cursor": {
          "ref": "a8c77cd1-c508-4a09-8ff3-0de064f358f9",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "69b877e6-d705-40be-b940-aa18ca84a8b3"
        },
        "item": {
          "id": "55bafb0a-1fa8-4595-b6dc-9fac3e8251cf",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "abbfbd59-af74-47aa-8327-137ee676dff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f6fd0b6-fcac-43c7-8b4f-fc1a205283ae",
        "cursor": {
          "ref": "a562fe4d-fb39-4c55-b08f-98035b9b69ea",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "61c5bce4-cb30-4dab-8b2c-e2fe3881a214"
        },
        "item": {
          "id": "0f6fd0b6-fcac-43c7-8b4f-fc1a205283ae",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "2addbf82-928d-4093-8e34-4f89acac7955",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f594a80-189d-4bc0-a751-b7e9567e2924",
        "cursor": {
          "ref": "6d4b3924-819a-4450-841e-3f8ac6a33b8c",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "7e00d61b-3c59-43d6-bcee-22d5cf813bc9"
        },
        "item": {
          "id": "4f594a80-189d-4bc0-a751-b7e9567e2924",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "1788eb08-9d55-48f2-9882-36c758c1be13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "318ffa85-36ce-48a0-b9fb-9bbdcbb0610b",
        "cursor": {
          "ref": "2f2cbf80-3dcb-4551-8a62-e0b6ad771601",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "09044301-d372-4212-be65-139ee2c11f41"
        },
        "item": {
          "id": "318ffa85-36ce-48a0-b9fb-9bbdcbb0610b",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "509298e6-3f1f-4998-ad82-2343d0b984fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d628982-465f-489c-8e83-6dccc672a2b9",
        "cursor": {
          "ref": "ab4b0204-69a0-4c28-896b-9af6a1a5dafe",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "e71d631b-cadb-479c-b1b5-012d336eccf9"
        },
        "item": {
          "id": "2d628982-465f-489c-8e83-6dccc672a2b9",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "44771d68-bac1-462f-a5f3-f2d9ba30e064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c83aff3-fb6e-49cf-b671-aa9bed54717b",
        "cursor": {
          "ref": "00de989c-2c03-4b2e-8b5d-67835be6e7ab",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "38fa3cca-8b0a-4d02-ae35-cea27704eb78"
        },
        "item": {
          "id": "6c83aff3-fb6e-49cf-b671-aa9bed54717b",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "90cb24a5-f969-4eac-907f-6bdd52650674",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d03d3b3-48ce-423e-ab5e-221b31f8d9e1",
        "cursor": {
          "ref": "f8fd5d13-f3dd-4609-8546-bd7f1b174921",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "c7d082d8-6368-443d-af9f-72ed5ca42c04"
        },
        "item": {
          "id": "7d03d3b3-48ce-423e-ab5e-221b31f8d9e1",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "a80c81a2-da83-4c44-b835-1fc3119192c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8251843-1305-4dd1-9293-795b20d0eed7",
        "cursor": {
          "ref": "f65294a7-5cd3-4bde-969c-ba9f4254b0c8",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "4e1cd8ce-c338-4511-84a1-49f15e8e4503"
        },
        "item": {
          "id": "d8251843-1305-4dd1-9293-795b20d0eed7",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "0d82b140-0108-4fa7-9ede-f9120100d0a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb7d359f-9ed1-4631-b4fc-845e622a7e36",
        "cursor": {
          "ref": "925da34e-7a3a-4cf9-a3d5-9465d562146f",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b96081d9-b50d-4712-bd7e-a8ca6f66cd97"
        },
        "item": {
          "id": "cb7d359f-9ed1-4631-b4fc-845e622a7e36",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "af6eee63-5c05-4ba6-87c9-89487034b435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3f2adf5-209d-43bd-888c-2a1fcdb54549",
        "cursor": {
          "ref": "73973243-b6c9-4551-9bf1-6ca0982382c8",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d52383e9-a855-4688-a5e5-5e837607d3ec"
        },
        "item": {
          "id": "b3f2adf5-209d-43bd-888c-2a1fcdb54549",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "3fbce8a0-b68c-4ab5-bb34-11d22929bad1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e1e4eb1-b5a0-4a53-8161-4e826e479586",
        "cursor": {
          "ref": "2ce73f17-7a59-493f-8eba-cb79e9820fe6",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "2ff0ee13-40fe-407a-b43b-63cb924eb585"
        },
        "item": {
          "id": "8e1e4eb1-b5a0-4a53-8161-4e826e479586",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "1a7a1624-8abe-44bc-b715-131ac09a4e87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab9082e9-295c-4da7-b5d5-53d7a0f19459",
        "cursor": {
          "ref": "24e953b5-4525-4787-b81b-8a8f340a8a0b",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f04b5922-d104-40de-a9f8-47fa7c5cc272"
        },
        "item": {
          "id": "ab9082e9-295c-4da7-b5d5-53d7a0f19459",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "623276a1-aaa2-42a0-b347-1a56141e4080",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f833ea9e-b8ca-490d-a6a8-91948e99d5c9",
        "cursor": {
          "ref": "22af0236-d945-4e00-879b-575c6d3b55fc",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "80e4f2c4-441b-4372-817f-9ce1244877ed"
        },
        "item": {
          "id": "f833ea9e-b8ca-490d-a6a8-91948e99d5c9",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "6166b228-79b9-4780-bdec-7b5f566447ee",
          "status": "Created",
          "code": 201,
          "responseTime": 1936,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "00b495e7-5a40-4e52-a745-c426e2de9a44",
        "cursor": {
          "ref": "b8997b21-0f27-4e44-b373-18627819acfd",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "99c3f343-efc6-464a-bfb2-ff13c3e99f0f"
        },
        "item": {
          "id": "00b495e7-5a40-4e52-a745-c426e2de9a44",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "82d1f16d-5419-4b9d-accf-03e77ab761f3",
          "status": "Created",
          "code": 201,
          "responseTime": 2480,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "8f87a46e-f852-42c1-88bb-5ffdb4eeea99",
        "cursor": {
          "ref": "20dcf04b-e9de-4daa-a846-a05488f62a37",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "ea82c0d8-e150-4422-b364-45f31bf5c228"
        },
        "item": {
          "id": "8f87a46e-f852-42c1-88bb-5ffdb4eeea99",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "f3db135e-5431-4bb6-a0f4-fcf3c16c1bc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "979a06d5-9eee-4040-9a69-c278a097e640",
        "cursor": {
          "ref": "dbd5f0d0-e4a6-4a6d-8dbe-cbd85dc21b47",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8c4502f8-9f2a-4bed-924f-b40e15776a53"
        },
        "item": {
          "id": "979a06d5-9eee-4040-9a69-c278a097e640",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "c8b4585f-78a7-47fb-97a8-de88001d8bff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da281562-ed53-429b-b92a-d6fea8cacd46",
        "cursor": {
          "ref": "c1ad2957-702a-4653-97e5-7ae1322dbd1b",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "ed11dea8-ad09-403a-8e50-2bb02a88f1dd"
        },
        "item": {
          "id": "da281562-ed53-429b-b92a-d6fea8cacd46",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "8622da1a-b08a-4db7-8071-073bf11d616f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0afc8862-b0ae-4618-a41a-b146e0988549",
        "cursor": {
          "ref": "16d1dfae-52a8-44e8-80ff-3b11429ed6f6",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c0902bf7-166c-4174-938f-8f5096aca0b9"
        },
        "item": {
          "id": "0afc8862-b0ae-4618-a41a-b146e0988549",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "6346cbd3-e035-4212-ac3d-014f853a7578",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c2a5969-8bb2-4e5c-94cc-0e45e5952e45",
        "cursor": {
          "ref": "ba980293-1e1a-4947-acea-8c4a685459dd",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "667bf5eb-ab7a-4548-a9ac-e7c3d6bb196d"
        },
        "item": {
          "id": "6c2a5969-8bb2-4e5c-94cc-0e45e5952e45",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a7f2f554-25d5-4668-8290-077801d7212f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "949ffeb1-189e-4b7c-9b36-c67090b19808",
        "cursor": {
          "ref": "65157560-9b53-4e9f-adf4-a5afae276166",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "62464f73-127d-45e3-a0f4-02063459cafa"
        },
        "item": {
          "id": "949ffeb1-189e-4b7c-9b36-c67090b19808",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "59559bfd-6143-48e4-88bf-30a8b3cfdebe",
          "status": "Created",
          "code": 201,
          "responseTime": 2344,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "67b9bd9b-0ab6-4eb4-9a7b-23de1ff55192",
        "cursor": {
          "ref": "c37c1565-bf98-4d75-b573-5954555df537",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f16a9c08-3d92-46ba-8453-67ab1ac9b61f"
        },
        "item": {
          "id": "67b9bd9b-0ab6-4eb4-9a7b-23de1ff55192",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "2d158d02-8414-443e-8334-2c0a6ae9ed1c",
          "status": "Created",
          "code": 201,
          "responseTime": 2971,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "2e9c373e-6b5c-4074-ae3f-9e2c1ad22c57",
        "cursor": {
          "ref": "cc5c237c-e800-4cce-838b-3b0d6f849bf8",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "a90492a4-02b3-440e-b2cb-f41a4e5dd1f8"
        },
        "item": {
          "id": "2e9c373e-6b5c-4074-ae3f-9e2c1ad22c57",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "4e288f0b-6e0c-453c-a96b-2008ac037b05",
          "status": "Created",
          "code": 201,
          "responseTime": 2308,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "8e6cc7a5-01cd-4cb0-9a77-287a64abaddd",
        "cursor": {
          "ref": "1697b006-079f-437e-ad0a-2099f107f598",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "f4e35e58-2284-4d6c-be46-ee0fe2b27e82"
        },
        "item": {
          "id": "8e6cc7a5-01cd-4cb0-9a77-287a64abaddd",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "adc0204a-aa60-4053-a84f-05f9ae3c86ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca354d00-9b40-48e2-87cb-99e71c83ce82",
        "cursor": {
          "ref": "12bfdfdc-fc18-4bbb-b71a-f164fbe0b5ea",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "acbd2ded-e40e-4157-94a7-2afca6b4ffa4"
        },
        "item": {
          "id": "ca354d00-9b40-48e2-87cb-99e71c83ce82",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "75b24ad5-1327-4675-a9dd-d5aa87ad05cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 149,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "557783ae-8b2f-4edf-a904-c3d201c10414",
        "cursor": {
          "ref": "6f14735c-a662-4776-b648-ca569049ffe4",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "a19e5752-3dad-42c3-8251-cdee3b578e7b"
        },
        "item": {
          "id": "557783ae-8b2f-4edf-a904-c3d201c10414",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "4adc9b9c-f605-484a-a51b-2021d8c1b83f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97cc3739-4cc2-41ae-aa64-50a37d653d26",
        "cursor": {
          "ref": "1cc8400d-d2c2-4c3a-be10-91429c23a1d2",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "71086d54-9fe1-46f5-9bf0-f43ba4d65d9c"
        },
        "item": {
          "id": "97cc3739-4cc2-41ae-aa64-50a37d653d26",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "a5fdd269-d6f5-4223-b664-64b9f68fe2da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dc456ae-0a9e-40d3-a91e-412dfd4a3a3f",
        "cursor": {
          "ref": "b9dbaca5-bcb3-4093-a027-aaf8247d9f14",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "360200e1-9ebb-46c9-931e-15b8b0abc800"
        },
        "item": {
          "id": "0dc456ae-0a9e-40d3-a91e-412dfd4a3a3f",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "484e7ce8-0813-4f09-84c1-0ba13b4c0b72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "163eb9e4-ed9e-49df-b110-ea1e1bd60b27",
        "cursor": {
          "ref": "6bff87d7-6ba5-4e65-8e49-ff03cb1fe557",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "7a6a3704-d8a4-4291-ae8c-4f0ee4910914"
        },
        "item": {
          "id": "163eb9e4-ed9e-49df-b110-ea1e1bd60b27",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "d8d1468e-2439-458e-a083-5eac16931efa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 139,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75b43a85-5d17-4e1d-8045-bd52d459e17d",
        "cursor": {
          "ref": "4965fdfe-0874-49e3-9da9-cc57304559d2",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "10d8b174-c80c-44ec-a0a3-6465d9ff1ed5"
        },
        "item": {
          "id": "75b43a85-5d17-4e1d-8045-bd52d459e17d",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "68c2f657-9bb6-4ddf-8a5f-a9f3fe72ef5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48f1e832-7fc8-45f4-9e40-aa411635c5aa",
        "cursor": {
          "ref": "7d08c50b-1952-4676-b69d-03fa77f3d169",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "1224d1c6-0038-4675-b678-584f7872a4ea"
        },
        "item": {
          "id": "48f1e832-7fc8-45f4-9e40-aa411635c5aa",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "f2dba506-7902-4630-a380-9b789bec6841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a2301fc-d6c3-4cf4-9552-370197e23372",
        "cursor": {
          "ref": "e9740132-0c7f-49dc-a140-69f1fbfa9b56",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "686a5756-49a8-45a3-8f96-93b20445d4fe"
        },
        "item": {
          "id": "8a2301fc-d6c3-4cf4-9552-370197e23372",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "b1c68ca0-5eb9-45fb-8f65-0d66ff3ee4e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce707919-0104-4acc-8003-4d92691cf146",
        "cursor": {
          "ref": "c6e4ccc8-9b35-4331-9668-43a6e44ce206",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e21f8790-3cef-40e1-bc10-32c20f84ffe9"
        },
        "item": {
          "id": "ce707919-0104-4acc-8003-4d92691cf146",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "56da9a59-66bd-4208-b08e-9dc660208218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e66c999a-7652-4f73-897e-5aafa5effc42",
        "cursor": {
          "ref": "953c13d8-1c51-48d0-b48f-a5b9bac37b78",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "30f53c9b-adf6-45b1-9728-8c7904b0a3a1"
        },
        "item": {
          "id": "e66c999a-7652-4f73-897e-5aafa5effc42",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "58789bc2-df69-4f96-9b34-aee161f4bebb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34896b5e-c23b-4657-bcaa-bc071642a2ea",
        "cursor": {
          "ref": "9380115d-4c45-42d3-a79c-2cf9938fb44d",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "ee8b8040-8ae8-4cb6-bf92-dc640a74527c"
        },
        "item": {
          "id": "34896b5e-c23b-4657-bcaa-bc071642a2ea",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "cc737faf-0265-46e4-be34-5c868041a3e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f79c4189-757d-4534-ae71-817f4db347a5",
        "cursor": {
          "ref": "d57fa996-485b-439a-b14c-968351a36196",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "bb1525b9-ced3-4a0d-88c1-0d4549c341f7"
        },
        "item": {
          "id": "f79c4189-757d-4534-ae71-817f4db347a5",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f85bf7b4-b8f6-40fb-9550-a0dd0e906b22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "746204d5-97be-4c2b-8549-c510e48939e4",
        "cursor": {
          "ref": "47d073a6-b0e9-45cd-9b9a-9c9aa849e332",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "ef6cafd3-952e-4a4f-a029-38abb31762da"
        },
        "item": {
          "id": "746204d5-97be-4c2b-8549-c510e48939e4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "1b164e50-0b39-4f6e-bca5-d10e9e33fb73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec20edc2-2637-4748-9c41-3d2999cd74d9",
        "cursor": {
          "ref": "4da757c3-86fe-4a21-8950-5522353d3a8f",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "4061b82a-061f-4c6c-932e-3118ff751eaa"
        },
        "item": {
          "id": "ec20edc2-2637-4748-9c41-3d2999cd74d9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "26d5a7b5-b7f8-45e5-85d7-de8286125c58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df80a372-8264-4628-aaf7-155510afd468",
        "cursor": {
          "ref": "137f8b16-e559-4175-9075-c37b07b791d7",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "432d92d0-2d67-462a-93c3-07d2ebf961e7"
        },
        "item": {
          "id": "df80a372-8264-4628-aaf7-155510afd468",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "f328d8f8-41e3-448e-a2b1-15b3762700dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c96134b-9e0c-4271-945f-7c8bf3614c9a",
        "cursor": {
          "ref": "3f512524-f958-42a4-9e4a-ffe047fc3ca5",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "0d8c4ac2-d4e3-4003-93d0-dd153a1adfae"
        },
        "item": {
          "id": "3c96134b-9e0c-4271-945f-7c8bf3614c9a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "1722448f-d660-406c-9c05-e25821d2ffdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a7eeca0-3ce1-4d27-bd74-fb3008d18894",
        "cursor": {
          "ref": "3a6e2155-5642-48f1-81f9-f48c7d4910d0",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "0bb44c20-3de5-4a02-939b-fe6863508549"
        },
        "item": {
          "id": "4a7eeca0-3ce1-4d27-bd74-fb3008d18894",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "96901c5f-960e-45d8-aa67-9a82b83f2037",
          "status": "Created",
          "code": 201,
          "responseTime": 2631,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "dc0708be-dfcc-414c-8fc0-87f7c35f9af7",
        "cursor": {
          "ref": "9913110f-9db6-42ad-95ce-6a0d45a0ce6f",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "9236144b-7285-44c2-afba-c039e697e01c"
        },
        "item": {
          "id": "dc0708be-dfcc-414c-8fc0-87f7c35f9af7",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "7b94844d-5b11-4310-ab7a-221bcc9c1f8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca2c2c0f-40e4-427a-84ff-f8429df7a6ec",
        "cursor": {
          "ref": "5bde1f65-5a24-41bb-9bd9-86f23a923d32",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "38d27e36-14fb-44a3-8ed8-dd95fb64d33e"
        },
        "item": {
          "id": "ca2c2c0f-40e4-427a-84ff-f8429df7a6ec",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "8483097a-7da1-4ff4-b46a-dfc458bed3a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d9cffdb-e6b4-49f2-84fa-f2d510f3b438",
        "cursor": {
          "ref": "7cb8327d-2452-4ca6-86af-bd4e0ff24ac2",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "bfcbc39b-58a2-4fe3-9139-9578f794ec0d"
        },
        "item": {
          "id": "3d9cffdb-e6b4-49f2-84fa-f2d510f3b438",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "596bc3cd-7470-42db-af3f-cbfb78407ea4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d97c2c44-6e6b-48c3-997f-032afaa8694d",
        "cursor": {
          "ref": "0d5c1d29-15de-4555-95ba-9530c8013d71",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "9fbe11cc-4a2f-44f0-a523-d2e440256f67"
        },
        "item": {
          "id": "d97c2c44-6e6b-48c3-997f-032afaa8694d",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "f88dc48e-d730-4a9b-b6bc-283b17b157e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b631e7fc-d5eb-45de-bfd8-823a737a14ac",
        "cursor": {
          "ref": "958874d3-d2c4-4bea-ad69-f9ee91e27ff2",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "27b8ccee-e2af-4a2e-a4cf-9db7429a4d56"
        },
        "item": {
          "id": "b631e7fc-d5eb-45de-bfd8-823a737a14ac",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "bc06bdcc-dd81-4554-9056-5d05b4a7b4d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd276ecf-31cf-450b-8fe6-720a10981467",
        "cursor": {
          "ref": "0657a80b-c4b2-492c-ae9b-9da34574b02b",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "a121ee52-103e-415a-a896-5829e23f8cbb"
        },
        "item": {
          "id": "bd276ecf-31cf-450b-8fe6-720a10981467",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "e437a494-4676-433e-ba52-6ba9a081e22e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef4e16d1-16b5-4ccb-9cc2-f3b09f1567ca",
        "cursor": {
          "ref": "f7b8d518-4960-474c-8907-792de433123d",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "298c84dc-7577-4a30-9cca-187f8ff970ad"
        },
        "item": {
          "id": "ef4e16d1-16b5-4ccb-9cc2-f3b09f1567ca",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "9b3f91b8-bc47-4ff6-8247-fb667a089d76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bccbd819-1e1b-4893-88e3-9f0e4fab607c",
        "cursor": {
          "ref": "9ed56966-75a7-49fe-ac99-289855173b66",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "6f91b43b-eade-47c3-9625-cb5d6f6303f6"
        },
        "item": {
          "id": "bccbd819-1e1b-4893-88e3-9f0e4fab607c",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "28f6066c-f2e3-4a37-ad1e-cbddfb2c6888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b70592d1-1898-4e8e-a3ce-1021c249a5f8",
        "cursor": {
          "ref": "16a025d4-5f50-4d93-913e-48066ccd1d30",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a6126c14-88f8-4720-8b0f-c3fefa8728db"
        },
        "item": {
          "id": "b70592d1-1898-4e8e-a3ce-1021c249a5f8",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "669e0f64-3324-4f9f-9d9c-9f49d940cccd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a34105d-550e-4b53-9aea-db65d95594c4",
        "cursor": {
          "ref": "6dccac51-5093-41a3-a17e-ea1188f5bfa9",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "535966e8-672d-4ccd-9b1b-a5401f7c8060"
        },
        "item": {
          "id": "5a34105d-550e-4b53-9aea-db65d95594c4",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "fd3893d0-30dc-41f3-ba87-20fd414dad17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b1cb1c4-d90a-460f-abd0-0ad91c81a4a8",
        "cursor": {
          "ref": "b3b7e811-bcaf-4751-976a-1a82cb6fe080",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "4013fa33-5ec9-4b67-8d93-e674b44fb0e5"
        },
        "item": {
          "id": "3b1cb1c4-d90a-460f-abd0-0ad91c81a4a8",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "ced64a45-c47e-4f7c-9820-2524c88ffe0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "337f5927-659a-4d16-951c-29d0d37c255d",
        "cursor": {
          "ref": "24f2858e-1de3-42bf-a772-166dcae93cc3",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "8a465274-28fc-4192-bbdb-fed599c75d61"
        },
        "item": {
          "id": "337f5927-659a-4d16-951c-29d0d37c255d",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "bb629e8e-14ba-43a8-954a-e3b55a1b6b3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9913e97c-13dd-40fe-9f9d-b5d7c8b27e8e",
        "cursor": {
          "ref": "33200eb4-9e6a-486f-80fd-a1e65b99ad03",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "7c1b5704-18cd-48b9-9b49-d7dfb2c47a9d"
        },
        "item": {
          "id": "9913e97c-13dd-40fe-9f9d-b5d7c8b27e8e",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "bb569f44-626f-4432-8f21-6750e25c2c94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a820b05c-8fa1-40fd-9541-fa8ba765ef6c",
        "cursor": {
          "ref": "00469163-172f-4c6a-b7c8-3151ea8ceb59",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "d312e195-73c1-47e2-9b8a-2f404f1a690e"
        },
        "item": {
          "id": "a820b05c-8fa1-40fd-9541-fa8ba765ef6c",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "64bff4e9-2ea1-45eb-8850-60c6d5515286",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "092626ed-d363-4d0f-9b12-1f9ef4486e57",
        "cursor": {
          "ref": "c208b5d4-23ab-4d90-958f-346b6380c862",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "5f11df6a-5eb1-4d3b-b228-d021def68cfc"
        },
        "item": {
          "id": "092626ed-d363-4d0f-9b12-1f9ef4486e57",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "169f1f7a-5f82-47df-ae3c-854ec174ec22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6044c915-d457-4424-b7e6-5c41a845c1c2",
        "cursor": {
          "ref": "2d07b4fa-365f-4bdd-86ae-3ca8fc47c723",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "0df18b5b-850c-49ad-a4b6-a2bc87595567"
        },
        "item": {
          "id": "6044c915-d457-4424-b7e6-5c41a845c1c2",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "5834ebf9-a9bb-48c9-a905-4dc0131ed3bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16a60a7d-5996-4de7-b1a0-643d1a3240dd",
        "cursor": {
          "ref": "c902dcb9-0c8e-42bb-9a1f-f7cfc051e8dc",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "26793419-3fe0-428f-83e7-4cf58fc9ee05"
        },
        "item": {
          "id": "16a60a7d-5996-4de7-b1a0-643d1a3240dd",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "e095b1c8-46a7-41f7-af7c-d647ef5502d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa497b8d-4d5a-47ed-ad8f-17222e016cfa",
        "cursor": {
          "ref": "4f113d00-ade1-446b-bda8-1c6723fea673",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "3e32c609-615f-4979-aefe-a40eed3eda6b"
        },
        "item": {
          "id": "aa497b8d-4d5a-47ed-ad8f-17222e016cfa",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "e5f380fb-bb53-4708-9862-6110e017d93e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "021d34f2-a845-4f6b-95c6-d10d9f1eb84c",
        "cursor": {
          "ref": "15ecccf9-5d36-4d0e-8e4d-fa505266673d",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "5becdf97-3f3b-4367-8748-f351a2032711"
        },
        "item": {
          "id": "021d34f2-a845-4f6b-95c6-d10d9f1eb84c",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "755e2314-a8ca-4cd1-9a80-8af9751e82b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ee46a8b-394e-44dc-936d-2a21e7e5bd73",
        "cursor": {
          "ref": "b4ebaf32-7917-4a20-a9e7-615f6eda24df",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "f05af60c-912c-4335-8ba8-775d14c90147"
        },
        "item": {
          "id": "0ee46a8b-394e-44dc-936d-2a21e7e5bd73",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "5e1e4caa-6c08-46c5-82e0-bdd5ccf81042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "976e97d0-5bad-458a-86c7-084dbef3b467",
        "cursor": {
          "ref": "3a0f9c0c-3c58-4e6b-99bd-a5cf1b41f08d",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "d79c7eee-2c8e-4561-99b8-160b24442c9d"
        },
        "item": {
          "id": "976e97d0-5bad-458a-86c7-084dbef3b467",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "05a6d895-0607-4cf0-87d2-37f192d402b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72a0f066-9ddd-4541-896d-e691c004ccf3",
        "cursor": {
          "ref": "e6ad50ec-3378-4a0c-aaa4-5c1a0c564d3a",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "95adae6c-7dd0-4b21-817a-c398d1496b95"
        },
        "item": {
          "id": "72a0f066-9ddd-4541-896d-e691c004ccf3",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "98caf3da-6e95-4827-86d7-3444f185ab56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07e8d5b6-635c-4fce-b0f8-d2d7ee8b183a",
        "cursor": {
          "ref": "b2421406-a65f-45cd-af09-acdf4352c82b",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "7bd9439f-d927-44ca-a996-2d3743775a30"
        },
        "item": {
          "id": "07e8d5b6-635c-4fce-b0f8-d2d7ee8b183a",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "3204fdf6-05f7-4961-9799-bd9c8b5d91d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "611f184b-28f6-4626-bb25-8a98c0b6498d",
        "cursor": {
          "ref": "41767185-562e-465a-962d-0e4fe56c94ed",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "dfb17ea3-7605-4957-9041-56dccb7cb99c"
        },
        "item": {
          "id": "611f184b-28f6-4626-bb25-8a98c0b6498d",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a522a9e0-4b87-4361-a2fd-672630077695",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efe5ec02-153d-4972-99c6-d265ef7afbd8",
        "cursor": {
          "ref": "b1904fdd-77f3-45ce-a34e-23bd07a47dd0",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "78af534c-ee44-4a27-915f-61144a7a7ca6"
        },
        "item": {
          "id": "efe5ec02-153d-4972-99c6-d265ef7afbd8",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "ab120b9a-68cc-4da1-bd71-65dfcd330945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b2248f7-17d0-4537-8a74-0de43afa4861",
        "cursor": {
          "ref": "7df0feba-2b01-4bd3-a80d-2a811e48e948",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "82899451-80d9-4c37-9c7f-791957fa6c11"
        },
        "item": {
          "id": "7b2248f7-17d0-4537-8a74-0de43afa4861",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "711d519d-389b-4945-b2a8-415f6f8e5d71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd6affb9-c830-4489-b413-cad072f073a2",
        "cursor": {
          "ref": "66b7b0b0-1daa-4aac-8317-90f52e870253",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "13e783ea-7be0-4759-bf89-96408484126d"
        },
        "item": {
          "id": "bd6affb9-c830-4489-b413-cad072f073a2",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "9c23dcf1-605a-4a8c-b5e7-1514291a0613",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95d0c925-ec97-4994-81cc-45c48f19f9ad",
        "cursor": {
          "ref": "ce5e525f-358f-4740-b49d-17fb6df2b34a",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "1646015d-7e54-4077-9141-7de6448e6c41"
        },
        "item": {
          "id": "95d0c925-ec97-4994-81cc-45c48f19f9ad",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "bfcae2db-be33-419a-a316-98c60e9c45a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59137c79-f651-46a9-8fc6-5f9f87165a30",
        "cursor": {
          "ref": "6b68a1ec-0ee6-4c8e-b84f-cc326ef8212a",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "2d9a8ea2-7c18-469b-9e8f-b1588d13b6b5"
        },
        "item": {
          "id": "59137c79-f651-46a9-8fc6-5f9f87165a30",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "b8533757-5b12-4d25-aa8b-b844dd9b1878",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be80ed04-b595-4b89-8a0e-e9447c4dc393",
        "cursor": {
          "ref": "cfbde199-0b9a-462b-95fc-b32702cad5a9",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "92f279f5-c427-48d2-a08a-c806d2d45e1f"
        },
        "item": {
          "id": "be80ed04-b595-4b89-8a0e-e9447c4dc393",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "29f9ec90-e73f-48f2-a758-6f202cf33a9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "390955ac-7d36-4f7b-a62c-e9fc954e0ae3",
        "cursor": {
          "ref": "28063f8e-a84a-452a-b2b6-61610537f0fc",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "4f9ffea2-dea9-4c9a-85a3-c4e1c460839d"
        },
        "item": {
          "id": "390955ac-7d36-4f7b-a62c-e9fc954e0ae3",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "c71f06d7-59d2-416c-bd4a-c798426fa685",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "f0052551-bece-4135-b0e4-46b4a71770b9",
        "cursor": {
          "ref": "fcced965-49ed-47b6-8bac-51837af9bdd5",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "88a02aa3-9dac-48e9-9b12-fa0adf8f6c3f"
        },
        "item": {
          "id": "f0052551-bece-4135-b0e4-46b4a71770b9",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "61fbdb97-e020-46ea-a547-bb811dd0514e",
          "status": "Created",
          "code": 201,
          "responseTime": 1873,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "7bdc2e06-6e66-4d2d-953e-9fa7693fce0c",
        "cursor": {
          "ref": "c468c300-c314-4767-89b8-4bbf0f1802d0",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "91f36720-f7a6-4a70-b3cc-df45e017dfad"
        },
        "item": {
          "id": "7bdc2e06-6e66-4d2d-953e-9fa7693fce0c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "a4c9343a-f92d-46ac-baea-3f1c106aefa0",
          "status": "Created",
          "code": 201,
          "responseTime": 2066,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff5be02e-f095-47d0-95a6-053b5ff2991d",
        "cursor": {
          "ref": "0da7eeb5-dd47-4ef6-a6f3-7327ffaca342",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "8792a6fc-7372-44b6-bfc8-0ac11893452e"
        },
        "item": {
          "id": "ff5be02e-f095-47d0-95a6-053b5ff2991d",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "4aa7f447-f7a3-4577-9d79-a423512fea58",
          "status": "Created",
          "code": 201,
          "responseTime": 2312,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "32d531a8-463a-474c-8c47-9d7486d5e31d",
        "cursor": {
          "ref": "c61d431d-7ca5-4c74-9d67-35f99fc0bdb1",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "90f0c03c-9d0a-4208-b676-59681137a947"
        },
        "item": {
          "id": "32d531a8-463a-474c-8c47-9d7486d5e31d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "f7d9442e-99c9-401c-95f5-d216c91f9727",
          "status": "Created",
          "code": 201,
          "responseTime": 2619,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd4b4a4a-f08f-46e4-a2c2-184aeb3f21e0",
        "cursor": {
          "ref": "12ebc0ac-ead9-492a-947c-9e388a63ec17",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "8c52779f-b93d-4e95-8867-6bd218f4dcae"
        },
        "item": {
          "id": "dd4b4a4a-f08f-46e4-a2c2-184aeb3f21e0",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "82833805-006e-4efa-8aff-6bbafc3daa5e",
          "status": "Created",
          "code": 201,
          "responseTime": 2055,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fa6ad63-5013-49b8-addf-c49f67969ee9",
        "cursor": {
          "ref": "233599d5-64c1-4246-b5e2-17d7be123917",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "4e0ff574-770f-4318-a402-5b31bb66260c"
        },
        "item": {
          "id": "4fa6ad63-5013-49b8-addf-c49f67969ee9",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "3b8337dc-d488-4c7d-9fdb-7ab74da5d198",
          "status": "Created",
          "code": 201,
          "responseTime": 2281,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-04-25T00:38:23Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-04-25T00:38:23Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "58fdf74f-7f81-4ece-90e8-4cbb5415881e",
        "cursor": {
          "ref": "160fc4ec-bf8e-463b-b9ca-4e119665a13b",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "f5f6691a-55f1-4f28-a1ab-31156f405ea1"
        },
        "item": {
          "id": "58fdf74f-7f81-4ece-90e8-4cbb5415881e",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "84dd6c30-43dc-4bca-8dc1-9d266ad78d49",
          "status": "Created",
          "code": 201,
          "responseTime": 2095,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8be541d-f810-4e9c-9549-8abc8ff9fb60",
        "cursor": {
          "ref": "70175a10-65d9-43f6-8ee9-e1b0a9ac68ff",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "7168913a-ec7f-4a6c-a2bf-a7f8127127a3"
        },
        "item": {
          "id": "f8be541d-f810-4e9c-9549-8abc8ff9fb60",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1046b149-f122-4360-86f6-82e44872d030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8be541d-f810-4e9c-9549-8abc8ff9fb60",
        "cursor": {
          "ref": "70175a10-65d9-43f6-8ee9-e1b0a9ac68ff",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "7168913a-ec7f-4a6c-a2bf-a7f8127127a3"
        },
        "item": {
          "id": "f8be541d-f810-4e9c-9549-8abc8ff9fb60",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1046b149-f122-4360-86f6-82e44872d030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e010332-2fbc-4dd4-bfff-a0562794a3a8",
        "cursor": {
          "ref": "62dbffc3-859e-460b-9c3e-f0fcaa5d11ff",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "0b76d818-4302-4d16-80cf-794f2b8d8288"
        },
        "item": {
          "id": "3e010332-2fbc-4dd4-bfff-a0562794a3a8",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "00a193c5-80c5-40b0-8ba1-1a5d15332c23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bd07adf-c6fe-46e7-960b-a66ca7e48e36",
        "cursor": {
          "ref": "cd4936d9-5ef6-4de0-a527-4a4e47c469f1",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "fd4d8e54-1230-458b-a07c-474590f96fc0"
        },
        "item": {
          "id": "8bd07adf-c6fe-46e7-960b-a66ca7e48e36",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e4f64681-dcd6-49c7-8ffd-811f1d3a3695",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f7acfef-6c23-4d09-816a-37e7f96a3c52",
        "cursor": {
          "ref": "ac668997-7844-4559-90c4-9407069c4acb",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "a23b725f-2397-4913-b56b-3e210eca6ac1"
        },
        "item": {
          "id": "1f7acfef-6c23-4d09-816a-37e7f96a3c52",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "dc918d84-bce3-4d46-b7a7-a0656c9ea352",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfb5b0c2-2780-42c8-9d95-22f9739e0c04",
        "cursor": {
          "ref": "627af45a-7f30-4542-9af4-fb0bfc5f674d",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "ac33b616-2953-43dc-9f8b-d220669ba0aa"
        },
        "item": {
          "id": "dfb5b0c2-2780-42c8-9d95-22f9739e0c04",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5fa1dff1-011c-4588-b3f9-5641688767c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ced847a-9642-4663-96aa-51c817866841",
        "cursor": {
          "ref": "ebc433c8-466d-45ea-a394-8b16d2c088c7",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "2083857d-ac59-4cf0-b1ed-dbc1dd73a296"
        },
        "item": {
          "id": "4ced847a-9642-4663-96aa-51c817866841",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "773cdc7d-ae7e-4fea-ab19-9be52ed49197",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a18044b-5329-46ec-998b-cc7ff8d91c44",
        "cursor": {
          "ref": "42b23900-b5e8-450c-b2f1-35d202215879",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "1b4163bd-1a75-4978-ada1-eabf1ba2903c"
        },
        "item": {
          "id": "3a18044b-5329-46ec-998b-cc7ff8d91c44",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1b0ac9b2-fee2-4bbb-bf47-bc9da0785495",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8c966f6-e2dd-42c0-b4a7-17a9a8400ee4",
        "cursor": {
          "ref": "9972d3fc-d005-4737-8e3f-0e31da59f275",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "89c216d5-c53f-4c4b-b545-5eeee3cb4885"
        },
        "item": {
          "id": "a8c966f6-e2dd-42c0-b4a7-17a9a8400ee4",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "7c7f3f15-2731-4ea6-a465-7b95d2beb59e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 317,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6a10ce7-e9d0-4188-b0de-701660ed5d85",
        "cursor": {
          "ref": "8157ec6c-104a-4a0d-8610-edcbc173d945",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "b00e0a4a-8767-40ce-a091-0f4e27465e5f"
        },
        "item": {
          "id": "e6a10ce7-e9d0-4188-b0de-701660ed5d85",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "df9d69a4-7725-4438-8645-f85d9a08e126",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "057f8dd9-09fd-49c3-9fc0-4560c719fa32",
        "cursor": {
          "ref": "62cf16e0-5f15-45cf-a76a-dc3be300ca04",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "83cefa32-7b79-46bd-8a14-f19b65301019"
        },
        "item": {
          "id": "057f8dd9-09fd-49c3-9fc0-4560c719fa32",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d838ab3b-09d5-4ac6-add7-e524085bfdc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91c2fb64-586e-4bab-b2bd-9e98ddd0414a",
        "cursor": {
          "ref": "e0f660e7-67dd-4744-ae42-22e0f2ee909c",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "3502ca73-0b08-4b28-b9d4-74726d9819c8"
        },
        "item": {
          "id": "91c2fb64-586e-4bab-b2bd-9e98ddd0414a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "4548b6d5-a8bc-4f69-9c20-d13d34b06d3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4239472c-38c7-4cb0-a242-a9b541e16376",
        "cursor": {
          "ref": "0e65e576-4728-4d9f-bb9e-a971d3d2efa2",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "def2e3a1-f38b-4433-91ef-35d8e57f2ce6"
        },
        "item": {
          "id": "4239472c-38c7-4cb0-a242-a9b541e16376",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "14ffb5ac-fe03-42b3-b76d-f348455ee38b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcd771f5-3e0d-4e41-b2ab-48ad56c41fa8",
        "cursor": {
          "ref": "aed47d70-dc53-4180-8c8f-50fc36f3f65d",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b53585fd-4931-494f-beba-4c1f9cc50932"
        },
        "item": {
          "id": "fcd771f5-3e0d-4e41-b2ab-48ad56c41fa8",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e7cdbe07-8b3a-4494-99f1-c0c13c20166f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5a0139d-48cc-44a2-9878-976b49ed2aa5",
        "cursor": {
          "ref": "7e56a769-7185-4575-b02e-bafbd8583d78",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "c70338f6-9ed4-497c-b87d-6d5ba16f253f"
        },
        "item": {
          "id": "f5a0139d-48cc-44a2-9878-976b49ed2aa5",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "97b87d1c-3513-497f-853e-7d6e5c0bb16c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f34faa35-e989-4b38-b2bc-c54148b2bc91",
        "cursor": {
          "ref": "bbd22ec8-31b9-41b2-854a-b1a06ff79378",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "4af91d04-6bc5-4b73-a480-c57d9c78249a"
        },
        "item": {
          "id": "f34faa35-e989-4b38-b2bc-c54148b2bc91",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ef77fbaa-f120-4da4-9d6f-953fe51c245d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46ae1131-60db-4ad8-ae6d-8c48134e3c7d",
        "cursor": {
          "ref": "d2b8285b-31bb-4504-accf-4cb2316094e7",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "1b98ecb6-8c3f-4c6d-928b-dd9d0f16e6fa"
        },
        "item": {
          "id": "46ae1131-60db-4ad8-ae6d-8c48134e3c7d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f826620d-c116-4561-b5f7-fda744039730",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d5bdf29-2d4f-4997-9701-be14876cb437",
        "cursor": {
          "ref": "071cba5a-fb5c-4041-a303-a021eaafea88",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "8597910e-76d3-4db4-9435-cb7db38a0f67"
        },
        "item": {
          "id": "2d5bdf29-2d4f-4997-9701-be14876cb437",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "a7592bf8-1201-45ea-92c8-4ac3981a65ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e86c223-620a-49ec-b784-770d25262ec0",
        "cursor": {
          "ref": "c976fab1-c5ae-48c6-800a-cbd905e1465c",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "746f0a35-e7c8-4929-97f8-52cf5a4f3fc8"
        },
        "item": {
          "id": "2e86c223-620a-49ec-b784-770d25262ec0",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "1adfe3b8-9837-4644-8fc8-a40ee667ea17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abf84ffa-d84e-4fbc-95c9-25bf6a188705",
        "cursor": {
          "ref": "6c4f7ee8-ee8e-4e59-b81d-f32bdda1e3ed",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "12c7f005-afa9-46f6-a227-1f0b54505c55"
        },
        "item": {
          "id": "abf84ffa-d84e-4fbc-95c9-25bf6a188705",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "06dfe50a-1851-4ee9-a5f8-1ad4e13c8a14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "604a34ef-2754-4ddb-a534-fadc866e9571",
        "cursor": {
          "ref": "ae0d7529-dacd-45ea-acb7-220092d0bbf4",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "316bb198-bf2f-4bf5-aac7-108b6f053d66"
        },
        "item": {
          "id": "604a34ef-2754-4ddb-a534-fadc866e9571",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f4bb7fde-d755-4fb9-9a16-f3ab3fc42dff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70459c8d-21cd-44e8-aec7-ce89a5bcfe51",
        "cursor": {
          "ref": "03136445-b77c-4445-9495-7ee609641606",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "65b4e125-5613-45e4-84e0-c62ed0477f02"
        },
        "item": {
          "id": "70459c8d-21cd-44e8-aec7-ce89a5bcfe51",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "91e0535f-3a25-46ed-a7e6-065bbeccd003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf96a97c-1fe8-4a0d-b00c-46d4c8081888",
        "cursor": {
          "ref": "8fe83e01-8b73-461f-b654-73e81b47fd62",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "91bee640-0800-4557-aaea-1142c0d41fdc"
        },
        "item": {
          "id": "cf96a97c-1fe8-4a0d-b00c-46d4c8081888",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "505c1b7d-ea04-4faf-941a-cd0b7b0e7d82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eb38fd2-f96f-466d-b4ec-78d3004adb80",
        "cursor": {
          "ref": "927c3a15-b946-4dda-a7e0-cbf3683f8629",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "c3611488-77f8-48ed-8b33-49e91f54907a"
        },
        "item": {
          "id": "4eb38fd2-f96f-466d-b4ec-78d3004adb80",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "56ac0ce8-8cf4-4cf4-819a-5988be6499e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e40e7c3-1ecb-40bb-a324-0036588f2871",
        "cursor": {
          "ref": "4e164502-9181-4cf7-9735-d64c747c0adc",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "b7dc8524-de60-4b7f-96bc-832511d43d3c"
        },
        "item": {
          "id": "5e40e7c3-1ecb-40bb-a324-0036588f2871",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b259f57d-c9fa-4a04-b932-4ee025d0c0d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4af32cf1-6710-470b-8e13-872df5341a55",
        "cursor": {
          "ref": "dad8886f-dfa7-4296-9922-eac54e1852e0",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "b989eb2c-65f0-4a62-a6fd-54f52221bccd"
        },
        "item": {
          "id": "4af32cf1-6710-470b-8e13-872df5341a55",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "305cef10-f51a-4592-b4d5-07221dfc4f9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a323c58-b374-42b5-8d32-aab9438e029a",
        "cursor": {
          "ref": "233679b5-4bac-4d52-9281-3d5331c342b8",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "7a328807-263b-4fec-b035-96811f7c7bc3"
        },
        "item": {
          "id": "2a323c58-b374-42b5-8d32-aab9438e029a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e7e02e72-005a-4871-aaa5-38ce5b8096eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67f3ae93-6857-4f5b-a4de-84e253f253f5",
        "cursor": {
          "ref": "a5ee6531-107c-46b6-86b9-121447c17dc7",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "f68bdfd6-5896-42a0-a69a-bc5d408ae4f3"
        },
        "item": {
          "id": "67f3ae93-6857-4f5b-a4de-84e253f253f5",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "2743532c-cff2-4aa0-925e-e9427dabe8ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2aa1292-53da-4b66-bb74-b4b91cd5c0bd",
        "cursor": {
          "ref": "d4688df1-f298-45c7-811d-617f0efb5ef3",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "074f709f-6460-43a7-82c7-120692c60b97"
        },
        "item": {
          "id": "a2aa1292-53da-4b66-bb74-b4b91cd5c0bd",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "9fcd9566-74c2-434f-8f60-f0ed60ee4bbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b6c2ceb-66c1-4695-bc72-3ecf0aaa4014",
        "cursor": {
          "ref": "c18de9ea-c37b-4c21-9046-5e0ce2dc48d3",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "9a557368-37f3-4ce7-8d59-a6946902c4a5"
        },
        "item": {
          "id": "1b6c2ceb-66c1-4695-bc72-3ecf0aaa4014",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c373e355-6f05-4fd8-a460-dcdeba6b7cdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f89cea3f-615c-4984-8af7-2a86f6a22399",
        "cursor": {
          "ref": "85b3b276-2a3f-4cf7-9b7f-acd01111bd8f",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "1d4626c1-4987-47c6-a5e1-186767fc9117"
        },
        "item": {
          "id": "f89cea3f-615c-4984-8af7-2a86f6a22399",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "59629317-0781-4ccb-9af1-2c92df5b4a7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c337301-b464-4b50-b28f-2534d8e24f53",
        "cursor": {
          "ref": "9abec97d-7dcd-40d2-a5d9-1b644bd1b335",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "190eb690-593c-46cf-a4a1-b2b1ea95a1b0"
        },
        "item": {
          "id": "5c337301-b464-4b50-b28f-2534d8e24f53",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a6123491-4f9f-45b6-b962-7d04ce4eb686",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4397a876-17fc-42c0-a6c0-77dc139229e2",
        "cursor": {
          "ref": "62f6307b-7c98-495d-be63-33d98cf59898",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "a8f8f934-db03-4a97-ba3e-dffa6fed343c"
        },
        "item": {
          "id": "4397a876-17fc-42c0-a6c0-77dc139229e2",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "7ae7a053-90be-47ca-8be7-993fc886ea6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00ecdfd4-93f4-4328-8998-9738476a80f7",
        "cursor": {
          "ref": "6da0894d-9dea-4ac6-bed2-3cde0cfeea03",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "e4e2685a-dbc3-4c8f-93bb-7b63098feab1"
        },
        "item": {
          "id": "00ecdfd4-93f4-4328-8998-9738476a80f7",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "fad19d2c-a6b2-4fd7-b932-de4ff0b7d5b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "9033a02e-1555-4a6b-8af7-85d0da71912f",
        "cursor": {
          "ref": "285b54f7-f95d-44e2-893d-4527ffaeb6b1",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "842b560e-e298-4a8f-904f-3c523c208af2"
        },
        "item": {
          "id": "9033a02e-1555-4a6b-8af7-85d0da71912f",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "340882c9-e745-4f0c-9d2a-bbc8792c1241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "b24961d7-e04e-49e6-b3ad-6511d086c12f",
        "cursor": {
          "ref": "fa7e2d80-59c6-4f96-adcb-a09c0694f625",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "72121701-318a-4059-ae54-e63ed7e9eadf"
        },
        "item": {
          "id": "b24961d7-e04e-49e6-b3ad-6511d086c12f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "d4bea840-4ed9-496d-83ae-f6078241f173",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b24961d7-e04e-49e6-b3ad-6511d086c12f",
        "cursor": {
          "ref": "fa7e2d80-59c6-4f96-adcb-a09c0694f625",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "72121701-318a-4059-ae54-e63ed7e9eadf"
        },
        "item": {
          "id": "b24961d7-e04e-49e6-b3ad-6511d086c12f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "d4bea840-4ed9-496d-83ae-f6078241f173",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c86f5bd-c6c0-4553-a452-1fa3f3edc00d",
        "cursor": {
          "ref": "69b61f9c-2b48-4eb5-9e5f-4e455e3cc908",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "afe6bcd5-2615-429e-bf92-1ad99ecc8f17"
        },
        "item": {
          "id": "3c86f5bd-c6c0-4553-a452-1fa3f3edc00d",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "01fdb3c9-e609-4afe-82e0-a4987d9b7aac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae2bf32e-c3fb-4e9a-b94c-66ba1dca7d96",
        "cursor": {
          "ref": "39a85047-8db3-4de4-b3a2-9e32374d37f4",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "dcc0b3cf-566f-43d6-ab95-14b7a6fe7ca8"
        },
        "item": {
          "id": "ae2bf32e-c3fb-4e9a-b94c-66ba1dca7d96",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "18117104-6bd0-4fe3-aaa9-040c3ef1cd49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7088a2f-b037-463f-a4ba-b80af4aad2e8",
        "cursor": {
          "ref": "a41d1512-992d-42f4-88ca-1ff2f408928f",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "98921443-5c3f-46b3-a780-8211acbb2df7"
        },
        "item": {
          "id": "c7088a2f-b037-463f-a4ba-b80af4aad2e8",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "6df0ff61-4c76-4ccc-a747-a6e24d353656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "180b5e2a-17d0-4c98-ba6f-25b45bc5111e",
        "cursor": {
          "ref": "2c669dfe-7656-4d4c-a92c-8dabecf1b349",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "01a05b9b-ddd5-4e1b-a673-5e06deaf210e"
        },
        "item": {
          "id": "180b5e2a-17d0-4c98-ba6f-25b45bc5111e",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "91b8bac8-2e48-44dd-80c2-d39ec805e0e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42122ca3-96c5-4a06-a79b-a8881fb870c7",
        "cursor": {
          "ref": "0bb1dbde-bdad-4a37-b1a2-e03da3cdba70",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "4b90ba01-f0be-48e2-9535-eb0744c944b6"
        },
        "item": {
          "id": "42122ca3-96c5-4a06-a79b-a8881fb870c7",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "7cb1f6ae-099b-4cab-ab5e-815bf5190921",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 168,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3735cee5-c8e6-4e81-81ad-281d2f8f40d0",
        "cursor": {
          "ref": "c1e3ec91-a856-4a46-9e0e-a5fe0cb1c2a8",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "ed0d1c4a-1122-4e85-bac5-028fa59c4c16"
        },
        "item": {
          "id": "3735cee5-c8e6-4e81-81ad-281d2f8f40d0",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "975fe7d4-2502-4b69-bb97-0702de362b91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b857f5e-58ca-4bda-ab1b-38716cd9a651",
        "cursor": {
          "ref": "16bb57a6-7452-417f-b273-0616e03ed12a",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "436b3d00-e1eb-42d2-bd79-becb97077171"
        },
        "item": {
          "id": "1b857f5e-58ca-4bda-ab1b-38716cd9a651",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "6d3c8e53-1214-4743-94c7-1dabf1aa016c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bea985c0-fb59-482a-9960-ce54ab1f2d54",
        "cursor": {
          "ref": "d7b4a502-62bb-4c02-a14b-7e144ba0a717",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "41f6aafd-949c-481a-887c-2c27dc606324"
        },
        "item": {
          "id": "bea985c0-fb59-482a-9960-ce54ab1f2d54",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "887f8ceb-f661-4fbe-9641-c0afc47b9f4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abf27d28-8f52-4089-92bb-86dffd9e1b14",
        "cursor": {
          "ref": "2780f272-c944-4eb4-b143-e91ce2c27085",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "5727ecf8-e245-4cbb-b5d9-ce6a1765bd5b"
        },
        "item": {
          "id": "abf27d28-8f52-4089-92bb-86dffd9e1b14",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "0d7b7400-5320-4b17-b937-4216f6f3a1bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "218c91c2-9e20-4592-9ab6-5add87ebf222",
        "cursor": {
          "ref": "5fcf21b8-2ac8-4d7f-92a1-9f943a1e3391",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "ee83e8bf-7db8-4064-90b8-c0ff29a16f5b"
        },
        "item": {
          "id": "218c91c2-9e20-4592-9ab6-5add87ebf222",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "69ce87aa-68f6-4094-bda1-2ddd77a942e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faf8de4e-4035-4e64-b978-db266b58da74",
        "cursor": {
          "ref": "ecf427da-4e02-4d7b-9109-e0547693af83",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "d512a094-65c3-43a4-9ab6-352913ec2e33"
        },
        "item": {
          "id": "faf8de4e-4035-4e64-b978-db266b58da74",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "d0b5bcfd-5e44-4de2-9870-39e071abdfca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10240f2d-968b-4b62-bd77-bb58b21fc10a",
        "cursor": {
          "ref": "73904e05-5baf-43e3-b542-6a8897c3f855",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "745008b8-fad9-4df8-9cb3-de9ccd7b44ac"
        },
        "item": {
          "id": "10240f2d-968b-4b62-bd77-bb58b21fc10a",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "fa54b3c8-f3da-4057-8559-258ffc20c547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e169841f-7be2-47aa-a23f-34a23bea3923",
        "cursor": {
          "ref": "cf447dd4-a134-494e-8ea4-598bb5b4f5fa",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "cd538e0b-b03c-4615-a1f2-044f9899e706"
        },
        "item": {
          "id": "e169841f-7be2-47aa-a23f-34a23bea3923",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "03ac5249-1e04-4a30-bb7b-955ec3a0b3ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a83b0245-5418-4f42-83f0-06530bb3eb25",
        "cursor": {
          "ref": "649731fe-bcad-439d-8e1b-6e58d8d88409",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "36183632-52de-4782-ac1b-ec784f4c966d"
        },
        "item": {
          "id": "a83b0245-5418-4f42-83f0-06530bb3eb25",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "1bb77984-fc97-4041-a69b-372509539ff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab36c17a-dfcf-4a54-8491-bfe6e19437c5",
        "cursor": {
          "ref": "2cd39083-2ed7-4ac6-8267-162eca4fb804",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "9ae5567d-cdaf-4056-b403-3806803217ee"
        },
        "item": {
          "id": "ab36c17a-dfcf-4a54-8491-bfe6e19437c5",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "3ef17869-b8b2-408a-80e7-8c87dfe06ab4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47f789c2-1e2b-49f1-8c72-543b330629b5",
        "cursor": {
          "ref": "6c20386c-afd9-4c9b-9351-5145bf824089",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "41fc7393-2685-4ac0-a5c4-e1ec2ff3f38d"
        },
        "item": {
          "id": "47f789c2-1e2b-49f1-8c72-543b330629b5",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "bb35eeca-e7ee-45ca-af0d-426ac7a70638",
          "status": "OK",
          "code": 200,
          "responseTime": 248,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "358d670c-d306-4ce5-b2c1-e3cd90d728d2",
        "cursor": {
          "ref": "3f70f903-2110-4f53-9121-efa247d5b485",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "a2b1358e-42fb-4205-b96c-5bac84d12204"
        },
        "item": {
          "id": "358d670c-d306-4ce5-b2c1-e3cd90d728d2",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "fa1724fe-1adb-40b2-8149-2ba79b318780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7ee94e8-d4e9-4201-a867-c13ddc02c1aa",
        "cursor": {
          "ref": "84f68b38-ff55-4899-8a55-377ca8f6e8f5",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "0cefb856-341b-4ad4-9607-cc5772e98424"
        },
        "item": {
          "id": "c7ee94e8-d4e9-4201-a867-c13ddc02c1aa",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "3ee469a1-0d04-4723-b6c8-9ba50b189bc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d218747c-c1ef-4f74-a6e6-0a0eaf353861",
        "cursor": {
          "ref": "59491d9a-1c02-4d98-b2de-aa81a9cb0d53",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "fae84bb4-5e85-4dd8-b7e3-d6ee9c986c58"
        },
        "item": {
          "id": "d218747c-c1ef-4f74-a6e6-0a0eaf353861",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "8d1e88b5-6248-46af-b007-3cb41cee901e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0092427-69fd-46a2-9235-294fc1b648c9",
        "cursor": {
          "ref": "4c44498d-2f76-421a-b690-97bee394c57c",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "6fca8c96-13d1-477f-854e-14552efad1af"
        },
        "item": {
          "id": "c0092427-69fd-46a2-9235-294fc1b648c9",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "7ae26375-38bd-4db9-bb23-80851afbb03e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a2e598b-f729-4dd2-a33a-d2703114ac71",
        "cursor": {
          "ref": "d6dd91f3-4e96-4415-b72f-798d6d1592c4",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "c2c341da-ff48-4d28-a46c-3ee0b87228c6"
        },
        "item": {
          "id": "7a2e598b-f729-4dd2-a33a-d2703114ac71",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "0b64be9c-ceea-465c-9170-acbd9d4716ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b3ebae5-e3ae-4e36-b58a-675f7a4ac9fd",
        "cursor": {
          "ref": "cb22804b-a970-422c-b56d-165f3c2e31be",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "acf223c9-32df-4a60-801f-d228a25c44c2"
        },
        "item": {
          "id": "1b3ebae5-e3ae-4e36-b58a-675f7a4ac9fd",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "270ccad7-d7c6-4e25-a704-bbfa54bc1cb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c92ebe05-fa7c-489f-8e78-93d5df2692bb",
        "cursor": {
          "ref": "940342e1-bef0-42d8-8534-785aa3036a61",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "89866f7d-e2d4-462f-a495-34c18e6da5cb"
        },
        "item": {
          "id": "c92ebe05-fa7c-489f-8e78-93d5df2692bb",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "a1e3e0f9-3f51-44c4-b471-4201b6d234b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c4f387e-56cf-4ce1-9660-2fbb14a9598d",
        "cursor": {
          "ref": "f7440336-86b7-40ae-8b00-9a155ca66c17",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "b0bb0345-4c61-4b3e-950b-19b2972e5904"
        },
        "item": {
          "id": "3c4f387e-56cf-4ce1-9660-2fbb14a9598d",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "7879a989-cde7-4c6e-927d-61d34125f0f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b49925d-a04a-4cf3-8d26-84486d4efc60",
        "cursor": {
          "ref": "5f46bff6-a9a8-4427-9963-6631e2932bbc",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "b6636ea5-9875-4e0f-a80d-3579bd20ec8c"
        },
        "item": {
          "id": "2b49925d-a04a-4cf3-8d26-84486d4efc60",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "3a878345-2222-48db-80ef-e94454ffb8c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfc3965c-04f2-4f27-b83c-7a2bbfa6c328",
        "cursor": {
          "ref": "0336df54-3480-4e28-993c-6d045d1b9af6",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "d6af8323-bc41-470b-8494-1a65a4f03b59"
        },
        "item": {
          "id": "dfc3965c-04f2-4f27-b83c-7a2bbfa6c328",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "2c586dcd-58fb-4c9e-9e08-32a176545ff0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0e18df0-e508-4140-9fd5-e3fd44e347bd",
        "cursor": {
          "ref": "70c94345-896c-4d80-93c5-b6e1309346cb",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "30f43304-b741-42f9-a44b-2146f9636ca0"
        },
        "item": {
          "id": "f0e18df0-e508-4140-9fd5-e3fd44e347bd",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "98cf7972-8306-4042-85a8-28c41dccf2d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0044441-9542-4d8d-9726-dcb4fb4cf909",
        "cursor": {
          "ref": "a39cb0aa-452e-4c38-afb6-27c849bf77e6",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "202a8b08-39a3-4c0c-8591-49c3d557cdf5"
        },
        "item": {
          "id": "d0044441-9542-4d8d-9726-dcb4fb4cf909",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "141beb09-7997-4469-b079-7d5c1e3ab0b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1290d7d1-64ca-4100-ae27-ac6dad82a6b3",
        "cursor": {
          "ref": "18321693-13a5-461f-b73c-ad175f69a869",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "e990b984-5058-41a4-b289-818e17147b8a"
        },
        "item": {
          "id": "1290d7d1-64ca-4100-ae27-ac6dad82a6b3",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "a996d3f1-6482-45c5-8a50-ce852283e616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1679e01b-b067-4036-8d65-5eedbac7c9ee",
        "cursor": {
          "ref": "cd812a85-aef7-4ae0-81f9-c4b43cc403f5",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "b8458fe0-74a3-46d0-ac99-1ac15eef5173"
        },
        "item": {
          "id": "1679e01b-b067-4036-8d65-5eedbac7c9ee",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "87063c03-c656-43f0-80d4-c717bb232f9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89370fd0-441e-4112-8a88-28cc459b243c",
        "cursor": {
          "ref": "5d186a3e-3fe5-4528-983d-0fd77b7fc22e",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "88269c28-1bf0-414d-937a-6673e412a18e"
        },
        "item": {
          "id": "89370fd0-441e-4112-8a88-28cc459b243c",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "7af09e90-03c0-4980-9e94-f6f88339d2ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fb43e95-a1e4-4c7d-8781-8c8b336e55e5",
        "cursor": {
          "ref": "74932d44-d308-434f-b6e0-365043a7e406",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "56c791e4-da04-4db1-a810-a446d3be2c2c"
        },
        "item": {
          "id": "5fb43e95-a1e4-4c7d-8781-8c8b336e55e5",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f44b21df-762e-41ba-86e4-c7e41b30e0ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dfe17c8-0c84-4364-a89b-5d6670286a7e",
        "cursor": {
          "ref": "d42aa4e3-c46c-4c91-85b4-ceb305482a74",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "d2edcb16-da59-484a-922e-780da842cd4d"
        },
        "item": {
          "id": "6dfe17c8-0c84-4364-a89b-5d6670286a7e",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "565a7e56-c1aa-4e43-aaaa-eb23de0b55e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f337ab0-92cd-46fe-b992-c19cb0741c1a",
        "cursor": {
          "ref": "99e86141-07ab-42cb-8fd3-ecea7f5d8740",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "bfa4bf9a-3001-487d-92bd-d63d316c8cce"
        },
        "item": {
          "id": "9f337ab0-92cd-46fe-b992-c19cb0741c1a",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "0200ce5f-77d2-4f99-874f-a08b3077a3bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba6f91d9-fd0e-4612-9fd4-7e181d6476fe",
        "cursor": {
          "ref": "b4db1a83-6917-48ee-9d79-c3eb910c43b2",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "dce3f732-132c-4100-a6ea-1276da88226b"
        },
        "item": {
          "id": "ba6f91d9-fd0e-4612-9fd4-7e181d6476fe",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "8ea488f9-3fe3-489b-a648-928c1c837818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03a48e5c-fc58-407c-a157-7fd320f8646a",
        "cursor": {
          "ref": "05fc696d-1fdc-4add-a517-1f6f13956e67",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "95331247-d434-42ab-8140-dbae782e2d16"
        },
        "item": {
          "id": "03a48e5c-fc58-407c-a157-7fd320f8646a",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "5c4de87b-39f1-4e36-88db-b53d3e6bb301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de175f8e-468a-47d6-b8b5-67104228ee1c",
        "cursor": {
          "ref": "11d167cc-0a76-4b6b-98e9-29305472afcc",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "95e832cb-a202-4a4d-bfa5-1e4295d64823"
        },
        "item": {
          "id": "de175f8e-468a-47d6-b8b5-67104228ee1c",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "6a8090b0-8a8f-4700-82f5-05f1ae65feb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a1a7190-8dbf-4b5d-b837-f7c23fb56bca",
        "cursor": {
          "ref": "102523e7-71dd-423e-99c7-1b14141c4b77",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "4954ddf8-af2b-4ea5-a76d-769fa726505b"
        },
        "item": {
          "id": "7a1a7190-8dbf-4b5d-b837-f7c23fb56bca",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "16ffe411-9900-41ea-82c8-7295b00af95e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a40fd651-77ad-4d60-81db-d10da3030c13",
        "cursor": {
          "ref": "45b4abb7-4635-4d95-af72-96232094637d",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "71687593-4176-423e-a191-9da7c218fb3b"
        },
        "item": {
          "id": "a40fd651-77ad-4d60-81db-d10da3030c13",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "3ba3a35a-ff98-4a0f-9cc2-8bd9cefb5462",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "296f87bf-916a-4b02-9570-7a4a2d553072",
        "cursor": {
          "ref": "5cd1cf46-37e2-46d9-967b-13900117b07e",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "82e87f97-66b4-46da-a057-64c57db18f2d"
        },
        "item": {
          "id": "296f87bf-916a-4b02-9570-7a4a2d553072",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "a7755c0c-9a22-4baf-8b83-6d5b0115aebf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "784fcbcc-a293-4d16-b1ca-1bc06726ddf1",
        "cursor": {
          "ref": "ccb898ee-14fe-4c7a-9155-a9e7c736f55e",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "5e8dca11-a3a7-4e61-9cc7-528d5ad7b616"
        },
        "item": {
          "id": "784fcbcc-a293-4d16-b1ca-1bc06726ddf1",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "a565a15e-297e-421b-82a2-c090cee9dcad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ae356a1-ddfa-4525-b6e9-4800dff48dac",
        "cursor": {
          "ref": "e87931d4-587a-4bb7-b9cb-ca4b0bdf4348",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "db44fac2-05f2-4d01-b73f-3f0a9de9b0df"
        },
        "item": {
          "id": "7ae356a1-ddfa-4525-b6e9-4800dff48dac",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "e611e5fc-b60e-41b2-b5eb-3847ea28671d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43cbcc91-9d40-44fc-8819-dba1fd360cf8",
        "cursor": {
          "ref": "d8d86316-5f3d-4cff-b690-b0b618d219a6",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "b01fde8e-2ea7-467e-82b7-c1caf01f53fb"
        },
        "item": {
          "id": "43cbcc91-9d40-44fc-8819-dba1fd360cf8",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "f1eb528f-42a9-440e-bb4f-b113537eb7ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be19218c-21be-461c-87c8-edd3e7a9bb7a",
        "cursor": {
          "ref": "9dca58cb-77f9-4d04-9271-a4e360bf1683",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "5ba995e5-c601-486c-beac-24abce4e17bd"
        },
        "item": {
          "id": "be19218c-21be-461c-87c8-edd3e7a9bb7a",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "defbaad7-9241-4383-bf17-c772b6402ab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a64c4dd-b22a-4ba4-b423-8a75ad4ee566",
        "cursor": {
          "ref": "997a8b5b-dfba-47a3-b121-fbe84c4d6ae3",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "f73d6c70-48c2-4a6c-9d4b-217204b9fb3d"
        },
        "item": {
          "id": "7a64c4dd-b22a-4ba4-b423-8a75ad4ee566",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "6ca6315c-147a-48ef-80c3-1eddd172801c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e092954a-71bf-45f7-8e2a-c0ad5fe7a9df",
        "cursor": {
          "ref": "57025538-aab0-47b7-ba5c-ec91a4af2706",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "19c2f018-6f4f-47fa-935d-bcf5eb68f141"
        },
        "item": {
          "id": "e092954a-71bf-45f7-8e2a-c0ad5fe7a9df",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "080f1cb9-9b14-47ce-a198-8dd1b93ecf70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "477cd20b-2b54-4a87-b02e-4a818db6f8e7",
        "cursor": {
          "ref": "368accc7-84db-47e3-9ae3-7acf885db4df",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "9098d18c-ebc5-4212-9830-a6464a7c315a"
        },
        "item": {
          "id": "477cd20b-2b54-4a87-b02e-4a818db6f8e7",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c25e6e5e-26ca-433e-bfd5-96116393dd95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "973d0e93-a4c6-4756-a3e5-08632dddde41",
        "cursor": {
          "ref": "670b1a53-72e4-41f0-8efc-a3d9af3858e5",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "a3cd1d88-ee51-4a88-90aa-cbc47729cc41"
        },
        "item": {
          "id": "973d0e93-a4c6-4756-a3e5-08632dddde41",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "aa026db4-a1b8-438c-a4cc-20d5abf486f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ed4e18e-5c78-4c9f-9c8e-e202d24379cc",
        "cursor": {
          "ref": "94cde6ec-f9db-40d0-bfe6-84ca66fb1d9a",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "c0d29285-34f4-4568-bf44-0e02629b2db5"
        },
        "item": {
          "id": "7ed4e18e-5c78-4c9f-9c8e-e202d24379cc",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ccbf74e6-9948-412f-8915-062ef6a0b0fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9f792ef-08ae-42c5-baf8-b919d3a93adf",
        "cursor": {
          "ref": "dc9dab4d-678c-45b3-82b1-0657bf9fdb9a",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "df317da7-5eb7-45e9-b6b6-ccb7c51993fe"
        },
        "item": {
          "id": "c9f792ef-08ae-42c5-baf8-b919d3a93adf",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "2b2814b4-60d9-45b1-ba8c-d4f21c002bf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02159069-d558-4498-8223-e581799dc95a",
        "cursor": {
          "ref": "df1ccbc3-7d12-40d9-a4eb-71c30934638c",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "20e9f00a-b753-4abc-ac93-67f5dc592aa8"
        },
        "item": {
          "id": "02159069-d558-4498-8223-e581799dc95a",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "7f9997a8-9668-45cf-9113-e31a10d07b7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e79e6ee-88e2-4d36-9263-2321d4361881",
        "cursor": {
          "ref": "5596d0ee-b361-49b5-9412-75dae6cf2e08",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "2f73f894-3392-463d-9bfa-c8ba5957dedb"
        },
        "item": {
          "id": "5e79e6ee-88e2-4d36-9263-2321d4361881",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ba13b891-d3f3-4dc4-aa4f-5710031c7d03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "698b7c6a-6413-4466-98ea-c2c7e2a028d6",
        "cursor": {
          "ref": "585cfa68-f9c4-4a83-9418-9dd4c624c2f4",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "c5a2adc4-0fb4-4984-a14e-c7f564622c87"
        },
        "item": {
          "id": "698b7c6a-6413-4466-98ea-c2c7e2a028d6",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "57f4ab6f-d6e9-4d03-b5c4-690da55bec25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "551c8d0e-f893-480f-877e-f3ca850ccba6",
        "cursor": {
          "ref": "2914e63d-56ef-4d22-aeb4-92f83fa3f9dc",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "23edf3b2-4022-44f3-aad2-1128146d54fb"
        },
        "item": {
          "id": "551c8d0e-f893-480f-877e-f3ca850ccba6",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "dfb7a68b-fabf-4649-9ad7-a52fb76a1689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a95c093-46de-4737-90e6-e8604735160b",
        "cursor": {
          "ref": "60653231-ace6-4e1e-8b37-e1bfddd34dd3",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "b222f508-2f95-492f-842d-67a2f5fc8f01"
        },
        "item": {
          "id": "6a95c093-46de-4737-90e6-e8604735160b",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "799236df-c82e-4b29-a4da-16af49cfcb92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65894192-f9e7-4b11-ae46-ebfd17eff115",
        "cursor": {
          "ref": "51c849c5-5db2-44e5-ad23-5d6e7d80904a",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "1079ad47-91db-4bfa-8fee-03faced8cf6e"
        },
        "item": {
          "id": "65894192-f9e7-4b11-ae46-ebfd17eff115",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "7b42dfd6-aefb-40cf-8edf-47137121dee2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beb625f2-c47e-4c96-b0df-dc8509ccdc67",
        "cursor": {
          "ref": "1cd7be06-f7e2-4b4d-8ca9-f77f3fa7dc85",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "9cd8f384-b6fd-482c-90e0-fbc5fdfdbbdf"
        },
        "item": {
          "id": "beb625f2-c47e-4c96-b0df-dc8509ccdc67",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "dda22f93-6dad-4684-b49c-a36663c6dc99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1be590c-2f67-45ad-951f-4059611b718e",
        "cursor": {
          "ref": "06d2b25f-2e45-4c00-b120-f96bb3f10d0e",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "0687321a-2d7f-457d-ae72-5d0b3f1bcb08"
        },
        "item": {
          "id": "f1be590c-2f67-45ad-951f-4059611b718e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "86457507-4539-42a5-ac58-d855ad9a73ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35485935-15ac-4a24-b22f-ca8a720d6844",
        "cursor": {
          "ref": "f208fc1d-8567-4165-9162-b7f98673b5c2",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "961d6c41-858b-493a-abc7-0b84b9243b7b"
        },
        "item": {
          "id": "35485935-15ac-4a24-b22f-ca8a720d6844",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "cac1cfdf-40ce-412c-bd2f-9b19ed029ecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e35daf0-e8cb-484a-bb45-960f28ae12e0",
        "cursor": {
          "ref": "5e4ee8b2-91da-4602-a4a1-5e0e67781aae",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "c2238e7b-3d44-4a56-8461-e35117efe61c"
        },
        "item": {
          "id": "8e35daf0-e8cb-484a-bb45-960f28ae12e0",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "935d252d-afdc-4000-a57e-cddda7d117a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55bb2d3f-c879-4039-89b8-82ff5a371b93",
        "cursor": {
          "ref": "90d33a9d-452f-430b-ae87-816b4e663785",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "2ad91121-a92a-4746-8e8c-b3e64eb09b15"
        },
        "item": {
          "id": "55bb2d3f-c879-4039-89b8-82ff5a371b93",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "bfaa5e43-f8bd-4a53-b244-ff542aa5c840",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4c0b037-5bd5-463a-b994-8c469e39c031",
        "cursor": {
          "ref": "d0d9b268-1442-4f97-9c90-a013927355f3",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "f7ba3cba-5b83-4464-9d73-68b3bf23f566"
        },
        "item": {
          "id": "e4c0b037-5bd5-463a-b994-8c469e39c031",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "ffd03152-230f-474b-a7ce-28d64382460f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "120d6e4b-194e-4ab8-a1c2-f924a8298356",
        "cursor": {
          "ref": "b273c151-f0b8-4a72-8de5-6e07906cf578",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "773a3217-af75-42bf-a2c0-0dd9683c732b"
        },
        "item": {
          "id": "120d6e4b-194e-4ab8-a1c2-f924a8298356",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "9bf30c35-15b6-4080-a634-c5a6dc624c40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "064d5a7b-4676-418c-9ef6-9c2ff6f1f7cb",
        "cursor": {
          "ref": "4dab7886-8ed7-456c-9f95-77d4879107ae",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f2b5b7fa-e3b1-4b2b-b73d-dc4a4cf50f2f"
        },
        "item": {
          "id": "064d5a7b-4676-418c-9ef6-9c2ff6f1f7cb",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "ed73ec69-a735-4865-80b0-607baf5685cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad6f2a41-8122-406f-9d43-d34337b80740",
        "cursor": {
          "ref": "fbd851d2-debe-4274-8dc6-7b7ad0137a96",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "83155ba5-af2f-4e38-8d69-f88d51098c17"
        },
        "item": {
          "id": "ad6f2a41-8122-406f-9d43-d34337b80740",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "135e0c56-d580-46b7-8464-817d32fd3c87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bffab159-268c-42d3-ba5e-712b6a8ee15c",
        "cursor": {
          "ref": "2c71f6ee-1900-4ee0-a701-dea67854b5ab",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "4b5c8832-cd43-4293-a53a-35823ab25fa0"
        },
        "item": {
          "id": "bffab159-268c-42d3-ba5e-712b6a8ee15c",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "45097953-f354-4bb1-a0e3-39ce5b36b06c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31ff8b6c-e8c6-43ec-94ec-e5938e91ad82",
        "cursor": {
          "ref": "97138f39-ff4e-4555-9d5c-eea573e0edc3",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "86ab8a08-8f19-45c5-9028-98d67e7a016b"
        },
        "item": {
          "id": "31ff8b6c-e8c6-43ec-94ec-e5938e91ad82",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "533e2364-36c1-4ebc-a69c-a714b6f68148",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6217b20c-2afe-4280-801e-39c552874c97",
        "cursor": {
          "ref": "273885d4-c6ab-4467-8594-d7312ebca216",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "23d7e160-bf67-4c51-ae86-653843a4052d"
        },
        "item": {
          "id": "6217b20c-2afe-4280-801e-39c552874c97",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "6b5bc687-6fac-4983-aa2e-981094b8481c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "203488d1-130b-4fc9-8a8e-21524e1f17c7",
        "cursor": {
          "ref": "19f0fbff-f29e-48c6-98ef-3c2060418b19",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "618cf237-8cfd-445d-bbab-70b09f9461f5"
        },
        "item": {
          "id": "203488d1-130b-4fc9-8a8e-21524e1f17c7",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "e8803836-e212-4506-96cb-6ff6f1dee01f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfd2cd98-4911-4d5d-8a07-541f64d3ff6f",
        "cursor": {
          "ref": "5fbe1dd4-7a03-40ab-8a39-71bc2c94d843",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "d5f632d2-8999-4907-973c-66470b72fa01"
        },
        "item": {
          "id": "bfd2cd98-4911-4d5d-8a07-541f64d3ff6f",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "9bdb1f73-a6f1-429f-9d8c-9ca055d359ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb0417cc-cb61-4914-9711-b1a230efd6b2",
        "cursor": {
          "ref": "ae11cd25-d036-4b34-9ecd-b2781c58ad2f",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "17876143-a65f-411f-8972-90b2139fe869"
        },
        "item": {
          "id": "fb0417cc-cb61-4914-9711-b1a230efd6b2",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "0c492962-b77b-4547-a606-f2fb61def012",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11d048a0-c0d1-4274-a911-a63089af6775",
        "cursor": {
          "ref": "5b0bb482-9dac-4af6-8642-0d0e086eb630",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "cf353710-c959-4749-9dfb-7caa0ce2d6fc"
        },
        "item": {
          "id": "11d048a0-c0d1-4274-a911-a63089af6775",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "97084462-4e2e-4e49-b5b1-4fee6a05c85d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba236d98-d170-4aca-a13c-08fcaee98c88",
        "cursor": {
          "ref": "1a2cc913-3607-45e0-8f6b-495f53c1e58f",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "3bd40a69-1d55-4378-bd1b-47201b3ebae3"
        },
        "item": {
          "id": "ba236d98-d170-4aca-a13c-08fcaee98c88",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "ba494d5b-6022-4524-8a8e-43aa7788b890",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00af71a7-17ce-49ac-b10d-4d1c659b0bb3",
        "cursor": {
          "ref": "95fde049-f8eb-47e6-83d5-3f365537d0e9",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "18b5ec6c-f579-4fb0-a8ee-4a3a5021af2e"
        },
        "item": {
          "id": "00af71a7-17ce-49ac-b10d-4d1c659b0bb3",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "8552d9de-7acf-4035-9e80-87df87c41f04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f427b7-5de7-4024-bec0-dc8af74f6821",
        "cursor": {
          "ref": "89193b23-afbe-4dc4-a45b-c43331bf6432",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "873706a5-0282-4ece-98b4-5002690c2726"
        },
        "item": {
          "id": "50f427b7-5de7-4024-bec0-dc8af74f6821",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "8e940a43-6e32-41d6-9c36-26bfe83e6e26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a12230b-bf07-4e7f-91f3-a8e3d12f970d",
        "cursor": {
          "ref": "c61f8fc8-c6c4-4c7f-a7a4-16e0f4c1ab9e",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "76a88475-9c07-4f84-8cf9-861716fe0572"
        },
        "item": {
          "id": "4a12230b-bf07-4e7f-91f3-a8e3d12f970d",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "72ef4a66-ba63-43cf-899e-7607ff342eeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e2a257f-1ad3-4d48-b622-478e800003c2",
        "cursor": {
          "ref": "c0957c89-bb4e-4e53-8d70-cd339e1e87e4",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "38f92a40-6541-4443-9116-15cfc1ed9e12"
        },
        "item": {
          "id": "7e2a257f-1ad3-4d48-b622-478e800003c2",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "a99d2499-7dfd-4386-b977-7bcee6bee3e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8712c30-9d33-4af1-9d5d-0501d187987a",
        "cursor": {
          "ref": "e3a8af54-ea64-4061-be4e-59738bd558b4",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "c55cde28-36d5-4cc3-91ea-5d3846be27ce"
        },
        "item": {
          "id": "e8712c30-9d33-4af1-9d5d-0501d187987a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "73ed3fbe-d08e-4d69-9f3f-7aae511fc5d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e488122c-fb15-4cf9-ba01-08286e8f4f48",
        "cursor": {
          "ref": "39dae7d9-39e6-48e7-bf1d-4146d4c27105",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "8db9c853-4e01-4016-8d01-44bd016875fa"
        },
        "item": {
          "id": "e488122c-fb15-4cf9-ba01-08286e8f4f48",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "7332a04f-fbca-4ec3-830b-d189368e60b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d75c6ac7-a083-41e9-9583-d431dbfa3e5e",
        "cursor": {
          "ref": "aeb321fa-fb2f-4ee8-a768-6854825c175c",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "5ee050fe-10b5-477a-9621-11f9a80e7997"
        },
        "item": {
          "id": "d75c6ac7-a083-41e9-9583-d431dbfa3e5e",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "356bca9b-8fc1-4bba-a583-75ec3b89fb85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 152,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e37d2b9-bd57-436c-a078-c4d81cce0562",
        "cursor": {
          "ref": "1c3e8abd-f35d-4dd7-a026-911b49926f95",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "fd871dea-a231-4518-959b-c34be5fc19f3"
        },
        "item": {
          "id": "6e37d2b9-bd57-436c-a078-c4d81cce0562",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c685e84e-5364-46e4-93a7-c1d52a870aed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30d7e0b5-9d91-4c0c-8c32-0e67e4e31a25",
        "cursor": {
          "ref": "68dd86cc-0977-4019-bdee-86c6fb10228d",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "b007de43-369e-4646-b839-db06246f0381"
        },
        "item": {
          "id": "30d7e0b5-9d91-4c0c-8c32-0e67e4e31a25",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "1928b68a-dd62-4e69-8f17-b6c03deeb838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6457bbb9-d5b3-4029-959c-a07b7c6310d9",
        "cursor": {
          "ref": "7d428db6-d356-4080-b0f9-7483559d9a65",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "c3fdc923-da5b-42a2-aab9-e7673bea7553"
        },
        "item": {
          "id": "6457bbb9-d5b3-4029-959c-a07b7c6310d9",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "f22f43a0-f893-4ccf-8305-4c0393b2efdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57dbb774-40d1-4e4d-89fa-918cae62fd06",
        "cursor": {
          "ref": "19d4ebb6-6c02-45b1-b896-45b646e577ac",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "d196ba8d-20b4-4cb8-bb18-90aeb3861ea8"
        },
        "item": {
          "id": "57dbb774-40d1-4e4d-89fa-918cae62fd06",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "4ad4a77f-74c4-4566-b1fa-b1870ca8992d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71a30b9c-6f08-4f30-b779-44fd5fcfcfc8",
        "cursor": {
          "ref": "6373ae2f-1461-41dd-81fa-9c284f0561ec",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "24628701-9c47-46d8-bb1f-b2f38b7d23be"
        },
        "item": {
          "id": "71a30b9c-6f08-4f30-b779-44fd5fcfcfc8",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "451681af-ad74-421e-9baa-f9c4bfb9ec91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a7c4c03-4ea5-428b-9438-d102528dbfcc",
        "cursor": {
          "ref": "7e2775ef-0d05-4267-ad96-efd450c8f3fa",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "e15ffbcc-40b6-46d1-b52e-7c9a07db9e6c"
        },
        "item": {
          "id": "2a7c4c03-4ea5-428b-9438-d102528dbfcc",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "aa8adf94-ca5d-4293-a2b3-dd9f7bc76a99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c633876e-7e42-49e5-b351-b5cf7f5845bd",
        "cursor": {
          "ref": "51684094-4e09-4d04-bbb3-8e499aaf2c2e",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "8a619ee0-5721-4420-9666-77ca375d6441"
        },
        "item": {
          "id": "c633876e-7e42-49e5-b351-b5cf7f5845bd",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "01e248e1-959e-4b88-9be0-9edb2a9d6602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1530ea20-061d-46b0-818f-19a8db67c708",
        "cursor": {
          "ref": "4f31a24b-6064-464b-b29f-b8d3a3de844d",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "50914095-1a5c-4593-acd9-c6887de66e3e"
        },
        "item": {
          "id": "1530ea20-061d-46b0-818f-19a8db67c708",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "62de0637-c487-488d-85bc-b9b321872b67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5258b4b-9d1e-4812-821a-6dd89c07da89",
        "cursor": {
          "ref": "8406b195-1c37-4b18-8da4-5d96a16817ac",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "b66a0d14-dadf-4cf4-9421-dd96c2c9b9df"
        },
        "item": {
          "id": "e5258b4b-9d1e-4812-821a-6dd89c07da89",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "9096ac06-d4be-403f-9aae-bc046ed24f8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c809b534-345f-4c76-bc89-eb5ffe9eec2f",
        "cursor": {
          "ref": "fe803fb7-ce26-4778-9796-8b3777bcf955",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "83484be6-e32e-48fd-a593-295640493daa"
        },
        "item": {
          "id": "c809b534-345f-4c76-bc89-eb5ffe9eec2f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "af979139-30df-4b13-9804-3e32588bd0bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc4f20f6-e239-417b-b69a-fc77e8bbdb85",
        "cursor": {
          "ref": "6927888f-1909-4b80-80d6-8e7fabf33baa",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "81ab9f26-ac1b-4147-ac7f-4fda9e1a16c9"
        },
        "item": {
          "id": "fc4f20f6-e239-417b-b69a-fc77e8bbdb85",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "35a1ecfb-5b61-4df1-9732-60312fc831c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "462c54ba-dee2-4dee-98a0-3c94dffdd49f",
        "cursor": {
          "ref": "e7b433a0-b73b-4e04-82dc-89005caa31e7",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "5403c061-5be5-41c7-a1a7-bada48285c74"
        },
        "item": {
          "id": "462c54ba-dee2-4dee-98a0-3c94dffdd49f",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "1a4249d3-62c9-468e-a6bb-b5b80e03df33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "189fc3f8-f52c-4a57-a35b-597ae46e1844",
        "cursor": {
          "ref": "09ad896d-a1d0-4af3-968d-8a5393a53bf1",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "8569c6a1-74ad-403b-8d05-fcb447131efb"
        },
        "item": {
          "id": "189fc3f8-f52c-4a57-a35b-597ae46e1844",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "daab734b-859a-4823-9397-3ead07bd5325",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9d2d111-64ed-4783-87b2-a3a839778013",
        "cursor": {
          "ref": "4504c13c-2406-402a-bf50-39e1465c86a0",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "8a3f0977-3678-447f-8746-a6ba15b01881"
        },
        "item": {
          "id": "a9d2d111-64ed-4783-87b2-a3a839778013",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "1848a767-931a-4371-a050-4c42ab3732d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "267d1652-e39e-44d3-8aac-fd4fcd3fb1fa",
        "cursor": {
          "ref": "0f3e5738-5a4c-4aad-a758-cde0935d1a20",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "212cd4f5-ef48-4371-9f6a-36263b5ceb3f"
        },
        "item": {
          "id": "267d1652-e39e-44d3-8aac-fd4fcd3fb1fa",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "3634f20a-cef1-48c2-ba30-d543c1e21180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 828,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4162decb-dc00-44f3-b631-5ce69bf8fa0b",
        "cursor": {
          "ref": "d9ab7bd4-0f28-4b4c-ae03-23b73401af37",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "7e3fe56b-0321-48c5-8995-84617e14d1f4"
        },
        "item": {
          "id": "4162decb-dc00-44f3-b631-5ce69bf8fa0b",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "fffdf135-390a-4ab7-b42e-40a0fb439894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eecdf1a8-b192-4ea8-ac2e-f105d52d8eff",
        "cursor": {
          "ref": "b20ceb01-56c6-4dd0-90d7-0176fb4b0c4a",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "6d086447-9935-47f4-ae71-33826619a99d"
        },
        "item": {
          "id": "eecdf1a8-b192-4ea8-ac2e-f105d52d8eff",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "7a2a31c6-c3e6-45ad-a6eb-7697632f844f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "623218a8-39e7-49ed-9011-95be981f12a7",
        "cursor": {
          "ref": "9b0d4cf1-92da-4c31-ac8d-05ec97765060",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c6084808-e475-45dd-9229-9658fe4f42a7"
        },
        "item": {
          "id": "623218a8-39e7-49ed-9011-95be981f12a7",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "5ab86636-958f-4618-b30f-6f6ce65efee0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "8f064d71-6b81-4869-a338-cd91a09969b4",
        "cursor": {
          "ref": "9cbb1663-56c2-405e-b3d3-2514fb76767c",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "f90e5dc0-7e9d-4278-9f96-39144561816a"
        },
        "item": {
          "id": "8f064d71-6b81-4869-a338-cd91a09969b4",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "cc1a60c0-ec9f-495b-8646-9161191058cf",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac11ac88-ddcd-4d23-99ef-64a6eff0aca4",
        "cursor": {
          "ref": "bde99deb-f492-438c-984b-b5734e67495f",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "7c038642-6330-4eb4-b3b3-dfa3500d24a9"
        },
        "item": {
          "id": "ac11ac88-ddcd-4d23-99ef-64a6eff0aca4",
          "name": "credentials_verify"
        },
        "response": {
          "id": "a9d99339-e329-40fe-a1ed-c49b7cee11d2",
          "status": "OK",
          "code": 200,
          "responseTime": 1555,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c585d751-d528-4597-8f28-6cefe775d3e0",
        "cursor": {
          "ref": "a31f3720-eaf1-46a9-8715-31706ab6d79e",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "ca86e2b3-bf90-457c-959c-92ac4eeca172"
        },
        "item": {
          "id": "c585d751-d528-4597-8f28-6cefe775d3e0",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "08a9bc3e-d470-4b11-bea8-57113b36d75f",
          "status": "OK",
          "code": 200,
          "responseTime": 2213,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "8257a193-36a8-48b9-9fbf-cb62d1f66b09",
        "cursor": {
          "ref": "cfd3d7ed-8339-401c-a7d6-d7aadb52fd21",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "54eb7971-df07-427e-8cf3-8a19a028d4e5"
        },
        "item": {
          "id": "8257a193-36a8-48b9-9fbf-cb62d1f66b09",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "856045a4-84b4-4f7d-b251-eb62cd3c2f1b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "8257a193-36a8-48b9-9fbf-cb62d1f66b09",
        "cursor": {
          "ref": "cfd3d7ed-8339-401c-a7d6-d7aadb52fd21",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "54eb7971-df07-427e-8cf3-8a19a028d4e5"
        },
        "item": {
          "id": "8257a193-36a8-48b9-9fbf-cb62d1f66b09",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "856045a4-84b4-4f7d-b251-eb62cd3c2f1b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "8257a193-36a8-48b9-9fbf-cb62d1f66b09",
        "cursor": {
          "ref": "cfd3d7ed-8339-401c-a7d6-d7aadb52fd21",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "54eb7971-df07-427e-8cf3-8a19a028d4e5"
        },
        "item": {
          "id": "8257a193-36a8-48b9-9fbf-cb62d1f66b09",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "856045a4-84b4-4f7d-b251-eb62cd3c2f1b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "e518c3fc-cf0a-412c-8e1f-5a9b59e064d8",
        "cursor": {
          "ref": "03b9ee1b-59f3-4079-b490-3f821f2b7183",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "fac38fed-83e4-4bb1-a46f-64c832f18a13"
        },
        "item": {
          "id": "e518c3fc-cf0a-412c-8e1f-5a9b59e064d8",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "dbbb9076-9ab1-4ac0-8b8b-95a9fe07507d",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "0c2b680e-13dd-4728-9912-681308c8e954",
        "cursor": {
          "ref": "1c1dc2a9-2355-4248-a81f-81b38f86ccd5",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "69f6a1c1-77df-4dd8-80eb-4dc389ccc482"
        },
        "item": {
          "id": "0c2b680e-13dd-4728-9912-681308c8e954",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c811a139-2f5a-440f-ae62-facb9b07788f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "0c2b680e-13dd-4728-9912-681308c8e954",
        "cursor": {
          "ref": "1c1dc2a9-2355-4248-a81f-81b38f86ccd5",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "69f6a1c1-77df-4dd8-80eb-4dc389ccc482"
        },
        "item": {
          "id": "0c2b680e-13dd-4728-9912-681308c8e954",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c811a139-2f5a-440f-ae62-facb9b07788f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "6f4fce08-f9ab-424c-945b-241326dba138",
        "cursor": {
          "ref": "f214ad3d-55ad-4228-8449-a6e8e2f3dfaa",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "0ec90687-08f7-4d4b-847c-b042bde0e1ad"
        },
        "item": {
          "id": "6f4fce08-f9ab-424c-945b-241326dba138",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "184ed8fe-1721-45a4-a6d3-9f6c1b09e714",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 147,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "2459dfce-29e0-4f8d-8d94-6a8fa2486622",
        "cursor": {
          "ref": "991556a3-be18-4f28-94c9-ea388ab1bffd",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "bc8f4b7b-090d-4eaa-b803-b56828eb181e"
        },
        "item": {
          "id": "2459dfce-29e0-4f8d-8d94-6a8fa2486622",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "582c5bda-4075-4d74-8e9d-e27b2e910366",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "2459dfce-29e0-4f8d-8d94-6a8fa2486622",
        "cursor": {
          "ref": "991556a3-be18-4f28-94c9-ea388ab1bffd",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "bc8f4b7b-090d-4eaa-b803-b56828eb181e"
        },
        "item": {
          "id": "2459dfce-29e0-4f8d-8d94-6a8fa2486622",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "582c5bda-4075-4d74-8e9d-e27b2e910366",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "1a8224c8-bee0-4da7-8ea0-72169d617fe8",
        "cursor": {
          "ref": "f1cd1fc1-60c1-4a9c-bfc5-6d5346bbe52b",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "0c81624d-30c2-424b-8fdf-f4abc8ea8862"
        },
        "item": {
          "id": "1a8224c8-bee0-4da7-8ea0-72169d617fe8",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "d95dddf1-64e6-42ac-9322-c9bd072787b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 97,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}